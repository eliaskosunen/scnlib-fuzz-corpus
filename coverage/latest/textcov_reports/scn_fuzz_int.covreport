_ZNK7simdutf14implementation25required_instruction_setsEv:
 1589|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2693|      7|  {
 2694|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2723|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2695|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2789|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2786|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2769|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2788|  43.2k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  208|      1|static inline uint32_t detect_supported_architectures() {
  209|      1|  uint32_t eax;
  210|      1|  uint32_t ebx = 0;
  211|      1|  uint32_t ecx = 0;
  212|      1|  uint32_t edx = 0;
  213|      1|  uint32_t host_isa = 0x0;
  214|       |
  215|       |  // EBX for EAX=0x1
  216|      1|  eax = 0x1;
  217|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  218|       |
  219|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (219:7): [True: 1, False: 0]
  ------------------
  220|      1|    host_isa |= instruction_set::SSE42;
  221|      1|  }
  222|       |
  223|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (223:7): [True: 1, False: 0]
  ------------------
  224|      1|    host_isa |= instruction_set::PCLMULQDQ;
  225|      1|  }
  226|       |
  227|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (227:7): [True: 0, False: 1]
  ------------------
  228|      0|    return host_isa;
  229|      0|  }
  230|       |
  231|       |  // xgetbv for checking if the OS saves registers
  232|      1|  uint64_t xcr0 = xgetbv();
  233|       |
  234|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (234:7): [True: 0, False: 1]
  ------------------
  235|      0|    return host_isa;
  236|      0|  }
  237|       |  // ECX for EAX=0x7
  238|      1|  eax = 0x7;
  239|      1|  ecx = 0x0; // Sub-leaf = 0
  240|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  241|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (241:7): [True: 1, False: 0]
  ------------------
  242|      1|    host_isa |= instruction_set::AVX2;
  243|      1|  }
  244|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (244:7): [True: 1, False: 0]
  ------------------
  245|      1|    host_isa |= instruction_set::BMI1;
  246|      1|  }
  247|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (247:7): [True: 1, False: 0]
  ------------------
  248|      1|    host_isa |= instruction_set::BMI2;
  249|      1|  }
  250|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (250:7): [True: 1, False: 0]
  ------------------
  251|      1|    return host_isa;
  252|      1|  }
  253|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (253:7): [True: 0, False: 0]
  ------------------
  254|      0|    host_isa |= instruction_set::AVX512F;
  255|      0|  }
  256|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (256:7): [True: 0, False: 0]
  ------------------
  257|      0|    host_isa |= instruction_set::AVX512BW;
  258|      0|  }
  259|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (259:7): [True: 0, False: 0]
  ------------------
  260|      0|    host_isa |= instruction_set::AVX512CD;
  261|      0|  }
  262|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (262:7): [True: 0, False: 0]
  ------------------
  263|      0|    host_isa |= instruction_set::AVX512DQ;
  264|      0|  }
  265|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (265:7): [True: 0, False: 0]
  ------------------
  266|      0|    host_isa |= instruction_set::AVX512VL;
  267|      0|  }
  268|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|    host_isa |= instruction_set::AVX512VBMI2;
  270|      0|  }
  271|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (271:7): [True: 0, False: 0]
  ------------------
  272|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  273|      0|  }
  274|      0|  return host_isa;
  275|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  177|      2|                         uint32_t *edx) {
  178|       |#if defined(_MSC_VER)
  179|       |  int cpu_info[4];
  180|       |  __cpuidex(cpu_info, *eax, *ecx);
  181|       |  *eax = cpu_info[0];
  182|       |  *ebx = cpu_info[1];
  183|       |  *ecx = cpu_info[2];
  184|       |  *edx = cpu_info[3];
  185|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  186|       |  uint32_t level = *eax;
  187|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  188|       |#else
  189|      2|  uint32_t a = *eax, b, c = *ecx, d;
  190|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  191|      2|  *eax = a;
  192|      2|  *ebx = b;
  193|      2|  *ecx = c;
  194|      2|  *edx = d;
  195|      2|#endif
  196|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  198|      1|static inline uint64_t xgetbv() {
  199|       | #if defined(_MSC_VER)
  200|       |   return _xgetbv(0);
  201|       | #else
  202|      1|   uint32_t xcr0_lo, xcr0_hi;
  203|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  204|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  205|      1| #endif
  206|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  1.09k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  2.82k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  2.82k|  return idx < lenminusstep;
   70|  2.82k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  1.72k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  1.72k|  return &buf[idx];
   75|  1.72k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  2.82k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  2.82k|  idx += STEP_SIZE;
   88|  2.82k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  1.09k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  1.09k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 1.09k]
  ------------------
   80|  1.09k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  1.09k|  std::memcpy(dst, buf + idx, len - idx);
   82|  1.09k|  return len - idx;
   83|  1.09k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|    926|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|    926|    size_t pos = 0;
   12|    926|    size_t count = 0;
   13|  2.53k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 1.61k, False: 926]
  ------------------
   14|  1.61k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  1.61k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  1.61k|      count += count_ones(utf8_continuation_mask);
   17|  1.61k|    }
   18|    926|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|    926|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|  40.2k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|  40.2k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|  40.2k|      size_t pos = 0;
  131|  40.2k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 8 leading bytes,
  137|       |      // to give us a good margin.
  138|  40.2k|      size_t leading_byte = 0;
  139|  40.2k|      size_t margin = size;
  140|  95.1k|      for(; margin > 0 && leading_byte < 8; margin--) {
  ------------------
  |  Branch (140:13): [True: 54.9k, False: 40.2k]
  |  Branch (140:27): [True: 54.9k, False: 0]
  ------------------
  141|  54.9k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|  54.9k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|  40.2k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|  40.2k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 40.2k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|  40.2k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 40.2k]
  ------------------
  195|  40.2k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 40.2k, False: 0]
  ------------------
  196|  40.2k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|  40.2k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 1.87k, False: 38.3k]
  ------------------
  198|  38.3k|        utf32_output += howmany;
  199|  38.3k|      }
  200|  38.3k|      return utf32_output - start;
  201|  40.2k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|  40.2k|    simdutf_really_inline bool errors() const {
  291|  40.2k|      return this->error.any_bits_set_anywhere();
  292|  40.2k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|    926|    char32_t* utf32_output) noexcept {
   13|    926|  size_t pos = 0;
   14|    926|  char32_t* start{utf32_output};
   15|    926|  const size_t safety_margin = 16; // to avoid overruns!
   16|  2.53k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 1.61k, False: 926]
  ------------------
   17|  1.61k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  1.61k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 1.11k, False: 493]
  ------------------
   19|  1.11k|      in.store_ascii_as_utf32(utf32_output);
   20|  1.11k|      utf32_output += 64;
   21|  1.11k|      pos += 64;
   22|  1.11k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    493|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    493|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    493|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    493|    size_t max_starting_point = (pos + 64) - 12;
   28|  3.51k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 3.01k, False: 493]
  ------------------
   29|  3.01k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  3.01k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  3.01k|      pos += consumed;
   32|  3.01k|      utf8_end_of_code_point_mask >>= consumed;
   33|  3.01k|      }
   34|    493|    }
   35|  1.61k|  }
   36|    926|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|    926|  return utf32_output - start;
   38|    926|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  2.82k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  2.82k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  2.82k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 2.05k, False: 763]
  |  |  ------------------
  ------------------
  154|  2.05k|        this->error |= this->prev_incomplete;
  155|  2.05k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|    763|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|    763|            "We support either two or four chunks per 64-byte block.");
  159|    763|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|    763|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|    763|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|    763|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|    763|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|    763|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|    763|      }
  172|  2.82k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  1.52k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  1.52k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  1.52k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  1.52k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  1.52k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  1.52k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  1.52k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  1.52k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  1.52k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  1.52k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  1.52k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  1.52k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  1.52k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  1.52k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  1.52k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  1.52k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  1.52k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  1.52k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  1.52k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  1.52k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  1.52k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  1.52k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  1.52k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  1.52k|    );
   51|  1.52k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  1.52k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  1.52k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  1.52k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  1.52k|      CARRY,
   59|  1.52k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  1.52k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  1.52k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  1.52k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  1.52k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  1.52k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  1.52k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  1.52k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  1.52k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  1.52k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  1.52k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  1.52k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  1.52k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  1.52k|    );
   80|  1.52k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  1.52k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  1.52k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  1.52k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  1.52k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  1.52k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  1.52k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  1.52k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  1.52k|    );
   96|  1.52k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  1.52k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  1.52k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  1.52k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  1.52k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  1.52k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  1.52k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  1.52k|    return must23_80 ^ sc;
  105|  1.52k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|    763|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|    763|    static const uint8_t max_array[32] = {
  115|    763|      255, 255, 255, 255, 255, 255, 255, 255,
  116|    763|      255, 255, 255, 255, 255, 255, 255, 255,
  117|    763|      255, 255, 255, 255, 255, 255, 255, 255,
  118|    763|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|    763|    };
  120|    763|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|    763|    return input.gt_bits(max_value);
  122|    763|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  1.09k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  1.09k|      this->error |= this->prev_incomplete;
  150|  1.09k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  1.09k|    simdutf_really_inline bool errors() const {
  176|  1.09k|      return this->error.any_bits_set_anywhere();
  177|  1.09k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  1.09k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  1.09k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  1.09k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  1.09k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  1.09k|    checker c{};
   12|  1.09k|    buf_block_reader<64> reader(input, length);
   13|  2.82k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 1.72k, False: 1.09k]
  ------------------
   14|  1.72k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  1.72k|      c.check_next_input(in);
   16|  1.72k|      reader.advance();
   17|  1.72k|    }
   18|  1.09k|    uint8_t block[64]{};
   19|  1.09k|    reader.get_remainder(block);
   20|  1.09k|    simd::simd8x64<uint8_t> in(block);
   21|  1.09k|    c.check_next_input(in);
   22|  1.09k|    reader.advance();
   23|  1.09k|    c.check_eof();
   24|  1.09k|    return !c.errors();
   25|  1.09k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  3.01k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  3.01k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  3.01k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  3.01k|      utf8_end_of_code_point_mask & 0xfff;
   24|  3.01k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 777, False: 2.24k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|    777|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|    777|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|    777|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|    777|    return 16; // We consumed 16 bytes.
   30|    777|  }
   31|  2.24k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 67, False: 2.17k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     67|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     67|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     67|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     67|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     67|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     67|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     67|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     67|    return 16;
   42|     67|  }
   43|  2.17k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 66, False: 2.10k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     66|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     66|    const __m128i ascii =
   49|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     66|    const __m128i middlebyte =
   51|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     66|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     66|    const __m128i highbyte =
   54|     66|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     66|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     66|    const __m128i composed =
   57|     66|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     66|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     66|    utf32_output += 4;
   60|     66|    return 12;
   61|     66|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  2.10k|  const uint8_t idx =
   65|  2.10k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  2.10k|  const uint8_t consumed =
   67|  2.10k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  2.10k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 1.37k, False: 734]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  1.37k|    const __m128i sh =
   75|  1.37k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  1.37k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  1.37k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  1.37k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  1.37k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  1.37k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  1.37k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  1.37k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 649, False: 85]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|    649|    const __m128i sh =
   86|    649|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|    649|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|    649|    const __m128i ascii =
   89|    649|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|    649|    const __m128i middlebyte =
   91|    649|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|    649|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|    649|    const __m128i highbyte =
   94|    649|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|    649|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|    649|    const __m128i composed =
   97|    649|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|    649|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|    649|    utf32_output += 4;
  100|    649|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 85, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|     85|    const __m128i sh =
  103|     85|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|     85|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|     85|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|     85|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|     85|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|     85|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|     85|    const __m128i correct =
  111|     85|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|     85|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|     85|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|     85|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|     85|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|     85|    const __m128i composed =
  117|     85|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|     85|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|     85|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|     85|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|     85|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  2.10k|  return consumed;
  125|  2.17k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  105|  1.09k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  106|  1.09k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  107|  1.09k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  275|  40.2k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  276|  40.2k|  utf8_to_utf32::validating_transcoder converter;
  277|  40.2k|  return converter.convert(buf, len, utf32_output);
  278|  40.2k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  286|    926|    char32_t* utf32_output) const noexcept {
  287|    926|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  288|    926|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  777|    926|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  778|    926|  return utf8::count_code_points(input, length);
  779|    926|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  2.82k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  2.82k|  return input.reduce_or().is_ascii();
   25|  2.82k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  1.52k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  1.52k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0xe0u-0x80); // Only 111_____ will be > 0x80
   37|  1.52k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0xf0u-0x80); // Only 1111____ will be > 0x80
   38|  1.52k|  return simd8<bool>(is_third_byte | is_fourth_byte);
   39|  1.52k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  861|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  862|       |  // They are prelisted in priority order, so we just go down the list
  863|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  864|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (864:35): [True: 2, False: 0]
  ------------------
  865|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  866|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (866:9): [True: 1, False: 1]
  ------------------
  867|      2|  }
  868|      0|  return &unsupported_singleton; // this should never happen?
  869|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  871|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  872|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  873|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  874|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  875|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  876|       |
  877|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (877:7): [True: 0, False: 1]
  ------------------
  878|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  879|      0|    if (force_implementation) {
  ------------------
  |  Branch (879:9): [True: 0, False: 0]
  ------------------
  880|      0|      return get_active_implementation() = force_implementation;
  881|      0|    } else {
  882|       |      // Note: abort() and stderr usage within the library is forbidden.
  883|      0|      return get_active_implementation() = &unsupported_singleton;
  884|      0|    }
  885|      0|  }
  886|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  887|      1|}
_ZN7simdutf29get_available_implementationsEv:
  896|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  897|      1|  static const internal::available_implementation_list available_implementations{};
  898|      1|  return available_implementations;
  899|      1|}
_ZN7simdutf25get_active_implementationEv:
  904|  43.2k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  905|       |#if SIMDUTF_SINGLE_IMPLEMENTATION
  906|       |    // skip runtime detection
  907|       |    static internal::atomic_ptr<const implementation> active_implementation{internal::get_single_implementation()};
  908|       |    return active_implementation;
  909|       |#else
  910|  43.2k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  911|  43.2k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  912|  43.2k|    return active_implementation;
  913|  43.2k|#endif
  914|  43.2k|}
_ZN7simdutf26get_default_implementationEv:
  922|  43.2k|internal::atomic_ptr<const implementation>& get_default_implementation() {
  923|  43.2k|  return get_active_implementation();
  924|  43.2k|}
_ZN7simdutf13validate_utf8EPKcm:
  928|  1.09k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  929|  1.09k|  return get_default_implementation()->validate_utf8(buf, len);
  930|  1.09k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  987|  40.2k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  988|  40.2k|  return get_default_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  989|  40.2k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
 1038|    926|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
 1039|    926|  return get_default_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
 1040|    926|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1285|    926|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1286|    926|  return get_default_implementation()->utf32_length_from_utf8(input, length);
 1287|    926|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  847|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  488|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  489|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  490|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  491|      1|    get_icelake_singleton(),
  492|      1|#endif
  493|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  494|      1|    get_haswell_singleton(),
  495|      1|#endif
  496|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  497|      1|    get_westmere_singleton(),
  498|      1|#endif
  499|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  500|       |    get_arm64_singleton(),
  501|       |#endif
  502|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  503|       |    get_ppc64_singleton(),
  504|       |#endif
  505|       |#if SIMDUTF_IMPLEMENTATION_RVV
  506|       |    get_rvv_singleton(),
  507|       |#endif
  508|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  509|      1|    get_fallback_singleton(),
  510|      1|#endif
  511|      1|  }; // available_implementation_pointers
  512|      1|  return available_implementation_pointers;
  513|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   83|      1|static const icelake::implementation* get_icelake_singleton() {
   84|      1|  static const icelake::implementation icelake_singleton{};
   85|      1|  return &icelake_singleton;
   86|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   89|      1|static const haswell::implementation* get_haswell_singleton() {
   90|      1|  static const haswell::implementation haswell_singleton{};
   91|      1|  return &haswell_singleton;
   92|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   95|      1|static const westmere::implementation* get_westmere_singleton() {
   96|      1|  static const westmere::implementation westmere_singleton{};
   97|      1|  return &westmere_singleton;
   98|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  119|      1|static const fallback::implementation* get_fallback_singleton() {
  120|      1|  static const fallback::implementation fallback_singleton{};
  121|      1|  return &fallback_singleton;
  122|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  482|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  162|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  163|      1|    return set_best()->validate_utf8(buf, len);
  164|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|    926|inline size_t count_code_points(const char* buf, size_t len) {
  169|    926|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|    926|    size_t counter{0};
  171|  18.7k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 17.7k, False: 926]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  17.7k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 17.3k, False: 464]
  ------------------
  174|  17.7k|    }
  175|    926|    return counter;
  176|    926|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|  40.2k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|  40.2k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  40.2k|  size_t pos = 0;
   12|  40.2k|  char32_t* start{utf32_output};
   13|  78.6k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 40.2k, False: 38.3k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|  40.2k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 40.2k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|  40.2k|    uint8_t leading_byte = data[pos]; // leading byte
   31|  40.2k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 32.0k, False: 8.25k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  32.0k|      *utf32_output++ = char32_t(leading_byte);
   34|  32.0k|      pos++;
   35|  32.0k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 3.49k, False: 4.76k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  3.49k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 3.49k]
  ------------------
   38|  3.49k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 271, False: 3.22k]
  ------------------
   39|       |      // range check
   40|  3.22k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  3.22k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 3.08k]
  |  Branch (41:32): [True: 0, False: 3.08k]
  ------------------
   42|  3.08k|      *utf32_output++ = char32_t(code_point);
   43|  3.08k|      pos += 2;
   44|  4.76k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 3.13k, False: 1.63k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  3.13k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 3.13k]
  ------------------
   47|       |
   48|  3.13k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 205, False: 2.92k]
  ------------------
   49|  2.92k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 141, False: 2.78k]
  ------------------
   50|       |      // range check
   51|  2.78k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  2.78k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  2.78k|                   (data[pos + 2] & 0b00111111);
   54|  2.78k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 141, False: 2.64k]
  |  Branch (54:33): [True: 0, False: 2.64k]
  ------------------
   55|  2.78k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 282, False: 2.36k]
  |  Branch (55:35): [True: 141, False: 141]
  ------------------
   56|    282|        return 0;
   57|    282|      }
   58|  2.50k|      *utf32_output++ = char32_t(code_point);
   59|  2.50k|      pos += 3;
   60|  2.50k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 1.63k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  1.63k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 1.63k]
  ------------------
   63|  1.63k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 141, False: 1.48k]
  ------------------
   64|  1.48k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 141, False: 1.34k]
  ------------------
   65|  1.34k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 141, False: 1.20k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.20k|      uint32_t code_point =
   69|  1.20k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.20k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.20k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 267, False: 940]
  |  Branch (71:35): [True: 141, False: 799]
  ------------------
   72|    799|      *utf32_output++ = char32_t(code_point);
   73|    799|      pos += 4;
   74|    799|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|  40.2k|  }
   78|  38.3k|  return utf32_output - start;
   79|  40.2k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|    926|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|    926| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|    926|  size_t pos = 0;
   12|    926|  char32_t* start{utf32_output};
   13|  6.66k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 5.74k, False: 926]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  5.74k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 2.62k, False: 3.11k]
  ------------------
   16|  2.62k|      uint64_t v;
   17|  2.62k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  2.62k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 2.31k, False: 311]
  ------------------
   19|  2.31k|        size_t final_pos = pos + 8;
   20|  20.8k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 18.5k, False: 2.31k]
  ------------------
   21|  18.5k|          *utf32_output++ = char32_t(buf[pos]);
   22|  18.5k|          pos++;
   23|  18.5k|        }
   24|  2.31k|        continue;
   25|  2.31k|      }
   26|  2.62k|    }
   27|  3.42k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  3.42k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 3.15k, False: 274]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  3.15k|      *utf32_output++ = char32_t(leading_byte);
   31|  3.15k|      pos++;
   32|  3.15k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 137, False: 137]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    137|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 137]
  ------------------
   35|    137|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    137|      pos += 2;
   37|    137|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 88, False: 49]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|     88|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 88]
  ------------------
   40|     88|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|     88|      pos += 3;
   42|     88|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 49, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     49|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 49]
  ------------------
   45|     49|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     49|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     49|      *utf32_output++ = char32_t(code_word);
   48|     49|      pos += 4;
   49|     49|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  3.42k|  }
   54|    926|  return utf32_output - start;
   55|    926|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  1.61k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  1.61k|  return _popcnt64(input_num);
   16|  1.61k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  3.28k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  3.28k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  3.28k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  3.28k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  2.82k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  6.40k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  6.40k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  6.40k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|  97.6k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|  97.6k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|  97.6k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|  97.6k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  2.82k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  2.82k|      return this->chunks[0] | this->chunks[1];
  297|  2.82k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  9.02k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|   153k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  2.82k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  4.67k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  1.52k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  1.52k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  1.52k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  3.05k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  4.57k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  4.57k|      return lookup_16(simd8<L>::repeat_16(
  140|  4.57k|        replace0,  replace1,  replace2,  replace3,
  141|  4.57k|        replace4,  replace5,  replace6,  replace7,
  142|  4.57k|        replace8,  replace9,  replace10, replace11,
  143|  4.57k|        replace12, replace13, replace14, replace15
  144|  4.57k|      ));
  145|  4.57k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  4.57k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  4.57k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  4.57k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  6.10k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  4.57k|    ) {
  218|  4.57k|      return simd8<uint8_t>(
  219|  4.57k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  4.57k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  4.57k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  4.57k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  4.57k|      );
  224|  4.57k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  4.57k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  9.15k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|  49.4k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|  49.4k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  1.52k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  1.52k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  1.52k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  1.52k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  1.52k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  1.52k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  3.81k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  5.73k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  5.73k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  5.73k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  1.52k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  1.52k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|    763|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|    763|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  41.3k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  41.3k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  3.22k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  6.44k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  6.44k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  6.44k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  10.1k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  10.1k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  10.1k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  10.1k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  1.61k|    simdutf_really_inline bool is_ascii() const {
  300|  1.61k|      return this->reduce_or().is_ascii();
  301|  1.61k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  1.61k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  1.61k|      return this->chunks[0] | this->chunks[1];
  297|  1.61k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  1.61k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  22.2k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  1.61k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    493|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    493|      const simd8<T> mask = simd8<T>::splat(m);
  364|    493|      return  simd8x64<bool>(
  365|    493|        this->chunks[0] < mask,
  366|    493|        this->chunks[1] < mask
  367|    493|      ).to_bitmask();
  368|    493|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  2.10k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|    986|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  2.10k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  2.10k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  2.10k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  2.10k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  2.10k|      return r_lo | (r_hi << 32);
  287|  2.10k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  4.21k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  4.21k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  1.11k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  1.11k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  1.11k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  1.11k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  2.23k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  2.23k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  2.23k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  2.23k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  2.23k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  2.23k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  1.61k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  1.61k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  1.61k|      return  simd8x64<bool>(
  373|  1.61k|        this->chunks[0] > mask,
  374|  1.61k|        this->chunks[1] > mask
  375|  1.61k|      ).to_bitmask();
  376|  1.61k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  3.22k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   201k|{
  619|   201k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   201k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   201k|    static_cast<    \
  |  |  247|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   201k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|   472k|{
  387|   472k|    static_assert(
  388|   472k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|   472k|        "Scan argument types must be default constructible");
  390|   472k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|   472k|                  "Scan argument types must be Destructible");
  392|   472k|    static_assert(
  393|   472k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|   472k|        "Scan argument types must not be references");
  395|   472k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   201k|    {
  564|   201k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   201k|    {
  574|   201k|        return {
  575|   201k|            detail::make_arg<base::is_packed, Context,
  576|   201k|                             detail::mapped_type_constant<
  577|   201k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   201k|                args)...};
  579|   201k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   201k|{
  415|   201k|    return make_value<Context>(value);
  416|   201k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|   220k|{
  372|   220k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   220k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   220k|                                  needs_context_tag>) {
  376|   220k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   220k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   220k|    }
  378|   220k|    else {
  379|   220k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   220k|            value, context_tag<Context>{}));
  381|   220k|    }
  382|   220k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|   220k|    {                                                                        \
  217|   220k|        return val;                                                          \
  218|   220k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|   472k|{
  341|   472k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|   472k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|   472k|    constexpr bool scannable_char =
  345|   472k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|   472k|    static_assert(scannable_char,
  347|   472k|                  "Cannot scan an argument of an unsupported character "
  348|   472k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|   472k|    constexpr bool scannable_const =
  351|   472k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|   472k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|   472k|    constexpr bool scannable_disabled =
  355|   472k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|   472k|    static_assert(scannable_disabled,
  357|   472k|                  "Cannot scan an argument that has been disabled by "
  358|   472k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|   472k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|   472k|    static_assert(
  362|   472k|        scannable,
  363|   472k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|   472k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|   472k|    return arg_value{arg};
  367|   472k|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|   472k|    {
  160|   472k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   201k|    {
  647|   201k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  1.38M|    {
  694|  1.38M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   157k|    {
  554|   157k|        return m_args;
  555|   157k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  18.7k|{
  400|  18.7k|    check_scan_arg_types<T>();
  401|       |
  402|  18.7k|    basic_scan_arg<Context> arg;
  403|  18.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  18.7k|    arg.m_value = make_value<Context>(value);
  405|  18.7k|    return arg;
  406|  18.7k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  1.50M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  3.21M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   204k|{
  619|   204k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   204k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   204k|    static_cast<    \
  |  |  247|   204k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   204k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|   470k|{
  387|   470k|    static_assert(
  388|   470k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|   470k|        "Scan argument types must be default constructible");
  390|   470k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|   470k|                  "Scan argument types must be Destructible");
  392|   470k|    static_assert(
  393|   470k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|   470k|        "Scan argument types must not be references");
  395|   470k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   204k|    {
  564|   204k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   204k|    {
  574|   204k|        return {
  575|   204k|            detail::make_arg<base::is_packed, Context,
  576|   204k|                             detail::mapped_type_constant<
  577|   204k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   204k|                args)...};
  579|   204k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   204k|{
  415|   204k|    return make_value<Context>(value);
  416|   204k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|   223k|{
  372|   223k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   223k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   223k|                                  needs_context_tag>) {
  376|   223k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   223k|    }
  378|   223k|    else {
  379|   223k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   223k|            value, context_tag<Context>{}));
  381|   223k|    }
  382|   223k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|   223k|    {                                                                        \
  217|   223k|        return val;                                                          \
  218|   223k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|   470k|{
  341|   470k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|   470k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|   470k|    constexpr bool scannable_char =
  345|   470k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|   470k|    static_assert(scannable_char,
  347|   470k|                  "Cannot scan an argument of an unsupported character "
  348|   470k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|   470k|    constexpr bool scannable_const =
  351|   470k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|   470k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|   470k|    constexpr bool scannable_disabled =
  355|   470k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|   470k|    static_assert(scannable_disabled,
  357|   470k|                  "Cannot scan an argument that has been disabled by "
  358|   470k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|   470k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|   470k|    static_assert(
  362|   470k|        scannable,
  363|   470k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|   470k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|   470k|    return arg_value{arg};
  367|   470k|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|   470k|    {
  160|   470k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   204k|    {
  647|   204k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   161k|    {
  554|   161k|        return m_args;
  555|   161k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  18.7k|{
  400|  18.7k|    check_scan_arg_types<T>();
  401|       |
  402|  18.7k|    basic_scan_arg<Context> arg;
  403|  18.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  18.7k|    arg.m_value = make_value<Context>(value);
  405|  18.7k|    return arg;
  406|  18.7k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   258k|{
  619|   258k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   258k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   258k|    static_cast<    \
  |  |  247|   258k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   258k|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|   598k|{
  387|   598k|    static_assert(
  388|   598k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|   598k|        "Scan argument types must be default constructible");
  390|   598k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|   598k|                  "Scan argument types must be Destructible");
  392|   598k|    static_assert(
  393|   598k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|   598k|        "Scan argument types must not be references");
  395|   598k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   258k|    {
  564|   258k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   258k|    {
  574|   258k|        return {
  575|   258k|            detail::make_arg<base::is_packed, Context,
  576|   258k|                             detail::mapped_type_constant<
  577|   258k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   258k|                args)...};
  579|   258k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   258k|{
  415|   258k|    return make_value<Context>(value);
  416|   258k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|   280k|{
  372|   280k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   280k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   280k|                                  needs_context_tag>) {
  376|   280k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   280k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   280k|    }
  378|   280k|    else {
  379|   280k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   280k|            value, context_tag<Context>{}));
  381|   280k|    }
  382|   280k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|   280k|    {                                                                        \
  217|   280k|        return val;                                                          \
  218|   280k|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|   598k|{
  341|   598k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|   598k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|   598k|    constexpr bool scannable_char =
  345|   598k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|   598k|    static_assert(scannable_char,
  347|   598k|                  "Cannot scan an argument of an unsupported character "
  348|   598k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|   598k|    constexpr bool scannable_const =
  351|   598k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|   598k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|   598k|    constexpr bool scannable_disabled =
  355|   598k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|   598k|    static_assert(scannable_disabled,
  357|   598k|                  "Cannot scan an argument that has been disabled by "
  358|   598k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|   598k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|   598k|    static_assert(
  362|   598k|        scannable,
  363|   598k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|   598k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|   598k|    return arg_value{arg};
  367|   598k|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|   598k|    {
  160|   598k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   258k|    {
  647|   258k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|   214k|    {
  554|   214k|        return m_args;
  555|   214k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  22.9k|{
  400|  22.9k|    check_scan_arg_types<T>();
  401|       |
  402|  22.9k|    basic_scan_arg<Context> arg;
  403|  22.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  22.9k|    arg.m_value = make_value<Context>(value);
  405|  22.9k|    return arg;
  406|  22.9k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   226k|{
  619|   226k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   226k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   226k|    static_cast<    \
  |  |  247|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   226k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|   534k|{
  387|   534k|    static_assert(
  388|   534k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|   534k|        "Scan argument types must be default constructible");
  390|   534k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|   534k|                  "Scan argument types must be Destructible");
  392|   534k|    static_assert(
  393|   534k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|   534k|        "Scan argument types must not be references");
  395|   534k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   226k|    {
  564|   226k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   226k|    {
  574|   226k|        return {
  575|   226k|            detail::make_arg<base::is_packed, Context,
  576|   226k|                             detail::mapped_type_constant<
  577|   226k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   226k|                args)...};
  579|   226k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   226k|{
  415|   226k|    return make_value<Context>(value);
  416|   226k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|   246k|{
  372|   246k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   246k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   246k|                                  needs_context_tag>) {
  376|   246k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   246k|    }
  378|   246k|    else {
  379|   246k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   246k|            value, context_tag<Context>{}));
  381|   246k|    }
  382|   246k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|   246k|    {                                                                        \
  217|   246k|        return val;                                                          \
  218|   246k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|   534k|{
  341|   534k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|   534k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|   534k|    constexpr bool scannable_char =
  345|   534k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|   534k|    static_assert(scannable_char,
  347|   534k|                  "Cannot scan an argument of an unsupported character "
  348|   534k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|   534k|    constexpr bool scannable_const =
  351|   534k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|   534k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|   534k|    constexpr bool scannable_disabled =
  355|   534k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|   534k|    static_assert(scannable_disabled,
  357|   534k|                  "Cannot scan an argument that has been disabled by "
  358|   534k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|   534k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|   534k|    static_assert(
  362|   534k|        scannable,
  363|   534k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|   534k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|   534k|    return arg_value{arg};
  367|   534k|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|   534k|    {
  160|   534k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   226k|    {
  647|   226k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|   182k|    {
  554|   182k|        return m_args;
  555|   182k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  19.8k|{
  400|  19.8k|    check_scan_arg_types<T>();
  401|       |
  402|  19.8k|    basic_scan_arg<Context> arg;
  403|  19.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  19.8k|    arg.m_value = make_value<Context>(value);
  405|  19.8k|    return arg;
  406|  19.8k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   260k|{
  619|   260k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   260k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   260k|    static_cast<    \
  |  |  247|   260k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   260k|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|   604k|{
  387|   604k|    static_assert(
  388|   604k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|   604k|        "Scan argument types must be default constructible");
  390|   604k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|   604k|                  "Scan argument types must be Destructible");
  392|   604k|    static_assert(
  393|   604k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|   604k|        "Scan argument types must not be references");
  395|   604k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   260k|    {
  564|   260k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   260k|    {
  574|   260k|        return {
  575|   260k|            detail::make_arg<base::is_packed, Context,
  576|   260k|                             detail::mapped_type_constant<
  577|   260k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   260k|                args)...};
  579|   260k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   260k|{
  415|   260k|    return make_value<Context>(value);
  416|   260k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|   284k|{
  372|   284k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   284k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   284k|                                  needs_context_tag>) {
  376|   284k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   284k|    }
  378|   284k|    else {
  379|   284k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   284k|            value, context_tag<Context>{}));
  381|   284k|    }
  382|   284k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|   284k|    {                                                                        \
  217|   284k|        return val;                                                          \
  218|   284k|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|   604k|{
  341|   604k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|   604k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|   604k|    constexpr bool scannable_char =
  345|   604k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|   604k|    static_assert(scannable_char,
  347|   604k|                  "Cannot scan an argument of an unsupported character "
  348|   604k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|   604k|    constexpr bool scannable_const =
  351|   604k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|   604k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|   604k|    constexpr bool scannable_disabled =
  355|   604k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|   604k|    static_assert(scannable_disabled,
  357|   604k|                  "Cannot scan an argument that has been disabled by "
  358|   604k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|   604k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|   604k|    static_assert(
  362|   604k|        scannable,
  363|   604k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|   604k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|   604k|    return arg_value{arg};
  367|   604k|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|   604k|    {
  160|   604k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   260k|    {
  647|   260k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|   217k|    {
  554|   217k|        return m_args;
  555|   217k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|  23.1k|{
  400|  23.1k|    check_scan_arg_types<T>();
  401|       |
  402|  23.1k|    basic_scan_arg<Context> arg;
  403|  23.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  23.1k|    arg.m_value = make_value<Context>(value);
  405|  23.1k|    return arg;
  406|  23.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   228k|{
  619|   228k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   228k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   228k|    static_cast<    \
  |  |  247|   228k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   228k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|   538k|{
  387|   538k|    static_assert(
  388|   538k|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|   538k|        "Scan argument types must be default constructible");
  390|   538k|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|   538k|                  "Scan argument types must be Destructible");
  392|   538k|    static_assert(
  393|   538k|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|   538k|        "Scan argument types must not be references");
  395|   538k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   228k|    {
  564|   228k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   228k|    {
  574|   228k|        return {
  575|   228k|            detail::make_arg<base::is_packed, Context,
  576|   228k|                             detail::mapped_type_constant<
  577|   228k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   228k|                args)...};
  579|   228k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   228k|{
  415|   228k|    return make_value<Context>(value);
  416|   228k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|   248k|{
  372|   248k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   248k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   248k|                                  needs_context_tag>) {
  376|   248k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   248k|    }
  378|   248k|    else {
  379|   248k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   248k|            value, context_tag<Context>{}));
  381|   248k|    }
  382|   248k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|   248k|    {                                                                        \
  217|   248k|        return val;                                                          \
  218|   248k|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|   538k|{
  341|   538k|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|   538k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|   538k|    constexpr bool scannable_char =
  345|   538k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|   538k|    static_assert(scannable_char,
  347|   538k|                  "Cannot scan an argument of an unsupported character "
  348|   538k|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|   538k|    constexpr bool scannable_const =
  351|   538k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|   538k|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|   538k|    constexpr bool scannable_disabled =
  355|   538k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|   538k|    static_assert(scannable_disabled,
  357|   538k|                  "Cannot scan an argument that has been disabled by "
  358|   538k|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|   538k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|   538k|    static_assert(
  362|   538k|        scannable,
  363|   538k|        "Cannot scan an argument. To make a type T scannable, provide "
  364|   538k|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|   538k|    return arg_value{arg};
  367|   538k|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|   538k|    {
  160|   538k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   228k|    {
  647|   228k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|   184k|    {
  554|   184k|        return m_args;
  555|   184k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  20.0k|{
  400|  20.0k|    check_scan_arg_types<T>();
  401|       |
  402|  20.0k|    basic_scan_arg<Context> arg;
  403|  20.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  20.0k|    arg.m_value = make_value<Context>(value);
  405|  20.0k|    return arg;
  406|  20.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   232k|{
  619|   232k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   232k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   232k|    static_cast<    \
  |  |  247|   232k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   232k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   232k|    {
  564|   232k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   232k|    {
  574|   232k|        return {
  575|   232k|            detail::make_arg<base::is_packed, Context,
  576|   232k|                             detail::mapped_type_constant<
  577|   232k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   232k|                args)...};
  579|   232k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   232k|{
  415|   232k|    return make_value<Context>(value);
  416|   232k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|   252k|{
  372|   252k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   252k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   252k|                                  needs_context_tag>) {
  376|   252k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   252k|    }
  378|   252k|    else {
  379|   252k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   252k|            value, context_tag<Context>{}));
  381|   252k|    }
  382|   252k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|   252k|    {                                                                        \
  217|   252k|        return val;                                                          \
  218|   252k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   232k|    {
  647|   232k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  1.58M|    {
  694|  1.58M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   152k|    {
  554|   152k|        return m_args;
  555|   152k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  19.6k|{
  400|  19.6k|    check_scan_arg_types<T>();
  401|       |
  402|  19.6k|    basic_scan_arg<Context> arg;
  403|  19.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  19.6k|    arg.m_value = make_value<Context>(value);
  405|  19.6k|    return arg;
  406|  19.6k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  1.71M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   228k|{
  619|   228k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   228k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   228k|    static_cast<    \
  |  |  247|   228k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   228k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   228k|    {
  564|   228k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   228k|    {
  574|   228k|        return {
  575|   228k|            detail::make_arg<base::is_packed, Context,
  576|   228k|                             detail::mapped_type_constant<
  577|   228k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   228k|                args)...};
  579|   228k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   228k|{
  415|   228k|    return make_value<Context>(value);
  416|   228k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|   246k|{
  372|   246k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   246k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   246k|                                  needs_context_tag>) {
  376|   246k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   246k|    }
  378|   246k|    else {
  379|   246k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   246k|            value, context_tag<Context>{}));
  381|   246k|    }
  382|   246k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|   246k|    {                                                                        \
  217|   246k|        return val;                                                          \
  218|   246k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   228k|    {
  647|   228k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   147k|    {
  554|   147k|        return m_args;
  555|   147k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  18.6k|{
  400|  18.6k|    check_scan_arg_types<T>();
  401|       |
  402|  18.6k|    basic_scan_arg<Context> arg;
  403|  18.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  18.6k|    arg.m_value = make_value<Context>(value);
  405|  18.6k|    return arg;
  406|  18.6k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   293k|{
  619|   293k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   293k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   293k|    static_cast<    \
  |  |  247|   293k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   293k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   293k|    {
  564|   293k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   293k|    {
  574|   293k|        return {
  575|   293k|            detail::make_arg<base::is_packed, Context,
  576|   293k|                             detail::mapped_type_constant<
  577|   293k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   293k|                args)...};
  579|   293k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   293k|{
  415|   293k|    return make_value<Context>(value);
  416|   293k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|   317k|{
  372|   317k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   317k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   317k|                                  needs_context_tag>) {
  376|   317k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   317k|    }
  378|   317k|    else {
  379|   317k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   317k|            value, context_tag<Context>{}));
  381|   317k|    }
  382|   317k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|   317k|    {                                                                        \
  217|   317k|        return val;                                                          \
  218|   317k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   293k|    {
  647|   293k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|   212k|    {
  554|   212k|        return m_args;
  555|   212k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  24.3k|{
  400|  24.3k|    check_scan_arg_types<T>();
  401|       |
  402|  24.3k|    basic_scan_arg<Context> arg;
  403|  24.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  24.3k|    arg.m_value = make_value<Context>(value);
  405|  24.3k|    return arg;
  406|  24.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   266k|{
  619|   266k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   266k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   266k|    static_cast<    \
  |  |  247|   266k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   266k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   266k|    {
  564|   266k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   266k|    {
  574|   266k|        return {
  575|   266k|            detail::make_arg<base::is_packed, Context,
  576|   266k|                             detail::mapped_type_constant<
  577|   266k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   266k|                args)...};
  579|   266k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   266k|{
  415|   266k|    return make_value<Context>(value);
  416|   266k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|   288k|{
  372|   288k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   288k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   288k|                                  needs_context_tag>) {
  376|   288k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   288k|    }
  378|   288k|    else {
  379|   288k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   288k|            value, context_tag<Context>{}));
  381|   288k|    }
  382|   288k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|   288k|    {                                                                        \
  217|   288k|        return val;                                                          \
  218|   288k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   266k|    {
  647|   266k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|   185k|    {
  554|   185k|        return m_args;
  555|   185k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  21.6k|{
  400|  21.6k|    check_scan_arg_types<T>();
  401|       |
  402|  21.6k|    basic_scan_arg<Context> arg;
  403|  21.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  21.6k|    arg.m_value = make_value<Context>(value);
  405|  21.6k|    return arg;
  406|  21.6k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   296k|{
  619|   296k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   296k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   296k|    static_cast<    \
  |  |  247|   296k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   296k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   296k|    {
  564|   296k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   296k|    {
  574|   296k|        return {
  575|   296k|            detail::make_arg<base::is_packed, Context,
  576|   296k|                             detail::mapped_type_constant<
  577|   296k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   296k|                args)...};
  579|   296k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   296k|{
  415|   296k|    return make_value<Context>(value);
  416|   296k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|   320k|{
  372|   320k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   320k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   320k|                                  needs_context_tag>) {
  376|   320k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   320k|    }
  378|   320k|    else {
  379|   320k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   320k|            value, context_tag<Context>{}));
  381|   320k|    }
  382|   320k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|   320k|    {                                                                        \
  217|   320k|        return val;                                                          \
  218|   320k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   296k|    {
  647|   296k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|   215k|    {
  554|   215k|        return m_args;
  555|   215k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|  24.5k|{
  400|  24.5k|    check_scan_arg_types<T>();
  401|       |
  402|  24.5k|    basic_scan_arg<Context> arg;
  403|  24.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  24.5k|    arg.m_value = make_value<Context>(value);
  405|  24.5k|    return arg;
  406|  24.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   268k|{
  619|   268k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   268k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   268k|    static_cast<    \
  |  |  247|   268k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   268k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   268k|    {
  564|   268k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   268k|    {
  574|   268k|        return {
  575|   268k|            detail::make_arg<base::is_packed, Context,
  576|   268k|                             detail::mapped_type_constant<
  577|   268k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   268k|                args)...};
  579|   268k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   268k|{
  415|   268k|    return make_value<Context>(value);
  416|   268k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|   290k|{
  372|   290k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   290k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   290k|                                  needs_context_tag>) {
  376|   290k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   290k|    }
  378|   290k|    else {
  379|   290k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   290k|            value, context_tag<Context>{}));
  381|   290k|    }
  382|   290k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|   290k|    {                                                                        \
  217|   290k|        return val;                                                          \
  218|   290k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   268k|    {
  647|   268k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|   187k|    {
  554|   187k|        return m_args;
  555|   187k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  21.8k|{
  400|  21.8k|    check_scan_arg_types<T>();
  401|       |
  402|  21.8k|    basic_scan_arg<Context> arg;
  403|  21.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  21.8k|    arg.m_value = make_value<Context>(value);
  405|  21.8k|    return arg;
  406|  21.8k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  1.38M|    {
  682|  1.38M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.38M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  1.38M|        return static_cast<std::size_t>(m_desc &
  687|  1.38M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  1.38M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  2.76M|    {
  702|  2.76M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  2.76M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  1.38M|    {
  655|  1.38M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.38M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  1.38M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.38M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  1.38M|        const auto t = type(id);
  667|  1.38M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.38M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  1.38M|        basic_scan_arg<Context> arg;
  672|  1.38M|        arg.m_type = t;
  673|  1.38M|        arg.m_value = m_values[id];
  674|  1.38M|        return arg;
  675|  1.38M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  1.38M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  1.38M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  1.38M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  1.38M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  1.38M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  2.55M|    {
  483|  2.55M|        return m_type != detail::arg_type::none_type;
  484|  2.55M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  2.26M|    {
  488|  2.26M|        return m_type;
  489|  2.26M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  1.58M|    {
  682|  1.58M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.58M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  1.58M|        return static_cast<std::size_t>(m_desc &
  687|  1.58M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  1.58M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  3.17M|    {
  702|  3.17M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  3.17M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  1.58M|    {
  655|  1.58M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.58M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  1.58M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.58M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  1.58M|        const auto t = type(id);
  667|  1.58M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.58M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  1.58M|        basic_scan_arg<Context> arg;
  672|  1.58M|        arg.m_type = t;
  673|  1.58M|        arg.m_value = m_values[id];
  674|  1.58M|        return arg;
  675|  1.58M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  1.58M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  1.58M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  1.58M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  1.58M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  1.58M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  2.89M|    {
  483|  2.89M|        return m_type != detail::arg_type::none_type;
  484|  2.89M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  2.64M|    {
  488|  2.64M|        return m_type;
  489|  2.64M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   123k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   130k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   186k|    {
  109|   186k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  1.13M|    {
   60|  1.13M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   400k|    {
  124|   400k|        return m_current;
  125|   400k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  1.13M|    {
   43|  1.13M|        return m_args.get(id);
   44|  1.13M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  1.05M|    {
   53|  1.05M|        return m_locale;
   54|  1.05M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   146k|    {
  132|   146k|        return ranges_std::default_sentinel;
  133|   146k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|  67.9k|    {
  146|  67.9k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  67.9k|    static_cast<    \
  |  |  247|  67.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  67.9k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   146k|    {
  140|   146k|        return ranges::subrange{begin(), end()};
  141|   146k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   331k|    {
  109|   331k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  1.32M|    {
   60|  1.32M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|   703k|    {
  124|   703k|        return m_current;
  125|   703k|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  1.32M|    {
   43|  1.32M|        return m_args.get(id);
   44|  1.32M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  1.17M|    {
   53|  1.17M|        return m_locale;
   54|  1.17M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   258k|    {
  132|   258k|        return ranges_std::default_sentinel;
  133|   258k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|   113k|    {
  146|   113k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   113k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   258k|    {
  140|   258k|        return ranges::subrange{begin(), end()};
  141|   258k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  1.08M|    {
   69|  1.08M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  1.08M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  1.08M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  11.6M|    {
   75|  11.6M|        return m_code == good;
   76|  11.6M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   448k|    {
   86|   448k|        return m_code;
   87|   448k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   448k|{
  111|   448k|    return a.code() == b;
  112|   448k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   448k|{
  116|   448k|    return !(a == b);
  117|   448k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  7.15M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   175k|    {
  675|   175k|        return m_str;
  676|   175k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  1.38M|{
  385|  1.38M|    return s;
  386|  1.38M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  1.38M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   175k|    {
  671|   175k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   169k|    {
  675|   169k|        return m_str;
  676|   169k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   169k|    {
  671|   169k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   220k|    {
  675|   220k|        return m_str;
  676|   220k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   220k|    {
  671|   220k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   189k|    {
  675|   189k|        return m_str;
  676|   189k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   189k|    {
  671|   189k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   223k|    {
  675|   223k|        return m_str;
  676|   223k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   223k|    {
  671|   223k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   191k|    {
  675|   191k|        return m_str;
  676|   191k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   191k|    {
  671|   191k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  26.3k|    {
  675|  26.3k|        return m_str;
  676|  26.3k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  26.3k|    {
  671|  26.3k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  35.0k|    {
  675|  35.0k|        return m_str;
  676|  35.0k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  35.0k|    {
  671|  35.0k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  37.2k|    {
  675|  37.2k|        return m_str;
  676|  37.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  37.2k|    {
  671|  37.2k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  37.2k|    {
  675|  37.2k|        return m_str;
  676|  37.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  37.2k|    {
  671|  37.2k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  37.2k|    {
  675|  37.2k|        return m_str;
  676|  37.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  37.2k|    {
  671|  37.2k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  37.2k|    {
  675|  37.2k|        return m_str;
  676|  37.2k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  37.2k|    {
  671|  37.2k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   184k|    {
  675|   184k|        return m_str;
  676|   184k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  1.58M|{
  390|  1.58M|    return s;
  391|  1.58M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  1.58M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   184k|    {
  671|   184k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   179k|    {
  675|   179k|        return m_str;
  676|   179k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   179k|    {
  671|   179k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   224k|    {
  675|   224k|        return m_str;
  676|   224k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   224k|    {
  671|   224k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   197k|    {
  675|   197k|        return m_str;
  676|   197k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   197k|    {
  671|   197k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   227k|    {
  675|   227k|        return m_str;
  676|   227k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   227k|    {
  671|   227k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   199k|    {
  675|   199k|        return m_str;
  676|   199k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   199k|    {
  671|   199k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  48.5k|    {
  675|  48.5k|        return m_str;
  676|  48.5k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  48.5k|    {
  671|  48.5k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  48.5k|    {
  675|  48.5k|        return m_str;
  676|  48.5k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  48.5k|    {
  671|  48.5k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  68.7k|    {
  675|  68.7k|        return m_str;
  676|  68.7k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  68.7k|    {
  671|  68.7k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  68.7k|    {
  675|  68.7k|        return m_str;
  676|  68.7k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  68.7k|    {
  671|  68.7k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  68.7k|    {
  675|  68.7k|        return m_str;
  676|  68.7k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  68.7k|    {
  671|  68.7k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|  68.7k|    {
  675|  68.7k|        return m_str;
  676|  68.7k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  68.7k|    {
  671|  68.7k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  2.20M|    {
  196|  2.20M|        SCN_GCC_COMPAT_PUSH
  197|  2.20M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  2.20M|        switch (type) {
  199|   502k|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 502k, False: 1.69M]
  ------------------
  200|  1.00M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 501k, False: 1.70M]
  ------------------
  201|  1.00M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 2.20M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   163k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 163k, False: 2.03M]
  ------------------
  206|   163k|                return 2;
  207|   234k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 234k, False: 1.96M]
  ------------------
  208|   234k|                return 8;
  209|   384k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 384k, False: 1.81M]
  ------------------
  210|   384k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 2.20M]
  ------------------
  211|   384k|                return 10;
  212|   415k|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 415k, False: 1.78M]
  ------------------
  213|   415k|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 2.20M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  2.20M|        }
  219|  2.20M|        SCN_GCC_COMPAT_POP
  220|  2.20M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  2.45M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|   509k|    {
  245|   509k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|   509k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|   509k|            m_specs.localized = true;
  247|   509k|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|   509k|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  1.79M|    {
  260|  1.79M|        m_specs.type = type;
  261|  1.79M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   149k|    {
  322|   149k|        SCN_UNLIKELY_ATTR
  323|   149k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   149k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  2.30M|    {
  333|  2.30M|        return static_cast<bool>(m_error);
  334|  2.30M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|   509k|{
  987|   509k|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 509k]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|  77.1k|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 77.1k, False: 432k]
  ------------------
  992|  77.1k|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 509k]
  ------------------
  993|   171k|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 94.5k, False: 414k]
  ------------------
  994|   171k|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 509k]
  ------------------
  995|   267k|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 95.5k, False: 413k]
  ------------------
  996|   267k|            return arg_type_category::integer;
  997|       |
  998|  75.0k|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 75.0k, False: 434k]
  ------------------
  999|  75.0k|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 509k]
  ------------------
 1000|   158k|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 83.2k, False: 426k]
  ------------------
 1001|   158k|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 509k]
  ------------------
 1002|   242k|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 83.8k, False: 425k]
  ------------------
 1003|   242k|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 509k]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 509k]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 509k]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 509k]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 509k]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 509k]
  ------------------
 1015|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 509k]
  ------------------
 1016|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 509k]
  ------------------
 1017|      0|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 509k]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 509k]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 509k]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 509k]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 509k]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 509k]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|   509k|            SCN_CLANG_POP
 1034|   509k|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|   509k|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   947k|{
  968|   947k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   947k|    handler.check_args_exhausted();
  970|   947k|    return handler.get_error();
  971|   947k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   947k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   947k|    auto begin = format.data();
  937|   947k|    auto it = begin;
  938|   947k|    const auto end = format.data() + format.size();
  939|       |
  940|  1.77M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 947k, False: 829k]
  ------------------
  941|   947k|        const auto ch = *it++;
  942|   947k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 947k, False: 0]
  ------------------
  943|   947k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   947k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   947k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 118k, False: 829k]
  ------------------
  947|   118k|                return;
  948|   118k|            }
  949|   947k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   947k|    }
  960|       |
  961|   829k|    handler.on_literal_text(begin, end);
  962|   829k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|   947k|{
  866|   947k|    struct id_adapter {
  867|   947k|        constexpr void operator()()
  868|   947k|        {
  869|   947k|            arg_id = handler.on_arg_id();
  870|   947k|        }
  871|   947k|        constexpr void operator()(std::size_t id)
  872|   947k|        {
  873|   947k|            arg_id = handler.on_arg_id(id);
  874|   947k|        }
  875|       |
  876|   947k|        constexpr void on_error(const char* msg)
  877|   947k|        {
  878|   947k|            SCN_UNLIKELY_ATTR
  879|   947k|            handler.on_error(msg);
  880|   947k|        }
  881|       |
  882|   947k|        Handler& handler;
  883|   947k|        std::size_t arg_id;
  884|   947k|    };
  885|       |
  886|   947k|    ++begin;
  887|   947k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   947k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 947k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   947k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 947k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   947k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 947k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   947k|    else {
  899|   947k|        auto adapter = id_adapter{handler, 0};
  900|   947k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   947k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   947k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 947k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   947k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 947k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   947k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 947k, False: 0]
  ------------------
  911|   947k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   947k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 947k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   947k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   947k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 39.4k, False: 907k]
  |  |  |  Branch (153:45): [True: 0, False: 947k]
  |  |  |  Branch (153:45): [True: 39.4k, False: 907k]
  |  |  ------------------
  ------------------
  917|  39.4k|                handler.on_error("Unknown format specifier");
  918|  39.4k|                return begin;
  919|  39.4k|            }
  920|   947k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   947k|    }
  927|   907k|    return begin + 1;
  928|   947k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   947k|{
  400|   947k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   947k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   947k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   947k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 947k, False: 0]
  |  Branch (401:26): [True: 0, False: 947k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   947k|    handler();
  406|   947k|    return begin;
  407|   947k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   947k|        {
  869|   947k|            arg_id = handler.on_arg_id();
  870|   947k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|   947k|    {
 1046|   947k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   947k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   947k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   947k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|   947k|{
  795|   947k|    auto do_presentation = [&]() -> const CharT* {
  796|   947k|        if (*begin == CharT{'['}) {
  797|   947k|            auto set = parse_presentation_set(begin, end, handler);
  798|   947k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   947k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   947k|                return begin;
  803|   947k|            }
  804|   947k|            handler.on_character_set_string(set);
  805|   947k|            return begin;
  806|   947k|        }
  807|   947k|        if (*begin == CharT{'/'}) {
  808|   947k|            return parse_presentation_regex(begin, end, handler);
  809|   947k|        }
  810|   947k|        presentation_type type = parse_presentation_type(*begin++);
  811|   947k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   947k|            handler.on_error("Invalid type specifier in format string");
  813|   947k|            return begin;
  814|   947k|        }
  815|   947k|        handler.on_type(type);
  816|   947k|        return begin;
  817|   947k|    };
  818|       |
  819|   947k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 947k, False: 0]
  |  Branch (819:28): [True: 921k, False: 26.2k]
  ------------------
  820|   947k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 907k, False: 13.1k]
  |  Branch (820:36): [True: 684k, False: 223k]
  ------------------
  821|   684k|        return do_presentation();
  822|   684k|    }
  823|       |
  824|   262k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   262k|    begin = parse_align(begin, end, handler);
  830|   262k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   262k|    begin = parse_width(begin, end, handler);
  836|   262k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   262k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 223k, False: 39.4k]
  ------------------
  842|   223k|        handler.on_localized();
  843|   223k|        ++begin;
  844|   223k|    }
  845|   262k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   262k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 262k, False: 0]
  |  Branch (850:25): [True: 39.4k, False: 223k]
  ------------------
  851|  39.4k|        do_presentation();
  852|  39.4k|    }
  853|   262k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   262k|    return begin;
  859|   262k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  1.08M|{
  464|  1.08M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 807k, False: 273k]
  |  Branch (464:33): [True: 807k, False: 0]
  ------------------
  465|  1.08M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 247k, False: 26.2k]
  |  Branch (465:33): [True: 247k, False: 0]
  ------------------
  466|  1.08M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|   723k|    auto do_presentation = [&]() -> const CharT* {
  796|   723k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 723k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   723k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 723k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   723k|        presentation_type type = parse_presentation_type(*begin++);
  811|   723k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.2k, False: 697k]
  |  |  ------------------
  ------------------
  812|  26.2k|            handler.on_error("Invalid type specifier in format string");
  813|  26.2k|            return begin;
  814|  26.2k|        }
  815|   697k|        handler.on_type(type);
  816|   697k|        return begin;
  817|   723k|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|   885k|{
  412|   885k|    switch (type) {
  413|  66.3k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 66.3k, False: 819k]
  ------------------
  414|  92.6k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 26.2k, False: 859k]
  ------------------
  415|  92.6k|            return presentation_type::int_binary;
  416|   187k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 187k, False: 698k]
  ------------------
  417|   187k|            return presentation_type::int_decimal;
  418|   246k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 246k, False: 639k]
  ------------------
  419|   246k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 885k]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   104k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 104k, False: 781k]
  ------------------
  423|   104k|            return presentation_type::int_octal;
  424|   202k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 202k, False: 683k]
  ------------------
  425|   202k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 885k]
  ------------------
  426|   202k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 885k]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 885k]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 885k]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 885k]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 885k]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 885k]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 885k]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 885k]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 885k]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 885k]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 885k]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 885k]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 885k]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 885k]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 885k]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 885k]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|  52.5k|        default:
  ------------------
  |  Branch (456:9): [True: 52.5k, False: 833k]
  ------------------
  457|  52.5k|            return presentation_type::none;
  458|   885k|    }
  459|   885k|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   262k|{
  489|   262k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   262k|        switch (ch) {
  493|   262k|            case L'<':
  494|   262k|                return align_type::left;
  495|   262k|            case L'>':
  496|   262k|                return align_type::right;
  497|   262k|            case L'^':
  498|   262k|                return align_type::center;
  499|   262k|            default:
  500|   262k|                return align_type::none;
  501|   262k|        }
  502|   262k|    };
  503|       |
  504|   262k|    auto potential_fill_len = code_point_length(begin, end);
  505|   262k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 262k]
  |  |  |  Branch (153:45): [True: 0, False: 262k]
  |  |  |  Branch (153:45): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
  506|   262k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   262k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   262k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   262k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   262k|    const auto begin_before_fill = begin;
  516|   262k|    begin += potential_fill_len;
  517|       |
  518|   262k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 262k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   262k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   262k|    const auto begin_after_fill = begin;
  524|   262k|    ++begin;
  525|       |
  526|   262k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 262k, False: 0]
  ------------------
  527|   262k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 262k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   262k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 262k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   262k|    }
  535|       |
  536|   262k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 262k, False: 0]
  ------------------
  537|   262k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 262k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   262k|        return begin_before_fill;
  542|   262k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   262k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|   326k|{
  471|   326k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   326k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   326k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   326k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   326k|        return 1;
  474|   326k|    }
  475|   326k|    else {
  476|   326k|        const auto lengths =
  477|   326k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   326k|            "\3\4";
  479|   326k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   326k|        return len;
  481|   326k|    }
  482|   326k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   525k|    auto check_align = [](wchar_t ch) {
  492|   525k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 525k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 525k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 525k]
  ------------------
  498|      0|                return align_type::center;
  499|   525k|            default:
  ------------------
  |  Branch (499:13): [True: 525k, False: 0]
  ------------------
  500|   525k|                return align_type::none;
  501|   525k|        }
  502|   525k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   262k|{
  554|   262k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   262k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 236k, False: 26.2k]
  |  Branch (556:33): [True: 0, False: 236k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   262k|    return begin;
  567|   262k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   223k|    {
 1051|   223k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   223k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 104k, False: 118k]
  ------------------
 1053|   223k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 104k]
  ------------------
 1054|   223k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   223k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   223k|        Handler::on_localized();
 1063|   223k|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1072|  2.23M|{
 1073|  2.23M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  2.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.23M]
  |  |  ------------------
  ------------------
 1074|      0|        return handler.on_error("Invalid type specifier for integer type");
 1075|      0|    }
 1076|  2.23M|    if (specs.localized) {
  ------------------
  |  Branch (1076:9): [True: 509k, False: 1.72M]
  ------------------
 1077|   509k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 509k]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|            return;
 1082|      0|        }
 1083|   509k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 509k]
  |  |  ------------------
  ------------------
 1084|       |            // clang-format off
 1085|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1086|       |            // clang-format on
 1087|      0|        }
 1088|   509k|    }
 1089|  2.23M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   186k|{
  968|   186k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   186k|    handler.check_args_exhausted();
  970|   186k|    return handler.get_error();
  971|   186k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   186k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   186k|    auto begin = format.data();
  937|   186k|    auto it = begin;
  938|   186k|    const auto end = format.data() + format.size();
  939|       |
  940|   254k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 186k, False: 67.9k]
  ------------------
  941|   186k|        const auto ch = *it++;
  942|   186k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 186k, False: 0]
  ------------------
  943|   186k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   186k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   186k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 118k, False: 67.9k]
  ------------------
  947|   118k|                return;
  948|   118k|            }
  949|   186k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   186k|    }
  960|       |
  961|  67.9k|    handler.on_literal_text(begin, end);
  962|  67.9k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|   186k|{
  866|   186k|    struct id_adapter {
  867|   186k|        constexpr void operator()()
  868|   186k|        {
  869|   186k|            arg_id = handler.on_arg_id();
  870|   186k|        }
  871|   186k|        constexpr void operator()(std::size_t id)
  872|   186k|        {
  873|   186k|            arg_id = handler.on_arg_id(id);
  874|   186k|        }
  875|       |
  876|   186k|        constexpr void on_error(const char* msg)
  877|   186k|        {
  878|   186k|            SCN_UNLIKELY_ATTR
  879|   186k|            handler.on_error(msg);
  880|   186k|        }
  881|       |
  882|   186k|        Handler& handler;
  883|   186k|        std::size_t arg_id;
  884|   186k|    };
  885|       |
  886|   186k|    ++begin;
  887|   186k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   186k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 186k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   186k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 186k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   186k|    else {
  899|   186k|        auto adapter = id_adapter{handler, 0};
  900|   186k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   186k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   186k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 186k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   186k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 186k, False: 0]
  ------------------
  911|   186k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   186k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   186k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 39.4k, False: 146k]
  |  |  |  Branch (153:45): [True: 0, False: 186k]
  |  |  |  Branch (153:45): [True: 39.4k, False: 146k]
  |  |  ------------------
  ------------------
  917|  39.4k|                handler.on_error("Unknown format specifier");
  918|  39.4k|                return begin;
  919|  39.4k|            }
  920|   186k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   186k|    }
  927|   146k|    return begin + 1;
  928|   186k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   186k|{
  400|   186k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   186k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 186k, False: 0]
  |  Branch (401:26): [True: 0, False: 186k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   186k|    handler();
  406|   186k|    return begin;
  407|   186k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   186k|        {
  869|   186k|            arg_id = handler.on_arg_id();
  870|   186k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   186k|    {
 1046|   186k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   186k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|   186k|{
  795|   186k|    auto do_presentation = [&]() -> const CharT* {
  796|   186k|        if (*begin == CharT{'['}) {
  797|   186k|            auto set = parse_presentation_set(begin, end, handler);
  798|   186k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   186k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   186k|                return begin;
  803|   186k|            }
  804|   186k|            handler.on_character_set_string(set);
  805|   186k|            return begin;
  806|   186k|        }
  807|   186k|        if (*begin == CharT{'/'}) {
  808|   186k|            return parse_presentation_regex(begin, end, handler);
  809|   186k|        }
  810|   186k|        presentation_type type = parse_presentation_type(*begin++);
  811|   186k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   186k|            handler.on_error("Invalid type specifier in format string");
  813|   186k|            return begin;
  814|   186k|        }
  815|   186k|        handler.on_type(type);
  816|   186k|        return begin;
  817|   186k|    };
  818|       |
  819|   186k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 186k, False: 0]
  |  Branch (819:28): [True: 159k, False: 26.2k]
  ------------------
  820|   186k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 146k, False: 13.1k]
  |  Branch (820:36): [True: 122k, False: 24.0k]
  ------------------
  821|   122k|        return do_presentation();
  822|   122k|    }
  823|       |
  824|  63.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  63.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 63.5k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  63.5k|    begin = parse_align(begin, end, handler);
  830|  63.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  63.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 63.5k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  63.5k|    begin = parse_width(begin, end, handler);
  836|  63.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  63.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 63.5k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|  63.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 24.0k, False: 39.4k]
  ------------------
  842|  24.0k|        handler.on_localized();
  843|  24.0k|        ++begin;
  844|  24.0k|    }
  845|  63.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  63.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 63.5k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|  63.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 63.5k, False: 0]
  |  Branch (850:25): [True: 39.4k, False: 24.0k]
  ------------------
  851|  39.4k|        do_presentation();
  852|  39.4k|    }
  853|  63.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  63.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 63.5k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|  63.5k|    return begin;
  859|  63.5k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   162k|    auto do_presentation = [&]() -> const CharT* {
  796|   162k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 162k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   162k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 162k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   162k|        presentation_type type = parse_presentation_type(*begin++);
  811|   162k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.2k, False: 135k]
  |  |  ------------------
  ------------------
  812|  26.2k|            handler.on_error("Invalid type specifier in format string");
  813|  26.2k|            return begin;
  814|  26.2k|        }
  815|   135k|        handler.on_type(type);
  816|   135k|        return begin;
  817|   162k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|  63.5k|{
  489|  63.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  63.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  63.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  63.5k|        switch (ch) {
  493|  63.5k|            case L'<':
  494|  63.5k|                return align_type::left;
  495|  63.5k|            case L'>':
  496|  63.5k|                return align_type::right;
  497|  63.5k|            case L'^':
  498|  63.5k|                return align_type::center;
  499|  63.5k|            default:
  500|  63.5k|                return align_type::none;
  501|  63.5k|        }
  502|  63.5k|    };
  503|       |
  504|  63.5k|    auto potential_fill_len = code_point_length(begin, end);
  505|  63.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 63.5k]
  |  |  |  Branch (153:45): [True: 0, False: 63.5k]
  |  |  |  Branch (153:45): [True: 0, False: 63.5k]
  |  |  ------------------
  ------------------
  506|  63.5k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  63.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  63.5k|    auto potential_fill = std::basic_string_view<CharT>{
  514|  63.5k|        begin, static_cast<size_t>(potential_fill_len)};
  515|  63.5k|    const auto begin_before_fill = begin;
  516|  63.5k|    begin += potential_fill_len;
  517|       |
  518|  63.5k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 63.5k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  63.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  63.5k|    const auto begin_after_fill = begin;
  524|  63.5k|    ++begin;
  525|       |
  526|  63.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 63.5k, False: 0]
  ------------------
  527|  63.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  63.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 63.5k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  63.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 63.5k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  63.5k|    }
  535|       |
  536|  63.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 63.5k, False: 0]
  ------------------
  537|  63.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 63.5k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  63.5k|        return begin_before_fill;
  542|  63.5k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  63.5k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   127k|    auto check_align = [](wchar_t ch) {
  492|   127k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 127k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 127k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 127k]
  ------------------
  498|      0|                return align_type::center;
  499|   127k|            default:
  ------------------
  |  Branch (499:13): [True: 127k, False: 0]
  ------------------
  500|   127k|                return align_type::none;
  501|   127k|        }
  502|   127k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|  63.5k|{
  554|  63.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  63.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  63.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  63.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 37.2k, False: 26.2k]
  |  Branch (556:33): [True: 0, False: 37.2k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  63.5k|    return begin;
  567|  63.5k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  24.0k|    {
 1051|  24.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  24.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 13.1k, False: 10.9k]
  ------------------
 1053|  24.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 13.1k]
  ------------------
 1054|  24.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  24.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  24.0k|        Handler::on_localized();
 1063|  24.0k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   992k|{
  968|   992k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   992k|    handler.check_args_exhausted();
  970|   992k|    return handler.get_error();
  971|   992k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   992k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   992k|    auto begin = format.data();
  937|   992k|    auto it = begin;
  938|   992k|    const auto end = format.data() + format.size();
  939|       |
  940|  1.76M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 992k, False: 774k]
  ------------------
  941|   992k|        const auto ch = *it++;
  942|   992k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 992k, False: 0]
  ------------------
  943|   992k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   992k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   992k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 218k, False: 774k]
  ------------------
  947|   218k|                return;
  948|   218k|            }
  949|   992k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   992k|    }
  960|       |
  961|   774k|    handler.on_literal_text(begin, end);
  962|   774k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|   992k|{
  866|   992k|    struct id_adapter {
  867|   992k|        constexpr void operator()()
  868|   992k|        {
  869|   992k|            arg_id = handler.on_arg_id();
  870|   992k|        }
  871|   992k|        constexpr void operator()(std::size_t id)
  872|   992k|        {
  873|   992k|            arg_id = handler.on_arg_id(id);
  874|   992k|        }
  875|       |
  876|   992k|        constexpr void on_error(const char* msg)
  877|   992k|        {
  878|   992k|            SCN_UNLIKELY_ATTR
  879|   992k|            handler.on_error(msg);
  880|   992k|        }
  881|       |
  882|   992k|        Handler& handler;
  883|   992k|        std::size_t arg_id;
  884|   992k|    };
  885|       |
  886|   992k|    ++begin;
  887|   992k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   992k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 992k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   992k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 992k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   992k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 992k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   992k|    else {
  899|   992k|        auto adapter = id_adapter{handler, 0};
  900|   992k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   992k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   992k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 992k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   992k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 992k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   992k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 992k, False: 0]
  ------------------
  911|   992k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   992k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 992k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   992k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   992k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.7k, False: 919k]
  |  |  |  Branch (153:45): [True: 0, False: 992k]
  |  |  |  Branch (153:45): [True: 72.7k, False: 919k]
  |  |  ------------------
  ------------------
  917|  72.7k|                handler.on_error("Unknown format specifier");
  918|  72.7k|                return begin;
  919|  72.7k|            }
  920|   992k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   992k|    }
  927|   919k|    return begin + 1;
  928|   992k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   992k|{
  400|   992k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   992k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   992k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   992k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 992k, False: 0]
  |  Branch (401:26): [True: 0, False: 992k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   992k|    handler();
  406|   992k|    return begin;
  407|   992k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   992k|        {
  869|   992k|            arg_id = handler.on_arg_id();
  870|   992k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|   992k|    {
 1046|   992k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   992k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   992k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   992k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|   992k|{
  795|   992k|    auto do_presentation = [&]() -> const CharT* {
  796|   992k|        if (*begin == CharT{'['}) {
  797|   992k|            auto set = parse_presentation_set(begin, end, handler);
  798|   992k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   992k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   992k|                return begin;
  803|   992k|            }
  804|   992k|            handler.on_character_set_string(set);
  805|   992k|            return begin;
  806|   992k|        }
  807|   992k|        if (*begin == CharT{'/'}) {
  808|   992k|            return parse_presentation_regex(begin, end, handler);
  809|   992k|        }
  810|   992k|        presentation_type type = parse_presentation_type(*begin++);
  811|   992k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   992k|            handler.on_error("Invalid type specifier in format string");
  813|   992k|            return begin;
  814|   992k|        }
  815|   992k|        handler.on_type(type);
  816|   992k|        return begin;
  817|   992k|    };
  818|       |
  819|   992k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 992k, False: 0]
  |  Branch (819:28): [True: 944k, False: 48.5k]
  ------------------
  820|   992k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 919k, False: 24.2k]
  |  Branch (820:36): [True: 698k, False: 221k]
  ------------------
  821|   698k|        return do_presentation();
  822|   698k|    }
  823|       |
  824|   294k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   294k|    begin = parse_align(begin, end, handler);
  830|   294k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   294k|    begin = parse_width(begin, end, handler);
  836|   294k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   294k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 221k, False: 72.7k]
  ------------------
  842|   221k|        handler.on_localized();
  843|   221k|        ++begin;
  844|   221k|    }
  845|   294k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   294k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 294k, False: 0]
  |  Branch (850:25): [True: 72.7k, False: 221k]
  ------------------
  851|  72.7k|        do_presentation();
  852|  72.7k|    }
  853|   294k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   294k|    return begin;
  859|   294k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  1.22M|{
  464|  1.22M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 916k, False: 310k]
  |  Branch (464:33): [True: 916k, False: 0]
  ------------------
  465|  1.22M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 261k, False: 48.5k]
  |  Branch (465:33): [True: 261k, False: 0]
  ------------------
  466|  1.22M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|   771k|    auto do_presentation = [&]() -> const CharT* {
  796|   771k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 771k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   771k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 771k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   771k|        presentation_type type = parse_presentation_type(*begin++);
  811|   771k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 48.5k, False: 722k]
  |  |  ------------------
  ------------------
  812|  48.5k|            handler.on_error("Invalid type specifier in format string");
  813|  48.5k|            return begin;
  814|  48.5k|        }
  815|   722k|        handler.on_type(type);
  816|   722k|        return begin;
  817|   771k|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  1.06M|{
  412|  1.06M|    switch (type) {
  413|  98.5k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 98.5k, False: 963k]
  ------------------
  414|   147k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 48.5k, False: 1.01M]
  ------------------
  415|   147k|            return presentation_type::int_binary;
  416|   203k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 203k, False: 858k]
  ------------------
  417|   203k|            return presentation_type::int_decimal;
  418|   261k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 261k, False: 800k]
  ------------------
  419|   261k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 1.06M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   132k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 132k, False: 929k]
  ------------------
  423|   132k|            return presentation_type::int_octal;
  424|   220k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 220k, False: 841k]
  ------------------
  425|   220k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 1.06M]
  ------------------
  426|   220k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 1.06M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 1.06M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 1.06M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 1.06M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 1.06M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 1.06M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 1.06M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 1.06M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 1.06M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 1.06M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 1.06M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 1.06M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 1.06M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 1.06M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 1.06M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 1.06M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|  97.0k|        default:
  ------------------
  |  Branch (456:9): [True: 97.0k, False: 965k]
  ------------------
  457|  97.0k|            return presentation_type::none;
  458|  1.06M|    }
  459|  1.06M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   294k|{
  489|   294k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   294k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   294k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   294k|        switch (ch) {
  493|   294k|            case L'<':
  494|   294k|                return align_type::left;
  495|   294k|            case L'>':
  496|   294k|                return align_type::right;
  497|   294k|            case L'^':
  498|   294k|                return align_type::center;
  499|   294k|            default:
  500|   294k|                return align_type::none;
  501|   294k|        }
  502|   294k|    };
  503|       |
  504|   294k|    auto potential_fill_len = code_point_length(begin, end);
  505|   294k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   588k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 294k]
  |  |  |  Branch (153:45): [True: 0, False: 294k]
  |  |  |  Branch (153:45): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
  506|   294k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   294k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   294k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   294k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   294k|    const auto begin_before_fill = begin;
  516|   294k|    begin += potential_fill_len;
  517|       |
  518|   294k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 294k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   294k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   294k|    const auto begin_after_fill = begin;
  524|   294k|    ++begin;
  525|       |
  526|   294k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 294k, False: 0]
  ------------------
  527|   294k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 294k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   294k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 294k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   294k|    }
  535|       |
  536|   294k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 294k, False: 0]
  ------------------
  537|   294k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 294k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   294k|        return begin_before_fill;
  542|   294k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   294k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|   407k|{
  471|   407k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   407k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   407k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|   407k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|   407k|        return 1;
  474|   407k|    }
  475|   407k|    else {
  476|   407k|        const auto lengths =
  477|   407k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|   407k|            "\3\4";
  479|   407k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|   407k|        return len;
  481|   407k|    }
  482|   407k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|   588k|    auto check_align = [](wchar_t ch) {
  492|   588k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 588k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 588k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 588k]
  ------------------
  498|      0|                return align_type::center;
  499|   588k|            default:
  ------------------
  |  Branch (499:13): [True: 588k, False: 0]
  ------------------
  500|   588k|                return align_type::none;
  501|   588k|        }
  502|   588k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   294k|{
  554|   294k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   294k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   294k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   294k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 245k, False: 48.5k]
  |  Branch (556:33): [True: 0, False: 245k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   294k|    return begin;
  567|   294k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   221k|    {
 1051|   221k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   221k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 104k, False: 117k]
  ------------------
 1053|   221k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 104k]
  ------------------
 1054|   221k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   221k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   221k|        Handler::on_localized();
 1063|   221k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   331k|{
  968|   331k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   331k|    handler.check_args_exhausted();
  970|   331k|    return handler.get_error();
  971|   331k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   331k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   331k|    auto begin = format.data();
  937|   331k|    auto it = begin;
  938|   331k|    const auto end = format.data() + format.size();
  939|       |
  940|   444k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 331k, False: 113k]
  ------------------
  941|   331k|        const auto ch = *it++;
  942|   331k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 331k, False: 0]
  ------------------
  943|   331k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   331k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   331k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 218k, False: 113k]
  ------------------
  947|   218k|                return;
  948|   218k|            }
  949|   331k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   331k|    }
  960|       |
  961|   113k|    handler.on_literal_text(begin, end);
  962|   113k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   331k|{
  866|   331k|    struct id_adapter {
  867|   331k|        constexpr void operator()()
  868|   331k|        {
  869|   331k|            arg_id = handler.on_arg_id();
  870|   331k|        }
  871|   331k|        constexpr void operator()(std::size_t id)
  872|   331k|        {
  873|   331k|            arg_id = handler.on_arg_id(id);
  874|   331k|        }
  875|       |
  876|   331k|        constexpr void on_error(const char* msg)
  877|   331k|        {
  878|   331k|            SCN_UNLIKELY_ATTR
  879|   331k|            handler.on_error(msg);
  880|   331k|        }
  881|       |
  882|   331k|        Handler& handler;
  883|   331k|        std::size_t arg_id;
  884|   331k|    };
  885|       |
  886|   331k|    ++begin;
  887|   331k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   331k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 331k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   331k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 331k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   331k|    else {
  899|   331k|        auto adapter = id_adapter{handler, 0};
  900|   331k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   331k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   331k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 331k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   331k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 331k, False: 0]
  ------------------
  911|   331k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   331k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   331k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   662k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 72.7k, False: 258k]
  |  |  |  Branch (153:45): [True: 0, False: 331k]
  |  |  |  Branch (153:45): [True: 72.7k, False: 258k]
  |  |  ------------------
  ------------------
  917|  72.7k|                handler.on_error("Unknown format specifier");
  918|  72.7k|                return begin;
  919|  72.7k|            }
  920|   331k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   331k|    }
  927|   258k|    return begin + 1;
  928|   331k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   331k|{
  400|   331k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   331k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 331k, False: 0]
  |  Branch (401:26): [True: 0, False: 331k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   331k|    handler();
  406|   331k|    return begin;
  407|   331k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   331k|        {
  869|   331k|            arg_id = handler.on_arg_id();
  870|   331k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   331k|    {
 1046|   331k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   331k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   331k|{
  795|   331k|    auto do_presentation = [&]() -> const CharT* {
  796|   331k|        if (*begin == CharT{'['}) {
  797|   331k|            auto set = parse_presentation_set(begin, end, handler);
  798|   331k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   331k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   331k|                return begin;
  803|   331k|            }
  804|   331k|            handler.on_character_set_string(set);
  805|   331k|            return begin;
  806|   331k|        }
  807|   331k|        if (*begin == CharT{'/'}) {
  808|   331k|            return parse_presentation_regex(begin, end, handler);
  809|   331k|        }
  810|   331k|        presentation_type type = parse_presentation_type(*begin++);
  811|   331k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   331k|            handler.on_error("Invalid type specifier in format string");
  813|   331k|            return begin;
  814|   331k|        }
  815|   331k|        handler.on_type(type);
  816|   331k|        return begin;
  817|   331k|    };
  818|       |
  819|   331k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 331k, False: 0]
  |  Branch (819:28): [True: 282k, False: 48.5k]
  ------------------
  820|   331k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 258k, False: 24.2k]
  |  Branch (820:36): [True: 218k, False: 40.4k]
  ------------------
  821|   218k|        return do_presentation();
  822|   218k|    }
  823|       |
  824|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   113k|    begin = parse_align(begin, end, handler);
  830|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   113k|    begin = parse_width(begin, end, handler);
  836|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   113k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 40.4k, False: 72.7k]
  ------------------
  842|  40.4k|        handler.on_localized();
  843|  40.4k|        ++begin;
  844|  40.4k|    }
  845|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   113k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 113k, False: 0]
  |  Branch (850:25): [True: 72.7k, False: 40.4k]
  ------------------
  851|  72.7k|        do_presentation();
  852|  72.7k|    }
  853|   113k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   113k|    return begin;
  859|   113k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   291k|    auto do_presentation = [&]() -> const CharT* {
  796|   291k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 291k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   291k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 291k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   291k|        presentation_type type = parse_presentation_type(*begin++);
  811|   291k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 48.5k, False: 242k]
  |  |  ------------------
  ------------------
  812|  48.5k|            handler.on_error("Invalid type specifier in format string");
  813|  48.5k|            return begin;
  814|  48.5k|        }
  815|   242k|        handler.on_type(type);
  816|   242k|        return begin;
  817|   291k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   113k|{
  489|   113k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   113k|        switch (ch) {
  493|   113k|            case L'<':
  494|   113k|                return align_type::left;
  495|   113k|            case L'>':
  496|   113k|                return align_type::right;
  497|   113k|            case L'^':
  498|   113k|                return align_type::center;
  499|   113k|            default:
  500|   113k|                return align_type::none;
  501|   113k|        }
  502|   113k|    };
  503|       |
  504|   113k|    auto potential_fill_len = code_point_length(begin, end);
  505|   113k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  |  Branch (153:45): [True: 0, False: 113k]
  |  |  |  Branch (153:45): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  506|   113k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   113k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   113k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   113k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   113k|    const auto begin_before_fill = begin;
  516|   113k|    begin += potential_fill_len;
  517|       |
  518|   113k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 113k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   113k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   113k|    const auto begin_after_fill = begin;
  524|   113k|    ++begin;
  525|       |
  526|   113k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 113k, False: 0]
  ------------------
  527|   113k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   113k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 113k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   113k|    }
  535|       |
  536|   113k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 113k, False: 0]
  ------------------
  537|   113k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 113k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   113k|        return begin_before_fill;
  542|   113k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   113k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   226k|    auto check_align = [](wchar_t ch) {
  492|   226k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 226k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 226k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 226k]
  ------------------
  498|      0|                return align_type::center;
  499|   226k|            default:
  ------------------
  |  Branch (499:13): [True: 226k, False: 0]
  ------------------
  500|   226k|                return align_type::none;
  501|   226k|        }
  502|   226k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   113k|{
  554|   113k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   113k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 64.6k, False: 48.5k]
  |  Branch (556:33): [True: 0, False: 64.6k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   113k|    return begin;
  567|   113k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  40.4k|    {
 1051|  40.4k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  40.4k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 20.2k, False: 20.2k]
  ------------------
 1053|  40.4k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 20.2k]
  ------------------
 1054|  40.4k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  40.4k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  40.4k|        Handler::on_localized();
 1063|  40.4k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  1.28M|{
  226|  1.28M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  1.28M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  1.28M|                  "\n"
  230|  1.28M|                  "Unsupported range type given as input to a scanning "
  231|  1.28M|                  "function.\n"
  232|  1.28M|                  "A range needs to have a character type (value type) "
  233|  1.28M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  1.28M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  1.28M|                  "to be included.\n"
  236|  1.28M|                  "See the scnlib documentation for more details.");
  237|  1.28M|    static_assert(
  238|  1.28M|        !std::is_same_v<T, custom_char_traits>,
  239|  1.28M|        "\n"
  240|  1.28M|        "Unsupported range type given as input to a scanning "
  241|  1.28M|        "function.\n"
  242|  1.28M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  1.28M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  1.28M|        "not supported.");
  245|  1.28M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  1.28M|                  "\n"
  247|  1.28M|                  "Unsupported range type given as input to a scanning "
  248|  1.28M|                  "function.\n"
  249|  1.28M|                  "file_marker_found cannot be used as an "
  250|  1.28M|                  "source range type to scn::scan.\n"
  251|  1.28M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  1.28M|                  "and do not provide an explicit source range, "
  253|  1.28M|                  "or use scn::scan with a FILE* directly.");
  254|  1.28M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  1.28M|                  "\n"
  256|  1.28M|                  "Unsupported range type given as input to a scanning "
  257|  1.28M|                  "function.\n"
  258|  1.28M|                  "In order to be scannable, a range needs to satisfy "
  259|  1.28M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  1.28M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  1.28M|                  "\n"
  262|  1.28M|                  "Unsupported range type given as input to a scanning "
  263|  1.28M|                  "function.\n"
  264|  1.28M|                  "A range needs to model forward_range and have a valid "
  265|  1.28M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  1.28M|                  "Examples of scannable ranges are std::string, "
  267|  1.28M|                  "std::string_view, "
  268|  1.28M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  1.28M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  1.28M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  1.28M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  1.28M|{
  153|  1.28M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  1.28M|        return std::basic_string_view{ranges::data(r),
  155|  1.28M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  1.28M|    }
  162|  1.28M|    else {
  163|  1.28M|        return invalid_char_type{};
  164|  1.28M|    }
  165|  1.28M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   222k|{
  226|   222k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   222k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   222k|                  "\n"
  230|   222k|                  "Unsupported range type given as input to a scanning "
  231|   222k|                  "function.\n"
  232|   222k|                  "A range needs to have a character type (value type) "
  233|   222k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   222k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   222k|                  "to be included.\n"
  236|   222k|                  "See the scnlib documentation for more details.");
  237|   222k|    static_assert(
  238|   222k|        !std::is_same_v<T, custom_char_traits>,
  239|   222k|        "\n"
  240|   222k|        "Unsupported range type given as input to a scanning "
  241|   222k|        "function.\n"
  242|   222k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   222k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   222k|        "not supported.");
  245|   222k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   222k|                  "\n"
  247|   222k|                  "Unsupported range type given as input to a scanning "
  248|   222k|                  "function.\n"
  249|   222k|                  "file_marker_found cannot be used as an "
  250|   222k|                  "source range type to scn::scan.\n"
  251|   222k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   222k|                  "and do not provide an explicit source range, "
  253|   222k|                  "or use scn::scan with a FILE* directly.");
  254|   222k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   222k|                  "\n"
  256|   222k|                  "Unsupported range type given as input to a scanning "
  257|   222k|                  "function.\n"
  258|   222k|                  "In order to be scannable, a range needs to satisfy "
  259|   222k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   222k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   222k|                  "\n"
  262|   222k|                  "Unsupported range type given as input to a scanning "
  263|   222k|                  "function.\n"
  264|   222k|                  "A range needs to model forward_range and have a valid "
  265|   222k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   222k|                  "Examples of scannable ranges are std::string, "
  267|   222k|                  "std::string_view, "
  268|   222k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   222k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   222k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   222k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   222k|{
  196|   222k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   222k|        return file_marker_found{};
  198|   222k|    }
  199|   222k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   222k|        if constexpr (ranges::input_range<Range>) {
  201|   222k|            return insufficient_range{};
  202|   222k|        }
  203|   222k|        else {
  204|   222k|            return invalid_input_range{};
  205|   222k|        }
  206|   222k|    }
  207|   222k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   222k|        return invalid_char_type{};
  209|   222k|    }
  210|   222k|    else {
  211|   222k|        return make_forward_scan_buffer(r);
  212|   222k|    }
  213|   222k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  1.32M|{
  226|  1.32M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  1.32M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  1.32M|                  "\n"
  230|  1.32M|                  "Unsupported range type given as input to a scanning "
  231|  1.32M|                  "function.\n"
  232|  1.32M|                  "A range needs to have a character type (value type) "
  233|  1.32M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  1.32M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  1.32M|                  "to be included.\n"
  236|  1.32M|                  "See the scnlib documentation for more details.");
  237|  1.32M|    static_assert(
  238|  1.32M|        !std::is_same_v<T, custom_char_traits>,
  239|  1.32M|        "\n"
  240|  1.32M|        "Unsupported range type given as input to a scanning "
  241|  1.32M|        "function.\n"
  242|  1.32M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  1.32M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  1.32M|        "not supported.");
  245|  1.32M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  1.32M|                  "\n"
  247|  1.32M|                  "Unsupported range type given as input to a scanning "
  248|  1.32M|                  "function.\n"
  249|  1.32M|                  "file_marker_found cannot be used as an "
  250|  1.32M|                  "source range type to scn::scan.\n"
  251|  1.32M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  1.32M|                  "and do not provide an explicit source range, "
  253|  1.32M|                  "or use scn::scan with a FILE* directly.");
  254|  1.32M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  1.32M|                  "\n"
  256|  1.32M|                  "Unsupported range type given as input to a scanning "
  257|  1.32M|                  "function.\n"
  258|  1.32M|                  "In order to be scannable, a range needs to satisfy "
  259|  1.32M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  1.32M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  1.32M|                  "\n"
  262|  1.32M|                  "Unsupported range type given as input to a scanning "
  263|  1.32M|                  "function.\n"
  264|  1.32M|                  "A range needs to model forward_range and have a valid "
  265|  1.32M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  1.32M|                  "Examples of scannable ranges are std::string, "
  267|  1.32M|                  "std::string_view, "
  268|  1.32M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  1.32M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  1.32M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  1.32M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  1.32M|{
  153|  1.32M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  1.32M|        return std::basic_string_view{ranges::data(r),
  155|  1.32M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  1.32M|    }
  162|  1.32M|    else {
  163|  1.32M|        return invalid_char_type{};
  164|  1.32M|    }
  165|  1.32M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   392k|{
  226|   392k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   392k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   392k|                  "\n"
  230|   392k|                  "Unsupported range type given as input to a scanning "
  231|   392k|                  "function.\n"
  232|   392k|                  "A range needs to have a character type (value type) "
  233|   392k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   392k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   392k|                  "to be included.\n"
  236|   392k|                  "See the scnlib documentation for more details.");
  237|   392k|    static_assert(
  238|   392k|        !std::is_same_v<T, custom_char_traits>,
  239|   392k|        "\n"
  240|   392k|        "Unsupported range type given as input to a scanning "
  241|   392k|        "function.\n"
  242|   392k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   392k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   392k|        "not supported.");
  245|   392k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   392k|                  "\n"
  247|   392k|                  "Unsupported range type given as input to a scanning "
  248|   392k|                  "function.\n"
  249|   392k|                  "file_marker_found cannot be used as an "
  250|   392k|                  "source range type to scn::scan.\n"
  251|   392k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   392k|                  "and do not provide an explicit source range, "
  253|   392k|                  "or use scn::scan with a FILE* directly.");
  254|   392k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   392k|                  "\n"
  256|   392k|                  "Unsupported range type given as input to a scanning "
  257|   392k|                  "function.\n"
  258|   392k|                  "In order to be scannable, a range needs to satisfy "
  259|   392k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   392k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   392k|                  "\n"
  262|   392k|                  "Unsupported range type given as input to a scanning "
  263|   392k|                  "function.\n"
  264|   392k|                  "A range needs to model forward_range and have a valid "
  265|   392k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   392k|                  "Examples of scannable ranges are std::string, "
  267|   392k|                  "std::string_view, "
  268|   392k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   392k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   392k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   392k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   392k|{
  196|   392k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   392k|        return file_marker_found{};
  198|   392k|    }
  199|   392k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   392k|        if constexpr (ranges::input_range<Range>) {
  201|   392k|            return insufficient_range{};
  202|   392k|        }
  203|   392k|        else {
  204|   392k|            return invalid_input_range{};
  205|   392k|        }
  206|   392k|    }
  207|   392k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   392k|        return invalid_char_type{};
  209|   392k|    }
  210|   392k|    else {
  211|   392k|        return make_forward_scan_buffer(r);
  212|   392k|    }
  213|   392k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  2.24M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  1.13M|    {
   45|  1.13M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  1.13M|    {
   66|  1.13M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.13M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  1.13M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  1.13M|        do_check_arg_id(id);
   74|  1.13M|        return id;
   75|  1.13M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  1.13M|{
  210|  1.13M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  1.13M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  1.13M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  1.05M|    {
   61|  1.05M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  1.05M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  2.18M|    {
   50|  2.18M|        return m_format.data();
   51|  2.18M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  1.32M|    {
   45|  1.32M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  1.32M|    {
   66|  1.32M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.32M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  1.32M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  1.32M|        do_check_arg_id(id);
   74|  1.32M|        return id;
   75|  1.32M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  1.32M|{
  210|  1.32M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  1.32M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  1.32M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  1.17M|    {
   61|  1.17M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  1.17M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  2.50M|    {
   50|  2.50M|        return m_format.data();
   51|  2.50M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  3.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|   560k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.50M|    {
  482|  2.50M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.50M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  2.50M|    {
  473|  2.50M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.50M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  1.32M|    {
  482|  1.32M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  1.32M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  1.32M|    {
  473|  1.32M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  1.32M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   227k|    {
  594|   227k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   227k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   227k|    {
  564|   227k|        return ranges::prev(it);
  565|   227k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|   819k|    {
  482|   819k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|   819k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|   819k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|   819k|    {
  473|   819k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|   819k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|   819k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|   916k|    {
  513|   916k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   916k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|   916k|    {
  505|   916k|        return ranges::next(it, n);
  506|   916k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|   867k|    {
  549|   867k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   867k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|   867k|    {
  541|   867k|        return ranges::distance(lhs, rhs);
  542|   867k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   593k|    {
  513|   593k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   593k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   593k|    {
  498|   593k|        it.batch_advance(n);
  499|   593k|        return it;
  500|   593k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  67.9k|    {
  549|  67.9k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  67.9k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  67.9k|    {
  534|  67.9k|        return rhs.position() - lhs.position();
  535|  67.9k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|   844k|    {
  482|   844k|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|   844k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|   844k|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|   844k|    {
  473|   844k|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|   844k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|   844k|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   209k|    {
  594|   209k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   209k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   209k|    {
  564|   209k|        return ranges::prev(it);
  565|   209k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|   860k|    {
  513|   860k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   860k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|   860k|    {
  505|   860k|        return ranges::next(it, n);
  506|   860k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|   812k|    {
  549|   812k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   812k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|   812k|    {
  541|   812k|        return ranges::distance(lhs, rhs);
  542|   812k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   928k|    {
  513|   928k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   928k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   928k|    {
  498|   928k|        it.batch_advance(n);
  499|   928k|        return it;
  500|   928k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   113k|    {
  549|   113k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   113k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   113k|    {
  534|   113k|        return rhs.position() - lhs.position();
  535|   113k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  1.14M|{
  343|  1.14M|    return {ranges::next(ranges::begin(source), n),
  344|  1.14M|            make_vscan_result_range_end(source)};
  345|  1.14M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  1.14M|{
  330|  1.14M|    return ranges::end(source);
  331|  1.14M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   169k|    {
  253|   169k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  1.14M|    {
  104|  1.14M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|   342k|    {
   39|   342k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  1.14M|    {
  121|  1.14M|        return ranges::begin(m_range);
  122|  1.14M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   163k|    {
  253|   163k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|   339k|    {
   39|   339k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   218k|    {
  253|   218k|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|   467k|    {
   39|   467k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   183k|    {
  253|   183k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|   403k|    {
   39|   403k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   221k|    {
  253|   221k|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|   473k|    {
   39|   473k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   186k|    {
  253|   186k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|   407k|    {
   39|   407k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  84.3k|{
  343|  84.3k|    return {ranges::next(ranges::begin(source), n),
  344|  84.3k|            make_vscan_result_range_end(source)};
  345|  84.3k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  84.3k|{
  330|  84.3k|    return ranges::end(source);
  331|  84.3k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  4.40k|    {
  253|  4.40k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  84.3k|    {
  104|  84.3k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  84.3k|    {
  121|  84.3k|        return ranges::begin(m_range);
  122|  84.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  14.2k|    {
  253|  14.2k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  16.4k|    {
  253|  16.4k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  16.4k|    {
  253|  16.4k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  16.4k|    {
  253|  16.4k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  16.4k|    {
  253|  16.4k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  1.06M|{
  343|  1.06M|    return {ranges::next(ranges::begin(source), n),
  344|  1.06M|            make_vscan_result_range_end(source)};
  345|  1.06M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  1.06M|{
  330|  1.06M|    return ranges::end(source);
  331|  1.06M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   159k|    {
  253|   159k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  1.06M|    {
  104|  1.06M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  1.06M|    {
  121|  1.06M|        return ranges::begin(m_range);
  122|  1.06M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   153k|    {
  253|   153k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   202k|    {
  253|   202k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   173k|    {
  253|   173k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   205k|    {
  253|   205k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   175k|    {
  253|   175k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   137k|{
  343|   137k|    return {ranges::next(ranges::begin(source), n),
  344|   137k|            make_vscan_result_range_end(source)};
  345|   137k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   137k|{
  330|   137k|    return ranges::end(source);
  331|   137k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  8.11k|    {
  253|  8.11k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   137k|    {
  104|   137k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   137k|    {
  121|   137k|        return ranges::begin(m_range);
  122|   137k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  8.11k|    {
  253|  8.11k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  30.3k|    {
  253|  30.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  30.3k|    {
  253|  30.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  30.3k|    {
  253|  30.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  30.3k|    {
  253|  30.3k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|  87.6k|{
  117|  87.6k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  87.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  87.6k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|  87.6k|{
   77|  87.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  87.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  87.6k|    static_cast<    \
  |  |  247|  87.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  87.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  87.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  87.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  87.6k|    static_cast<    \
  |  |  247|  87.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  87.6k|    static_cast<    \
  |  |  247|  87.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  87.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   175k|{
   55|   175k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 153k]
  |  |  ------------------
  ------------------
   56|  21.9k|        return unexpected(result.error());
   57|  21.9k|    }
   58|   153k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   153k|    static_cast<    \
  |  |  247|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   153k|    static_cast<    \
  |  |  247|   153k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   175k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|  87.6k|{
  201|  87.6k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  87.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  87.6k|                                                      format, {});
  203|  87.6k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|  87.6k|{
  163|  87.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  87.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  87.6k|    static_cast<    \
  |  |  247|  87.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  87.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  87.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  87.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  87.6k|    static_cast<    \
  |  |  247|  87.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  87.6k|    static_cast<    \
  |  |  247|  87.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  87.6k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  17.6k|{
  248|  17.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  17.6k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  17.6k|{
  229|  17.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  17.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 16.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  16.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  16.5k|    static_cast<    \
  |  |  247|  16.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  16.5k|    static_cast<    \
  |  |  247|  16.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  17.6k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|  84.9k|{
  117|  84.9k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  84.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  84.9k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|  84.9k|{
   77|  84.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  84.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  84.9k|    static_cast<    \
  |  |  247|  84.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  84.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  84.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  84.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  84.9k|    static_cast<    \
  |  |  247|  84.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  84.9k|    static_cast<    \
  |  |  247|  84.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  84.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   169k|{
   55|   169k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 147k]
  |  |  ------------------
  ------------------
   56|  21.9k|        return unexpected(result.error());
   57|  21.9k|    }
   58|   147k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   147k|    static_cast<    \
  |  |  247|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   147k|    static_cast<    \
  |  |  247|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   169k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|  84.9k|{
  201|  84.9k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  84.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  84.9k|                                                      format, {});
  203|  84.9k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|  84.9k|{
  163|  84.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  84.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  84.9k|    static_cast<    \
  |  |  247|  84.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  84.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  84.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  84.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  84.9k|    static_cast<    \
  |  |  247|  84.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  84.9k|    static_cast<    \
  |  |  247|  84.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  84.9k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  16.5k|{
  248|  16.5k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  16.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  16.5k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  16.5k|{
  229|  16.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  16.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  16.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  16.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  15.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  15.4k|    static_cast<    \
  |  |  247|  15.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  15.4k|    static_cast<    \
  |  |  247|  15.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  16.5k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   110k|{
  117|   110k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   110k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   110k|{
   77|   110k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   110k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   110k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   110k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   110k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   220k|{
   55|   220k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 198k]
  |  |  ------------------
  ------------------
   56|  21.9k|        return unexpected(result.error());
   57|  21.9k|    }
   58|   198k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   198k|    static_cast<    \
  |  |  247|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   198k|    static_cast<    \
  |  |  247|   198k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   220k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   110k|{
  201|   110k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   110k|                                                      format, {});
  203|   110k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   110k|{
  163|   110k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   110k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   110k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   110k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   110k|    static_cast<    \
  |  |  247|   110k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   110k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  20.7k|{
  248|  20.7k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  20.7k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  20.7k|{
  229|  20.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  20.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  20.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 19.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  20.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  19.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  19.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  19.6k|    static_cast<    \
  |  |  247|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  19.6k|    static_cast<    \
  |  |  247|  19.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  20.7k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|  94.6k|{
  117|  94.6k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  94.6k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|  94.6k|{
   77|  94.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  94.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  94.6k|    static_cast<    \
  |  |  247|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  94.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  94.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  94.6k|    static_cast<    \
  |  |  247|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  94.6k|    static_cast<    \
  |  |  247|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  94.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   189k|{
   55|   189k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 167k]
  |  |  ------------------
  ------------------
   56|  21.9k|        return unexpected(result.error());
   57|  21.9k|    }
   58|   167k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   167k|    static_cast<    \
  |  |  247|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   167k|    static_cast<    \
  |  |  247|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   189k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|  94.6k|{
  201|  94.6k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  94.6k|                                                      format, {});
  203|  94.6k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|  94.6k|{
  163|  94.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  94.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  94.6k|    static_cast<    \
  |  |  247|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  94.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  94.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  94.6k|    static_cast<    \
  |  |  247|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  94.6k|    static_cast<    \
  |  |  247|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  94.6k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  17.6k|{
  248|  17.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  17.6k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  17.6k|{
  229|  17.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  17.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 16.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  16.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  16.5k|    static_cast<    \
  |  |  247|  16.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  16.5k|    static_cast<    \
  |  |  247|  16.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  17.6k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   111k|{
  117|   111k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   111k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   111k|{
   77|   111k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   111k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   111k|    static_cast<    \
  |  |  247|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   111k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   111k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   111k|    static_cast<    \
  |  |  247|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   111k|    static_cast<    \
  |  |  247|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   111k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   223k|{
   55|   223k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 201k]
  |  |  ------------------
  ------------------
   56|  21.9k|        return unexpected(result.error());
   57|  21.9k|    }
   58|   201k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   201k|    static_cast<    \
  |  |  247|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   201k|    static_cast<    \
  |  |  247|   201k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   223k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   111k|{
  201|   111k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   111k|                                                      format, {});
  203|   111k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   111k|{
  163|   111k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   111k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   111k|    static_cast<    \
  |  |  247|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   111k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   111k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   111k|    static_cast<    \
  |  |  247|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   111k|    static_cast<    \
  |  |  247|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   111k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  20.9k|{
  248|  20.9k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  20.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  20.9k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  20.9k|{
  229|  20.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  20.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  20.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 19.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  20.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  19.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  19.8k|    static_cast<    \
  |  |  247|  19.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  19.8k|    static_cast<    \
  |  |  247|  19.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  20.9k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|  95.6k|{
  117|  95.6k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  95.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  95.6k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|  95.6k|{
   77|  95.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  95.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  95.6k|    static_cast<    \
  |  |  247|  95.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  95.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  95.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  95.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  95.6k|    static_cast<    \
  |  |  247|  95.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  95.6k|    static_cast<    \
  |  |  247|  95.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  95.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   191k|{
   55|   191k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   191k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 169k]
  |  |  ------------------
  ------------------
   56|  21.9k|        return unexpected(result.error());
   57|  21.9k|    }
   58|   169k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   169k|    static_cast<    \
  |  |  247|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   169k|    static_cast<    \
  |  |  247|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   191k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|  95.6k|{
  201|  95.6k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  95.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  95.6k|                                                      format, {});
  203|  95.6k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|  95.6k|{
  163|  95.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  95.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  95.6k|    static_cast<    \
  |  |  247|  95.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  95.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  95.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  95.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  95.6k|    static_cast<    \
  |  |  247|  95.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  95.6k|    static_cast<    \
  |  |  247|  95.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  95.6k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  17.8k|{
  248|  17.8k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  17.8k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  17.8k|{
  229|  17.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  17.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 16.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  16.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  16.7k|    static_cast<    \
  |  |  247|  16.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  16.7k|    static_cast<    \
  |  |  247|  16.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  17.8k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  13.1k|{
  117|  13.1k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  13.1k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  13.1k|{
   77|  13.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  13.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  13.1k|    static_cast<    \
  |  |  247|  13.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  13.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  13.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  13.1k|    static_cast<    \
  |  |  247|  13.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  13.1k|    static_cast<    \
  |  |  247|  13.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  13.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  26.3k|{
   55|  26.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  26.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 4.40k]
  |  |  ------------------
  ------------------
   56|  21.9k|        return unexpected(result.error());
   57|  21.9k|    }
   58|  4.40k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.40k|    static_cast<    \
  |  |  247|  4.40k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  4.40k|    static_cast<    \
  |  |  247|  4.40k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  26.3k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  13.1k|{
  201|  13.1k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  13.1k|                                                      format, {});
  203|  13.1k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  13.1k|{
  163|  13.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  13.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  13.1k|    static_cast<    \
  |  |  247|  13.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  13.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  13.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  13.1k|    static_cast<    \
  |  |  247|  13.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  13.1k|    static_cast<    \
  |  |  247|  13.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  13.1k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  1.09k|{
  248|  1.09k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  1.09k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  1.09k|{
  229|  1.09k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  1.09k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  1.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  1.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      2|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      2|    static_cast<    \
  |  |  247|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      2|    static_cast<    \
  |  |  247|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  1.09k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  17.5k|{
  117|  17.5k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  17.5k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  17.5k|{
   77|  17.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  17.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  17.5k|    static_cast<    \
  |  |  247|  17.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  17.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  17.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  17.5k|    static_cast<    \
  |  |  247|  17.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  17.5k|    static_cast<    \
  |  |  247|  17.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  17.5k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  35.0k|{
   55|  35.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  35.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 13.1k]
  |  |  ------------------
  ------------------
   56|  21.9k|        return unexpected(result.error());
   57|  21.9k|    }
   58|  13.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  13.1k|    static_cast<    \
  |  |  247|  13.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  13.1k|    static_cast<    \
  |  |  247|  13.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  35.0k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  17.5k|{
  201|  17.5k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  17.5k|                                                      format, {});
  203|  17.5k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  17.5k|{
  163|  17.5k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  17.5k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  17.5k|    static_cast<    \
  |  |  247|  17.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  17.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  17.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  17.5k|    static_cast<    \
  |  |  247|  17.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  17.5k|    static_cast<    \
  |  |  247|  17.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  17.5k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.19k|{
  248|  2.19k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.19k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.19k|{
  229|  2.19k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 1.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  1.09k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.19k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  18.6k|{
  117|  18.6k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  18.6k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  18.6k|{
   77|  18.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  18.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  18.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  37.2k|{
   55|  37.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  37.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 15.3k]
  |  |  ------------------
  ------------------
   56|  21.9k|        return unexpected(result.error());
   57|  21.9k|    }
   58|  15.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  37.2k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  18.6k|{
  201|  18.6k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  18.6k|                                                      format, {});
  203|  18.6k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  18.6k|{
  163|  18.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  18.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  18.6k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.19k|{
  248|  2.19k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.19k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.19k|{
  229|  2.19k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 1.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  1.09k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.19k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  18.6k|{
  117|  18.6k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  18.6k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  18.6k|{
   77|  18.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  18.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  18.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  37.2k|{
   55|  37.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  37.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 15.3k]
  |  |  ------------------
  ------------------
   56|  21.9k|        return unexpected(result.error());
   57|  21.9k|    }
   58|  15.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  37.2k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  18.6k|{
  201|  18.6k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  18.6k|                                                      format, {});
  203|  18.6k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  18.6k|{
  163|  18.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  18.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  18.6k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.19k|{
  248|  2.19k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.19k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.19k|{
  229|  2.19k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 1.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  1.09k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.19k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  18.6k|{
  117|  18.6k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  18.6k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  18.6k|{
   77|  18.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  18.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  18.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  37.2k|{
   55|  37.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  37.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 15.3k]
  |  |  ------------------
  ------------------
   56|  21.9k|        return unexpected(result.error());
   57|  21.9k|    }
   58|  15.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  37.2k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  18.6k|{
  201|  18.6k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  18.6k|                                                      format, {});
  203|  18.6k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  18.6k|{
  163|  18.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  18.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  18.6k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.19k|{
  248|  2.19k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.19k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.19k|{
  229|  2.19k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 1.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  1.09k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.19k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  18.6k|{
  117|  18.6k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  18.6k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  18.6k|{
   77|  18.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  18.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  18.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  18.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  37.2k|{
   55|  37.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  37.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.9k, False: 15.3k]
  |  |  ------------------
  ------------------
   56|  21.9k|        return unexpected(result.error());
   57|  21.9k|    }
   58|  15.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  15.3k|    static_cast<    \
  |  |  247|  15.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  37.2k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  18.6k|{
  201|  18.6k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  18.6k|                                                      format, {});
  203|  18.6k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  18.6k|{
  163|  18.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  18.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  18.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  18.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  18.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  18.6k|    static_cast<    \
  |  |  247|  18.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  18.6k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.19k|{
  248|  2.19k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.19k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.19k|{
  229|  2.19k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.19k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 1.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  1.09k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  1.09k|    static_cast<    \
  |  |  247|  1.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.19k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|  92.1k|{
   77|  92.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  92.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  92.1k|    static_cast<    \
  |  |  247|  92.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  92.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  92.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  92.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  92.1k|    static_cast<    \
  |  |  247|  92.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  92.1k|    static_cast<    \
  |  |  247|  92.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  92.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   184k|{
   55|   184k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.4k, False: 143k]
  |  |  ------------------
  ------------------
   56|  40.4k|        return unexpected(result.error());
   57|  40.4k|    }
   58|   143k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   143k|    static_cast<    \
  |  |  247|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   143k|    static_cast<    \
  |  |  247|   143k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   184k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|  92.1k|{
  163|  92.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  92.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  92.1k|    static_cast<    \
  |  |  247|  92.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  92.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  92.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  92.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  92.1k|    static_cast<    \
  |  |  247|  92.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  92.1k|    static_cast<    \
  |  |  247|  92.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  92.1k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  17.6k|{
  229|  17.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  17.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  15.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  15.6k|    static_cast<    \
  |  |  247|  15.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  15.6k|    static_cast<    \
  |  |  247|  15.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  17.6k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|  89.7k|{
   77|  89.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  89.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  89.7k|    static_cast<    \
  |  |  247|  89.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  89.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  89.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  89.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.7k|    static_cast<    \
  |  |  247|  89.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.7k|    static_cast<    \
  |  |  247|  89.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  89.7k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   179k|{
   55|   179k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.4k, False: 139k]
  |  |  ------------------
  ------------------
   56|  40.4k|        return unexpected(result.error());
   57|  40.4k|    }
   58|   139k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   139k|    static_cast<    \
  |  |  247|   139k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   139k|    static_cast<    \
  |  |  247|   139k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   179k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|  89.7k|{
  163|  89.7k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  89.7k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  89.7k|    static_cast<    \
  |  |  247|  89.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  89.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  89.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  89.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.7k|    static_cast<    \
  |  |  247|  89.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.7k|    static_cast<    \
  |  |  247|  89.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  89.7k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  16.5k|{
  229|  16.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  16.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  16.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  16.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  14.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  14.5k|    static_cast<    \
  |  |  247|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  14.5k|    static_cast<    \
  |  |  247|  14.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  16.5k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   112k|{
   77|   112k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   112k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   112k|    static_cast<    \
  |  |  247|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   112k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   112k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   112k|    static_cast<    \
  |  |  247|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   112k|    static_cast<    \
  |  |  247|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   112k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   224k|{
   55|   224k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.4k, False: 184k]
  |  |  ------------------
  ------------------
   56|  40.4k|        return unexpected(result.error());
   57|  40.4k|    }
   58|   184k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   184k|    static_cast<    \
  |  |  247|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   184k|    static_cast<    \
  |  |  247|   184k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   224k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   112k|{
  163|   112k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   112k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   112k|    static_cast<    \
  |  |  247|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   112k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   112k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   112k|    static_cast<    \
  |  |  247|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   112k|    static_cast<    \
  |  |  247|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   112k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  20.2k|{
  229|  20.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  20.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  20.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 18.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  20.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  18.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  18.2k|    static_cast<    \
  |  |  247|  18.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  18.2k|    static_cast<    \
  |  |  247|  18.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  20.2k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|  98.9k|{
   77|  98.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  98.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  98.9k|    static_cast<    \
  |  |  247|  98.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  98.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  98.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  98.9k|    static_cast<    \
  |  |  247|  98.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  98.9k|    static_cast<    \
  |  |  247|  98.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  98.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   197k|{
   55|   197k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.4k, False: 157k]
  |  |  ------------------
  ------------------
   56|  40.4k|        return unexpected(result.error());
   57|  40.4k|    }
   58|   157k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   157k|    static_cast<    \
  |  |  247|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   157k|    static_cast<    \
  |  |  247|   157k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   197k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|  98.9k|{
  163|  98.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  98.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  98.9k|    static_cast<    \
  |  |  247|  98.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  98.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  98.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  98.9k|    static_cast<    \
  |  |  247|  98.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  98.9k|    static_cast<    \
  |  |  247|  98.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  98.9k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  17.6k|{
  229|  17.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  17.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  15.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  15.6k|    static_cast<    \
  |  |  247|  15.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  15.6k|    static_cast<    \
  |  |  247|  15.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  17.6k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   113k|{
   77|   113k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   113k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   113k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   113k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   113k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   227k|{
   55|   227k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.4k, False: 186k]
  |  |  ------------------
  ------------------
   56|  40.4k|        return unexpected(result.error());
   57|  40.4k|    }
   58|   186k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   186k|    static_cast<    \
  |  |  247|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   186k|    static_cast<    \
  |  |  247|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   227k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   113k|{
  163|   113k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   113k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   113k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   113k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   113k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  20.5k|{
  229|  20.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  20.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  20.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 18.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  20.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  18.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  18.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  18.4k|    static_cast<    \
  |  |  247|  18.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  18.4k|    static_cast<    \
  |  |  247|  18.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  20.5k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|  99.8k|{
   77|  99.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  99.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  99.8k|    static_cast<    \
  |  |  247|  99.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  99.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  99.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  99.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.8k|    static_cast<    \
  |  |  247|  99.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.8k|    static_cast<    \
  |  |  247|  99.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  99.8k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   199k|{
   55|   199k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.4k, False: 159k]
  |  |  ------------------
  ------------------
   56|  40.4k|        return unexpected(result.error());
   57|  40.4k|    }
   58|   159k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   159k|    static_cast<    \
  |  |  247|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   159k|    static_cast<    \
  |  |  247|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   199k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|  99.8k|{
  163|  99.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  99.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  99.8k|    static_cast<    \
  |  |  247|  99.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  99.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  99.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  99.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.8k|    static_cast<    \
  |  |  247|  99.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  99.8k|    static_cast<    \
  |  |  247|  99.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  99.8k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  17.7k|{
  229|  17.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  17.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  15.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  15.7k|    static_cast<    \
  |  |  247|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  17.7k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  24.2k|{
   77|  24.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  24.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  24.2k|    static_cast<    \
  |  |  247|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  24.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  24.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.2k|    static_cast<    \
  |  |  247|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.2k|    static_cast<    \
  |  |  247|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  24.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  48.5k|{
   55|  48.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.4k, False: 8.11k]
  |  |  ------------------
  ------------------
   56|  40.4k|        return unexpected(result.error());
   57|  40.4k|    }
   58|  8.11k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  8.11k|    static_cast<    \
  |  |  247|  8.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  8.11k|    static_cast<    \
  |  |  247|  8.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  48.5k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  24.2k|{
  163|  24.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  24.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  24.2k|    static_cast<    \
  |  |  247|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  24.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  24.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.2k|    static_cast<    \
  |  |  247|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.2k|    static_cast<    \
  |  |  247|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  24.2k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.02k|{
  229|  2.02k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.02k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 3]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  2.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      3|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      3|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      3|    static_cast<    \
  |  |  247|      3|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      3|    static_cast<    \
  |  |  247|      3|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.02k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  24.2k|{
   77|  24.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  24.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  24.2k|    static_cast<    \
  |  |  247|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  24.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  24.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.2k|    static_cast<    \
  |  |  247|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.2k|    static_cast<    \
  |  |  247|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  24.2k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  48.5k|{
   55|  48.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.4k, False: 8.11k]
  |  |  ------------------
  ------------------
   56|  40.4k|        return unexpected(result.error());
   57|  40.4k|    }
   58|  8.11k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  8.11k|    static_cast<    \
  |  |  247|  8.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  8.11k|    static_cast<    \
  |  |  247|  8.11k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  48.5k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  24.2k|{
  163|  24.2k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  24.2k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  24.2k|    static_cast<    \
  |  |  247|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  24.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  24.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.2k|    static_cast<    \
  |  |  247|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  24.2k|    static_cast<    \
  |  |  247|  24.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  24.2k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.02k|{
  229|  2.02k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.02k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.02k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.02k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.02k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 3]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  2.02k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      3|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      3|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      3|    static_cast<    \
  |  |  247|      3|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      3|    static_cast<    \
  |  |  247|      3|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.02k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  34.3k|{
   77|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  34.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  34.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  68.7k|{
   55|  68.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.4k, False: 28.2k]
  |  |  ------------------
  ------------------
   56|  40.4k|        return unexpected(result.error());
   57|  40.4k|    }
   58|  28.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  28.2k|    static_cast<    \
  |  |  247|  28.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  28.2k|    static_cast<    \
  |  |  247|  28.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  68.7k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  34.3k|{
  163|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  34.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  34.3k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.04k|{
  229|  4.04k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.04k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 2.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  4.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.02k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.02k|    static_cast<    \
  |  |  247|  2.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.02k|    static_cast<    \
  |  |  247|  2.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.04k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  34.3k|{
   77|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  34.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  34.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  68.7k|{
   55|  68.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.4k, False: 28.2k]
  |  |  ------------------
  ------------------
   56|  40.4k|        return unexpected(result.error());
   57|  40.4k|    }
   58|  28.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  28.2k|    static_cast<    \
  |  |  247|  28.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  28.2k|    static_cast<    \
  |  |  247|  28.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  68.7k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  34.3k|{
  163|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  34.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  34.3k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.04k|{
  229|  4.04k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.04k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 2.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  4.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.02k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.02k|    static_cast<    \
  |  |  247|  2.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.02k|    static_cast<    \
  |  |  247|  2.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.04k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  34.3k|{
   77|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  34.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  34.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  68.7k|{
   55|  68.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.4k, False: 28.2k]
  |  |  ------------------
  ------------------
   56|  40.4k|        return unexpected(result.error());
   57|  40.4k|    }
   58|  28.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  28.2k|    static_cast<    \
  |  |  247|  28.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  28.2k|    static_cast<    \
  |  |  247|  28.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  68.7k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  34.3k|{
  163|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  34.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  34.3k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.04k|{
  229|  4.04k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.04k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 2.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  4.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.02k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.02k|    static_cast<    \
  |  |  247|  2.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.02k|    static_cast<    \
  |  |  247|  2.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.04k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  34.3k|{
   77|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  34.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  34.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  68.7k|{
   55|  68.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 40.4k, False: 28.2k]
  |  |  ------------------
  ------------------
   56|  40.4k|        return unexpected(result.error());
   57|  40.4k|    }
   58|  28.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  28.2k|    static_cast<    \
  |  |  247|  28.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  28.2k|    static_cast<    \
  |  |  247|  28.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  68.7k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  34.3k|{
  163|  34.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  34.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  34.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  34.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  34.3k|    static_cast<    \
  |  |  247|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  34.3k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.04k|{
  229|  4.04k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.04k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.02k, False: 2.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.02k|    }                                                  \
  |  |  |  |   70|  4.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.02k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.02k|    static_cast<    \
  |  |  247|  2.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.02k|    static_cast<    \
  |  |  247|  2.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.04k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   222k|{
  486|   222k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   222k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   222k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   222k|    {
  378|   222k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   222k|    {
  360|   222k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   222k|    {
  129|   222k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   222k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   511k|    {
  382|   511k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.62k, False: 509k]
  ------------------
  383|  1.62k|            return false;
  384|  1.62k|        }
  385|   509k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 326k, False: 182k]
  ------------------
  386|   326k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   326k|                                          this->m_current_view.begin(),
  388|   326k|                                          this->m_current_view.end());
  389|   326k|        }
  390|   509k|        m_latest = *m_cursor;
  391|   509k|        ++m_cursor;
  392|   509k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   509k|        return true;
  394|   511k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   222k|    {
   49|   222k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   222k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   222k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   392k|{
  486|   392k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   392k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   392k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   392k|    {
  378|   392k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   392k|    {
  360|   392k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   392k|    {
  129|   392k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   392k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.44M|    {
  382|  1.44M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 2.54k, False: 1.44M]
  ------------------
  383|  2.54k|            return false;
  384|  2.54k|        }
  385|  1.44M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 1.12M, False: 319k]
  ------------------
  386|  1.12M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|  1.12M|                                          this->m_current_view.begin(),
  388|  1.12M|                                          this->m_current_view.end());
  389|  1.12M|        }
  390|  1.44M|        m_latest = *m_cursor;
  391|  1.44M|        ++m_cursor;
  392|  1.44M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.44M|        return true;
  394|  1.44M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   392k|    {
   49|   392k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   392k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   392k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  14.1M|    {
  173|  14.1M|        return m_end == nullptr;
  174|  14.1M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   536k|    {
  189|   536k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 536k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   536k|        return parent()->get_segment_starting_at(position());
  195|   536k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  7.50M|    {
  183|  7.50M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  7.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  7.50M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   536k|    {
   79|   536k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   536k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85.3k, False: 451k]
  |  |  ------------------
  ------------------
   80|   536k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  85.3k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  85.3k|        }
   83|   451k|        const auto start = pos - m_putback_buffer.size();
   84|   451k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   451k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   451k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   536k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   327k|    {
  178|   327k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   327k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  1.18M|    {
  168|  1.18M|        return m_position;
  169|  1.18M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|   666k|    {
  101|   666k|        return m_is_contiguous;
  102|   666k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  36.5M|    {
  173|  36.5M|        return m_end == nullptr;
  174|  36.5M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  1.30M|    {
  189|  1.30M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.30M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.30M|        return parent()->get_segment_starting_at(position());
  195|  1.30M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  19.8M|    {
  183|  19.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  19.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  19.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  19.8M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  1.30M|    {
   79|  1.30M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 334k, False: 973k]
  |  |  ------------------
  ------------------
   80|  1.30M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   334k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   334k|        }
   83|   973k|        const auto start = pos - m_putback_buffer.size();
   84|   973k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   973k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   973k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.30M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|   561k|    {
  178|   561k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   561k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   561k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   561k|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  2.78M|    {
  168|  2.78M|        return m_position;
  169|  2.78M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  1.17M|    {
  101|  1.17M|        return m_is_contiguous;
  102|  1.17M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   222k|{
  322|   222k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 222k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   222k|    return ranges::subrange{forward_iterator{this, 0},
  327|   222k|                            ranges_std::default_sentinel};
  328|   222k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   222k|    {
  155|   222k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   222k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   222k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   222k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   222k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|   842k|    {
  258|   842k|        return x.is_at_end();
  259|   842k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  1.26M|    {
  302|  1.26M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.26M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.26M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.26M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.26M|        return !read_at_position();
  309|  1.26M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  3.72M|    {
  282|  3.72M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  3.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  3.72M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 3.72M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  3.72M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  3.72M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.21M, False: 511k]
  |  |  ------------------
  ------------------
  289|  3.21M|            return true;
  290|  3.21M|        }
  291|       |
  292|  1.02M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 511k, False: 509k]
  ------------------
  293|   511k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.62k, False: 509k]
  ------------------
  294|  1.62k|                return false;
  295|  1.62k|            }
  296|   511k|        }
  297|   509k|        return true;
  298|   511k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  5.07M|    {
   59|  5.07M|        return m_putback_buffer.size() + m_current_view.size();
   60|  5.07M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   425k|    {
  269|   425k|        return !x.is_at_end();
  270|   425k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  1.71M|    {
  217|  1.71M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  1.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  1.71M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 1.71M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  1.71M|        auto res = read_at_position();
  226|  1.71M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  1.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  1.71M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  1.71M|    {
   90|  1.71M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.40M, False: 309k]
  |  |  ------------------
  ------------------
   91|  1.71M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  1.40M|            return m_putback_buffer[pos];
   93|  1.40M|        }
   94|   309k|        const auto start = pos - m_putback_buffer.size();
   95|   309k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   309k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   309k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  1.71M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   739k|    {
  203|   739k|        ++m_position;
  204|   739k|        std::ignore = read_at_position();
  205|   739k|        return *this;
  206|   739k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   615k|    {
  252|   615k|        return !(lhs == rhs);
  253|   615k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|   774k|    {
  247|   774k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 774k, False: 0]
  |  Branch (247:46): [True: 158k, False: 615k]
  ------------------
  248|   774k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   593k|    {
  232|   593k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   593k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   593k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   593k|        return *this;
  235|   593k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   137k|    {
   54|   137k|        sync(0);
   55|   137k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   392k|{
  322|   392k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 392k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   392k|    return ranges::subrange{forward_iterator{this, 0},
  327|   392k|                            ranges_std::default_sentinel};
  328|   392k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   392k|    {
  155|   392k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   392k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   392k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.46M|    {
  258|  1.46M|        return x.is_at_end();
  259|  1.46M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  3.03M|    {
  302|  3.03M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 3.03M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  3.03M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 3.03M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  3.03M|        return !read_at_position();
  309|  3.03M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  9.90M|    {
  282|  9.90M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  9.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  9.90M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 9.90M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  9.90M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  9.90M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 8.46M, False: 1.44M]
  |  |  ------------------
  ------------------
  289|  8.46M|            return true;
  290|  8.46M|        }
  291|       |
  292|  2.88M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.44M, False: 1.44M]
  ------------------
  293|  1.44M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 2.54k, False: 1.44M]
  ------------------
  294|  2.54k|                return false;
  295|  2.54k|            }
  296|  1.44M|        }
  297|  1.44M|        return true;
  298|  1.44M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  13.3M|    {
   59|  13.3M|        return m_putback_buffer.size() + m_current_view.size();
   60|  13.3M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.56M|    {
  269|  1.56M|        return !x.is_at_end();
  270|  1.56M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  4.35M|    {
  217|  4.35M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  4.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  4.35M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 4.35M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  4.35M|        auto res = read_at_position();
  226|  4.35M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  4.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  4.35M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  4.35M|    {
   90|  4.35M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  4.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.01M, False: 1.34M]
  |  |  ------------------
  ------------------
   91|  4.35M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  3.01M|            return m_putback_buffer[pos];
   93|  3.01M|        }
   94|  1.34M|        const auto start = pos - m_putback_buffer.size();
   95|  1.34M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  4.35M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  2.51M|    {
  203|  2.51M|        ++m_position;
  204|  2.51M|        std::ignore = read_at_position();
  205|  2.51M|        return *this;
  206|  2.51M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  1.82M|    {
  252|  1.82M|        return !(lhs == rhs);
  253|  1.82M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  2.10M|    {
  247|  2.10M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 2.10M, False: 0]
  |  Branch (247:46): [True: 455k, False: 1.64M]
  ------------------
  248|  2.10M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|   928k|    {
  232|   928k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   928k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   928k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   928k|        return *this;
  235|   928k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   254k|    {
   54|   254k|        sync(0);
   55|   254k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   182k|{
   72|   182k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   182k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   182k|    }
   75|   182k|    else if constexpr (sizeof(U) == 2) {
   76|   182k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   182k|    }
   78|   182k|    else {
   79|       |        // utf-32
   80|   182k|        static_assert(sizeof(U) == 4);
   81|   182k|        SCN_UNUSED(ch);
   82|   182k|        return 1;
   83|   182k|    }
   84|   182k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   182k|{
   36|   182k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   182k|    SCN_GCC_COMPAT_PUSH
   39|   182k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   182k|    constexpr char lengths[] =
   41|   182k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   182k|        "\1\1\1\1\1\1\1\1"
   43|   182k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   182k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   182k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   182k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   182k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   182k|    SCN_GCC_COMPAT_POP
   50|   182k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  17.9M|{
   72|  17.9M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  17.9M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  17.9M|    }
   75|  17.9M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  17.9M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  17.9M|    }
   78|  17.9M|    else {
   79|       |        // utf-32
   80|  17.9M|        static_assert(sizeof(U) == 4);
   81|  17.9M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  17.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  17.9M|        return 1;
   83|  17.9M|    }
   84|  17.9M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   334k|{
   36|   334k|#define SCN_VISIT(Type)                                         \
   37|   334k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   334k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   334k|    }                                                           \
   40|   334k|    else {                                                      \
   41|   334k|        return vis(monostate_val);                              \
   42|   334k|    }
   43|       |
   44|   334k|    monostate monostate_val{};
   45|       |
   46|   334k|    switch (arg.m_type) {
   47|  53.0k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 53.0k, False: 281k]
  ------------------
   48|  53.0k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  53.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  53.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  53.0k|    }                                                           \
  |  |   40|  53.0k|    else {                                                      \
  |  |   41|  53.0k|        return vis(monostate_val);                              \
  |  |   42|  53.0k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 334k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  62.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 62.1k, False: 272k]
  ------------------
   52|  62.1k|            SCN_VISIT(int);
  ------------------
  |  |   37|  62.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  62.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  62.1k|    }                                                           \
  |  |   40|  62.1k|    else {                                                      \
  |  |   41|  62.1k|        return vis(monostate_val);                              \
  |  |   42|  62.1k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 334k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  62.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 62.9k, False: 271k]
  ------------------
   56|  62.9k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  62.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  62.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  62.9k|    }                                                           \
  |  |   40|  62.9k|    else {                                                      \
  |  |   41|  62.9k|        return vis(monostate_val);                              \
  |  |   42|  62.9k|    }
  ------------------
   57|  49.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 49.7k, False: 284k]
  ------------------
   58|  49.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  49.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  49.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  49.7k|    }                                                           \
  |  |   40|  49.7k|    else {                                                      \
  |  |   41|  49.7k|        return vis(monostate_val);                              \
  |  |   42|  49.7k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 334k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  52.9k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 52.9k, False: 281k]
  ------------------
   62|  52.9k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  52.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  52.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  52.9k|    }                                                           \
  |  |   40|  52.9k|    else {                                                      \
  |  |   41|  52.9k|        return vis(monostate_val);                              \
  |  |   42|  52.9k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 334k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  53.4k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 53.4k, False: 280k]
  ------------------
   66|  53.4k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  53.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  53.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  53.4k|    }                                                           \
  |  |   40|  53.4k|    else {                                                      \
  |  |   41|  53.4k|        return vis(monostate_val);                              \
  |  |   42|  53.4k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 334k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 334k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 334k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 334k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 334k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 334k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 334k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 334k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 334k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 334k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 334k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 334k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 334k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 334k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 334k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 334k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 334k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   334k|            SCN_CLANG_POP
  114|   334k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   334k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  36.1k|{
   36|  36.1k|#define SCN_VISIT(Type)                                         \
   37|  36.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  36.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  36.1k|    }                                                           \
   40|  36.1k|    else {                                                      \
   41|  36.1k|        return vis(monostate_val);                              \
   42|  36.1k|    }
   43|       |
   44|  36.1k|    monostate monostate_val{};
   45|       |
   46|  36.1k|    switch (arg.m_type) {
   47|  3.29k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 3.29k, False: 32.8k]
  ------------------
   48|  3.29k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  3.29k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  3.29k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  3.29k|    }                                                           \
  |  |   40|  3.29k|    else {                                                      \
  |  |   41|  3.29k|        return vis(monostate_val);                              \
  |  |   42|  3.29k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 36.1k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  6.57k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 6.57k, False: 29.5k]
  ------------------
   52|  6.57k|            SCN_VISIT(int);
  ------------------
  |  |   37|  6.57k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.57k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.57k|    }                                                           \
  |  |   40|  6.57k|    else {                                                      \
  |  |   41|  6.57k|        return vis(monostate_val);                              \
  |  |   42|  6.57k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 36.1k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  6.57k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 6.57k, False: 29.5k]
  ------------------
   56|  6.57k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  6.57k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.57k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.57k|    }                                                           \
  |  |   40|  6.57k|    else {                                                      \
  |  |   41|  6.57k|        return vis(monostate_val);                              \
  |  |   42|  6.57k|    }
  ------------------
   57|  6.57k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 6.57k, False: 29.5k]
  ------------------
   58|  6.57k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  6.57k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.57k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.57k|    }                                                           \
  |  |   40|  6.57k|    else {                                                      \
  |  |   41|  6.57k|        return vis(monostate_val);                              \
  |  |   42|  6.57k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 36.1k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  6.57k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 6.57k, False: 29.5k]
  ------------------
   62|  6.57k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  6.57k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.57k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.57k|    }                                                           \
  |  |   40|  6.57k|    else {                                                      \
  |  |   41|  6.57k|        return vis(monostate_val);                              \
  |  |   42|  6.57k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 36.1k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  6.57k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 6.57k, False: 29.5k]
  ------------------
   66|  6.57k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  6.57k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.57k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.57k|    }                                                           \
  |  |   40|  6.57k|    else {                                                      \
  |  |   41|  6.57k|        return vis(monostate_val);                              \
  |  |   42|  6.57k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 36.1k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 36.1k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 36.1k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 36.1k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 36.1k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 36.1k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 36.1k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 36.1k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 36.1k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 36.1k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 36.1k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 36.1k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 36.1k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 36.1k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 36.1k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 36.1k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 36.1k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  36.1k|            SCN_CLANG_POP
  114|  36.1k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  36.1k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   907k|{
   36|   907k|#define SCN_VISIT(Type)                                         \
   37|   907k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   907k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   907k|    }                                                           \
   40|   907k|    else {                                                      \
   41|   907k|        return vis(monostate_val);                              \
   42|   907k|    }
   43|       |
   44|   907k|    monostate monostate_val{};
   45|       |
   46|   907k|    switch (arg.m_type) {
   47|   133k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 133k, False: 774k]
  ------------------
   48|   133k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   133k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   133k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   133k|    }                                                           \
  |  |   40|   133k|    else {                                                      \
  |  |   41|   133k|        return vis(monostate_val);                              \
  |  |   42|   133k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 907k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   172k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 172k, False: 735k]
  ------------------
   52|   172k|            SCN_VISIT(int);
  ------------------
  |  |   37|   172k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   172k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   172k|    }                                                           \
  |  |   40|   172k|    else {                                                      \
  |  |   41|   172k|        return vis(monostate_val);                              \
  |  |   42|   172k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 907k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   175k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 175k, False: 732k]
  ------------------
   56|   175k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   175k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   175k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   175k|    }                                                           \
  |  |   40|   175k|    else {                                                      \
  |  |   41|   175k|        return vis(monostate_val);                              \
  |  |   42|   175k|    }
  ------------------
   57|   130k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 130k, False: 777k]
  ------------------
   58|   130k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   130k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   130k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   130k|    }                                                           \
  |  |   40|   130k|    else {                                                      \
  |  |   41|   130k|        return vis(monostate_val);                              \
  |  |   42|   130k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 907k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   147k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 147k, False: 760k]
  ------------------
   62|   147k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   147k|    }                                                           \
  |  |   40|   147k|    else {                                                      \
  |  |   41|   147k|        return vis(monostate_val);                              \
  |  |   42|   147k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 907k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   149k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 149k, False: 758k]
  ------------------
   66|   149k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   149k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   149k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   149k|    }                                                           \
  |  |   40|   149k|    else {                                                      \
  |  |   41|   149k|        return vis(monostate_val);                              \
  |  |   42|   149k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 907k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 907k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 907k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 907k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 907k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 907k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 907k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 907k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 907k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 907k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 907k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 907k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 907k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 907k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 907k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 907k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 907k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   907k|            SCN_CLANG_POP
  114|   907k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   907k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   146k|{
   36|   146k|#define SCN_VISIT(Type)                                         \
   37|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   146k|    }                                                           \
   40|   146k|    else {                                                      \
   41|   146k|        return vis(monostate_val);                              \
   42|   146k|    }
   43|       |
   44|   146k|    monostate monostate_val{};
   45|       |
   46|   146k|    switch (arg.m_type) {
   47|  17.5k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 17.5k, False: 129k]
  ------------------
   48|  17.5k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  17.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  17.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  17.5k|    }                                                           \
  |  |   40|  17.5k|    else {                                                      \
  |  |   41|  17.5k|        return vis(monostate_val);                              \
  |  |   42|  17.5k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 146k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  26.2k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 26.2k, False: 120k]
  ------------------
   52|  26.2k|            SCN_VISIT(int);
  ------------------
  |  |   37|  26.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.2k|    }                                                           \
  |  |   40|  26.2k|    else {                                                      \
  |  |   41|  26.2k|        return vis(monostate_val);                              \
  |  |   42|  26.2k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 146k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  26.2k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 26.2k, False: 120k]
  ------------------
   56|  26.2k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  26.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.2k|    }                                                           \
  |  |   40|  26.2k|    else {                                                      \
  |  |   41|  26.2k|        return vis(monostate_val);                              \
  |  |   42|  26.2k|    }
  ------------------
   57|  24.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 24.0k, False: 122k]
  ------------------
   58|  24.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  24.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.0k|    }                                                           \
  |  |   40|  24.0k|    else {                                                      \
  |  |   41|  24.0k|        return vis(monostate_val);                              \
  |  |   42|  24.0k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 146k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  26.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 26.2k, False: 120k]
  ------------------
   62|  26.2k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  26.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.2k|    }                                                           \
  |  |   40|  26.2k|    else {                                                      \
  |  |   41|  26.2k|        return vis(monostate_val);                              \
  |  |   42|  26.2k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 146k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  26.2k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 26.2k, False: 120k]
  ------------------
   66|  26.2k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  26.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  26.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  26.2k|    }                                                           \
  |  |   40|  26.2k|    else {                                                      \
  |  |   41|  26.2k|        return vis(monostate_val);                              \
  |  |   42|  26.2k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 146k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 146k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 146k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 146k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 146k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 146k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 146k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 146k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 146k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 146k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 146k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 146k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 146k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 146k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 146k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 146k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 146k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   146k|            SCN_CLANG_POP
  114|   146k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   146k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   331k|{
   36|   331k|#define SCN_VISIT(Type)                                         \
   37|   331k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   331k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   331k|    }                                                           \
   40|   331k|    else {                                                      \
   41|   331k|        return vis(monostate_val);                              \
   42|   331k|    }
   43|       |
   44|   331k|    monostate monostate_val{};
   45|       |
   46|   331k|    switch (arg.m_type) {
   47|  52.9k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 52.9k, False: 278k]
  ------------------
   48|  52.9k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  52.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  52.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  52.9k|    }                                                           \
  |  |   40|  52.9k|    else {                                                      \
  |  |   41|  52.9k|        return vis(monostate_val);                              \
  |  |   42|  52.9k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 331k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  60.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 60.7k, False: 270k]
  ------------------
   52|  60.7k|            SCN_VISIT(int);
  ------------------
  |  |   37|  60.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  60.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  60.7k|    }                                                           \
  |  |   40|  60.7k|    else {                                                      \
  |  |   41|  60.7k|        return vis(monostate_val);                              \
  |  |   42|  60.7k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 331k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  61.5k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 61.5k, False: 269k]
  ------------------
   56|  61.5k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  61.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  61.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  61.5k|    }                                                           \
  |  |   40|  61.5k|    else {                                                      \
  |  |   41|  61.5k|        return vis(monostate_val);                              \
  |  |   42|  61.5k|    }
  ------------------
   57|  49.7k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 49.7k, False: 281k]
  ------------------
   58|  49.7k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  49.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  49.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  49.7k|    }                                                           \
  |  |   40|  49.7k|    else {                                                      \
  |  |   41|  49.7k|        return vis(monostate_val);                              \
  |  |   42|  49.7k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 331k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  52.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 52.8k, False: 278k]
  ------------------
   62|  52.8k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  52.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  52.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  52.8k|    }                                                           \
  |  |   40|  52.8k|    else {                                                      \
  |  |   41|  52.8k|        return vis(monostate_val);                              \
  |  |   42|  52.8k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 331k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  53.3k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 53.3k, False: 277k]
  ------------------
   66|  53.3k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  53.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  53.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  53.3k|    }                                                           \
  |  |   40|  53.3k|    else {                                                      \
  |  |   41|  53.3k|        return vis(monostate_val);                              \
  |  |   42|  53.3k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 331k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 331k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 331k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 331k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 331k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 331k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 331k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 331k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 331k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 331k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 331k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 331k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 331k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 331k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 331k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 331k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 331k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   331k|            SCN_CLANG_POP
  114|   331k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   331k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   919k|{
   36|   919k|#define SCN_VISIT(Type)                                         \
   37|   919k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   919k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   919k|    }                                                           \
   40|   919k|    else {                                                      \
   41|   919k|        return vis(monostate_val);                              \
   42|   919k|    }
   43|       |
   44|   919k|    monostate monostate_val{};
   45|       |
   46|   919k|    switch (arg.m_type) {
   47|   136k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 136k, False: 782k]
  ------------------
   48|   136k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   136k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   136k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   136k|    }                                                           \
  |  |   40|   136k|    else {                                                      \
  |  |   41|   136k|        return vis(monostate_val);                              \
  |  |   42|   136k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 919k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   171k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 171k, False: 747k]
  ------------------
   52|   171k|            SCN_VISIT(int);
  ------------------
  |  |   37|   171k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   171k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   171k|    }                                                           \
  |  |   40|   171k|    else {                                                      \
  |  |   41|   171k|        return vis(monostate_val);                              \
  |  |   42|   171k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 919k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   174k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 174k, False: 745k]
  ------------------
   56|   174k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   174k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   174k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   174k|    }                                                           \
  |  |   40|   174k|    else {                                                      \
  |  |   41|   174k|        return vis(monostate_val);                              \
  |  |   42|   174k|    }
  ------------------
   57|   134k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 134k, False: 785k]
  ------------------
   58|   134k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   134k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   134k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   134k|    }                                                           \
  |  |   40|   134k|    else {                                                      \
  |  |   41|   134k|        return vis(monostate_val);                              \
  |  |   42|   134k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 919k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   150k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 150k, False: 769k]
  ------------------
   62|   150k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   150k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   150k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   150k|    }                                                           \
  |  |   40|   150k|    else {                                                      \
  |  |   41|   150k|        return vis(monostate_val);                              \
  |  |   42|   150k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 919k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   152k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 152k, False: 767k]
  ------------------
   66|   152k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   152k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   152k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   152k|    }                                                           \
  |  |   40|   152k|    else {                                                      \
  |  |   41|   152k|        return vis(monostate_val);                              \
  |  |   42|   152k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 919k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 919k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 919k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 919k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 919k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 919k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 919k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 919k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 919k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 919k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 919k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 919k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 919k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 919k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 919k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 919k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 919k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   919k|            SCN_CLANG_POP
  114|   919k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   919k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  60.6k|{
   36|  60.6k|#define SCN_VISIT(Type)                                         \
   37|  60.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  60.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  60.6k|    }                                                           \
   40|  60.6k|    else {                                                      \
   41|  60.6k|        return vis(monostate_val);                              \
   42|  60.6k|    }
   43|       |
   44|  60.6k|    monostate monostate_val{};
   45|       |
   46|  60.6k|    switch (arg.m_type) {
   47|  6.07k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 6.07k, False: 54.5k]
  ------------------
   48|  6.07k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  6.07k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.07k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.07k|    }                                                           \
  |  |   40|  6.07k|    else {                                                      \
  |  |   41|  6.07k|        return vis(monostate_val);                              \
  |  |   42|  6.07k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 60.6k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  12.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 12.1k, False: 48.5k]
  ------------------
   52|  12.1k|            SCN_VISIT(int);
  ------------------
  |  |   37|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.1k|    }                                                           \
  |  |   40|  12.1k|    else {                                                      \
  |  |   41|  12.1k|        return vis(monostate_val);                              \
  |  |   42|  12.1k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 60.6k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  12.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 12.1k, False: 48.5k]
  ------------------
   56|  12.1k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.1k|    }                                                           \
  |  |   40|  12.1k|    else {                                                      \
  |  |   41|  12.1k|        return vis(monostate_val);                              \
  |  |   42|  12.1k|    }
  ------------------
   57|  6.07k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 6.07k, False: 54.5k]
  ------------------
   58|  6.07k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  6.07k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  6.07k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  6.07k|    }                                                           \
  |  |   40|  6.07k|    else {                                                      \
  |  |   41|  6.07k|        return vis(monostate_val);                              \
  |  |   42|  6.07k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 60.6k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  12.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 12.1k, False: 48.5k]
  ------------------
   62|  12.1k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.1k|    }                                                           \
  |  |   40|  12.1k|    else {                                                      \
  |  |   41|  12.1k|        return vis(monostate_val);                              \
  |  |   42|  12.1k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 60.6k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  12.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 12.1k, False: 48.5k]
  ------------------
   66|  12.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  12.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  12.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  12.1k|    }                                                           \
  |  |   40|  12.1k|    else {                                                      \
  |  |   41|  12.1k|        return vis(monostate_val);                              \
  |  |   42|  12.1k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 60.6k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 60.6k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 60.6k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 60.6k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 60.6k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 60.6k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 60.6k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 60.6k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 60.6k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 60.6k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 60.6k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 60.6k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 60.6k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 60.6k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 60.6k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 60.6k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 60.6k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  60.6k|            SCN_CLANG_POP
  114|  60.6k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  60.6k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   258k|{
   36|   258k|#define SCN_VISIT(Type)                                         \
   37|   258k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   258k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   258k|    }                                                           \
   40|   258k|    else {                                                      \
   41|   258k|        return vis(monostate_val);                              \
   42|   258k|    }
   43|       |
   44|   258k|    monostate monostate_val{};
   45|       |
   46|   258k|    switch (arg.m_type) {
   47|  32.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 32.3k, False: 226k]
  ------------------
   48|  32.3k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  32.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  32.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  32.3k|    }                                                           \
  |  |   40|  32.3k|    else {                                                      \
  |  |   41|  32.3k|        return vis(monostate_val);                              \
  |  |   42|  32.3k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 258k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  48.5k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 48.5k, False: 210k]
  ------------------
   52|  48.5k|            SCN_VISIT(int);
  ------------------
  |  |   37|  48.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  48.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  48.5k|    }                                                           \
  |  |   40|  48.5k|    else {                                                      \
  |  |   41|  48.5k|        return vis(monostate_val);                              \
  |  |   42|  48.5k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 258k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  48.5k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 48.5k, False: 210k]
  ------------------
   56|  48.5k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  48.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  48.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  48.5k|    }                                                           \
  |  |   40|  48.5k|    else {                                                      \
  |  |   41|  48.5k|        return vis(monostate_val);                              \
  |  |   42|  48.5k|    }
  ------------------
   57|  32.3k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 32.3k, False: 226k]
  ------------------
   58|  32.3k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  32.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  32.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  32.3k|    }                                                           \
  |  |   40|  32.3k|    else {                                                      \
  |  |   41|  32.3k|        return vis(monostate_val);                              \
  |  |   42|  32.3k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 258k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  48.5k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 48.5k, False: 210k]
  ------------------
   62|  48.5k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  48.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  48.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  48.5k|    }                                                           \
  |  |   40|  48.5k|    else {                                                      \
  |  |   41|  48.5k|        return vis(monostate_val);                              \
  |  |   42|  48.5k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 258k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  48.5k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 48.5k, False: 210k]
  ------------------
   66|  48.5k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  48.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  48.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  48.5k|    }                                                           \
  |  |   40|  48.5k|    else {                                                      \
  |  |   41|  48.5k|        return vis(monostate_val);                              \
  |  |   42|  48.5k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 258k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 258k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 258k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 258k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 258k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 258k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 258k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 258k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 258k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 258k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 258k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 258k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 258k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 258k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 258k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 258k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 258k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   258k|            SCN_CLANG_POP
  114|   258k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   258k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   585k|{
  174|   585k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   585k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   585k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|   585k|{
  111|   585k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   585k|    auto result = vscan_impl(buffer, format, args);
  114|   585k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 65.7k, False: 519k]
  |  |  ------------------
  ------------------
  115|  65.7k|        return unexpected(result.error());
  116|  65.7k|    }
  117|   519k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   519k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   585k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   585k|{
  192|   585k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   585k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   585k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|   585k|{
  127|   585k|#if !SCN_DISABLE_LOCALE
  128|   585k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   585k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   585k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   585k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   585k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 65.7k, False: 519k]
  |  |  ------------------
  ------------------
  135|  65.7k|        return unexpected(result.error());
  136|  65.7k|    }
  137|   519k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   519k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   585k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   111k|{
  205|   111k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   111k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   111k|{
  151|   111k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   111k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   111k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.57k, False: 104k]
  |  |  ------------------
  ------------------
  155|  6.57k|        return unexpected(result.error());
  156|  6.57k|    }
  157|   104k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   111k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   105k|{
  174|   105k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   105k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   105k|{
  111|   105k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   105k|    auto result = vscan_impl(buffer, format, args);
  114|   105k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 65.7k, False: 39.4k]
  |  |  ------------------
  ------------------
  115|  65.7k|        return unexpected(result.error());
  116|  65.7k|    }
  117|  39.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   105k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   105k|{
  192|   105k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   105k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   105k|{
  127|   105k|#if !SCN_DISABLE_LOCALE
  128|   105k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   105k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   105k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   105k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   105k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 65.7k, False: 39.4k]
  |  |  ------------------
  ------------------
  135|  65.7k|        return unexpected(result.error());
  136|  65.7k|    }
  137|  39.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  39.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   105k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  12.0k|{
  205|  12.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  12.0k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  12.0k|{
  151|  12.0k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  12.0k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  12.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.57k, False: 5.47k]
  |  |  ------------------
  ------------------
  155|  6.57k|        return unexpected(result.error());
  156|  6.57k|    }
  157|  5.47k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  12.0k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|   606k|{
  111|   606k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   606k|    auto result = vscan_impl(buffer, format, args);
  114|   606k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 121k, False: 485k]
  |  |  ------------------
  ------------------
  115|   121k|        return unexpected(result.error());
  116|   121k|    }
  117|   485k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   485k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   606k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|   606k|{
  127|   606k|#if !SCN_DISABLE_LOCALE
  128|   606k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   606k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   606k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   606k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   606k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 121k, False: 485k]
  |  |  ------------------
  ------------------
  135|   121k|        return unexpected(result.error());
  136|   121k|    }
  137|   485k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   485k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   606k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   110k|{
  151|   110k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   110k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   110k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.1k, False: 98.3k]
  |  |  ------------------
  ------------------
  155|  12.1k|        return unexpected(result.error());
  156|  12.1k|    }
  157|  98.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  98.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   110k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   185k|{
  111|   185k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   185k|    auto result = vscan_impl(buffer, format, args);
  114|   185k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 121k, False: 64.7k]
  |  |  ------------------
  ------------------
  115|   121k|        return unexpected(result.error());
  116|   121k|    }
  117|  64.7k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  64.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   185k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   185k|{
  127|   185k|#if !SCN_DISABLE_LOCALE
  128|   185k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   185k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   185k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   185k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   185k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 121k, False: 64.7k]
  |  |  ------------------
  ------------------
  135|   121k|        return unexpected(result.error());
  136|   121k|    }
  137|  64.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  64.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   185k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  20.2k|{
  151|  20.2k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  20.2k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  20.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.1k, False: 8.09k]
  |  |  ------------------
  ------------------
  155|  12.1k|        return unexpected(result.error());
  156|  12.1k|    }
  157|  8.09k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  8.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  20.2k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|  92.1k|{
   90|  92.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  92.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  92.1k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   606k|{
   45|   606k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   606k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|  92.1k|{
  125|  92.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  92.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  92.1k|                                                         format, {});
  127|  92.1k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   606k|{
   61|   606k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   606k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  17.6k|{
  159|  17.6k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  17.6k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   110k|{
   73|   110k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   110k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|  89.7k|{
   90|  89.7k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  89.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  89.7k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|  89.7k|{
  125|  89.7k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  89.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  89.7k|                                                         format, {});
  127|  89.7k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  16.5k|{
  159|  16.5k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  16.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  16.5k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   112k|{
   90|   112k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   112k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   112k|{
  125|   112k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   112k|                                                         format, {});
  127|   112k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  20.2k|{
  159|  20.2k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  20.2k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|  98.9k|{
   90|  98.9k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  98.9k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|  98.9k|{
  125|  98.9k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  98.9k|                                                         format, {});
  127|  98.9k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  17.6k|{
  159|  17.6k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  17.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  17.6k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   113k|{
   90|   113k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   113k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   113k|{
  125|   113k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   113k|                                                         format, {});
  127|   113k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  20.5k|{
  159|  20.5k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  20.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  20.5k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|  99.8k|{
   90|  99.8k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  99.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  99.8k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|  99.8k|{
  125|  99.8k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  99.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  99.8k|                                                         format, {});
  127|  99.8k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  17.7k|{
  159|  17.7k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  17.7k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  24.2k|{
   90|  24.2k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  24.2k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   185k|{
   45|   185k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   185k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  24.2k|{
  125|  24.2k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  24.2k|                                                         format, {});
  127|  24.2k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   185k|{
   61|   185k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   185k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   185k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  2.02k|{
  159|  2.02k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  2.02k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  20.2k|{
   73|  20.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  20.2k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  24.2k|{
   90|  24.2k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  24.2k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  24.2k|{
  125|  24.2k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  24.2k|                                                         format, {});
  127|  24.2k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  2.02k|{
  159|  2.02k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  2.02k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  34.3k|{
   90|  34.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  34.3k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  34.3k|{
  125|  34.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  34.3k|                                                         format, {});
  127|  34.3k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  4.04k|{
  159|  4.04k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  4.04k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  34.3k|{
   90|  34.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  34.3k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  34.3k|{
  125|  34.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  34.3k|                                                         format, {});
  127|  34.3k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  4.04k|{
  159|  4.04k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  4.04k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  34.3k|{
   90|  34.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  34.3k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  34.3k|{
  125|  34.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  34.3k|                                                         format, {});
  127|  34.3k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  4.04k|{
  159|  4.04k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  4.04k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  34.3k|{
   90|  34.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  34.3k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  34.3k|{
  125|  34.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  34.3k|                                                         format, {});
  127|  34.3k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  4.04k|{
  159|  4.04k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  4.04k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  1.47M|            {
 2693|  1.47M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.47M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  1.47M|            {
 2672|  1.47M|                return decay_copy(t.begin());
 2673|  1.47M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|  40.4M|    {
 2606|  40.4M|        return std::forward<T>(t);
 2607|  40.4M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  2.50M|            {
 3178|  2.50M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.50M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.50M|            {
 3158|  2.50M|                return t.data();
 3159|  2.50M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  2.50M|    {
 6095|  2.50M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 14.2k, False: 2.49M]
  ------------------
 6096|  2.50M|                   ? nullptr
 6097|  2.50M|                   : std::addressof(*ranges::begin(derived()));
 6098|  2.50M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  2.50M|            {
 3127|  2.50M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.50M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  2.50M|            {
 3098|  2.50M|                return bool((std::forward<T>(t).empty()));
 3099|  2.50M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  5.87M|        {
 6454|  5.87M|            return data_.begin_ == data_.end_;
 6455|  5.87M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  5.00M|    {
 6049|  5.00M|        return static_cast<const D&>(*this);
 6050|  5.00M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  10.2M|            {
 2693|  10.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  10.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  10.2M|            {
 2672|  10.2M|                return decay_copy(t.begin());
 2673|  10.2M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  23.4M|        {
 6444|  23.4M|            return data_.begin_;
 6445|  23.4M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  2.50M|            {
 3038|  2.50M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  2.50M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  2.50M|            {
 3000|  2.50M|                return decay_copy(std::forward<T>(t).size());
 3001|  2.50M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  10.6M|    {
 2606|  10.6M|        return std::forward<T>(t);
 2607|  10.6M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  5.91M|        {
 6462|  5.91M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  5.91M|                return data_.size_;
 6464|  5.91M|            }
 6465|  5.91M|            else {
 6466|  5.91M|                return data_.end_ - data_.begin_;
 6467|  5.91M|            }
 6468|  5.91M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  4.31M|            {
 3788|  4.31M|                ranges::advance(x, n);
 3789|  4.31M|                return x;
 3790|  4.31M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  4.31M|            {
 3678|  4.31M|                fn::impl(i, n);
 3679|  4.31M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  4.31M|            {
 3562|  4.31M|                r += n;
 3563|  4.31M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  12.2M|            {
 2693|  12.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  12.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  12.2M|            {
 2672|  12.2M|                return decay_copy(t.begin());
 2673|  12.2M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  6.09M|            {
 2759|  6.09M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  6.09M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  6.09M|            {
 2739|  6.09M|                return decay_copy(std::forward<T>(t).end());
 2740|  6.09M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  15.6M|        {
 6449|  15.6M|            return data_.end_;
 6450|  15.6M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  2.61M|            {
 2759|  2.61M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.61M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  2.61M|            {
 2739|  2.61M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.61M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  10.0M|        {
 6375|  10.0M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  10.0M|        {
 6294|  10.0M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   137k|            {
 2693|   137k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   137k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   137k|            {
 2672|   137k|                return decay_copy(t.begin());
 2673|   137k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  1.34M|    {
 2606|  1.34M|        return std::forward<T>(t);
 2607|  1.34M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   306k|            {
 2693|   306k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   306k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   306k|            {
 2672|   306k|                return decay_copy(t.begin());
 2673|   306k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   390k|        {
 6444|   390k|            return data_.begin_;
 6445|   390k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   595k|            {
 2759|   595k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   595k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   595k|            {
 2739|   595k|                return decay_copy(std::forward<T>(t).end());
 2740|   595k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   595k|        {
 6449|   595k|            return data_.end_;
 6450|   595k|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  84.3k|            {
 3788|  84.3k|                ranges::advance(x, n);
 3789|  84.3k|                return x;
 3790|  84.3k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  84.3k|            {
 3678|  84.3k|                fn::impl(i, n);
 3679|  84.3k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  84.3k|            {
 3562|  84.3k|                r += n;
 3563|  84.3k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   222k|            {
 2759|   222k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   222k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   222k|            {
 2739|   222k|                return decay_copy(std::forward<T>(t).end());
 2740|   222k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   306k|        {
 6375|   306k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   306k|        {
 6294|   306k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  84.3k|            {
 2693|  84.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  84.3k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  84.3k|            {
 2672|  84.3k|                return decay_copy(t.begin());
 2673|  84.3k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|   575k|            {
 2693|   575k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   575k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|   575k|            {
 2672|   575k|                return decay_copy(t.begin());
 2673|   575k|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|  60.5M|    {
 2606|  60.5M|        return std::forward<T>(t);
 2607|  60.5M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  1.32M|            {
 3178|  1.32M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  1.32M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  1.32M|            {
 3158|  1.32M|                return t.data();
 3159|  1.32M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  1.32M|    {
 6095|  1.32M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 15.1k, False: 1.30M]
  ------------------
 6096|  1.32M|                   ? nullptr
 6097|  1.32M|                   : std::addressof(*ranges::begin(derived()));
 6098|  1.32M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  1.32M|            {
 3127|  1.32M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  1.32M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  1.32M|            {
 3098|  1.32M|                return bool((std::forward<T>(t).empty()));
 3099|  1.32M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  2.16M|        {
 6454|  2.16M|            return data_.begin_ == data_.end_;
 6455|  2.16M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  2.63M|    {
 6049|  2.63M|        return static_cast<const D&>(*this);
 6050|  2.63M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  10.2M|            {
 2693|  10.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  10.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  10.2M|            {
 2672|  10.2M|                return decay_copy(t.begin());
 2673|  10.2M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  25.9M|        {
 6444|  25.9M|            return data_.begin_;
 6445|  25.9M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  1.32M|            {
 3038|  1.32M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  1.32M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  1.32M|            {
 3000|  1.32M|                return decay_copy(std::forward<T>(t).size());
 3001|  1.32M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  4.74M|        {
 6462|  4.74M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  4.74M|                return data_.size_;
 6464|  4.74M|            }
 6465|  4.74M|            else {
 6466|  4.74M|                return data_.end_ - data_.begin_;
 6467|  4.74M|            }
 6468|  4.74M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  5.40M|            {
 3788|  5.40M|                ranges::advance(x, n);
 3789|  5.40M|                return x;
 3790|  5.40M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  5.40M|            {
 3678|  5.40M|                fn::impl(i, n);
 3679|  5.40M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  5.40M|            {
 3562|  5.40M|                r += n;
 3563|  5.40M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  14.6M|            {
 2693|  14.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  14.6M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  14.6M|            {
 2672|  14.6M|                return decay_copy(t.begin());
 2673|  14.6M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  6.07M|            {
 2759|  6.07M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  6.07M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  6.07M|            {
 2739|  6.07M|                return decay_copy(std::forward<T>(t).end());
 2740|  6.07M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  34.3M|        {
 6449|  34.3M|            return data_.end_;
 6450|  34.3M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  2.37M|            {
 2759|  2.37M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.37M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  2.37M|            {
 2739|  2.37M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.37M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  10.1M|        {
 6375|  10.1M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  10.1M|        {
 6294|  10.1M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   254k|            {
 2693|   254k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   254k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   254k|            {
 2672|   254k|                return decay_copy(t.begin());
 2673|   254k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  2.89M|    {
 2606|  2.89M|        return std::forward<T>(t);
 2607|  2.89M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   529k|            {
 2693|   529k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   529k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   529k|            {
 2672|   529k|                return decay_copy(t.begin());
 2673|   529k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   667k|        {
 6444|   667k|            return data_.begin_;
 6445|   667k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.58M|            {
 2759|  1.58M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.58M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.58M|            {
 2739|  1.58M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.58M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.58M|        {
 6449|  1.58M|            return data_.end_;
 6450|  1.58M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   137k|            {
 3788|   137k|                ranges::advance(x, n);
 3789|   137k|                return x;
 3790|   137k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   137k|            {
 3678|   137k|                fn::impl(i, n);
 3679|   137k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   137k|            {
 3562|   137k|                r += n;
 3563|   137k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   392k|            {
 2759|   392k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   392k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   392k|            {
 2739|   392k|                return decay_copy(std::forward<T>(t).end());
 2740|   392k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   529k|        {
 6375|   529k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|   529k|        {
 6294|   529k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   137k|            {
 2693|   137k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   137k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   137k|            {
 2672|   137k|                return decay_copy(t.begin());
 2673|   137k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  4.50M|        {
 6444|  4.50M|            return data_.begin_;
 6445|  4.50M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  8.66M|        {
 6444|  8.66M|            return data_.begin_;
 6445|  8.66M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  6.72M|    {
 6044|  6.72M|        return static_cast<D&>(*this);
 6045|  6.72M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  3.36M|            {
 3098|  3.36M|                return bool((std::forward<T>(t).empty()));
 3099|  3.36M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  3.36M|            {
 3127|  3.36M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  3.36M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  3.36M|    {
 6085|  3.36M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 3.36M]
  ------------------
 6086|  3.36M|                   ? nullptr
 6087|  3.36M|                   : std::addressof(*ranges::begin(derived()));
 6088|  3.36M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  7.79M|            {
 2739|  7.79M|                return decay_copy(std::forward<T>(t).end());
 2740|  7.79M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  7.79M|            {
 2759|  7.79M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  7.79M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  1.68M|    {
 6044|  1.68M|        return static_cast<D&>(*this);
 6045|  1.68M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|   844k|            {
 3098|   844k|                return bool((std::forward<T>(t).empty()));
 3099|   844k|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|   844k|            {
 3127|   844k|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|   844k|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|   844k|    {
 6085|   844k|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 844k]
  ------------------
 6086|   844k|                   ? nullptr
 6087|   844k|                   : std::addressof(*ranges::begin(derived()));
 6088|   844k|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  26.6M|            {
 2739|  26.6M|                return decay_copy(std::forward<T>(t).end());
 2740|  26.6M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  26.6M|            {
 2759|  26.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  26.6M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  2.04M|            {
 3780|  2.04M|                ++x;
 3781|  2.04M|                return x;
 3782|  2.04M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  3.40M|            {
 3038|  3.40M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  3.40M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  3.40M|            {
 3000|  3.40M|                return decay_copy(std::forward<T>(t).size());
 3001|  3.40M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  3.36M|            {
 3178|  3.36M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.36M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.36M|            {
 3158|  3.36M|                return t.data();
 3159|  3.36M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   227k|            {
 3828|   227k|                --x;
 3829|   227k|                return x;
 3830|   227k|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|   324k|            {
 3077|   324k|                return fn::impl(std::forward<T>(t));
 3078|   324k|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|   324k|            {
 3067|   324k|                return static_cast<ssize_return_t<T>>(
 3068|   324k|                    ranges::size(std::forward<T>(t)));
 3069|   324k|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|   324k|            {
 3038|   324k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|   324k|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|   324k|            {
 3000|   324k|                return decay_copy(std::forward<T>(t).size());
 3001|   324k|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  3.78M|    {
 2606|  3.78M|        return std::forward<T>(t);
 2607|  3.78M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  3.46M|            {
 3077|  3.46M|                return fn::impl(std::forward<T>(t));
 3078|  3.46M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  3.46M|            {
 3067|  3.46M|                return static_cast<ssize_return_t<T>>(
 3068|  3.46M|                    ranges::size(std::forward<T>(t)));
 3069|  3.46M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  3.46M|            {
 3038|  3.46M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  3.46M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  3.46M|            {
 3000|  3.46M|                return decay_copy(std::forward<T>(t).size());
 3001|  3.46M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  2.54M|            {
 1300|  2.54M|                return fn::impl(std::forward<F>(f),
 1301|  2.54M|                                std::forward<Args>(args)...);
 1302|  2.54M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  2.54M|            {
 1289|  2.54M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  2.54M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  2.54M|    {
 1142|  2.54M|        return std::forward<T>(t);
 1143|  2.54M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  4.61M|            {
 3756|  4.61M|                return fn::impl(std::move(first), std::move(last));
 3757|  4.61M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  4.61M|            {
 3716|  4.61M|                return s - i;
 3717|  4.61M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.09M|        {
 6375|  1.09M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.09M|        {
 6294|  1.09M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  2.18M|            {
 2693|  2.18M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.18M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  2.18M|            {
 2672|  2.18M|                return decay_copy(t.begin());
 2673|  2.18M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  4.31M|    {
 2606|  4.31M|        return std::forward<T>(t);
 2607|  4.31M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|   770k|            {
 2759|   770k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   770k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   770k|            {
 2739|   770k|                return decay_copy(std::forward<T>(t).end());
 2740|   770k|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  5.53M|    {
 2606|  5.53M|        return std::forward<T>(t);
 2607|  5.53M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  1.79M|        {
 6449|  1.79M|            return data_.end_;
 6450|  1.79M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   256k|        {
 6444|   256k|            return data_.begin_;
 6445|   256k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   256k|        {
 6449|   256k|            return data_.end_;
 6450|   256k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  85.4k|        {
 6375|  85.4k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  85.4k|        {
 6294|  85.4k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   293k|            {
 3780|   293k|                ++x;
 3781|   293k|                return x;
 3782|   293k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   158k|        {
 6793|   158k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   158k|                                    proj);
 6795|   158k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   158k|        {
 6761|   362k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 361k, False: 186]
  ------------------
 6762|   361k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 158k, False: 203k]
  ------------------
 6763|   158k|                    return first;
 6764|   158k|                }
 6765|   203k|                ++first;
 6766|   203k|            }
 6767|    186|            return first;
 6768|   158k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   361k|            {
 1300|   361k|                return fn::impl(std::forward<F>(f),
 1301|   361k|                                std::forward<Args>(args)...);
 1302|   361k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   361k|            {
 1289|   361k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   361k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   361k|            {
 1300|   361k|                return fn::impl(std::forward<F>(f),
 1301|   361k|                                std::forward<Args>(args)...);
 1302|   361k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   361k|            {
 1289|   361k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   361k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   361k|    {
 1142|   361k|        return std::forward<T>(t);
 1143|   361k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.02M|            {
 2759|  1.02M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.02M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.02M|            {
 2739|  1.02M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.02M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  2.12M|            {
 2693|  2.12M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  2.12M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  2.12M|            {
 2672|  2.12M|                return decay_copy(t.begin());
 2673|  2.12M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|   844k|            {
 3178|   844k|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|   844k|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|   844k|            {
 3158|   844k|                return t.data();
 3159|   844k|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  3.41M|            {
 3038|  3.41M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  3.41M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  3.41M|            {
 3000|  3.41M|                return decay_copy(std::forward<T>(t).size());
 3001|  3.41M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  2.05M|            {
 3780|  2.05M|                ++x;
 3781|  2.05M|                return x;
 3782|  2.05M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  2.57M|            {
 3077|  2.57M|                return fn::impl(std::forward<T>(t));
 3078|  2.57M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  2.57M|            {
 3067|  2.57M|                return static_cast<ssize_return_t<T>>(
 3068|  2.57M|                    ranges::size(std::forward<T>(t)));
 3069|  2.57M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   209k|            {
 3828|   209k|                --x;
 3829|   209k|                return x;
 3830|   209k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  3.33M|            {
 3756|  3.33M|                return fn::impl(std::move(first), std::move(last));
 3757|  3.33M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  3.33M|            {
 3716|  3.33M|                return s - i;
 3717|  3.33M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  2.10M|        {
 6375|  2.10M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  2.10M|        {
 6294|  2.10M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  4.10M|            {
 2693|  4.10M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.10M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  4.10M|            {
 2672|  4.10M|                return decay_copy(t.begin());
 2673|  4.10M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  8.33M|    {
 2606|  8.33M|        return std::forward<T>(t);
 2607|  8.33M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.59M|            {
 2759|  1.59M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.59M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.59M|            {
 2739|  1.59M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.59M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  3.73M|        {
 6449|  3.73M|            return data_.end_;
 6450|  3.73M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  1.00M|        {
 6444|  1.00M|            return data_.begin_;
 6445|  1.00M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  1.00M|        {
 6449|  1.00M|            return data_.end_;
 6450|  1.00M|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   334k|        {
 6375|   334k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   334k|        {
 6294|   334k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   508k|            {
 3780|   508k|                ++x;
 3781|   508k|                return x;
 3782|   508k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   278k|        {
 6793|   278k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   278k|                                    proj);
 6795|   278k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   278k|        {
 6761|  1.02M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 1.02M, False: 372]
  ------------------
 6762|  1.02M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 278k, False: 750k]
  ------------------
 6763|   278k|                    return first;
 6764|   278k|                }
 6765|   750k|                ++first;
 6766|   750k|            }
 6767|    372|            return first;
 6768|   278k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|  1.02M|            {
 1300|  1.02M|                return fn::impl(std::forward<F>(f),
 1301|  1.02M|                                std::forward<Args>(args)...);
 1302|  1.02M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|  1.02M|            {
 1289|  1.02M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.02M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|  1.02M|            {
 1300|  1.02M|                return fn::impl(std::forward<F>(f),
 1301|  1.02M|                                std::forward<Args>(args)...);
 1302|  1.02M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|  1.02M|            {
 1289|  1.02M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  1.02M|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|  1.02M|    {
 1142|  1.02M|        return std::forward<T>(t);
 1143|  1.02M|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.13M|            {
 2759|  2.13M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.13M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  2.13M|            {
 2739|  2.13M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.13M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  4.22M|            {
 2693|  4.22M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.22M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  4.22M|            {
 2672|  4.22M|                return decay_copy(t.begin());
 2673|  4.22M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  1.33M|        {
 6793|  1.33M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  1.33M|                                    proj);
 6795|  1.33M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  1.33M|        {
 6761|  2.56M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 2.54M, False: 18.8k]
  ------------------
 6762|  2.54M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 1.31M, False: 1.22M]
  ------------------
 6763|  1.31M|                    return first;
 6764|  1.31M|                }
 6765|  1.22M|                ++first;
 6766|  1.22M|            }
 6767|  18.8k|            return first;
 6768|  1.33M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  2.54M|            {
 1300|  2.54M|                return fn::impl(std::forward<F>(f),
 1301|  2.54M|                                std::forward<Args>(args)...);
 1302|  2.54M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  2.54M|            {
 1289|  2.54M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  2.54M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   168k|{
   50|   168k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   168k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|  50.9k|{
   50|  50.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  50.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  50.9k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  27.4k|{
   50|  27.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  27.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  27.4k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   158k|    {
   44|   158k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   278k|    {
   44|   278k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  76.7k|{
   50|  76.7k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  76.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  76.7k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  3.83M|    {
 1191|  3.83M|        return has_value();
 1192|  3.83M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  7.27M|    {
  189|  7.27M|        return m_has_value;
  190|  7.27M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|   785k|    {
 1197|   785k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   785k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   785k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   785k|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   785k|    {
  172|   785k|        return m_unexpected;
  173|   785k|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  6.02M|    {
   72|  6.02M|        return m_unexpected;
   73|  6.02M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  2.96M|    {
   58|  2.96M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  2.96M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  2.96M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   137k|    {
 1078|   137k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   137k|    {
  151|   137k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  3.52M|    {
   67|  3.52M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  3.52M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  3.52M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.28M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  2.65M|    {
 1251|  2.65M|        return value();
 1252|  2.65M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  2.65M|    {
 1221|  2.65M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.65M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  2.65M|    {
  155|  2.65M|        return m_value;
  156|  2.65M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  1.14M|    {
 1034|  1.14M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  1.14M|    {
  142|  1.14M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  1.28M|    {
 1191|  1.28M|        return has_value();
 1192|  1.28M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.56M|    {
  189|  2.56M|        return m_has_value;
  190|  2.56M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   137k|    {
 1197|   137k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   137k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   137k|    {
  172|   137k|        return m_unexpected;
  173|   137k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  22.9k|    {
  151|  22.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   192k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  1.03M|    {
 1251|  1.03M|        return value();
 1252|  1.03M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  1.14M|    {
 1221|  1.14M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.14M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.14M|    {
  155|  1.14M|        return m_value;
  156|  1.14M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   169k|    {
 1034|   169k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   169k|    {
  142|   169k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   192k|    {
 1191|   192k|        return has_value();
 1192|   192k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   362k|    {
  189|   362k|        return m_has_value;
  190|   362k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   169k|    {
 1274|   169k|        return std::addressof(value());
 1275|   169k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   169k|    {
 1221|   169k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   169k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   169k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   169k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   169k|    {
  155|   169k|        return m_value;
  156|   169k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   104k|    {
 1263|   104k|        return std::move(value());
 1264|   104k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  22.9k|    {
  151|  22.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   186k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   163k|    {
 1034|   163k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   163k|    {
  142|   163k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   186k|    {
 1191|   186k|        return has_value();
 1192|   186k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   349k|    {
  189|   349k|        return m_has_value;
  190|   349k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   163k|    {
 1274|   163k|        return std::addressof(value());
 1275|   163k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   163k|    {
 1221|   163k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   163k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   163k|    {
  155|   163k|        return m_value;
  156|   163k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  22.9k|    {
  151|  22.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   241k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   218k|    {
 1034|   218k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   218k|    {
  142|   218k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   241k|    {
 1191|   241k|        return has_value();
 1192|   241k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   460k|    {
  189|   460k|        return m_has_value;
  190|   460k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   218k|    {
 1274|   218k|        return std::addressof(value());
 1275|   218k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   218k|    {
 1221|   218k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   218k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   218k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   218k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   218k|    {
  155|   218k|        return m_value;
  156|   218k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  22.9k|    {
  151|  22.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   206k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   183k|    {
 1034|   183k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   183k|    {
  142|   183k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   206k|    {
 1191|   206k|        return has_value();
 1192|   206k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   390k|    {
  189|   390k|        return m_has_value;
  190|   390k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   183k|    {
 1274|   183k|        return std::addressof(value());
 1275|   183k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   183k|    {
 1221|   183k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   183k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   183k|    {
  155|   183k|        return m_value;
  156|   183k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  22.9k|    {
  151|  22.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   244k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   221k|    {
 1034|   221k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   221k|    {
  142|   221k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   244k|    {
 1191|   244k|        return has_value();
 1192|   244k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   466k|    {
  189|   466k|        return m_has_value;
  190|   466k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   221k|    {
 1274|   221k|        return std::addressof(value());
 1275|   221k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   221k|    {
 1221|   221k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   221k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   221k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   221k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   221k|    {
  155|   221k|        return m_value;
  156|   221k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  22.9k|    {
  151|  22.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   209k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   186k|    {
 1034|   186k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   186k|    {
  142|   186k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   209k|    {
 1191|   209k|        return has_value();
 1192|   209k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   395k|    {
  189|   395k|        return m_has_value;
  190|   395k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   186k|    {
 1274|   186k|        return std::addressof(value());
 1275|   186k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   186k|    {
 1221|   186k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   186k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   186k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   186k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   186k|    {
  155|   186k|        return m_value;
  156|   186k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   137k|    {
 1078|   137k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   137k|    {
  151|   137k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   222k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  84.3k|    {
 1034|  84.3k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  84.3k|    {
  142|  84.3k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   222k|    {
 1191|   222k|        return has_value();
 1192|   222k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   444k|    {
  189|   444k|        return m_has_value;
  190|   444k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   137k|    {
 1197|   137k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   137k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   137k|    {
  172|   137k|        return m_unexpected;
  173|   137k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  22.9k|    {
  151|  22.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  27.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  78.8k|    {
 1251|  78.8k|        return value();
 1252|  78.8k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  84.3k|    {
 1221|  84.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  84.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  84.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  84.3k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  84.3k|    {
  155|  84.3k|        return m_value;
  156|  84.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  4.40k|    {
 1034|  4.40k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  4.40k|    {
  142|  4.40k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  27.3k|    {
 1191|  27.3k|        return has_value();
 1192|  27.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  31.7k|    {
  189|  31.7k|        return m_has_value;
  190|  31.7k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  4.40k|    {
 1274|  4.40k|        return std::addressof(value());
 1275|  4.40k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  4.40k|    {
 1221|  4.40k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.40k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.40k|    {
  155|  4.40k|        return m_value;
  156|  4.40k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  5.47k|    {
 1263|  5.47k|        return std::move(value());
 1264|  5.47k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  22.9k|    {
  151|  22.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  37.2k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  14.2k|    {
 1034|  14.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  14.2k|    {
  142|  14.2k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  37.2k|    {
 1191|  37.2k|        return has_value();
 1192|  37.2k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  51.4k|    {
  189|  51.4k|        return m_has_value;
  190|  51.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  14.2k|    {
 1274|  14.2k|        return std::addressof(value());
 1275|  14.2k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  14.2k|    {
 1221|  14.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  14.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  14.2k|    {
  155|  14.2k|        return m_value;
  156|  14.2k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  22.9k|    {
  151|  22.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  39.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  16.4k|    {
 1034|  16.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  16.4k|    {
  142|  16.4k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  39.4k|    {
 1191|  39.4k|        return has_value();
 1192|  39.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  55.8k|    {
  189|  55.8k|        return m_has_value;
  190|  55.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  16.4k|    {
 1274|  16.4k|        return std::addressof(value());
 1275|  16.4k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  16.4k|    {
 1221|  16.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  16.4k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  16.4k|    {
  155|  16.4k|        return m_value;
  156|  16.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  22.9k|    {
  151|  22.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  39.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  16.4k|    {
 1034|  16.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  16.4k|    {
  142|  16.4k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  39.4k|    {
 1191|  39.4k|        return has_value();
 1192|  39.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  55.8k|    {
  189|  55.8k|        return m_has_value;
  190|  55.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  16.4k|    {
 1274|  16.4k|        return std::addressof(value());
 1275|  16.4k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  16.4k|    {
 1221|  16.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  16.4k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  16.4k|    {
  155|  16.4k|        return m_value;
  156|  16.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  22.9k|    {
  151|  22.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  39.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  16.4k|    {
 1034|  16.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  16.4k|    {
  142|  16.4k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  39.4k|    {
 1191|  39.4k|        return has_value();
 1192|  39.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  55.8k|    {
  189|  55.8k|        return m_has_value;
  190|  55.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  16.4k|    {
 1274|  16.4k|        return std::addressof(value());
 1275|  16.4k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  16.4k|    {
 1221|  16.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  16.4k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  16.4k|    {
  155|  16.4k|        return m_value;
  156|  16.4k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  22.9k|    {
 1078|  22.9k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  22.9k|    {
  151|  22.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  39.4k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  16.4k|    {
 1034|  16.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  16.4k|    {
  142|  16.4k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  39.4k|    {
 1191|  39.4k|        return has_value();
 1192|  39.4k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  55.8k|    {
  189|  55.8k|        return m_has_value;
  190|  55.8k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  16.4k|    {
 1274|  16.4k|        return std::addressof(value());
 1275|  16.4k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  16.4k|    {
 1221|  16.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  16.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  16.4k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  16.4k|    {
  155|  16.4k|        return m_value;
  156|  16.4k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   254k|    {
 1078|   254k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   254k|    {
  151|   254k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.32M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  1.06M|    {
 1034|  1.06M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  1.06M|    {
  142|  1.06M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  1.32M|    {
 1191|  1.32M|        return has_value();
 1192|  1.32M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.64M|    {
  189|  2.64M|        return m_has_value;
  190|  2.64M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   254k|    {
 1197|   254k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   254k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   254k|    {
  172|   254k|        return m_unexpected;
  173|   254k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  42.4k|    {
 1078|  42.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  42.4k|    {
  151|  42.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   202k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|   970k|    {
 1251|   970k|        return value();
 1252|   970k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  1.06M|    {
 1221|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.06M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.06M|    {
  155|  1.06M|        return m_value;
  156|  1.06M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   159k|    {
 1034|   159k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   159k|    {
  142|   159k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   202k|    {
 1191|   202k|        return has_value();
 1192|   202k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   361k|    {
  189|   361k|        return m_has_value;
  190|   361k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   159k|    {
 1274|   159k|        return std::addressof(value());
 1275|   159k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   159k|    {
 1221|   159k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   159k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   159k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   159k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   159k|    {
  155|   159k|        return m_value;
  156|   159k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|  98.3k|    {
 1263|  98.3k|        return std::move(value());
 1264|  98.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  42.4k|    {
 1078|  42.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  42.4k|    {
  151|  42.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   196k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   153k|    {
 1034|   153k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   153k|    {
  142|   153k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   196k|    {
 1191|   196k|        return has_value();
 1192|   196k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   349k|    {
  189|   349k|        return m_has_value;
  190|   349k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   153k|    {
 1274|   153k|        return std::addressof(value());
 1275|   153k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   153k|    {
 1221|   153k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   153k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   153k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   153k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   153k|    {
  155|   153k|        return m_value;
  156|   153k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  42.4k|    {
 1078|  42.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  42.4k|    {
  151|  42.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   244k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   202k|    {
 1034|   202k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   202k|    {
  142|   202k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   244k|    {
 1191|   244k|        return has_value();
 1192|   244k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   447k|    {
  189|   447k|        return m_has_value;
  190|   447k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   202k|    {
 1274|   202k|        return std::addressof(value());
 1275|   202k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   202k|    {
 1221|   202k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   202k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   202k|    {
  155|   202k|        return m_value;
  156|   202k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  42.4k|    {
 1078|  42.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  42.4k|    {
  151|  42.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   215k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   173k|    {
 1034|   173k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   173k|    {
  142|   173k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   215k|    {
 1191|   215k|        return has_value();
 1192|   215k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   388k|    {
  189|   388k|        return m_has_value;
  190|   388k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   173k|    {
 1274|   173k|        return std::addressof(value());
 1275|   173k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   173k|    {
 1221|   173k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   173k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   173k|    {
  155|   173k|        return m_value;
  156|   173k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  42.4k|    {
 1078|  42.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  42.4k|    {
  151|  42.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   247k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   205k|    {
 1034|   205k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   205k|    {
  142|   205k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   247k|    {
 1191|   247k|        return has_value();
 1192|   247k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   453k|    {
  189|   453k|        return m_has_value;
  190|   453k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   205k|    {
 1274|   205k|        return std::addressof(value());
 1275|   205k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   205k|    {
 1221|   205k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   205k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   205k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   205k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   205k|    {
  155|   205k|        return m_value;
  156|   205k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  42.4k|    {
 1078|  42.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  42.4k|    {
  151|  42.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   217k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   175k|    {
 1034|   175k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   175k|    {
  142|   175k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   217k|    {
 1191|   217k|        return has_value();
 1192|   217k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   392k|    {
  189|   392k|        return m_has_value;
  190|   392k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   175k|    {
 1274|   175k|        return std::addressof(value());
 1275|   175k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   175k|    {
 1221|   175k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   175k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   175k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   175k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   175k|    {
  155|   175k|        return m_value;
  156|   175k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   254k|    {
 1078|   254k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   254k|    {
  151|   254k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   392k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   137k|    {
 1034|   137k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   137k|    {
  142|   137k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   392k|    {
 1191|   392k|        return has_value();
 1192|   392k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   784k|    {
  189|   784k|        return m_has_value;
  190|   784k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   254k|    {
 1197|   254k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   254k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   254k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   254k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   254k|    {
  172|   254k|        return m_unexpected;
  173|   254k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  42.4k|    {
 1078|  42.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  42.4k|    {
  151|  42.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  50.5k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   129k|    {
 1251|   129k|        return value();
 1252|   129k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   137k|    {
 1221|   137k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   137k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   137k|    {
  155|   137k|        return m_value;
  156|   137k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  8.11k|    {
 1034|  8.11k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  8.11k|    {
  142|  8.11k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  50.5k|    {
 1191|  50.5k|        return has_value();
 1192|  50.5k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  58.6k|    {
  189|  58.6k|        return m_has_value;
  190|  58.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  8.11k|    {
 1274|  8.11k|        return std::addressof(value());
 1275|  8.11k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  8.11k|    {
 1221|  8.11k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.11k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  8.11k|    {
  155|  8.11k|        return m_value;
  156|  8.11k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  8.09k|    {
 1263|  8.09k|        return std::move(value());
 1264|  8.09k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  42.4k|    {
 1078|  42.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  42.4k|    {
  151|  42.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  50.5k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  8.11k|    {
 1034|  8.11k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  8.11k|    {
  142|  8.11k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  50.5k|    {
 1191|  50.5k|        return has_value();
 1192|  50.5k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  58.6k|    {
  189|  58.6k|        return m_has_value;
  190|  58.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  8.11k|    {
 1274|  8.11k|        return std::addressof(value());
 1275|  8.11k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  8.11k|    {
 1221|  8.11k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.11k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.11k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.11k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  8.11k|    {
  155|  8.11k|        return m_value;
  156|  8.11k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  42.4k|    {
 1078|  42.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  42.4k|    {
  151|  42.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  72.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  30.3k|    {
 1034|  30.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  30.3k|    {
  142|  30.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  72.7k|    {
 1191|  72.7k|        return has_value();
 1192|  72.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   103k|    {
  189|   103k|        return m_has_value;
  190|   103k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  30.3k|    {
 1274|  30.3k|        return std::addressof(value());
 1275|  30.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  30.3k|    {
 1221|  30.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  30.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  30.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  30.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  30.3k|    {
  155|  30.3k|        return m_value;
  156|  30.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  42.4k|    {
 1078|  42.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  42.4k|    {
  151|  42.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  72.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  30.3k|    {
 1034|  30.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  30.3k|    {
  142|  30.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  72.7k|    {
 1191|  72.7k|        return has_value();
 1192|  72.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   103k|    {
  189|   103k|        return m_has_value;
  190|   103k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  30.3k|    {
 1274|  30.3k|        return std::addressof(value());
 1275|  30.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  30.3k|    {
 1221|  30.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  30.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  30.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  30.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  30.3k|    {
  155|  30.3k|        return m_value;
  156|  30.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  42.4k|    {
 1078|  42.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  42.4k|    {
  151|  42.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  72.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  30.3k|    {
 1034|  30.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  30.3k|    {
  142|  30.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  72.7k|    {
 1191|  72.7k|        return has_value();
 1192|  72.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   103k|    {
  189|   103k|        return m_has_value;
  190|   103k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  30.3k|    {
 1274|  30.3k|        return std::addressof(value());
 1275|  30.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  30.3k|    {
 1221|  30.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  30.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  30.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  30.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  30.3k|    {
  155|  30.3k|        return m_value;
  156|  30.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  42.4k|    {
 1078|  42.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  42.4k|    {
  151|  42.4k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  72.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  30.3k|    {
 1034|  30.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  30.3k|    {
  142|  30.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  72.7k|    {
 1191|  72.7k|        return has_value();
 1192|  72.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   103k|    {
  189|   103k|        return m_has_value;
  190|   103k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  30.3k|    {
 1274|  30.3k|        return std::addressof(value());
 1275|  30.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  30.3k|    {
 1221|  30.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  30.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  30.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  30.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  30.3k|    {
  155|  30.3k|        return m_value;
  156|  30.3k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  1.24M|    {
 1405|  1.24M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.24M|                                            std::forward<F>(f));
 1407|  1.24M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  1.24M|{
  927|  1.24M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.24M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.24M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.24M|            return result(*std::forward<Exp>(exp));
  931|  1.24M|        }
  932|       |
  933|  1.24M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.24M|        return result(unexpect, monostate{});
  935|  1.24M|    }
  936|  1.24M|    else {
  937|  1.24M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.24M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.24M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.22M, False: 18.9k]
  |  |  ------------------
  ------------------
  939|  1.24M|                   ? result(*std::forward<Exp>(exp))
  940|  1.24M|                   : result(unexpect,
  941|  18.9k|                            std::invoke(std::forward<F>(f),
  942|  18.9k|                                        std::forward<Exp>(exp).error()));
  943|  1.24M|    }
  944|  1.24M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  5.00M|    {
  189|  5.00M|        return m_has_value;
  190|  5.00M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  1.22M|    {
 1263|  1.22M|        return std::move(value());
 1264|  1.22M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  1.68M|    {
 1221|  1.68M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.68M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.68M|    {
  155|  1.68M|        return m_value;
  156|  1.68M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  4.98M|    {
 1034|  4.98M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  4.98M|    {
  142|  4.98M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.19M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  18.9k|    {
 1207|  18.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  18.9k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  20.0k|    {
  172|  20.0k|        return m_unexpected;
  173|  20.0k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   274k|    {
   72|   274k|        return m_unexpected;
   73|   274k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  18.9k|    {
 1088|  18.9k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   213k|    {
  151|   213k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  5.19M|    {
 1191|  5.19M|        return has_value();
 1192|  5.19M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  10.3M|    {
  189|  10.3M|        return m_has_value;
  190|  10.3M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   213k|    {
 1197|   213k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   213k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   213k|    {
  172|   213k|        return m_unexpected;
  173|   213k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   194k|    {
 1078|   194k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  4.15M|    {
 1263|  4.15M|        return std::move(value());
 1264|  4.15M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  4.98M|    {
 1221|  4.98M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.98M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  4.98M|    {
  155|  4.98M|        return m_value;
  156|  4.98M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   323k|    {
   58|   323k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   323k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   323k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|   785k|    {
 1078|   785k|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|   785k|    {
  151|   785k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.21M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  43.2k|    {
   58|  43.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  43.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  43.2k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  20.0k|    {
 1078|  20.0k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  20.0k|    {
  151|  20.0k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   137k|    {
   67|   137k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   137k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   137k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.29M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  3.27M|    {
 1034|  3.27M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  3.27M|    {
  142|  3.27M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  2.04M|    {
 1191|  2.04M|        return has_value();
 1192|  2.04M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.07k|    {
 1197|  1.07k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.07k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.07k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.07k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  43.7k|    {
   58|  43.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  43.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  43.7k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  42.3k|    {
 1078|  42.3k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  3.20M|    {
   72|  3.20M|        return m_unexpected;
   73|  3.20M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  42.3k|    {
  151|  42.3k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   231k|    {
   67|   231k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   231k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   231k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.46M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   465k|    {
 1251|   465k|        return value();
 1252|   465k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|   847k|    {
 1034|   847k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   847k|    {
  142|   847k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  11.3M|    {
   58|  11.3M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  11.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  11.3M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  4.55M|    {
 1078|  4.55M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  11.3M|    {
   72|  11.3M|        return m_unexpected;
   73|  11.3M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  4.55M|    {
  151|  4.55M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  11.3M|    {
   67|  11.3M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  11.3M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  11.3M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  5.46M|    {
 1191|  5.46M|        return has_value();
 1192|  5.46M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  7.46M|    {
  189|  7.46M|        return m_has_value;
  190|  7.46M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  1.12M|    {
 1197|  1.12M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.12M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  1.12M|    {
  172|  1.12M|        return m_unexpected;
  173|  1.12M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  1.22M|    {
 1034|  1.22M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  1.22M|    {
  142|  1.22M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.22M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|  94.0k|    {
   58|  94.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  94.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  94.0k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|   871k|    {
 1251|   871k|        return value();
 1252|   871k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|   871k|    {
 1221|   871k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   871k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   871k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   871k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   871k|    {
  155|   871k|        return m_value;
  156|   871k|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  1.22M|    {
 1191|  1.22M|        return has_value();
 1192|  1.22M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  2.44M|    {
  189|  2.44M|        return m_has_value;
  190|  2.44M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.22M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  1.22M|    {
 1263|  1.22M|        return std::move(value());
 1264|  1.22M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  1.22M|    {
 1221|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.22M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  1.22M|    {
  155|  1.22M|        return m_value;
  156|  1.22M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  23.7k|    {
 1034|  23.7k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  23.7k|    {
  142|  23.7k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  1.22M|    {
 1034|  1.22M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  1.22M|    {
  142|  1.22M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  1.22M|    {
 1405|  1.22M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.22M|                                            std::forward<F>(f));
 1407|  1.22M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  1.22M|{
  927|  1.22M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.22M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.22M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.22M|            return result(*std::forward<Exp>(exp));
  931|  1.22M|        }
  932|       |
  933|  1.22M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.22M|        return result(unexpect, monostate{});
  935|  1.22M|    }
  936|  1.22M|    else {
  937|  1.22M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.22M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.22M, False: 0]
  |  |  ------------------
  ------------------
  939|  1.22M|                   ? result(*std::forward<Exp>(exp))
  940|  1.22M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  1.22M|    }
  944|  1.22M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  2.44M|    {
  189|  2.44M|        return m_has_value;
  190|  2.44M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  1.22M|    {
 1263|  1.22M|        return std::move(value());
 1264|  1.22M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  1.22M|    {
 1221|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.22M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  1.22M|    {
  155|  1.22M|        return m_value;
  156|  1.22M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  1.22M|    {
 1034|  1.22M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  1.22M|    {
  142|  1.22M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.22M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  1.22M|    {
 1191|  1.22M|        return has_value();
 1192|  1.22M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.44M|    {
  189|  2.44M|        return m_has_value;
  190|  2.44M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  1.22M|    {
 1263|  1.22M|        return std::move(value());
 1264|  1.22M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  1.22M|    {
 1221|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.22M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.22M|    {
  155|  1.22M|        return m_value;
  156|  1.22M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  5.21k|    {
 1078|  5.21k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  5.21k|    {
  312|  5.21k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  5.21k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  5.21k|    {
  373|  5.21k|        scn::detail::construct_at(unexpected_ptr(),
  374|  5.21k|                                  std::forward<Args>(args)...);
  375|  5.21k|        m_has_value = false;
  376|  5.21k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|  48.7k|{
  102|  48.7k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  48.7k|        T(std::forward<Args>(args)...);
  104|  48.7k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  15.6k|    {
  403|  15.6k|        return reinterpret_cast<unexpected<E>*>(
  404|  15.6k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  15.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  15.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   160k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   160k|    {
  317|   160k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 155k, False: 5.21k]
  ------------------
  318|   155k|            destroy_value();
  319|   155k|        }
  320|  5.21k|        else {
  321|  5.21k|            destroy_unexpected();
  322|  5.21k|        }
  323|   160k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|   481k|    {
  361|   481k|        return m_has_value;
  362|   481k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   155k|    {
  380|   155k|        scn::detail::destroy_at(value_ptr());
  381|   155k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   155k|{
  108|   155k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   155k|        for (auto& elem : *p) {
  110|   155k|            scn::detail::destroy_at(std::addressof(elem));
  111|   155k|        }
  112|   155k|    }
  113|   155k|    else {
  114|   155k|        p->~T();
  115|   155k|    }
  116|   155k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   465k|    {
  390|   465k|        return reinterpret_cast<T*>(
  391|   465k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|   465k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   465k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  5.21k|    {
  384|  5.21k|        scn::detail::destroy_at(unexpected_ptr());
  385|  5.21k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|  48.7k|{
  108|  48.7k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  48.7k|        for (auto& elem : *p) {
  110|  48.7k|            scn::detail::destroy_at(std::addressof(elem));
  111|  48.7k|        }
  112|  48.7k|    }
  113|  48.7k|    else {
  114|  48.7k|        p->~T();
  115|  48.7k|    }
  116|  48.7k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   155k|    {
 1034|   155k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   155k|    {
  303|   155k|        construct(std::forward<Args>(args)...);
  304|   155k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   155k|    {
  367|   155k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   155k|        m_has_value = true;
  369|   155k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   155k|{
  102|   155k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   155k|        T(std::forward<Args>(args)...);
  104|   155k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   160k|    {
 1191|   160k|        return has_value();
 1192|   160k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  5.21k|    {
 1197|  5.21k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  5.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  5.21k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  5.21k|    {
  344|  5.21k|        return *unexpected_ptr();
  345|  5.21k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   155k|    {
 1263|   155k|        return std::move(value());
 1264|   155k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   155k|    {
 1221|   155k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   155k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   155k|    {
  327|   155k|        return *value_ptr();
  328|   155k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|   829k|    {
 1251|   829k|        return value();
 1252|   829k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|  94.0k|    {
   58|  94.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  94.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  94.0k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  2.43M|    {
 1034|  2.43M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  2.43M|    {
  142|  2.43M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    508|    {
 1078|    508|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    508|    {
  151|    508|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   803k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|   802k|    {
 1034|   802k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   802k|    {
  142|   802k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   182k|    {
 1405|   182k|        return detail::transform_error_impl(std::move(*this),
 1406|   182k|                                            std::forward<F>(f));
 1407|   182k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   182k|{
  927|   182k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   182k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   182k|        if (SCN_LIKELY(exp.has_value())) {
  930|   182k|            return result(*std::forward<Exp>(exp));
  931|   182k|        }
  932|       |
  933|   182k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   182k|        return result(unexpect, monostate{});
  935|   182k|    }
  936|   182k|    else {
  937|   182k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   182k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   182k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 182k, False: 209]
  |  |  ------------------
  ------------------
  939|   182k|                   ? result(*std::forward<Exp>(exp))
  940|   182k|                   : result(unexpect,
  941|    209|                            std::invoke(std::forward<F>(f),
  942|    209|                                        std::forward<Exp>(exp).error()));
  943|   182k|    }
  944|   182k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  1.31M|    {
  189|  1.31M|        return m_has_value;
  190|  1.31M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   509k|    {
 1263|   509k|        return std::move(value());
 1264|   509k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   509k|    {
 1221|   509k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   509k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   509k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   509k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   509k|    {
  155|   509k|        return m_value;
  156|   509k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   352k|    {
 1034|   352k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   352k|    {
  142|   352k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   524k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    508|    {
 1207|    508|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    508|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    508|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    508|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    508|    {
  172|    508|        return m_unexpected;
  173|    508|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|  73.4k|    {
 1088|  73.4k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   293k|    {
 1191|   293k|        return has_value();
 1192|   293k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    299|    {
 1078|    299|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    598|    {
  151|    598|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.21M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|   803k|    {
 1078|   803k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|   803k|    {
  151|   803k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.05M|    {
 1191|  1.05M|        return has_value();
 1192|  1.05M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  1.88M|    {
  189|  1.88M|        return m_has_value;
  190|  1.88M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   182k|    {
 1197|   182k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   182k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   256k|    {
  172|   256k|        return m_unexpected;
  173|   256k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   182k|    {
 1034|   182k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   182k|    {
  142|   182k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   182k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   412k|    {
 1221|   412k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   412k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   412k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   412k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   412k|    {
  155|   412k|        return m_value;
  156|   412k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   182k|    {
 1191|   182k|        return has_value();
 1192|   182k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   365k|    {
  189|   365k|        return m_has_value;
  190|   365k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   182k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   182k|    {
 1263|   182k|        return std::move(value());
 1264|   182k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   182k|    {
 1221|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   182k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   182k|    {
  155|   182k|        return m_value;
  156|   182k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   327k|    {
 1405|   327k|        return detail::transform_error_impl(std::move(*this),
 1406|   327k|                                            std::forward<F>(f));
 1407|   327k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   327k|{
  927|   327k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   327k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   327k|        if (SCN_LIKELY(exp.has_value())) {
  930|   327k|            return result(*std::forward<Exp>(exp));
  931|   327k|        }
  932|       |
  933|   327k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   327k|        return result(unexpect, monostate{});
  935|   327k|    }
  936|   327k|    else {
  937|   327k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   327k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   327k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 326k, False: 299]
  |  |  ------------------
  ------------------
  939|   327k|                   ? result(*std::forward<Exp>(exp))
  940|   327k|                   : result(unexpect,
  941|    299|                            std::invoke(std::forward<F>(f),
  942|    299|                                        std::forward<Exp>(exp).error()));
  943|   327k|    }
  944|   327k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   412k|    {
 1034|   412k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   412k|    {
  142|   412k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    299|    {
 1088|    299|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   412k|    {
 1263|   412k|        return std::move(value());
 1264|   412k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   182k|    {
 1034|   182k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   182k|    {
  142|   182k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   182k|    {
 1405|   182k|        return detail::transform_error_impl(std::move(*this),
 1406|   182k|                                            std::forward<F>(f));
 1407|   182k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   182k|{
  927|   182k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   182k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   182k|        if (SCN_LIKELY(exp.has_value())) {
  930|   182k|            return result(*std::forward<Exp>(exp));
  931|   182k|        }
  932|       |
  933|   182k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   182k|        return result(unexpect, monostate{});
  935|   182k|    }
  936|   182k|    else {
  937|   182k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   182k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   182k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 182k, False: 0]
  |  |  ------------------
  ------------------
  939|   182k|                   ? result(*std::forward<Exp>(exp))
  940|   182k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   182k|    }
  944|   182k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   365k|    {
  189|   365k|        return m_has_value;
  190|   365k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   182k|    {
 1263|   182k|        return std::move(value());
 1264|   182k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   182k|    {
 1221|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   182k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   182k|    {
  155|   182k|        return m_value;
  156|   182k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   182k|    {
 1034|   182k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   182k|    {
  142|   182k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   182k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   182k|    {
 1191|   182k|        return has_value();
 1192|   182k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   365k|    {
  189|   365k|        return m_has_value;
  190|   365k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   182k|    {
 1263|   182k|        return std::move(value());
 1264|   182k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   182k|    {
 1221|   182k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   182k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   182k|    {
  155|   182k|        return m_value;
  156|   182k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   158k|    {
 1405|   158k|        return detail::transform_error_impl(std::move(*this),
 1406|   158k|                                            std::forward<F>(f));
 1407|   158k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   158k|{
  927|   158k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   158k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   158k|        if (SCN_LIKELY(exp.has_value())) {
  930|   158k|            return result(*std::forward<Exp>(exp));
  931|   158k|        }
  932|       |
  933|   158k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   158k|        return result(unexpect, monostate{});
  935|   158k|    }
  936|   158k|    else {
  937|   158k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   158k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   158k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 85.4k, False: 73.2k]
  |  |  ------------------
  ------------------
  939|   158k|                   ? result(*std::forward<Exp>(exp))
  940|   158k|                   : result(unexpect,
  941|  73.2k|                            std::invoke(std::forward<F>(f),
  942|  73.2k|                                        std::forward<Exp>(exp).error()));
  943|   158k|    }
  944|   158k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|  73.2k|    {
 1207|  73.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  73.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  73.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  73.2k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  98.5k|    {
 1078|  98.5k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|  10.9k|    {
 1078|  10.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|  10.9k|    {
  312|  10.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  10.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|  10.9k|    {
  373|  10.9k|        scn::detail::construct_at(unexpected_ptr(),
  374|  10.9k|                                  std::forward<Args>(args)...);
  375|  10.9k|        m_has_value = false;
  376|  10.9k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  32.7k|    {
  403|  32.7k|        return reinterpret_cast<unexpected<E>*>(
  404|  32.7k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  32.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  32.7k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  24.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  24.0k|    {
  317|  24.0k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 13.1k, False: 10.9k]
  ------------------
  318|  13.1k|            destroy_value();
  319|  13.1k|        }
  320|  10.9k|        else {
  321|  10.9k|            destroy_unexpected();
  322|  10.9k|        }
  323|  24.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  72.1k|    {
  361|  72.1k|        return m_has_value;
  362|  72.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  13.1k|    {
  380|  13.1k|        scn::detail::destroy_at(value_ptr());
  381|  13.1k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  107|  13.1k|{
  108|  13.1k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  13.1k|        for (auto& elem : *p) {
  110|  13.1k|            scn::detail::destroy_at(std::addressof(elem));
  111|  13.1k|        }
  112|  13.1k|    }
  113|  13.1k|    else {
  114|  13.1k|        p->~T();
  115|  13.1k|    }
  116|  13.1k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  39.4k|    {
  390|  39.4k|        return reinterpret_cast<T*>(
  391|  39.4k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  39.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  39.4k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  10.9k|    {
  384|  10.9k|        scn::detail::destroy_at(unexpected_ptr());
  385|  10.9k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1033|  13.1k|    {
 1034|  13.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  302|  13.1k|    {
  303|  13.1k|        construct(std::forward<Args>(args)...);
  304|  13.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  366|  13.1k|    {
  367|  13.1k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  13.1k|        m_has_value = true;
  369|  13.1k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  101|  13.1k|{
  102|  13.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  13.1k|        T(std::forward<Args>(args)...);
  104|  13.1k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  24.0k|    {
 1191|  24.0k|        return has_value();
 1192|  24.0k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|  10.9k|    {
 1197|  10.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  10.9k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  10.9k|    {
  344|  10.9k|        return *unexpected_ptr();
  345|  10.9k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1262|  13.1k|    {
 1263|  13.1k|        return std::move(value());
 1264|  13.1k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1220|  13.1k|    {
 1221|  13.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|  13.1k|    {
  327|  13.1k|        return *value_ptr();
  328|  13.1k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  67.9k|    {
 1251|  67.9k|        return value();
 1252|  67.9k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   352k|    {
 1221|   352k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   352k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   352k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   352k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.04M|    {
  189|  1.04M|        return m_has_value;
  190|  1.04M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   352k|    {
  155|   352k|        return m_value;
  156|   352k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   524k|    {
 1191|   524k|        return has_value();
 1192|   524k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   171k|    {
 1197|   171k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   171k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   171k|    {
  172|   171k|        return m_unexpected;
  173|   171k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   284k|    {
 1263|   284k|        return std::move(value());
 1264|   284k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   115k|    {
 1078|   115k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   115k|    {
  151|   115k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.88M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  5.76M|    {
 1034|  5.76M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  5.76M|    {
  142|  5.76M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  1.25M|    {
 1405|  1.25M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.25M|                                            std::forward<F>(f));
 1407|  1.25M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  1.25M|{
  927|  1.25M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.25M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.25M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.25M|            return result(*std::forward<Exp>(exp));
  931|  1.25M|        }
  932|       |
  933|  1.25M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.25M|        return result(unexpect, monostate{});
  935|  1.25M|    }
  936|  1.25M|    else {
  937|  1.25M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.25M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.25M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.22M, False: 21.1k]
  |  |  ------------------
  ------------------
  939|  1.25M|                   ? result(*std::forward<Exp>(exp))
  940|  1.25M|                   : result(unexpect,
  941|  21.1k|                            std::invoke(std::forward<F>(f),
  942|  21.1k|                                        std::forward<Exp>(exp).error()));
  943|  1.25M|    }
  944|  1.25M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  10.1M|    {
  189|  10.1M|        return m_has_value;
  190|  10.1M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  3.71M|    {
 1263|  3.71M|        return std::move(value());
 1264|  3.71M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  4.13M|    {
 1221|  4.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.13M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  4.13M|    {
  155|  4.13M|        return m_value;
  156|  4.13M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  4.95M|    {
 1034|  4.95M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  4.95M|    {
  142|  4.95M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.38M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   114k|    {
 1207|   114k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   114k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   114k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   114k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   115k|    {
  172|   115k|        return m_unexpected;
  173|   115k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  21.1k|    {
 1088|  21.1k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   431k|    {
  151|   431k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   409k|    {
 1078|   409k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  2.05M|    {
 1191|  2.05M|        return has_value();
 1192|  2.05M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  1.34k|    {
 1197|  1.34k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.34k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  94.7k|    {
 1078|  94.7k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   188k|    {
  151|   188k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  8.03M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|   428k|    {
 1251|   428k|        return value();
 1252|   428k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|   782k|    {
 1034|   782k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|   782k|    {
  142|   782k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  4.56M|    {
 1078|  4.56M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  4.56M|    {
  151|  4.56M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  8.03M|    {
 1191|  8.03M|        return has_value();
 1192|  8.03M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  12.5M|    {
  189|  12.5M|        return m_has_value;
  190|  12.5M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  1.23M|    {
 1197|  1.23M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.23M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  1.23M|    {
  172|  1.23M|        return m_unexpected;
  173|  1.23M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  1.22M|    {
 1034|  1.22M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  1.22M|    {
  142|  1.22M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.22M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|   806k|    {
 1251|   806k|        return value();
 1252|   806k|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  3.28M|    {
 1221|  3.28M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.28M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.28M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.28M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  3.28M|    {
  155|  3.28M|        return m_value;
  156|  3.28M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  1.22M|    {
 1191|  1.22M|        return has_value();
 1192|  1.22M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  2.45M|    {
  189|  2.45M|        return m_has_value;
  190|  2.45M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.22M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  1.22M|    {
 1263|  1.22M|        return std::move(value());
 1264|  1.22M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  1.22M|    {
 1221|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.22M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  1.22M|    {
  155|  1.22M|        return m_value;
  156|  1.22M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  2.57M|    {
 1405|  2.57M|        return detail::transform_error_impl(std::move(*this),
 1406|  2.57M|                                            std::forward<F>(f));
 1407|  2.57M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  2.57M|{
  927|  2.57M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  2.57M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  2.57M|        if (SCN_LIKELY(exp.has_value())) {
  930|  2.57M|            return result(*std::forward<Exp>(exp));
  931|  2.57M|        }
  932|       |
  933|  2.57M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  2.57M|        return result(unexpect, monostate{});
  935|  2.57M|    }
  936|  2.57M|    else {
  937|  2.57M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  2.57M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  2.57M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.48M, False: 93.4k]
  |  |  ------------------
  ------------------
  939|  2.57M|                   ? result(*std::forward<Exp>(exp))
  940|  2.57M|                   : result(unexpect,
  941|  93.4k|                            std::invoke(std::forward<F>(f),
  942|  93.4k|                                        std::forward<Exp>(exp).error()));
  943|  2.57M|    }
  944|  2.57M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  2.50M|    {
 1034|  2.50M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.50M|    {
  142|  2.50M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|  93.4k|    {
 1088|  93.4k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  2.48M|    {
 1263|  2.48M|        return std::move(value());
 1264|  2.48M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  1.22M|    {
 1034|  1.22M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  1.22M|    {
  142|  1.22M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  1.22M|    {
 1405|  1.22M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.22M|                                            std::forward<F>(f));
 1407|  1.22M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  1.22M|{
  927|  1.22M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.22M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.22M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.22M|            return result(*std::forward<Exp>(exp));
  931|  1.22M|        }
  932|       |
  933|  1.22M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.22M|        return result(unexpect, monostate{});
  935|  1.22M|    }
  936|  1.22M|    else {
  937|  1.22M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.22M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.22M, False: 0]
  |  |  ------------------
  ------------------
  939|  1.22M|                   ? result(*std::forward<Exp>(exp))
  940|  1.22M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  1.22M|    }
  944|  1.22M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  2.45M|    {
  189|  2.45M|        return m_has_value;
  190|  2.45M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  1.22M|    {
 1263|  1.22M|        return std::move(value());
 1264|  1.22M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  1.22M|    {
 1221|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.22M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  1.22M|    {
  155|  1.22M|        return m_value;
  156|  1.22M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  1.22M|    {
 1034|  1.22M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  1.22M|    {
  142|  1.22M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.22M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  1.22M|    {
 1191|  1.22M|        return has_value();
 1192|  1.22M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.45M|    {
  189|  2.45M|        return m_has_value;
  190|  2.45M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  1.22M|    {
 1263|  1.22M|        return std::move(value());
 1264|  1.22M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  1.22M|    {
 1221|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.22M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.22M|    {
  155|  1.22M|        return m_value;
  156|  1.22M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  16.5k|    {
 1078|  16.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  16.5k|    {
  312|  16.5k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  16.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  16.5k|    {
  373|  16.5k|        scn::detail::construct_at(unexpected_ptr(),
  374|  16.5k|                                  std::forward<Args>(args)...);
  375|  16.5k|        m_has_value = false;
  376|  16.5k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  49.5k|    {
  403|  49.5k|        return reinterpret_cast<unexpected<E>*>(
  404|  49.5k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  49.5k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  49.5k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   163k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   163k|    {
  317|   163k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 146k, False: 16.5k]
  ------------------
  318|   146k|            destroy_value();
  319|   146k|        }
  320|  16.5k|        else {
  321|  16.5k|            destroy_unexpected();
  322|  16.5k|        }
  323|   163k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   489k|    {
  361|   489k|        return m_has_value;
  362|   489k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   146k|    {
  380|   146k|        scn::detail::destroy_at(value_ptr());
  381|   146k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   146k|{
  108|   146k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   146k|        for (auto& elem : *p) {
  110|   146k|            scn::detail::destroy_at(std::addressof(elem));
  111|   146k|        }
  112|   146k|    }
  113|   146k|    else {
  114|   146k|        p->~T();
  115|   146k|    }
  116|   146k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   440k|    {
  390|   440k|        return reinterpret_cast<T*>(
  391|   440k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|   440k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   440k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  16.5k|    {
  384|  16.5k|        scn::detail::destroy_at(unexpected_ptr());
  385|  16.5k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   146k|    {
 1034|   146k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   146k|    {
  303|   146k|        construct(std::forward<Args>(args)...);
  304|   146k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   146k|    {
  367|   146k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   146k|        m_has_value = true;
  369|   146k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   146k|{
  102|   146k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   146k|        T(std::forward<Args>(args)...);
  104|   146k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   163k|    {
 1191|   163k|        return has_value();
 1192|   163k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  16.5k|    {
 1197|  16.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  16.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  16.5k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  16.5k|    {
  344|  16.5k|        return *unexpected_ptr();
  345|  16.5k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   146k|    {
 1263|   146k|        return std::move(value());
 1264|   146k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   146k|    {
 1221|   146k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   146k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   146k|    {
  327|   146k|        return *value_ptr();
  328|   146k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|   774k|    {
 1251|   774k|        return value();
 1252|   774k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  4.95M|    {
 1221|  4.95M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.95M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.95M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.95M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  10.7M|    {
  189|  10.7M|        return m_has_value;
  190|  10.7M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  4.95M|    {
  155|  4.95M|        return m_value;
  156|  4.95M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  5.38M|    {
 1191|  5.38M|        return has_value();
 1192|  5.38M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   431k|    {
 1197|   431k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   431k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   431k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   431k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   431k|    {
  172|   431k|        return m_unexpected;
  173|   431k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  4.17M|    {
 1263|  4.17M|        return std::move(value());
 1264|  4.17M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   181k|    {
 1078|   181k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   303k|    {
  151|   303k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   917k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   614k|    {
 1034|   614k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   614k|    {
  142|   614k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   917k|    {
 1191|   917k|        return has_value();
 1192|   917k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.83M|    {
  189|  1.83M|        return m_has_value;
  190|  1.83M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   303k|    {
 1197|   303k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   303k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   303k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   303k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   303k|    {
  172|   303k|        return m_unexpected;
  173|   303k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   113k|    {
 1251|   113k|        return value();
 1252|   113k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   614k|    {
 1221|   614k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   614k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   614k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   614k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   614k|    {
  155|   614k|        return m_value;
  156|   614k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    696|    {
 1078|    696|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    696|    {
  151|    696|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.38M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.38M|    {
 1034|  1.38M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.38M|    {
  142|  1.38M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   319k|    {
 1405|   319k|        return detail::transform_error_impl(std::move(*this),
 1406|   319k|                                            std::forward<F>(f));
 1407|   319k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   319k|{
  927|   319k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   319k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   319k|        if (SCN_LIKELY(exp.has_value())) {
  930|   319k|            return result(*std::forward<Exp>(exp));
  931|   319k|        }
  932|       |
  933|   319k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   319k|        return result(unexpect, monostate{});
  935|   319k|    }
  936|   319k|    else {
  937|   319k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   319k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   319k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 318k, False: 418]
  |  |  ------------------
  ------------------
  939|   319k|                   ? result(*std::forward<Exp>(exp))
  940|   319k|                   : result(unexpect,
  941|    418|                            std::invoke(std::forward<F>(f),
  942|    418|                                        std::forward<Exp>(exp).error()));
  943|   319k|    }
  944|   319k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.26M|    {
  189|  2.26M|        return m_has_value;
  190|  2.26M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   879k|    {
 1263|   879k|        return std::move(value());
 1264|   879k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   879k|    {
 1221|   879k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   879k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   879k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   879k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   879k|    {
  155|   879k|        return m_value;
  156|   879k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    696|    {
 1207|    696|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    696|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    696|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    696|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    696|    {
  172|    696|        return m_unexpected;
  173|    696|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   121k|    {
 1088|   121k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   508k|    {
 1191|   508k|        return has_value();
 1192|   508k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    278|    {
 1078|    278|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    556|    {
  151|    556|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.09M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.38M|    {
 1078|  1.38M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.38M|    {
  151|  1.38M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.82M|    {
 1191|  1.82M|        return has_value();
 1192|  1.82M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  3.25M|    {
  189|  3.25M|        return m_has_value;
  190|  3.25M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   319k|    {
 1197|   319k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   319k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   319k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   319k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   440k|    {
  172|   440k|        return m_unexpected;
  173|   440k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   318k|    {
 1034|   318k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   318k|    {
  142|   318k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   318k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   718k|    {
 1221|   718k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   718k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   718k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   718k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   718k|    {
  155|   718k|        return m_value;
  156|   718k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   318k|    {
 1191|   318k|        return has_value();
 1192|   318k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   637k|    {
  189|   637k|        return m_has_value;
  190|   637k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   318k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   318k|    {
 1263|   318k|        return std::move(value());
 1264|   318k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   318k|    {
 1221|   318k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   318k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   318k|    {
  155|   318k|        return m_value;
  156|   318k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   561k|    {
 1405|   561k|        return detail::transform_error_impl(std::move(*this),
 1406|   561k|                                            std::forward<F>(f));
 1407|   561k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   561k|{
  927|   561k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   561k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   561k|        if (SCN_LIKELY(exp.has_value())) {
  930|   561k|            return result(*std::forward<Exp>(exp));
  931|   561k|        }
  932|       |
  933|   561k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   561k|        return result(unexpect, monostate{});
  935|   561k|    }
  936|   561k|    else {
  937|   561k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   561k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   561k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 560k, False: 278]
  |  |  ------------------
  ------------------
  939|   561k|                   ? result(*std::forward<Exp>(exp))
  940|   561k|                   : result(unexpect,
  941|    278|                            std::invoke(std::forward<F>(f),
  942|    278|                                        std::forward<Exp>(exp).error()));
  943|   561k|    }
  944|   561k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   718k|    {
 1034|   718k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   718k|    {
  142|   718k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    278|    {
 1088|    278|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   718k|    {
 1263|   718k|        return std::move(value());
 1264|   718k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   318k|    {
 1034|   318k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   318k|    {
  142|   318k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   318k|    {
 1405|   318k|        return detail::transform_error_impl(std::move(*this),
 1406|   318k|                                            std::forward<F>(f));
 1407|   318k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   318k|{
  927|   318k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   318k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   318k|        if (SCN_LIKELY(exp.has_value())) {
  930|   318k|            return result(*std::forward<Exp>(exp));
  931|   318k|        }
  932|       |
  933|   318k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   318k|        return result(unexpect, monostate{});
  935|   318k|    }
  936|   318k|    else {
  937|   318k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   318k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   318k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 318k, False: 0]
  |  |  ------------------
  ------------------
  939|   318k|                   ? result(*std::forward<Exp>(exp))
  940|   318k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   318k|    }
  944|   318k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   637k|    {
  189|   637k|        return m_has_value;
  190|   637k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   318k|    {
 1263|   318k|        return std::move(value());
 1264|   318k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   318k|    {
 1221|   318k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   318k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   318k|    {
  155|   318k|        return m_value;
  156|   318k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   318k|    {
 1034|   318k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   318k|    {
  142|   318k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   318k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   318k|    {
 1191|   318k|        return has_value();
 1192|   318k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   637k|    {
  189|   637k|        return m_has_value;
  190|   637k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   318k|    {
 1263|   318k|        return std::move(value());
 1264|   318k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   318k|    {
 1221|   318k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   318k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   318k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   318k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   318k|    {
  155|   318k|        return m_value;
  156|   318k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   278k|    {
 1405|   278k|        return detail::transform_error_impl(std::move(*this),
 1406|   278k|                                            std::forward<F>(f));
 1407|   278k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   278k|{
  927|   278k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   278k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   278k|        if (SCN_LIKELY(exp.has_value())) {
  930|   278k|            return result(*std::forward<Exp>(exp));
  931|   278k|        }
  932|       |
  933|   278k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   278k|        return result(unexpect, monostate{});
  935|   278k|    }
  936|   278k|    else {
  937|   278k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   278k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   278k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 157k, False: 120k]
  |  |  ------------------
  ------------------
  939|   278k|                   ? result(*std::forward<Exp>(exp))
  940|   278k|                   : result(unexpect,
  941|   120k|                            std::invoke(std::forward<F>(f),
  942|   120k|                                        std::forward<Exp>(exp).error()));
  943|   278k|    }
  944|   278k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   120k|    {
 1207|   120k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   120k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  16.1k|    {
 1078|  16.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|  16.1k|    {
  312|  16.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  16.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|  16.1k|    {
  373|  16.1k|        scn::detail::construct_at(unexpected_ptr(),
  374|  16.1k|                                  std::forward<Args>(args)...);
  375|  16.1k|        m_has_value = false;
  376|  16.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  48.3k|    {
  403|  48.3k|        return reinterpret_cast<unexpected<E>*>(
  404|  48.3k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  48.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  48.3k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  40.3k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  40.3k|    {
  317|  40.3k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 24.2k, False: 16.1k]
  ------------------
  318|  24.2k|            destroy_value();
  319|  24.2k|        }
  320|  16.1k|        else {
  321|  16.1k|            destroy_unexpected();
  322|  16.1k|        }
  323|  40.3k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   121k|    {
  361|   121k|        return m_has_value;
  362|   121k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  24.2k|    {
  380|  24.2k|        scn::detail::destroy_at(value_ptr());
  381|  24.2k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  107|  24.2k|{
  108|  24.2k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  24.2k|        for (auto& elem : *p) {
  110|  24.2k|            scn::detail::destroy_at(std::addressof(elem));
  111|  24.2k|        }
  112|  24.2k|    }
  113|  24.2k|    else {
  114|  24.2k|        p->~T();
  115|  24.2k|    }
  116|  24.2k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  72.7k|    {
  390|  72.7k|        return reinterpret_cast<T*>(
  391|  72.7k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  72.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  72.7k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  16.1k|    {
  384|  16.1k|        scn::detail::destroy_at(unexpected_ptr());
  385|  16.1k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  24.2k|    {
 1034|  24.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  302|  24.2k|    {
  303|  24.2k|        construct(std::forward<Args>(args)...);
  304|  24.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  366|  24.2k|    {
  367|  24.2k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  24.2k|        m_has_value = true;
  369|  24.2k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  101|  24.2k|{
  102|  24.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  24.2k|        T(std::forward<Args>(args)...);
  104|  24.2k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  40.3k|    {
 1191|  40.3k|        return has_value();
 1192|  40.3k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  16.1k|    {
 1197|  16.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  16.1k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  16.1k|    {
  344|  16.1k|        return *unexpected_ptr();
  345|  16.1k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1262|  24.2k|    {
 1263|  24.2k|        return std::move(value());
 1264|  24.2k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  24.2k|    {
 1221|  24.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  24.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  24.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|  24.2k|    {
  327|  24.2k|        return *value_ptr();
  328|  24.2k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   500k|    {
 1263|   500k|        return std::move(value());
 1264|   500k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  2.19k|{
  200|  2.19k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  2.19k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  2.19k|{
  180|  2.19k|    return p;
  181|  2.19k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  2.19k|{
  200|  2.19k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  2.19k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  2.19k|{
  180|  2.19k|    return p;
  181|  2.19k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  2.19k|{
  200|  2.19k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  2.19k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  2.19k|{
  180|  2.19k|    return p;
  181|  2.19k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.59M|{
  200|  4.59M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.59M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  4.76M|{
  180|  4.76M|    return p;
  181|  4.76M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  3.11M|{
  200|  3.11M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  3.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  3.11M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  3.11M|{
  180|  3.11M|    return p;
  181|  3.11M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   170k|{
  200|   170k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   170k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  3.11M|{
  200|  3.11M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  3.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  3.11M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  3.78M|{
  180|  3.78M|    return p;
  181|  3.78M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   669k|{
  200|   669k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   669k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   669k|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  7.54k|    {
  242|  7.54k|        return static_cast<size_type>(m_end - m_ptr);
  243|  7.54k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  1.09k|    {
  181|  1.09k|        return m_ptr;
  182|  1.09k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  1.09k|    {
  185|  1.09k|        return m_end;
  186|  1.09k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  1.09k|    {
  238|  1.09k|        return m_ptr;
  239|  1.09k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  1.09k|    {
  120|  1.09k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  26.2k|    {
  181|  26.2k|        return m_ptr;
  182|  26.2k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  26.2k|    {
  185|  26.2k|        return m_end;
  186|  26.2k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  1.09k|    {
  120|  1.09k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  48.5k|    {
  181|  48.5k|        return m_ptr;
  182|  48.5k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  48.5k|    {
  185|  48.5k|        return m_end;
  186|  48.5k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  1.09k|    {
  120|  1.09k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  1.55M|    {
  120|  1.55M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  1.55M|    {
  238|  1.55M|        return m_ptr;
  239|  1.55M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  1.55M|    {
  242|  1.55M|        return static_cast<size_type>(m_end - m_ptr);
  243|  1.55M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|   822k|{
   60|   822k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|   822k|                                          const CharT*, const CharT*>) {
   62|   822k|        return {first, last};
   63|   822k|    }
   64|   822k|    else {
   65|   822k|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|   822k|    }
   67|   822k|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  2.42M|{
   60|  2.42M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  2.42M|                                          const CharT*, const CharT*>) {
   62|  2.42M|        return {first, last};
   63|  2.42M|    }
   64|  2.42M|    else {
   65|  2.42M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  2.42M|    }
   67|  2.42M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  1.52M|{
   44|  1.52M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  1.52M|                                          decltype(first), decltype(last)> &&
   46|  1.52M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  1.52M|        return {first, last};
   48|  1.52M|    }
   49|  1.52M|    else {
   50|  1.52M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  1.52M|                                       to_address(first), to_address(last)))};
   52|  1.52M|    }
   53|  1.52M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  2.67M|{
   75|  2.67M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  2.67M|                      typename std::basic_string_view<CharT>::iterator,
   77|  2.67M|                      decltype(it)> &&
   78|  2.67M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  2.67M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  2.67M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  2.67M|        return it;
   81|  2.67M|    }
   82|  2.67M|    else {
   83|  2.67M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  2.67M|    }
   85|  2.67M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   182k|{
   54|   182k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   182k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   182k|        return true;
   57|   182k|    }
   58|   182k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   182k|                           ranges::iterator_t<Range>,
   60|   182k|                           typename detail::basic_scan_buffer<
   61|   182k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   182k|        auto beg = ranges::begin(r);
   63|   182k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 182k, False: 0]
  ------------------
   64|   182k|            return false;
   65|   182k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   182k|    else {
   79|   182k|        return false;
   80|   182k|    }
   81|   182k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   182k|{
  112|   182k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   182k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   182k|        return r;
  115|   182k|    }
  116|   182k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   182k|                           ranges::iterator_t<Range>,
  118|   182k|                           typename detail::basic_scan_buffer<
  119|   182k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   182k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   182k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   182k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   182k|                ranges::begin(r), ranges::end(r)));
  124|   182k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   182k|        }
  126|   182k|        else {
  127|   182k|            return ranges::begin(r).contiguous_segment();
  128|   182k|        }
  129|   182k|    }
  130|   182k|    else {
  131|   182k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   182k|    }
  133|   182k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   327k|{
  166|   327k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   327k|        return ranges_polyfill::usize(r);
  168|   327k|    }
  169|   327k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   327k|                           ranges::iterator_t<Range>,
  171|   327k|                           typename detail::basic_scan_buffer<
  172|   327k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   327k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   327k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   327k|                                       ranges::begin(r).position());
  176|   327k|        }
  177|   327k|        else {
  178|   327k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 327k, False: 0]
  ------------------
  179|   327k|                return static_cast<size_t>(
  180|   327k|                    ranges::begin(r).parent()->chars_available() -
  181|   327k|                    ranges::begin(r).position());
  182|   327k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   327k|        }
  185|   327k|    }
  186|   327k|    else {
  187|   327k|        return 0;
  188|   327k|    }
  189|   327k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   319k|{
   54|   319k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   319k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   319k|        return true;
   57|   319k|    }
   58|   319k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   319k|                           ranges::iterator_t<Range>,
   60|   319k|                           typename detail::basic_scan_buffer<
   61|   319k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   319k|        auto beg = ranges::begin(r);
   63|   319k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 319k, False: 0]
  ------------------
   64|   319k|            return false;
   65|   319k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   319k|    else {
   79|   319k|        return false;
   80|   319k|    }
   81|   319k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   319k|{
  112|   319k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   319k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   319k|        return r;
  115|   319k|    }
  116|   319k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   319k|                           ranges::iterator_t<Range>,
  118|   319k|                           typename detail::basic_scan_buffer<
  119|   319k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   319k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   319k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   319k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   319k|                ranges::begin(r), ranges::end(r)));
  124|   319k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   319k|        }
  126|   319k|        else {
  127|   319k|            return ranges::begin(r).contiguous_segment();
  128|   319k|        }
  129|   319k|    }
  130|   319k|    else {
  131|   319k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   319k|    }
  133|   319k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   561k|{
  166|   561k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   561k|        return ranges_polyfill::usize(r);
  168|   561k|    }
  169|   561k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   561k|                           ranges::iterator_t<Range>,
  171|   561k|                           typename detail::basic_scan_buffer<
  172|   561k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   561k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   561k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   561k|                                       ranges::begin(r).position());
  176|   561k|        }
  177|   561k|        else {
  178|   561k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 561k, False: 0]
  ------------------
  179|   561k|                return static_cast<size_t>(
  180|   561k|                    ranges::begin(r).parent()->chars_available() -
  181|   561k|                    ranges::begin(r).position());
  182|   561k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   561k|        }
  185|   561k|    }
  186|   561k|    else {
  187|   561k|        return 0;
  188|   561k|    }
  189|   561k|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  1.22M|{
  235|  1.22M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  1.22M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  1.22M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  1.22M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  1.22M|    }
  240|  1.22M|    else {
  241|  1.22M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  1.22M|    }
  243|  1.22M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  1.22M|    {
   50|  1.22M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  4.03M|    {
   63|  4.03M|        return sv;
   64|  4.03M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|   819k|{
  235|   819k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   819k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   819k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   819k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|   819k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|   819k|    }
  240|   819k|    else {
  241|   819k|        return contiguous_range_factory{SCN_FWD(range)};
  242|   819k|    }
  243|   819k|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|   819k|    {
   50|   819k|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|   158k|    {
  142|   158k|        return m_view;
  143|   158k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|  85.4k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  85.4k|{
  235|  85.4k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  85.4k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  85.4k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  85.4k|        return string_view_wrapper{SCN_FWD(range)};
  239|  85.4k|    }
  240|  85.4k|    else {
  241|  85.4k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  85.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  85.4k|    }
  243|  85.4k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  85.4k|    {
   97|  85.4k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  85.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  85.4k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  85.4k|    {
  181|  85.4k|        using value_t = ranges::range_value_t<Range>;
  182|  85.4k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  85.4k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  85.4k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  85.4k|            m_storage.reset();
  186|  85.4k|            m_view = string_view_type{ranges::data(range),
  187|  85.4k|                                      ranges_polyfill::usize(range)};
  188|  85.4k|        }
  189|  85.4k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  85.4k|                                          std::basic_string<CharT>>) {
  191|  85.4k|            m_storage.emplace(SCN_FWD(range));
  192|  85.4k|            m_view = string_view_type{*m_storage};
  193|  85.4k|        }
  194|  85.4k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  85.4k|                                          typename detail::basic_scan_buffer<
  196|  85.4k|                                              value_t>::forward_iterator> &&
  197|  85.4k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  85.4k|            auto beg_seg = range.begin().contiguous_segment();
  199|  85.4k|            auto end_seg = range.end().contiguous_segment();
  200|  85.4k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  85.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85.3k, False: 78]
  |  |  ------------------
  ------------------
  201|  85.4k|                             detail::to_address(end_seg.end()))) {
  202|  85.3k|                auto& str = m_storage.emplace();
  203|  85.3k|                str.reserve(range.end().position() - range.begin().position());
  204|  85.3k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  85.3k|                m_view = string_view_type{str};
  206|  85.3k|                return;
  207|  85.3k|            }
  208|       |
  209|     78|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     78|                                                            end_seg.data());
  211|     78|            m_storage.reset();
  212|     78|        }
  213|  85.4k|        else {
  214|  85.4k|            auto& str = m_storage.emplace();
  215|  85.4k|            if constexpr (ranges::sized_range<Range>) {
  216|  85.4k|                str.reserve(ranges_polyfill::usize(range));
  217|  85.4k|            }
  218|  85.4k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  85.4k|                      std::back_inserter(str));
  220|  85.4k|            m_view = string_view_type{str};
  221|  85.4k|        }
  222|  85.4k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|   844k|{
  235|   844k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   844k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   844k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   844k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|   844k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|   844k|    }
  240|   844k|    else {
  241|   844k|        return contiguous_range_factory{SCN_FWD(range)};
  242|   844k|    }
  243|   844k|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|   844k|    {
   50|   844k|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  1.56M|    {
   63|  1.56M|        return sv;
   64|  1.56M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|   456k|    {
  142|   456k|        return m_view;
  143|   456k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|   334k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   334k|{
  235|   334k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   334k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   334k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   334k|        return string_view_wrapper{SCN_FWD(range)};
  239|   334k|    }
  240|   334k|    else {
  241|   334k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   334k|    }
  243|   334k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   334k|    {
   97|   334k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   334k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   334k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   334k|    {
  181|   334k|        using value_t = ranges::range_value_t<Range>;
  182|   334k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   334k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   334k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   334k|            m_storage.reset();
  186|   334k|            m_view = string_view_type{ranges::data(range),
  187|   334k|                                      ranges_polyfill::usize(range)};
  188|   334k|        }
  189|   334k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   334k|                                          std::basic_string<CharT>>) {
  191|   334k|            m_storage.emplace(SCN_FWD(range));
  192|   334k|            m_view = string_view_type{*m_storage};
  193|   334k|        }
  194|   334k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   334k|                                          typename detail::basic_scan_buffer<
  196|   334k|                                              value_t>::forward_iterator> &&
  197|   334k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   334k|            auto beg_seg = range.begin().contiguous_segment();
  199|   334k|            auto end_seg = range.end().contiguous_segment();
  200|   334k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 334k, False: 166]
  |  |  ------------------
  ------------------
  201|   334k|                             detail::to_address(end_seg.end()))) {
  202|   334k|                auto& str = m_storage.emplace();
  203|   334k|                str.reserve(range.end().position() - range.begin().position());
  204|   334k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   334k|                m_view = string_view_type{str};
  206|   334k|                return;
  207|   334k|            }
  208|       |
  209|    166|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|    166|                                                            end_seg.data());
  211|    166|            m_storage.reset();
  212|    166|        }
  213|   334k|        else {
  214|   334k|            auto& str = m_storage.emplace();
  215|   334k|            if constexpr (ranges::sized_range<Range>) {
  216|   334k|                str.reserve(ranges_polyfill::usize(range));
  217|   334k|            }
  218|   334k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   334k|                      std::back_inserter(str));
  220|   334k|            m_view = string_view_type{str};
  221|   334k|        }
  222|   334k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  5.33M|{
   97|  5.33M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  5.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 21.0k, False: 5.31M]
  |  |  ------------------
  ------------------
   98|  21.0k|        return eof_error::eof;
   99|  21.0k|    }
  100|  5.31M|    return eof_error::good;
  101|  5.33M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  5.33M|{
   91|  5.33M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  5.33M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  5.33M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  5.33M|    {
   84|  5.33M|        return begin == end;
   85|  5.33M|    }
   86|  5.33M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   658k|{
   97|   658k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   658k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 209, False: 658k]
  |  |  ------------------
  ------------------
   98|    209|        return eof_error::eof;
   99|    209|    }
  100|   658k|    return eof_error::good;
  101|   658k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   658k|{
   91|   658k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   658k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   658k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   658k|    {
   84|   658k|        return begin == end;
   85|   658k|    }
   86|   658k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  5.38M|{
   97|  5.38M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  5.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.7k, False: 5.36M]
  |  |  ------------------
  ------------------
   98|  23.7k|        return eof_error::eof;
   99|  23.7k|    }
  100|  5.36M|    return eof_error::good;
  101|  5.38M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  5.38M|{
   91|  5.38M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  5.38M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  5.38M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  5.38M|    {
   84|  5.38M|        return begin == end;
   85|  5.38M|    }
   86|  5.38M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.14M|{
   97|  1.14M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 418, False: 1.14M]
  |  |  ------------------
  ------------------
   98|    418|        return eof_error::eof;
   99|    418|    }
  100|  1.14M|    return eof_error::good;
  101|  1.14M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.14M|{
   91|  1.14M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.14M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.14M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.14M|    {
   84|  1.14M|        return begin == end;
   85|  1.14M|    }
   86|  1.14M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  1.41M|{
  128|  1.41M|    return find_classic_impl(
  129|  1.41M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  1.41M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  1.41M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  1.42M|{
   31|  1.42M|    static_assert(sizeof(*source.data()) == 1);
   32|  1.42M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  1.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  1.42M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  1.42M|    return has_byte_greater(word, 127) != 0;
   37|  1.42M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  1.41M|{
   44|  1.41M|    auto it = source.begin();
   45|       |
   46|  1.43M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 1.42M, False: 4.74k]
  ------------------
   47|  1.42M|        auto sv =
   48|  1.42M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  1.42M|                .substr(0, 8);
   50|       |
   51|  1.42M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 1.33M, False: 90.8k]
  ------------------
   52|  1.33M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  1.33M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  1.33M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 1.31M, False: 18.8k]
  ------------------
   55|  1.31M|                break;
   56|  1.31M|            }
   57|  18.8k|            continue;
   58|  1.33M|        }
   59|       |
   60|   103k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 101k, False: 2.77k]
  ------------------
   61|   101k|            auto tmp =
   62|   101k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   101k|            auto res = get_next_code_point(tmp);
   64|   101k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 88.1k, False: 12.9k]
  ------------------
   65|  88.1k|                return it;
   66|  88.1k|            }
   67|  12.9k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  12.9k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  12.9k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  12.9k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  12.9k|        }
   71|  90.8k|    }
   72|       |
   73|  1.32M|    return detail::make_string_view_iterator(source, it);
   74|  1.41M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  2.54M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   101k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  1.22M|{
  300|  1.22M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  1.22M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  1.22M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  1.22M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  1.22M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  1.22M|        return ranges::next(ranges::begin(range),
  306|  1.22M|                            ranges::distance(buf.view().begin(), it));
  307|  1.22M|    }
  308|  1.22M|    else {
  309|  1.22M|        auto it = ranges::begin(range);
  310|       |
  311|  1.22M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  1.22M|            auto seg = get_contiguous_beginning(range);
  313|  1.22M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  1.22M|                seg_it != seg.end()) {
  315|  1.22M|                return ranges_polyfill::batch_next(
  316|  1.22M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  1.22M|            }
  318|  1.22M|            ranges_polyfill::batch_next(it, seg.size());
  319|  1.22M|        }
  320|       |
  321|  1.22M|        return read_while_code_point(
  322|  1.22M|            SCN_FWD(range),
  323|  1.22M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  1.22M|    }
  325|  1.22M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  1.22M|{
  459|  1.22M|    auto it = read_code_unit(range);
  460|  1.22M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  2.41M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 2.41M, False: 1.12M]
  ------------------
  465|  2.41M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 94.4k, False: 2.31M]
  ------------------
  466|  94.4k|            return *it;
  467|  94.4k|        }
  468|  2.41M|    }
  469|       |
  470|  1.12M|    return unexpected(parse_error::error);
  471|  1.22M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   293k|{
  482|   293k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 253k, False: 39.9k]
  ------------------
  483|   253k|        return ranges::begin(range);
  484|   253k|    }
  485|  39.9k|    return *result;
  486|   293k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  2.58M|{
  418|  2.58M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  2.58M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  2.58M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  2.58M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 41.2k, False: 2.54M]
  ------------------
  423|  41.2k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  41.2k|        }
  425|  2.54M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 2.51M, False: 23.7k]
  ------------------
  426|  2.51M|            return unexpected(parse_error::error);
  427|  2.51M|        }
  428|  23.7k|        return ranges::next(ranges::begin(range), str.size());
  429|  2.54M|    }
  430|  2.58M|    else {
  431|  2.58M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  2.58M|            if (ch < 'A' || ch > 'Z') {
  433|  2.58M|                return ch;
  434|  2.58M|            }
  435|  2.58M|            return static_cast<char_type>(ch +
  436|  2.58M|                                          static_cast<char_type>('a' - 'A'));
  437|  2.58M|        };
  438|       |
  439|  2.58M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  2.58M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  2.58M|        if (SCN_UNLIKELY(!std::equal(
  443|  2.58M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  2.58M|                    return ascii_tolower(a) ==
  445|  2.58M|                           static_cast<detail::char_t<Range>>(b);
  446|  2.58M|                }))) {
  447|  2.58M|            return unexpected(parse_error::error);
  448|  2.58M|        }
  449|       |
  450|  2.58M|        return it;
  451|  2.58M|    }
  452|  2.58M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  2.54M|{
  407|  2.54M|    unsigned char running_diff{0};
  408|  7.62M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 5.08M, False: 2.54M]
  ------------------
  409|  5.08M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  5.08M|    }
  411|  2.54M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 21.7k, False: 2.52M]
  |  Branch (411:33): [True: 1.98k, False: 2.51M]
  ------------------
  412|  2.54M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|   825k|{
  332|   825k|    auto it = read_code_unit(range);
  333|   825k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   825k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.07k, False: 824k]
  |  |  ------------------
  ------------------
  334|  1.07k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.07k|    }
  336|       |
  337|   824k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   824k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 452k, False: 371k]
  |  |  ------------------
  ------------------
  338|   824k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   452k|        return unexpected(parse_error::error);
  340|   452k|    }
  341|       |
  342|   371k|    return *it;
  343|   824k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   182k|{
  300|   182k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   182k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   182k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   182k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   182k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   182k|        return ranges::next(ranges::begin(range),
  306|   182k|                            ranges::distance(buf.view().begin(), it));
  307|   182k|    }
  308|   182k|    else {
  309|   182k|        auto it = ranges::begin(range);
  310|       |
  311|   182k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   182k|            auto seg = get_contiguous_beginning(range);
  313|   182k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   182k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 182k, False: 0]
  ------------------
  315|   182k|                return ranges_polyfill::batch_next(
  316|   182k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   182k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   182k|    }
  325|   182k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   182k|{
  459|   182k|    auto it = read_code_unit(range);
  460|   182k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 182k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   365k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 365k, False: 182k]
  ------------------
  465|   365k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 365k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   365k|    }
  469|       |
  470|   182k|    return unexpected(parse_error::error);
  471|   182k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|  74.4k|{
  482|  74.4k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 74.4k, False: 0]
  ------------------
  483|  74.4k|        return ranges::begin(range);
  484|  74.4k|    }
  485|      0|    return *result;
  486|  74.4k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   327k|{
  418|   327k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   327k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   327k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   327k|        if (ranges::size(range) < str.size()) {
  423|   327k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   327k|        }
  425|   327k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   327k|            return unexpected(parse_error::error);
  427|   327k|        }
  428|   327k|        return ranges::next(ranges::begin(range), str.size());
  429|   327k|    }
  430|   327k|    else {
  431|   327k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   327k|            if (ch < 'A' || ch > 'Z') {
  433|   327k|                return ch;
  434|   327k|            }
  435|   327k|            return static_cast<char_type>(ch +
  436|   327k|                                          static_cast<char_type>('a' - 'A'));
  437|   327k|        };
  438|       |
  439|   327k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   327k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   327k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   327k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 299, False: 326k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    299|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    299|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    299|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    299|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    299|    }                                                  \
  |  |  |  |   70|   327k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   326k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   326k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 326k, False: 0]
  |  |  ------------------
  ------------------
  443|   326k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   326k|                    return ascii_tolower(a) ==
  445|   326k|                           static_cast<detail::char_t<Range>>(b);
  446|   326k|                }))) {
  447|   326k|            return unexpected(parse_error::error);
  448|   326k|        }
  449|       |
  450|      0|        return it;
  451|   326k|    }
  452|   327k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   326k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   326k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 326k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   326k|                return ch;
  434|   326k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   326k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   110k|{
  332|   110k|    auto it = read_code_unit(range);
  333|   110k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   110k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 110k, False: 0]
  |  |  ------------------
  ------------------
  338|   110k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   110k|        return unexpected(parse_error::error);
  340|   110k|    }
  341|       |
  342|      0|    return *it;
  343|   110k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   158k|{
  159|   158k|    auto it = read_while_code_unit(range, pred);
  160|   158k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 73.2k, False: 85.4k]
  ------------------
  161|  73.2k|        return unexpected(parse_error::error);
  162|  73.2k|    }
  163|  85.4k|    return it;
  164|   158k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   158k|{
  139|   158k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   158k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   158k|{
  131|   158k|    return ranges::find_if(range, pred);
  132|   158k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  1.23M|{
  300|  1.23M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  1.23M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  1.23M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  1.23M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  1.23M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  1.23M|        return ranges::next(ranges::begin(range),
  306|  1.23M|                            ranges::distance(buf.view().begin(), it));
  307|  1.23M|    }
  308|  1.23M|    else {
  309|  1.23M|        auto it = ranges::begin(range);
  310|       |
  311|  1.23M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  1.23M|            auto seg = get_contiguous_beginning(range);
  313|  1.23M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  1.23M|                seg_it != seg.end()) {
  315|  1.23M|                return ranges_polyfill::batch_next(
  316|  1.23M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  1.23M|            }
  318|  1.23M|            ranges_polyfill::batch_next(it, seg.size());
  319|  1.23M|        }
  320|       |
  321|  1.23M|        return read_while_code_point(
  322|  1.23M|            SCN_FWD(range),
  ------------------
  |  |  248|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  1.23M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  1.23M|    }
  325|  1.23M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  1.23M|{
  264|  1.23M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  1.23M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  1.23M|{
  231|  1.23M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  1.23M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  1.23M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  1.23M|    }
  235|  1.23M|    else {
  236|  1.23M|        auto it = ranges::begin(range);
  237|  1.23M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  1.23M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  1.23M|            seg_it != seg.end()) {
  241|  1.23M|            return ranges_polyfill::batch_next(
  242|  1.23M|                it, ranges::distance(seg.begin(), seg_it));
  243|  1.23M|        }
  244|       |
  245|  1.23M|        while (it != ranges::end(range)) {
  246|  1.23M|            const auto [iter, value] =
  247|  1.23M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  1.23M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  1.23M|            if (pred(cp)) {
  250|  1.23M|                return it;
  251|  1.23M|            }
  252|  1.23M|            it = iter;
  253|  1.23M|        }
  254|       |
  255|  1.23M|        return it;
  256|  1.23M|    }
  257|  1.23M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  1.23M|{
  178|  1.23M|    static_assert(ranges::contiguous_range<Range> &&
  179|  1.23M|                  ranges::sized_range<Range>);
  180|       |
  181|  1.23M|    std::array<char32_t, 16> cp_buf{};
  182|  1.23M|    std::array<uint8_t, 16> idx_buf{};
  183|  1.23M|    auto it = ranges::begin(range);
  184|  1.24M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 1.24M, False: 6.06k]
  ------------------
  185|  1.24M|        auto chunk_begin = it;
  186|  1.24M|        size_t code_point_count = 0;
  187|  1.24M|        uint8_t code_unit_idx = 0;
  188|  18.4M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 17.5M, False: 974k]
  |  Branch (188:52): [True: 17.2M, False: 266k]
  ------------------
  189|  17.2M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 17.2M, False: 0]
  ------------------
  190|  17.2M|                idx_buf[code_point_count] = code_unit_idx;
  191|  17.2M|                ++code_point_count;
  192|  17.2M|            }
  193|  17.2M|            ++it;
  194|  17.2M|            ++code_unit_idx;
  195|  17.2M|        }
  196|       |
  197|  1.24M|        auto input = detail::make_string_view_from_pointers(
  198|  1.24M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  1.24M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  1.24M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  1.24M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  2.40M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 2.39M, False: 10.5k]
  ------------------
  217|  2.39M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 1.22M, False: 1.16M]
  ------------------
  218|  1.22M|                return chunk_begin + idx_buf[i];
  219|  1.22M|            }
  220|  2.39M|        }
  221|  1.24M|    }
  222|       |
  223|  6.06k|    return it;
  224|  1.23M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  2.39M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  1.22M|{
  459|  1.22M|    auto it = read_code_unit(range);
  460|  1.22M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  2.42M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 2.42M, False: 1.14M]
  ------------------
  465|  2.42M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 83.5k, False: 2.34M]
  ------------------
  466|  83.5k|            return *it;
  467|  83.5k|        }
  468|  2.42M|    }
  469|       |
  470|  1.14M|    return unexpected(parse_error::error);
  471|  1.22M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   307k|{
  482|   307k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 270k, False: 36.9k]
  ------------------
  483|   270k|        return ranges::begin(range);
  484|   270k|    }
  485|  36.9k|    return *result;
  486|   307k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  2.57M|{
  418|  2.57M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  2.57M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  2.57M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  2.57M|        if (ranges::size(range) < str.size()) {
  423|  2.57M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  2.57M|        }
  425|  2.57M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  2.57M|            return unexpected(parse_error::error);
  427|  2.57M|        }
  428|  2.57M|        return ranges::next(ranges::begin(range), str.size());
  429|  2.57M|    }
  430|  2.57M|    else {
  431|  2.57M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  2.57M|            if (ch < 'A' || ch > 'Z') {
  433|  2.57M|                return ch;
  434|  2.57M|            }
  435|  2.57M|            return static_cast<char_type>(ch +
  436|  2.57M|                                          static_cast<char_type>('a' - 'A'));
  437|  2.57M|        };
  438|       |
  439|  2.57M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  2.57M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.57M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.57M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 93.4k, False: 2.48M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  93.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  93.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  93.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  93.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  93.4k|    }                                                  \
  |  |  |  |   70|  2.57M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  2.48M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  2.48M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.45M, False: 23.3k]
  |  |  ------------------
  ------------------
  443|  2.48M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  2.48M|                    return ascii_tolower(a) ==
  445|  2.48M|                           static_cast<detail::char_t<Range>>(b);
  446|  2.48M|                }))) {
  447|  2.45M|            return unexpected(parse_error::error);
  448|  2.45M|        }
  449|       |
  450|  23.3k|        return it;
  451|  2.48M|    }
  452|  2.57M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  3.59M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  3.59M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 3.40M, False: 189k]
  |  Branch (432:29): [True: 171k, False: 18.8k]
  ------------------
  433|  3.57M|                return ch;
  434|  3.57M|            }
  435|  18.8k|            return static_cast<char_type>(ch +
  436|  18.8k|                                          static_cast<char_type>('a' - 'A'));
  437|  3.59M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|   824k|{
  332|   824k|    auto it = read_code_unit(range);
  333|   824k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   824k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.34k, False: 822k]
  |  |  ------------------
  ------------------
  334|  1.34k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.34k|    }
  336|       |
  337|   822k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   822k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 478k, False: 344k]
  |  |  ------------------
  ------------------
  338|   822k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   478k|        return unexpected(parse_error::error);
  340|   478k|    }
  341|       |
  342|   344k|    return *it;
  343|   822k|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   319k|{
  178|   319k|    static_assert(ranges::contiguous_range<Range> &&
  179|   319k|                  ranges::sized_range<Range>);
  180|       |
  181|   319k|    std::array<char32_t, 16> cp_buf{};
  182|   319k|    std::array<uint8_t, 16> idx_buf{};
  183|   319k|    auto it = ranges::begin(range);
  184|   407k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 319k, False: 88.6k]
  ------------------
  185|   319k|        auto chunk_begin = it;
  186|   319k|        size_t code_point_count = 0;
  187|   319k|        uint8_t code_unit_idx = 0;
  188|   638k|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 638k, False: 0]
  |  Branch (188:52): [True: 319k, False: 319k]
  ------------------
  189|   319k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 319k, False: 0]
  ------------------
  190|   319k|                idx_buf[code_point_count] = code_unit_idx;
  191|   319k|                ++code_point_count;
  192|   319k|            }
  193|   319k|            ++it;
  194|   319k|            ++code_unit_idx;
  195|   319k|        }
  196|       |
  197|   319k|        auto input = detail::make_string_view_from_pointers(
  198|   319k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   319k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   319k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   319k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 319k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   407k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 319k, False: 88.6k]
  ------------------
  217|   319k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 230k, False: 88.6k]
  ------------------
  218|   230k|                return chunk_begin + idx_buf[i];
  219|   230k|            }
  220|   319k|        }
  221|   319k|    }
  222|       |
  223|  88.6k|    return it;
  224|   319k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   319k|{
  300|   319k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   319k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   319k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   319k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   319k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   319k|        return ranges::next(ranges::begin(range),
  306|   319k|                            ranges::distance(buf.view().begin(), it));
  307|   319k|    }
  308|   319k|    else {
  309|   319k|        auto it = ranges::begin(range);
  310|       |
  311|   319k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   319k|            auto seg = get_contiguous_beginning(range);
  313|   319k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   319k|                seg_it != seg.end()) {
  315|   319k|                return ranges_polyfill::batch_next(
  316|   319k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   319k|            }
  318|   319k|            ranges_polyfill::batch_next(it, seg.size());
  319|   319k|        }
  320|       |
  321|   319k|        return read_while_code_point(
  322|   319k|            SCN_FWD(range),
  ------------------
  |  |  248|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   319k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   319k|    }
  325|   319k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   319k|{
  264|   319k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   319k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   319k|{
  231|   319k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   319k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   319k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   319k|    }
  235|   319k|    else {
  236|   319k|        auto it = ranges::begin(range);
  237|   319k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   319k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   319k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 230k, False: 88.6k]
  ------------------
  241|   230k|            return ranges_polyfill::batch_next(
  242|   230k|                it, ranges::distance(seg.begin(), seg_it));
  243|   230k|        }
  244|       |
  245|   177k|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 177k, False: 44]
  ------------------
  246|   177k|            const auto [iter, value] =
  247|   177k|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|   177k|            const auto cp = decode_code_point_exhaustive(value.view());
  249|   177k|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 88.6k, False: 88.6k]
  ------------------
  250|  88.6k|                return it;
  251|  88.6k|            }
  252|  88.6k|            it = iter;
  253|  88.6k|        }
  254|       |
  255|     44|        return it;
  256|  88.6k|    }
  257|   319k|}
_ZN3scn2v24impl20read_code_point_intoIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_21iterator_value_resultINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_24contiguous_range_factoryINDTcl4implISG_EEE4typeEEEEEOSG_:
   41|   177k|{
   42|   177k|    SCN_EXPECT(ranges::begin(range) != ranges::end(range));
  ------------------
  |  |  242|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   43|       |
   44|      0|    auto it = ranges::begin(range);
   45|   177k|    const auto len = code_point_length_by_starting_code_unit(*it);
   46|       |
   47|   177k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
   48|      0|        for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (48:16): [True: 0, False: 0]
  ------------------
   49|      0|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (49:17): [True: 0, False: 0]
  ------------------
   50|      0|                break;
   51|      0|            }
   52|      0|        }
   53|       |
   54|      0|        return {it, make_contiguous_buffer(
   55|      0|                        ranges::subrange{ranges::begin(range), it})};
   56|      0|    }
   57|       |
   58|   177k|    if (len == 1) {
  ------------------
  |  Branch (58:9): [True: 177k, False: 0]
  ------------------
   59|   177k|        ++it;
   60|   177k|        return {it, make_contiguous_buffer(
   61|   177k|                        ranges::subrange{ranges::begin(range), it})};
   62|   177k|    }
   63|       |
   64|      0|    ranges::advance(it, static_cast<ranges::range_difference_t<Range>>(len),
   65|      0|                    ranges::end(range));
   66|      0|    return {it,
   67|      0|            make_contiguous_buffer(ranges::subrange{ranges::begin(range), it})};
   68|   177k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   496k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   318k|{
  459|   318k|    auto it = read_code_unit(range);
  460|   318k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 318k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   637k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 637k, False: 318k]
  ------------------
  465|   637k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 637k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   637k|    }
  469|       |
  470|   318k|    return unexpected(parse_error::error);
  471|   318k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   137k|{
  482|   137k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 137k, False: 0]
  ------------------
  483|   137k|        return ranges::begin(range);
  484|   137k|    }
  485|      0|    return *result;
  486|   137k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   561k|{
  418|   561k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   561k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   561k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   561k|        if (ranges::size(range) < str.size()) {
  423|   561k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   561k|        }
  425|   561k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   561k|            return unexpected(parse_error::error);
  427|   561k|        }
  428|   561k|        return ranges::next(ranges::begin(range), str.size());
  429|   561k|    }
  430|   561k|    else {
  431|   561k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   561k|            if (ch < 'A' || ch > 'Z') {
  433|   561k|                return ch;
  434|   561k|            }
  435|   561k|            return static_cast<char_type>(ch +
  436|   561k|                                          static_cast<char_type>('a' - 'A'));
  437|   561k|        };
  438|       |
  439|   561k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   561k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   561k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   561k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   561k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 278, False: 560k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    278|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    278|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    278|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    278|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    278|    }                                                  \
  |  |  |  |   70|   561k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   560k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   560k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   560k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   560k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 560k, False: 0]
  |  |  ------------------
  ------------------
  443|   560k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   560k|                    return ascii_tolower(a) ==
  445|   560k|                           static_cast<detail::char_t<Range>>(b);
  446|   560k|                }))) {
  447|   560k|            return unexpected(parse_error::error);
  448|   560k|        }
  449|       |
  450|      0|        return it;
  451|   560k|    }
  452|   561k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|   560k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   560k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 560k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   560k|                return ch;
  434|   560k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   560k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   189k|{
  332|   189k|    auto it = read_code_unit(range);
  333|   189k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 189k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   189k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 189k, False: 0]
  |  |  ------------------
  ------------------
  338|   189k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   189k|        return unexpected(parse_error::error);
  340|   189k|    }
  341|       |
  342|      0|    return *it;
  343|   189k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   278k|{
  159|   278k|    auto it = read_while_code_unit(range, pred);
  160|   278k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 120k, False: 157k]
  ------------------
  161|   120k|        return unexpected(parse_error::error);
  162|   120k|    }
  163|   157k|    return it;
  164|   278k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   278k|{
  139|   278k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   278k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   278k|{
  131|   278k|    return ranges::find_if(range, pred);
  132|   278k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  2.04M|{
   36|  2.04M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.07k, False: 2.04M]
  |  |  ------------------
  ------------------
   37|  1.07k|        return unexpected(e);
   38|  1.07k|    }
   39|       |
   40|  2.04M|    return ranges::next(ranges::begin(range));
   41|  2.04M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   293k|{
   36|   293k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   293k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 293k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   293k|    return ranges::next(ranges::begin(range));
   41|   293k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   327k|{
   48|   327k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   327k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   327k|        const auto sz = ranges::ssize(range);
   52|   327k|        if (sz < count) {
   53|   327k|            return unexpected(eof_error::eof);
   54|   327k|        }
   55|       |
   56|   327k|        return ranges::next(ranges::begin(range), count);
   57|   327k|    }
   58|   327k|    else {
   59|   327k|        auto it = ranges::begin(range);
   60|   327k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 326k, False: 299]
  ------------------
   61|   326k|            return ranges_polyfill::batch_next(it, count);
   62|   326k|        }
   63|       |
   64|    598|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 598, False: 0]
  ------------------
   65|    598|             ++i, (void)++it) {
   66|    598|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 299, False: 299]
  ------------------
   67|    299|                return unexpected(eof_error::eof);
   68|    299|            }
   69|    598|        }
   70|       |
   71|      0|        return it;
   72|    299|    }
   73|   327k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  2.05M|{
   36|  2.05M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.34k, False: 2.05M]
  |  |  ------------------
  ------------------
   37|  1.34k|        return unexpected(e);
   38|  1.34k|    }
   39|       |
   40|  2.05M|    return ranges::next(ranges::begin(range));
   41|  2.05M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  2.57M|{
   48|  2.57M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  2.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  2.57M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  2.57M|        const auto sz = ranges::ssize(range);
   52|  2.57M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 93.4k, False: 2.48M]
  ------------------
   53|  93.4k|            return unexpected(eof_error::eof);
   54|  93.4k|        }
   55|       |
   56|  2.48M|        return ranges::next(ranges::begin(range), count);
   57|  2.57M|    }
   58|  2.57M|    else {
   59|  2.57M|        auto it = ranges::begin(range);
   60|  2.57M|        if (guaranteed_minimum_size(range) >= count) {
   61|  2.57M|            return ranges_polyfill::batch_next(it, count);
   62|  2.57M|        }
   63|       |
   64|  2.57M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  2.57M|             ++i, (void)++it) {
   66|  2.57M|            if (it == ranges::end(range)) {
   67|  2.57M|                return unexpected(eof_error::eof);
   68|  2.57M|            }
   69|  2.57M|        }
   70|       |
   71|  2.57M|        return it;
   72|  2.57M|    }
   73|  2.57M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   508k|{
   36|   508k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   508k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 508k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   508k|    return ranges::next(ranges::begin(range));
   41|   508k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   561k|{
   48|   561k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   561k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   561k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   561k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   561k|        const auto sz = ranges::ssize(range);
   52|   561k|        if (sz < count) {
   53|   561k|            return unexpected(eof_error::eof);
   54|   561k|        }
   55|       |
   56|   561k|        return ranges::next(ranges::begin(range), count);
   57|   561k|    }
   58|   561k|    else {
   59|   561k|        auto it = ranges::begin(range);
   60|   561k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 560k, False: 278]
  ------------------
   61|   560k|            return ranges_polyfill::batch_next(it, count);
   62|   560k|        }
   63|       |
   64|    556|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 556, False: 0]
  ------------------
   65|    556|             ++i, (void)++it) {
   66|    556|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 278, False: 278]
  ------------------
   67|    278|                return unexpected(eof_error::eof);
   68|    278|            }
   69|    556|        }
   70|       |
   71|      0|        return it;
   72|    278|    }
   73|   561k|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  1.48M|{
   33|  1.48M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  1.48M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|   388k|{
   39|   388k|    static_assert(std::is_same_v<Locale, std::locale>);
   40|   388k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 194k, False: 194k]
  ------------------
   41|   388k|                    : std::locale{};
   42|   388k|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   184k|    {
  112|   184k|        auto stdloc = loc.get<std::locale>();
  113|   184k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   184k|        grouping = numpunct.grouping();
  115|   184k|        thousands_sep =
  116|   184k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 184k]
  ------------------
  117|   184k|        decimal_point = numpunct.decimal_point();
  118|   184k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   184k|{
   49|   184k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 184k, False: 0]
  ------------------
   50|   184k|        return std::use_facet<Facet>(stdloc);
   51|   184k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   184k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   203k|    {
  112|   203k|        auto stdloc = loc.get<std::locale>();
  113|   203k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   203k|        grouping = numpunct.grouping();
  115|   203k|        thousands_sep =
  116|   203k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 203k]
  ------------------
  117|   203k|        decimal_point = numpunct.decimal_point();
  118|   203k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   203k|{
   49|   203k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 203k, False: 0]
  ------------------
   50|   203k|        return std::use_facet<Facet>(stdloc);
   51|   203k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   203k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  1.22M|{
   46|  1.22M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 1.22M, False: 0]
  ------------------
   47|  1.22M|        auto it = read_while_classic_space(range);
   48|  1.22M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  1.22M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.74k, False: 1.22M]
  |  |  ------------------
  ------------------
   50|  4.74k|            return unexpected(e);
   51|  4.74k|        }
   52|       |
   53|  1.22M|        return it;
   54|  1.22M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  1.22M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  1.42M|    {
  126|  1.42M|        return true;
  127|  1.42M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   182k|{
   46|   182k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 182k, False: 0]
  ------------------
   47|   182k|        auto it = read_while_classic_space(range);
   48|   182k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   182k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 182k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   182k|        return it;
   54|   182k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   182k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  1.05M|    {
  131|  1.05M|        reader_error_handler eh{};
  132|  1.05M|        get_derived().check_specs_impl(specs, eh);
  133|  1.05M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  1.05M|        return {};
  137|  1.05M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  1.05M|    {
  142|  1.05M|        return static_cast<Derived&>(*this);
  143|  1.05M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  2.23M|    {
   35|  2.23M|        return m_msg == nullptr;
   36|  2.23M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  1.23M|{
   46|  1.23M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 1.23M, False: 0]
  ------------------
   47|  1.23M|        auto it = read_while_classic_space(range);
   48|  1.23M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  1.23M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.06k, False: 1.22M]
  |  |  ------------------
  ------------------
   50|  6.06k|            return unexpected(e);
   51|  6.06k|        }
   52|       |
   53|  1.22M|        return it;
   54|  1.23M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  1.23M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  1.57M|    {
  126|  1.57M|        return true;
  127|  1.57M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  1.17M|    {
  131|  1.17M|        reader_error_handler eh{};
  132|  1.17M|        get_derived().check_specs_impl(specs, eh);
  133|  1.17M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.17M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  1.17M|        return {};
  137|  1.17M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  1.17M|    {
  142|  1.17M|        return static_cast<Derived&>(*this);
  143|  1.17M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   319k|{
   46|   319k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 319k, False: 0]
  ------------------
   47|   319k|        auto it = read_while_classic_space(range);
   48|   319k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   319k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 44, False: 318k]
  |  |  ------------------
  ------------------
   50|     44|            return unexpected(e);
   51|     44|        }
   52|       |
   53|   318k|        return it;
   54|   319k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   319k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   163k|{
  218|   163k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   163k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   163k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   163k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   163k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 8.14k, False: 155k]
  ------------------
  224|  8.14k|        SCN_UNLIKELY_ATTR
  225|  8.14k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  8.14k|                                     "Invalid integer value");
  227|  8.14k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   155k|    auto start = source.data();
  231|   155k|    const auto end = source.data() + source.size();
  232|   155k|    {
  233|   347k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 344k, False: 3.29k]
  ------------------
  234|   344k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 151k, False: 192k]
  ------------------
  235|   151k|                break;
  236|   151k|            }
  237|   344k|        }
  238|   155k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 27.9k, False: 127k]
  |  |  |  Branch (153:45): [True: 3.29k, False: 151k]
  |  |  |  Branch (153:45): [True: 24.6k, False: 127k]
  |  |  ------------------
  ------------------
  239|  27.9k|            value = 0;
  240|  27.9k|            return ranges::next(source.begin(),
  241|  27.9k|                                ranges::distance(source.data(), start));
  242|  27.9k|        }
  243|   155k|    }
  244|       |
  245|   127k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   127k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 90.2k, False: 36.7k]
  ------------------
  247|  90.2k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|  90.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  90.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  90.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.1k, False: 78.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.1k|    }                                                  \
  |  |  |  |   70|  90.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|  78.0k|                             detail::make_string_view_from_pointers(start, end),
  249|  78.0k|                             value, sign == sign_type::minus_sign));
  250|  78.0k|            return ranges::next(source.begin(),
  251|  78.0k|                                ranges::distance(source.data(), ptr));
  252|  90.2k|        }
  253|   127k|    }
  254|       |
  255|  36.7k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  36.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.09k, False: 32.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.09k|    }                                                  \
  |  |  |  |   70|  36.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  32.6k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  32.6k|                     base, sign == sign_type::minus_sign));
  258|  32.6k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  36.7k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   180k|{
  218|   180k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   180k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   180k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   180k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   180k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   180k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   180k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 20.1k, False: 160k]
  ------------------
  224|  20.1k|        SCN_UNLIKELY_ATTR
  225|  20.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  20.1k|                                     "Invalid integer value");
  227|  20.1k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   160k|    auto start = source.data();
  231|   160k|    const auto end = source.data() + source.size();
  232|   160k|    {
  233|   348k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 345k, False: 3.23k]
  ------------------
  234|   345k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 157k, False: 188k]
  ------------------
  235|   157k|                break;
  236|   157k|            }
  237|   345k|        }
  238|   160k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.8k, False: 133k]
  |  |  |  Branch (153:45): [True: 3.23k, False: 157k]
  |  |  |  Branch (153:45): [True: 23.6k, False: 133k]
  |  |  ------------------
  ------------------
  239|  26.8k|            value = 0;
  240|  26.8k|            return ranges::next(source.begin(),
  241|  26.8k|                                ranges::distance(source.data(), start));
  242|  26.8k|        }
  243|   160k|    }
  244|       |
  245|   133k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   133k|        if (base == 10) {
  247|   133k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   133k|                             detail::make_string_view_from_pointers(start, end),
  249|   133k|                             value, sign == sign_type::minus_sign));
  250|   133k|            return ranges::next(source.begin(),
  251|   133k|                                ranges::distance(source.data(), ptr));
  252|   133k|        }
  253|   133k|    }
  254|       |
  255|   133k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 26.0k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  26.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  26.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  26.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  26.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  26.0k|    }                                                  \
  |  |  |  |   70|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   107k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   107k|                     base, sign == sign_type::minus_sign));
  258|   107k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   133k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   204k|{
  218|   204k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   204k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   204k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   204k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   204k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   204k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   204k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   204k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   204k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   204k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   204k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   204k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   204k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 9.51k, False: 195k]
  ------------------
  224|  9.51k|        SCN_UNLIKELY_ATTR
  225|  9.51k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  9.51k|                                     "Invalid integer value");
  227|  9.51k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   195k|    auto start = source.data();
  231|   195k|    const auto end = source.data() + source.size();
  232|   195k|    {
  233|   410k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 405k, False: 4.30k]
  ------------------
  234|   405k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 191k, False: 214k]
  ------------------
  235|   191k|                break;
  236|   191k|            }
  237|   405k|        }
  238|   195k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 37.4k, False: 158k]
  |  |  |  Branch (153:45): [True: 4.30k, False: 191k]
  |  |  |  Branch (153:45): [True: 33.1k, False: 158k]
  |  |  ------------------
  ------------------
  239|  37.4k|            value = 0;
  240|  37.4k|            return ranges::next(source.begin(),
  241|  37.4k|                                ranges::distance(source.data(), start));
  242|  37.4k|        }
  243|   195k|    }
  244|       |
  245|   158k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   158k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 104k, False: 53.2k]
  ------------------
  247|   104k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 721, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    721|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    721|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    721|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    721|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    721|    }                                                  \
  |  |  |  |   70|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   104k|                             detail::make_string_view_from_pointers(start, end),
  249|   104k|                             value, sign == sign_type::minus_sign));
  250|   104k|            return ranges::next(source.begin(),
  251|   104k|                                ranges::distance(source.data(), ptr));
  252|   104k|        }
  253|   158k|    }
  254|       |
  255|  53.2k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  53.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 659, False: 52.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    659|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    659|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    659|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    659|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    659|    }                                                  \
  |  |  |  |   70|  53.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  52.6k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  52.6k|                     base, sign == sign_type::minus_sign));
  258|  52.6k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  53.2k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   217k|{
  218|   217k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   217k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   217k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   217k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   217k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   217k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   217k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 21.2k, False: 196k]
  ------------------
  224|  21.2k|        SCN_UNLIKELY_ATTR
  225|  21.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  21.2k|                                     "Invalid integer value");
  227|  21.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   196k|    auto start = source.data();
  231|   196k|    const auto end = source.data() + source.size();
  232|   196k|    {
  233|   404k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 400k, False: 4.14k]
  ------------------
  234|   400k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 192k, False: 208k]
  ------------------
  235|   192k|                break;
  236|   192k|            }
  237|   400k|        }
  238|   196k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   388k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34.8k, False: 161k]
  |  |  |  Branch (153:45): [True: 4.14k, False: 192k]
  |  |  |  Branch (153:45): [True: 30.6k, False: 161k]
  |  |  ------------------
  ------------------
  239|  34.8k|            value = 0;
  240|  34.8k|            return ranges::next(source.begin(),
  241|  34.8k|                                ranges::distance(source.data(), start));
  242|  34.8k|        }
  243|   196k|    }
  244|       |
  245|   161k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   161k|        if (base == 10) {
  247|   161k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   161k|                             detail::make_string_view_from_pointers(start, end),
  249|   161k|                             value, sign == sign_type::minus_sign));
  250|   161k|            return ranges::next(source.begin(),
  251|   161k|                                ranges::distance(source.data(), ptr));
  252|   161k|        }
  253|   161k|    }
  254|       |
  255|   161k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.29k, False: 160k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.29k|    }                                                  \
  |  |  |  |   70|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   160k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   160k|                     base, sign == sign_type::minus_sign));
  258|   160k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   161k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   207k|{
  218|   207k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   207k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   207k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   207k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   207k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   207k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   207k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   207k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   207k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   207k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   207k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   207k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   207k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 9.94k, False: 197k]
  ------------------
  224|  9.94k|        SCN_UNLIKELY_ATTR
  225|  9.94k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  9.94k|                                     "Invalid integer value");
  227|  9.94k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   197k|    auto start = source.data();
  231|   197k|    const auto end = source.data() + source.size();
  232|   197k|    {
  233|   413k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 409k, False: 4.39k]
  ------------------
  234|   409k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 193k, False: 215k]
  ------------------
  235|   193k|                break;
  236|   193k|            }
  237|   409k|        }
  238|   197k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   390k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 37.9k, False: 159k]
  |  |  |  Branch (153:45): [True: 4.39k, False: 193k]
  |  |  |  Branch (153:45): [True: 33.5k, False: 159k]
  |  |  ------------------
  ------------------
  239|  37.9k|            value = 0;
  240|  37.9k|            return ranges::next(source.begin(),
  241|  37.9k|                                ranges::distance(source.data(), start));
  242|  37.9k|        }
  243|   197k|    }
  244|       |
  245|   159k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   159k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 105k, False: 54.0k]
  ------------------
  247|   105k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 310, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    310|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    310|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    310|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    310|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    310|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   105k|                             detail::make_string_view_from_pointers(start, end),
  249|   105k|                             value, sign == sign_type::minus_sign));
  250|   105k|            return ranges::next(source.begin(),
  251|   105k|                                ranges::distance(source.data(), ptr));
  252|   105k|        }
  253|   159k|    }
  254|       |
  255|  54.0k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  54.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  54.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  54.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 259, False: 53.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    259|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    259|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    259|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    259|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    259|    }                                                  \
  |  |  |  |   70|  54.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  53.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  53.8k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  53.8k|                     base, sign == sign_type::minus_sign));
  258|  53.8k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  54.0k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   220k|{
  218|   220k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   220k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   220k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   220k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   220k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 21.6k, False: 198k]
  ------------------
  224|  21.6k|        SCN_UNLIKELY_ATTR
  225|  21.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  21.6k|                                     "Invalid integer value");
  227|  21.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   198k|    auto start = source.data();
  231|   198k|    const auto end = source.data() + source.size();
  232|   198k|    {
  233|   408k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 403k, False: 4.23k]
  ------------------
  234|   403k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 194k, False: 209k]
  ------------------
  235|   194k|                break;
  236|   194k|            }
  237|   403k|        }
  238|   198k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 35.2k, False: 163k]
  |  |  |  Branch (153:45): [True: 4.23k, False: 194k]
  |  |  |  Branch (153:45): [True: 31.0k, False: 163k]
  |  |  ------------------
  ------------------
  239|  35.2k|            value = 0;
  240|  35.2k|            return ranges::next(source.begin(),
  241|  35.2k|                                ranges::distance(source.data(), start));
  242|  35.2k|        }
  243|   198k|    }
  244|       |
  245|   163k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   163k|        if (base == 10) {
  247|   163k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   163k|                             detail::make_string_view_from_pointers(start, end),
  249|   163k|                             value, sign == sign_type::minus_sign));
  250|   163k|            return ranges::next(source.begin(),
  251|   163k|                                ranges::distance(source.data(), ptr));
  252|   163k|        }
  253|   163k|    }
  254|       |
  255|   163k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   163k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 539, False: 162k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    539|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    539|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    539|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    539|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    539|    }                                                  \
  |  |  |  |   70|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   162k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   162k|                     base, sign == sign_type::minus_sign));
  258|   162k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   163k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   152k|{
  218|   152k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   152k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   152k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   152k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   152k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 6.29k, False: 146k]
  ------------------
  224|  6.29k|        SCN_UNLIKELY_ATTR
  225|  6.29k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  6.29k|                                     "Invalid integer value");
  227|  6.29k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   146k|    auto start = source.data();
  231|   146k|    const auto end = source.data() + source.size();
  232|   146k|    {
  233|   337k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 334k, False: 3.50k]
  ------------------
  234|   334k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 142k, False: 191k]
  ------------------
  235|   142k|                break;
  236|   142k|            }
  237|   334k|        }
  238|   146k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.6k, False: 115k]
  |  |  |  Branch (153:45): [True: 3.50k, False: 142k]
  |  |  |  Branch (153:45): [True: 27.1k, False: 115k]
  |  |  ------------------
  ------------------
  239|  30.6k|            value = 0;
  240|  30.6k|            return ranges::next(source.begin(),
  241|  30.6k|                                ranges::distance(source.data(), start));
  242|  30.6k|        }
  243|   146k|    }
  244|       |
  245|   115k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   115k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 78.4k, False: 37.1k]
  ------------------
  247|  78.4k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|  78.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.16k, False: 77.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.16k|    }                                                  \
  |  |  |  |   70|  78.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|  77.2k|                             detail::make_string_view_from_pointers(start, end),
  249|  77.2k|                             value, sign == sign_type::minus_sign));
  250|  77.2k|            return ranges::next(source.begin(),
  251|  77.2k|                                ranges::distance(source.data(), ptr));
  252|  78.4k|        }
  253|   115k|    }
  254|       |
  255|  37.1k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  37.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.15k, False: 33.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.15k|    }                                                  \
  |  |  |  |   70|  37.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  33.9k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  33.9k|                     base, sign == sign_type::minus_sign));
  258|  33.9k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  37.1k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   172k|{
  218|   172k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   172k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   172k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   172k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   172k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 18.8k, False: 153k]
  ------------------
  224|  18.8k|        SCN_UNLIKELY_ATTR
  225|  18.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  18.8k|                                     "Invalid integer value");
  227|  18.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   153k|    auto start = source.data();
  231|   153k|    const auto end = source.data() + source.size();
  232|   153k|    {
  233|   339k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 336k, False: 3.34k]
  ------------------
  234|   336k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 149k, False: 186k]
  ------------------
  235|   149k|                break;
  236|   149k|            }
  237|   336k|        }
  238|   153k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.7k, False: 124k]
  |  |  |  Branch (153:45): [True: 3.34k, False: 149k]
  |  |  |  Branch (153:45): [True: 25.3k, False: 124k]
  |  |  ------------------
  ------------------
  239|  28.7k|            value = 0;
  240|  28.7k|            return ranges::next(source.begin(),
  241|  28.7k|                                ranges::distance(source.data(), start));
  242|  28.7k|        }
  243|   153k|    }
  244|       |
  245|   124k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   124k|        if (base == 10) {
  247|   124k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   124k|                             detail::make_string_view_from_pointers(start, end),
  249|   124k|                             value, sign == sign_type::minus_sign));
  250|   124k|            return ranges::next(source.begin(),
  251|   124k|                                ranges::distance(source.data(), ptr));
  252|   124k|        }
  253|   124k|    }
  254|       |
  255|   124k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.2k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.2k|    }                                                  \
  |  |  |  |   70|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   100k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   100k|                     base, sign == sign_type::minus_sign));
  258|   100k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   124k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   171k|{
  218|   171k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   171k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   171k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   171k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   171k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 6.83k, False: 164k]
  ------------------
  224|  6.83k|        SCN_UNLIKELY_ATTR
  225|  6.83k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  6.83k|                                     "Invalid integer value");
  227|  6.83k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   164k|    auto start = source.data();
  231|   164k|    const auto end = source.data() + source.size();
  232|   164k|    {
  233|   365k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 361k, False: 3.78k]
  ------------------
  234|   361k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 160k, False: 200k]
  ------------------
  235|   160k|                break;
  236|   160k|            }
  237|   361k|        }
  238|   164k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 33.9k, False: 130k]
  |  |  |  Branch (153:45): [True: 3.78k, False: 160k]
  |  |  |  Branch (153:45): [True: 30.1k, False: 130k]
  |  |  ------------------
  ------------------
  239|  33.9k|            value = 0;
  240|  33.9k|            return ranges::next(source.begin(),
  241|  33.9k|                                ranges::distance(source.data(), start));
  242|  33.9k|        }
  243|   164k|    }
  244|       |
  245|   130k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   130k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 86.0k, False: 44.2k]
  ------------------
  247|  86.0k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|  86.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  86.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  86.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 408, False: 85.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    408|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    408|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    408|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    408|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    408|    }                                                  \
  |  |  |  |   70|  86.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|  85.6k|                             detail::make_string_view_from_pointers(start, end),
  249|  85.6k|                             value, sign == sign_type::minus_sign));
  250|  85.6k|            return ranges::next(source.begin(),
  251|  85.6k|                                ranges::distance(source.data(), ptr));
  252|  86.0k|        }
  253|   130k|    }
  254|       |
  255|  44.2k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  44.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 357, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    357|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    357|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    357|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    357|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    357|    }                                                  \
  |  |  |  |   70|  44.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  43.9k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  43.9k|                     base, sign == sign_type::minus_sign));
  258|  43.9k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  44.2k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   189k|{
  218|   189k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   189k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   189k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   189k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   189k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   189k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   189k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 19.3k, False: 170k]
  ------------------
  224|  19.3k|        SCN_UNLIKELY_ATTR
  225|  19.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  19.3k|                                     "Invalid integer value");
  227|  19.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   170k|    auto start = source.data();
  231|   170k|    const auto end = source.data() + source.size();
  232|   170k|    {
  233|   365k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 361k, False: 3.63k]
  ------------------
  234|   361k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 166k, False: 194k]
  ------------------
  235|   166k|                break;
  236|   166k|            }
  237|   361k|        }
  238|   170k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.4k, False: 138k]
  |  |  |  Branch (153:45): [True: 3.63k, False: 166k]
  |  |  |  Branch (153:45): [True: 27.7k, False: 138k]
  |  |  ------------------
  ------------------
  239|  31.4k|            value = 0;
  240|  31.4k|            return ranges::next(source.begin(),
  241|  31.4k|                                ranges::distance(source.data(), start));
  242|  31.4k|        }
  243|   170k|    }
  244|       |
  245|   138k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   138k|        if (base == 10) {
  247|   138k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   138k|                             detail::make_string_view_from_pointers(start, end),
  249|   138k|                             value, sign == sign_type::minus_sign));
  250|   138k|            return ranges::next(source.begin(),
  251|   138k|                                ranges::distance(source.data(), ptr));
  252|   138k|        }
  253|   138k|    }
  254|       |
  255|   138k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   138k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 752, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    752|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    752|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    752|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    752|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    752|    }                                                  \
  |  |  |  |   70|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   138k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   138k|                     base, sign == sign_type::minus_sign));
  258|   138k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   138k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   172k|{
  218|   172k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   172k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   172k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   172k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   172k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 6.95k, False: 165k]
  ------------------
  224|  6.95k|        SCN_UNLIKELY_ATTR
  225|  6.95k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  6.95k|                                     "Invalid integer value");
  227|  6.95k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   165k|    auto start = source.data();
  231|   165k|    const auto end = source.data() + source.size();
  232|   165k|    {
  233|   367k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 363k, False: 3.84k]
  ------------------
  234|   363k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 161k, False: 201k]
  ------------------
  235|   161k|                break;
  236|   161k|            }
  237|   363k|        }
  238|   165k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   327k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 34.2k, False: 131k]
  |  |  |  Branch (153:45): [True: 3.84k, False: 161k]
  |  |  |  Branch (153:45): [True: 30.4k, False: 131k]
  |  |  ------------------
  ------------------
  239|  34.2k|            value = 0;
  240|  34.2k|            return ranges::next(source.begin(),
  241|  34.2k|                                ranges::distance(source.data(), start));
  242|  34.2k|        }
  243|   165k|    }
  244|       |
  245|   131k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   131k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 86.6k, False: 44.8k]
  ------------------
  247|  86.6k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|  86.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  86.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  86.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 160, False: 86.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    160|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    160|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    160|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    160|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    160|    }                                                  \
  |  |  |  |   70|  86.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  86.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|  86.4k|                             detail::make_string_view_from_pointers(start, end),
  249|  86.4k|                             value, sign == sign_type::minus_sign));
  250|  86.4k|            return ranges::next(source.begin(),
  251|  86.4k|                                ranges::distance(source.data(), ptr));
  252|  86.6k|        }
  253|   131k|    }
  254|       |
  255|  44.8k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  44.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  44.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  44.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  44.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 128, False: 44.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    128|    }                                                  \
  |  |  |  |   70|  44.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  44.7k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  44.7k|                     base, sign == sign_type::minus_sign));
  258|  44.7k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  44.8k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   191k|{
  218|   191k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   191k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   191k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   191k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   191k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 19.4k, False: 171k]
  ------------------
  224|  19.4k|        SCN_UNLIKELY_ATTR
  225|  19.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  19.4k|                                     "Invalid integer value");
  227|  19.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   171k|    auto start = source.data();
  231|   171k|    const auto end = source.data() + source.size();
  232|   171k|    {
  233|   367k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 363k, False: 3.69k]
  ------------------
  234|   363k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 168k, False: 195k]
  ------------------
  235|   168k|                break;
  236|   168k|            }
  237|   363k|        }
  238|   171k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 31.7k, False: 140k]
  |  |  |  Branch (153:45): [True: 3.69k, False: 168k]
  |  |  |  Branch (153:45): [True: 28.0k, False: 140k]
  |  |  ------------------
  ------------------
  239|  31.7k|            value = 0;
  240|  31.7k|            return ranges::next(source.begin(),
  241|  31.7k|                                ranges::distance(source.data(), start));
  242|  31.7k|        }
  243|   171k|    }
  244|       |
  245|   140k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   140k|        if (base == 10) {
  247|   140k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   140k|                             detail::make_string_view_from_pointers(start, end),
  249|   140k|                             value, sign == sign_type::minus_sign));
  250|   140k|            return ranges::next(source.begin(),
  251|   140k|                                ranges::distance(source.data(), ptr));
  252|   140k|        }
  253|   140k|    }
  254|       |
  255|   140k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 284, False: 139k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    284|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    284|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    284|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    284|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    284|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   139k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   139k|                     base, sign == sign_type::minus_sign));
  258|   139k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   140k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   260k|{
  126|   260k|    auto max_digits = maxdigits_u64(base);
  127|   260k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 686, False: 259k]
  ------------------
  128|    686|        return true;
  129|    686|    }
  130|   259k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 379, False: 259k]
  |  Branch (130:39): [True: 76, False: 303]
  ------------------
  131|     76|        return true;
  132|     76|    }
  133|   259k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   259k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 41.5k, False: 218k]
  ------------------
  135|   259k|                      static_cast<uint64_t>(is_negative)) {
  136|  41.5k|            SCN_UNLIKELY_ATTR
  137|  41.5k|            return true;
  138|  41.5k|        }
  139|   259k|    }
  140|       |
  141|   218k|    return false;
  142|   259k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  1.68M|{
   96|  1.68M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  1.68M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  2.31k|{
  116|  2.31k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  2.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  2.31k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   218k|{
  147|   218k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 20.3k, False: 198k]
  ------------------
  148|  20.3k|        SCN_MSVC_PUSH
  149|  20.3k|        SCN_MSVC_IGNORE(4146)
  150|  20.3k|        return static_cast<T>(
  151|  20.3k|            -std::numeric_limits<T>::max() -
  152|  20.3k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  20.3k|        SCN_MSVC_POP
  154|  20.3k|    }
  155|       |
  156|   198k|    return static_cast<T>(u64val);
  157|   218k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|   319k|{
  126|   319k|    auto max_digits = maxdigits_u64(base);
  127|   319k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 704, False: 318k]
  ------------------
  128|    704|        return true;
  129|    704|    }
  130|   318k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 379, False: 318k]
  |  Branch (130:39): [True: 76, False: 303]
  ------------------
  131|     76|        return true;
  132|     76|    }
  133|   318k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   318k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 1.89k, False: 317k]
  ------------------
  135|   318k|                      static_cast<uint64_t>(is_negative)) {
  136|  1.89k|            SCN_UNLIKELY_ATTR
  137|  1.89k|            return true;
  138|  1.89k|        }
  139|   318k|    }
  140|       |
  141|   317k|    return false;
  142|   318k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|   317k|{
  147|   317k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 22.2k, False: 294k]
  ------------------
  148|  22.2k|        SCN_MSVC_PUSH
  149|  22.2k|        SCN_MSVC_IGNORE(4146)
  150|  22.2k|        return static_cast<T>(
  151|  22.2k|            -std::numeric_limits<T>::max() -
  152|  22.2k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  22.2k|        SCN_MSVC_POP
  154|  22.2k|    }
  155|       |
  156|   294k|    return static_cast<T>(u64val);
  157|   317k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|   323k|{
  126|   323k|    auto max_digits = maxdigits_u64(base);
  127|   323k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 767, False: 322k]
  ------------------
  128|    767|        return true;
  129|    767|    }
  130|   322k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 455, False: 321k]
  |  Branch (130:39): [True: 76, False: 379]
  ------------------
  131|     76|        return true;
  132|     76|    }
  133|   322k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   322k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 265, False: 321k]
  ------------------
  135|   322k|                      static_cast<uint64_t>(is_negative)) {
  136|    265|            SCN_UNLIKELY_ATTR
  137|    265|            return true;
  138|    265|        }
  139|   322k|    }
  140|       |
  141|   321k|    return false;
  142|   322k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|   321k|{
  147|   321k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 23.0k, False: 298k]
  ------------------
  148|  23.0k|        SCN_MSVC_PUSH
  149|  23.0k|        SCN_MSVC_IGNORE(4146)
  150|  23.0k|        return static_cast<T>(
  151|  23.0k|            -std::numeric_limits<T>::max() -
  152|  23.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  23.0k|        SCN_MSVC_POP
  154|  23.0k|    }
  155|       |
  156|   298k|    return static_cast<T>(u64val);
  157|   321k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   240k|{
  126|   240k|    auto max_digits = maxdigits_u64(base);
  127|   240k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 492, False: 239k]
  ------------------
  128|    492|        return true;
  129|    492|    }
  130|   239k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 299, False: 239k]
  |  Branch (130:39): [True: 76, False: 223]
  ------------------
  131|     76|        return true;
  132|     76|    }
  133|   239k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   239k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 27.9k, False: 211k]
  ------------------
  135|   239k|                      static_cast<uint64_t>(is_negative)) {
  136|  27.9k|            SCN_UNLIKELY_ATTR
  137|  27.9k|            return true;
  138|  27.9k|        }
  139|   239k|    }
  140|       |
  141|   211k|    return false;
  142|   239k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   211k|{
  147|   211k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 211k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   211k|    return static_cast<T>(u64val);
  157|   211k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   269k|{
  126|   269k|    auto max_digits = maxdigits_u64(base);
  127|   269k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 492, False: 268k]
  ------------------
  128|    492|        return true;
  129|    492|    }
  130|   268k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 299, False: 268k]
  |  Branch (130:39): [True: 76, False: 223]
  ------------------
  131|     76|        return true;
  132|     76|    }
  133|   268k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   268k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 949, False: 267k]
  ------------------
  135|   268k|                      static_cast<uint64_t>(is_negative)) {
  136|    949|            SCN_UNLIKELY_ATTR
  137|    949|            return true;
  138|    949|        }
  139|   268k|    }
  140|       |
  141|   267k|    return false;
  142|   268k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   267k|{
  147|   267k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 267k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   267k|    return static_cast<T>(u64val);
  157|   267k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   271k|{
  126|   271k|    auto max_digits = maxdigits_u64(base);
  127|   271k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 496, False: 271k]
  ------------------
  128|    496|        return true;
  129|    496|    }
  130|   271k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 501, False: 270k]
  |  Branch (130:39): [True: 76, False: 425]
  ------------------
  131|     76|        return true;
  132|     76|    }
  133|   271k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   271k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 271k]
  ------------------
  135|   271k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   271k|    }
  140|       |
  141|   271k|    return false;
  142|   271k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   271k|{
  147|   271k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 271k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   271k|    return static_cast<T>(u64val);
  157|   271k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|   383k|{
   34|   383k|    uint64_t val{};
   35|   383k|    std::memcpy(&val, input, sizeof(uint64_t));
   36|   383k|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  542|   383k|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (542:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|   383k|    return val;
   40|   383k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  15.2k|{
   44|  15.2k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  15.2k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  15.2k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  15.2k|    word -= 0x3030303030303030;
   48|  15.2k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  15.2k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  15.2k|    return static_cast<uint32_t>(word);
   51|  15.2k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|   368k|{
   55|   368k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|   368k|              0x8080808080808080));
   57|   368k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|  90.2k|{
  164|  90.2k|    uint64_t u64val{};
  165|  90.2k|    auto ptr = parse_decimal_integer_fast_impl(
  166|  90.2k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|  90.2k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|  90.2k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|  90.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12.1k, False: 78.0k]
  |  |  ------------------
  ------------------
  170|  90.2k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  12.1k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  12.1k|                                     "Integer overflow");
  173|  12.1k|    }
  174|       |
  175|  78.0k|    val = store_result<T>(u64val, is_negative);
  176|  78.0k|    return ptr;
  177|  90.2k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|   551k|{
   76|   551k|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  1.39M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 1.21M, False: 174k]
  ------------------
   79|  1.21M|        const auto digit = char_to_int(*begin);
   80|  1.21M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 377k, False: 840k]
  ------------------
   81|   377k|            break;
   82|   377k|        }
   83|   840k|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|   840k|        ++begin;
   85|   840k|    }
   86|       |
   87|   551k|    return begin;
   88|   551k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|   551k|{
   63|   551k|    while (
   64|   567k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 368k, False: 198k]
  ------------------
   65|   567k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 15.2k, False: 353k]
  ------------------
   66|  15.2k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  15.2k|                                      get_eight_digits_word(p));
   68|  15.2k|        p += 8;
   69|  15.2k|    }
   70|   551k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  36.7k|{
  185|  36.7k|    uint64_t u64val{};
  186|  36.7k|    const CharT* begin = input.data();
  187|  36.7k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   101k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 90.4k, False: 10.9k]
  ------------------
  190|  90.4k|        const auto digit = char_to_int(*begin);
  191|  90.4k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 25.8k, False: 64.6k]
  ------------------
  192|  25.8k|            break;
  193|  25.8k|        }
  194|  64.6k|        u64val =
  195|  64.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  64.6k|        ++begin;
  197|  64.6k|    }
  198|       |
  199|  36.7k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  36.7k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  36.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.09k, False: 32.6k]
  |  |  ------------------
  ------------------
  201|  36.7k|                                               is_negative))) {
  202|  4.09k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  4.09k|                                     "Integer overflow");
  204|  4.09k|    }
  205|       |
  206|  32.6k|    val = store_result<T>(u64val, is_negative);
  207|  32.6k|    return begin;
  208|  36.7k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   133k|{
  185|   133k|    uint64_t u64val{};
  186|   133k|    const CharT* begin = input.data();
  187|   133k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   451k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 398k, False: 52.7k]
  ------------------
  190|   398k|        const auto digit = char_to_int(*begin);
  191|   398k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 80.8k, False: 317k]
  ------------------
  192|  80.8k|            break;
  193|  80.8k|        }
  194|   317k|        u64val =
  195|   317k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   317k|        ++begin;
  197|   317k|    }
  198|       |
  199|   133k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   133k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 26.0k, False: 107k]
  |  |  ------------------
  ------------------
  201|   133k|                                               is_negative))) {
  202|  26.0k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  26.0k|                                     "Integer overflow");
  204|  26.0k|    }
  205|       |
  206|   107k|    val = store_result<T>(u64val, is_negative);
  207|   107k|    return begin;
  208|   133k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   104k|{
  164|   104k|    uint64_t u64val{};
  165|   104k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   104k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   104k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   104k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 721, False: 104k]
  |  |  ------------------
  ------------------
  170|   104k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    721|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    721|                                     "Integer overflow");
  173|    721|    }
  174|       |
  175|   104k|    val = store_result<T>(u64val, is_negative);
  176|   104k|    return ptr;
  177|   104k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  53.2k|{
  185|  53.2k|    uint64_t u64val{};
  186|  53.2k|    const CharT* begin = input.data();
  187|  53.2k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   142k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 130k, False: 11.7k]
  ------------------
  190|   130k|        const auto digit = char_to_int(*begin);
  191|   130k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 41.5k, False: 88.8k]
  ------------------
  192|  41.5k|            break;
  193|  41.5k|        }
  194|  88.8k|        u64val =
  195|  88.8k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  88.8k|        ++begin;
  197|  88.8k|    }
  198|       |
  199|  53.2k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  53.2k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  53.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 659, False: 52.6k]
  |  |  ------------------
  ------------------
  201|  53.2k|                                               is_negative))) {
  202|    659|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    659|                                     "Integer overflow");
  204|    659|    }
  205|       |
  206|  52.6k|    val = store_result<T>(u64val, is_negative);
  207|  52.6k|    return begin;
  208|  53.2k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   161k|{
  185|   161k|    uint64_t u64val{};
  186|   161k|    const CharT* begin = input.data();
  187|   161k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   528k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 472k, False: 55.9k]
  ------------------
  190|   472k|        const auto digit = char_to_int(*begin);
  191|   472k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 105k, False: 366k]
  ------------------
  192|   105k|            break;
  193|   105k|        }
  194|   366k|        u64val =
  195|   366k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   366k|        ++begin;
  197|   366k|    }
  198|       |
  199|   161k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   161k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.29k, False: 160k]
  |  |  ------------------
  ------------------
  201|   161k|                                               is_negative))) {
  202|  1.29k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.29k|                                     "Integer overflow");
  204|  1.29k|    }
  205|       |
  206|   160k|    val = store_result<T>(u64val, is_negative);
  207|   160k|    return begin;
  208|   161k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   105k|{
  164|   105k|    uint64_t u64val{};
  165|   105k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   105k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   105k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   105k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 310, False: 105k]
  |  |  ------------------
  ------------------
  170|   105k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    310|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    310|                                     "Integer overflow");
  173|    310|    }
  174|       |
  175|   105k|    val = store_result<T>(u64val, is_negative);
  176|   105k|    return ptr;
  177|   105k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  54.0k|{
  185|  54.0k|    uint64_t u64val{};
  186|  54.0k|    const CharT* begin = input.data();
  187|  54.0k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   147k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 135k, False: 11.8k]
  ------------------
  190|   135k|        const auto digit = char_to_int(*begin);
  191|   135k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 42.2k, False: 92.9k]
  ------------------
  192|  42.2k|            break;
  193|  42.2k|        }
  194|  92.9k|        u64val =
  195|  92.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  92.9k|        ++begin;
  197|  92.9k|    }
  198|       |
  199|  54.0k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  54.0k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 259, False: 53.8k]
  |  |  ------------------
  ------------------
  201|  54.0k|                                               is_negative))) {
  202|    259|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    259|                                     "Integer overflow");
  204|    259|    }
  205|       |
  206|  53.8k|    val = store_result<T>(u64val, is_negative);
  207|  53.8k|    return begin;
  208|  54.0k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   163k|{
  185|   163k|    uint64_t u64val{};
  186|   163k|    const CharT* begin = input.data();
  187|   163k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   537k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 481k, False: 56.2k]
  ------------------
  190|   481k|        const auto digit = char_to_int(*begin);
  191|   481k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 107k, False: 374k]
  ------------------
  192|   107k|            break;
  193|   107k|        }
  194|   374k|        u64val =
  195|   374k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   374k|        ++begin;
  197|   374k|    }
  198|       |
  199|   163k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   163k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 539, False: 162k]
  |  |  ------------------
  ------------------
  201|   163k|                                               is_negative))) {
  202|    539|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    539|                                     "Integer overflow");
  204|    539|    }
  205|       |
  206|   162k|    val = store_result<T>(u64val, is_negative);
  207|   162k|    return begin;
  208|   163k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|  78.4k|{
  164|  78.4k|    uint64_t u64val{};
  165|  78.4k|    auto ptr = parse_decimal_integer_fast_impl(
  166|  78.4k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|  78.4k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|  78.4k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|  78.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.16k, False: 77.2k]
  |  |  ------------------
  ------------------
  170|  78.4k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.16k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.16k|                                     "Integer overflow");
  173|  1.16k|    }
  174|       |
  175|  77.2k|    val = store_result<T>(u64val, is_negative);
  176|  77.2k|    return ptr;
  177|  78.4k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  37.1k|{
  185|  37.1k|    uint64_t u64val{};
  186|  37.1k|    const CharT* begin = input.data();
  187|  37.1k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  96.9k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 86.3k, False: 10.6k]
  ------------------
  190|  86.3k|        const auto digit = char_to_int(*begin);
  191|  86.3k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 26.4k, False: 59.8k]
  ------------------
  192|  26.4k|            break;
  193|  26.4k|        }
  194|  59.8k|        u64val =
  195|  59.8k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  59.8k|        ++begin;
  197|  59.8k|    }
  198|       |
  199|  37.1k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  37.1k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.15k, False: 33.9k]
  |  |  ------------------
  ------------------
  201|  37.1k|                                               is_negative))) {
  202|  3.15k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.15k|                                     "Integer overflow");
  204|  3.15k|    }
  205|       |
  206|  33.9k|    val = store_result<T>(u64val, is_negative);
  207|  33.9k|    return begin;
  208|  37.1k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   124k|{
  185|   124k|    uint64_t u64val{};
  186|   124k|    const CharT* begin = input.data();
  187|   124k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   417k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 367k, False: 49.9k]
  ------------------
  190|   367k|        const auto digit = char_to_int(*begin);
  191|   367k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 74.5k, False: 293k]
  ------------------
  192|  74.5k|            break;
  193|  74.5k|        }
  194|   293k|        u64val =
  195|   293k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   293k|        ++begin;
  197|   293k|    }
  198|       |
  199|   124k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   124k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.2k, False: 100k]
  |  |  ------------------
  ------------------
  201|   124k|                                               is_negative))) {
  202|  24.2k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  24.2k|                                     "Integer overflow");
  204|  24.2k|    }
  205|       |
  206|   100k|    val = store_result<T>(u64val, is_negative);
  207|   100k|    return begin;
  208|   124k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|  86.0k|{
  164|  86.0k|    uint64_t u64val{};
  165|  86.0k|    auto ptr = parse_decimal_integer_fast_impl(
  166|  86.0k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|  86.0k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|  86.0k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|  86.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 408, False: 85.6k]
  |  |  ------------------
  ------------------
  170|  86.0k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    408|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    408|                                     "Integer overflow");
  173|    408|    }
  174|       |
  175|  85.6k|    val = store_result<T>(u64val, is_negative);
  176|  85.6k|    return ptr;
  177|  86.0k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  44.2k|{
  185|  44.2k|    uint64_t u64val{};
  186|  44.2k|    const CharT* begin = input.data();
  187|  44.2k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   115k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 104k, False: 10.9k]
  ------------------
  190|   104k|        const auto digit = char_to_int(*begin);
  191|   104k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 33.2k, False: 71.5k]
  ------------------
  192|  33.2k|            break;
  193|  33.2k|        }
  194|  71.5k|        u64val =
  195|  71.5k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  71.5k|        ++begin;
  197|  71.5k|    }
  198|       |
  199|  44.2k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  44.2k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  44.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 357, False: 43.9k]
  |  |  ------------------
  ------------------
  201|  44.2k|                                               is_negative))) {
  202|    357|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    357|                                     "Integer overflow");
  204|    357|    }
  205|       |
  206|  43.9k|    val = store_result<T>(u64val, is_negative);
  207|  43.9k|    return begin;
  208|  44.2k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   138k|{
  185|   138k|    uint64_t u64val{};
  186|   138k|    const CharT* begin = input.data();
  187|   138k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   463k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 411k, False: 51.5k]
  ------------------
  190|   411k|        const auto digit = char_to_int(*begin);
  191|   411k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 87.4k, False: 324k]
  ------------------
  192|  87.4k|            break;
  193|  87.4k|        }
  194|   324k|        u64val =
  195|   324k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   324k|        ++begin;
  197|   324k|    }
  198|       |
  199|   138k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   138k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 752, False: 138k]
  |  |  ------------------
  ------------------
  201|   138k|                                               is_negative))) {
  202|    752|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    752|                                     "Integer overflow");
  204|    752|    }
  205|       |
  206|   138k|    val = store_result<T>(u64val, is_negative);
  207|   138k|    return begin;
  208|   138k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|  86.6k|{
  164|  86.6k|    uint64_t u64val{};
  165|  86.6k|    auto ptr = parse_decimal_integer_fast_impl(
  166|  86.6k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|  86.6k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|  86.6k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 160, False: 86.4k]
  |  |  ------------------
  ------------------
  170|  86.6k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    160|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    160|                                     "Integer overflow");
  173|    160|    }
  174|       |
  175|  86.4k|    val = store_result<T>(u64val, is_negative);
  176|  86.4k|    return ptr;
  177|  86.6k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  44.8k|{
  185|  44.8k|    uint64_t u64val{};
  186|  44.8k|    const CharT* begin = input.data();
  187|  44.8k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   120k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 109k, False: 11.0k]
  ------------------
  190|   109k|        const auto digit = char_to_int(*begin);
  191|   109k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 33.8k, False: 75.1k]
  ------------------
  192|  33.8k|            break;
  193|  33.8k|        }
  194|  75.1k|        u64val =
  195|  75.1k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  75.1k|        ++begin;
  197|  75.1k|    }
  198|       |
  199|  44.8k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  44.8k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  44.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 128, False: 44.7k]
  |  |  ------------------
  ------------------
  201|  44.8k|                                               is_negative))) {
  202|    128|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    128|                                     "Integer overflow");
  204|    128|    }
  205|       |
  206|  44.7k|    val = store_result<T>(u64val, is_negative);
  207|  44.7k|    return begin;
  208|  44.8k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   140k|{
  185|   140k|    uint64_t u64val{};
  186|   140k|    const CharT* begin = input.data();
  187|   140k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   470k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 418k, False: 51.6k]
  ------------------
  190|   418k|        const auto digit = char_to_int(*begin);
  191|   418k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 88.4k, False: 329k]
  ------------------
  192|  88.4k|            break;
  193|  88.4k|        }
  194|   329k|        u64val =
  195|   329k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   329k|        ++begin;
  197|   329k|    }
  198|       |
  199|   140k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   140k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 284, False: 139k]
  |  |  ------------------
  ------------------
  201|   140k|                                               is_negative))) {
  202|    284|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    284|                                     "Integer overflow");
  204|    284|    }
  205|       |
  206|   139k|    val = store_result<T>(u64val, is_negative);
  207|   139k|    return begin;
  208|   140k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  52.3k|    {
  324|  52.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  52.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  52.3k|        return read_default_with_base(range, value, 0);
  326|  52.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  52.3k|    {
  287|  52.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  52.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 52.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  52.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  52.3k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  52.3k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  52.3k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  52.3k|                return unexpected_scan_error(
  293|  52.3k|                    scan_error::invalid_scanned_value,
  294|  52.3k|                    "Unexpected '-' sign when parsing an "
  295|  52.3k|                    "unsigned value");
  296|  52.3k|            }
  297|  52.3k|        }
  298|       |
  299|  52.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 13.4k, False: 38.9k]
  ------------------
  300|  13.4k|            value = T{0};
  301|  13.4k|            return std::next(prefix_result.iterator);
  302|  13.4k|        }
  303|       |
  304|  77.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  38.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 51, False: 38.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     51|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     51|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     51|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     51|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     51|    }                                                  \
  |  |  |  |   70|  38.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  77.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  77.7k|                                                      ranges::end(range)},
  307|  77.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  77.7k|        auto buf = make_contiguous_buffer(
  310|  77.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  77.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  38.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.55k, False: 36.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.55k|    }                                                  \
  |  |  |  |   70|  38.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  36.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  36.3k|                                    prefix_result.parsed_base));
  314|       |
  315|  36.3k|        return ranges_polyfill::batch_next(
  316|  36.3k|            prefix_result.iterator,
  317|  36.3k|            ranges::distance(buf.view().begin(), result_it));
  318|  77.7k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  1.22M|{
  121|  1.22M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  1.22M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.22M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.22M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.22M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.22M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  1.22M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  1.22M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  1.22M|        parse_integer_base_prefix(
  126|  1.22M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  1.22M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 371k, False: 851k]
  ------------------
  129|   371k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 1.74k, False: 369k]
  ------------------
  130|   371k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 226k, False: 143k]
  ------------------
  131|   227k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   227k|                digits_begin_it, ranges::begin(range));
  133|   227k|        }
  134|   143k|        else {
  135|   143k|            parsed_zero = false;
  136|   143k|        }
  137|   371k|    }
  138|   851k|    else {
  139|   851k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 3.91k, False: 847k]
  ------------------
  140|   851k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 57.3k, False: 790k]
  ------------------
  141|  61.2k|            digits_begin_it = base_prefix_begin_it;
  142|  61.2k|        }
  143|   851k|    }
  144|       |
  145|  1.22M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 1.12M, False: 94.4k]
  ------------------
  146|  1.12M|        sign = sign_type::plus_sign;
  147|  1.12M|    }
  148|  1.22M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  1.22M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  1.22M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  1.22M|{
   88|  1.22M|    switch (base) {
   89|  39.4k|        case 2:
  ------------------
  |  Branch (89:9): [True: 39.4k, False: 1.18M]
  ------------------
   90|       |            // allow 0b/0B
   91|  39.4k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  39.4k|                    false};
   93|       |
   94|  76.8k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 76.8k, False: 1.14M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  76.8k|            bool zero_parsed = false;
   97|  76.8k|            auto it = apply_opt(
   98|  76.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  76.8k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   177k|        case 16:
  ------------------
  |  Branch (102:9): [True: 177k, False: 1.04M]
  ------------------
  103|       |            // allow 0x/0X
  104|   177k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   177k|                    false};
  106|       |
  107|   769k|        case 0:
  ------------------
  |  Branch (107:9): [True: 769k, False: 453k]
  ------------------
  108|       |            // detect base
  109|   769k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   769k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   160k|        default:
  ------------------
  |  Branch (111:9): [True: 160k, False: 1.06M]
  ------------------
  112|       |            // no base prefix allowed
  113|   160k|            return {ranges::begin(range), base, false};
  114|  1.22M|    }
  115|  1.22M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|   800k|{
   38|   800k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   800k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   800k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|   835k|{
   53|   835k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 10.1k, False: 825k]
  ------------------
   54|  10.1k|        return *r;
   55|  10.1k|    }
   56|       |
   57|   825k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 371k, False: 454k]
  ------------------
   58|   371k|        zero_parsed = true;
   59|   371k|        return *r;
   60|   371k|    }
   61|       |
   62|   454k|    return unexpected(parse_error::error);
   63|   825k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|   946k|{
   45|   946k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   946k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   946k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|   769k|{
   69|   769k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 8.26k, False: 761k]
  ------------------
   70|  8.26k|        return {*r, 16, false};
   71|  8.26k|    }
   72|   761k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 2.43k, False: 758k]
  ------------------
   73|  2.43k|        return {*r, 2, false};
   74|  2.43k|    }
   75|   758k|    {
   76|   758k|        bool zero_parsed{false};
   77|   758k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 344k, False: 414k]
  ------------------
   78|   344k|            return {*r, 8, zero_parsed};
   79|   344k|        }
   80|   758k|    }
   81|   414k|    return {ranges::begin(range), 10, false};
   82|   758k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|   820k|{
  156|   820k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   820k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   820k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   820k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 968, False: 819k]
  |  |  ------------------
  ------------------
  160|    968|            return unexpected_scan_error(
  161|    968|                scan_error::invalid_scanned_value,
  162|    968|                "Failed to parse integer: No digits found");
  163|    968|        }
  164|   819k|        return ranges::end(range);
  165|   820k|    }
  166|   820k|    else {
  167|   820k|        return read_while1_code_unit(
  168|   820k|                   range, [&](char_type ch)
  169|   820k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   820k|            .transform_error(map_parse_error_to_scan_error(
  171|   820k|                scan_error::invalid_scanned_value,
  172|   820k|                "Failed to parse integer: No digits found"));
  173|   820k|    }
  174|   820k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  61.2k|    {
  324|  61.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  61.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  61.2k|        return read_default_with_base(range, value, 0);
  326|  61.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  61.2k|    {
  287|  61.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  61.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 61.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  61.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  61.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  61.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  61.2k|                return unexpected_scan_error(
  293|  61.2k|                    scan_error::invalid_scanned_value,
  294|  61.2k|                    "Unexpected '-' sign when parsing an "
  295|  61.2k|                    "unsigned value");
  296|  61.2k|            }
  297|  61.2k|        }
  298|       |
  299|  61.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 15.6k, False: 45.5k]
  ------------------
  300|  15.6k|            value = T{0};
  301|  15.6k|            return std::next(prefix_result.iterator);
  302|  15.6k|        }
  303|       |
  304|  91.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  45.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 84, False: 45.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     84|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     84|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     84|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     84|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     84|    }                                                  \
  |  |  |  |   70|  45.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  91.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  91.0k|                                                      ranges::end(range)},
  307|  91.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  91.0k|        auto buf = make_contiguous_buffer(
  310|  91.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  91.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  45.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.25k, False: 43.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.25k|    }                                                  \
  |  |  |  |   70|  45.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  43.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  43.2k|                                    prefix_result.parsed_base));
  314|       |
  315|  43.2k|        return ranges_polyfill::batch_next(
  316|  43.2k|            prefix_result.iterator,
  317|  43.2k|            ranges::distance(buf.view().begin(), result_it));
  318|  91.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  61.9k|    {
  324|  61.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  61.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  61.9k|        return read_default_with_base(range, value, 0);
  326|  61.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  61.9k|    {
  287|  61.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  61.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  61.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 61.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  61.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  61.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  61.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  61.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  61.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  61.9k|                return unexpected_scan_error(
  293|  61.9k|                    scan_error::invalid_scanned_value,
  294|  61.9k|                    "Unexpected '-' sign when parsing an "
  295|  61.9k|                    "unsigned value");
  296|  61.9k|            }
  297|  61.9k|        }
  298|       |
  299|  61.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 15.7k, False: 46.2k]
  ------------------
  300|  15.7k|            value = T{0};
  301|  15.7k|            return std::next(prefix_result.iterator);
  302|  15.7k|        }
  303|       |
  304|  92.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  46.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  46.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 96, False: 46.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     96|    }                                                  \
  |  |  |  |   70|  46.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  92.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  92.3k|                                                      ranges::end(range)},
  307|  92.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  92.3k|        auto buf = make_contiguous_buffer(
  310|  92.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  92.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  46.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  46.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|  46.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  43.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  43.9k|                                    prefix_result.parsed_base));
  314|       |
  315|  43.9k|        return ranges_polyfill::batch_next(
  316|  43.9k|            prefix_result.iterator,
  317|  43.9k|            ranges::distance(buf.view().begin(), result_it));
  318|  92.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  49.1k|    {
  324|  49.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  49.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  49.1k|        return read_default_with_base(range, value, 0);
  326|  49.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  49.1k|    {
  287|  49.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  49.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  49.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  49.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  49.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 49.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  49.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  49.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  49.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  49.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.05k, False: 48.1k]
  ------------------
  292|  1.05k|                return unexpected_scan_error(
  293|  1.05k|                    scan_error::invalid_scanned_value,
  294|  1.05k|                    "Unexpected '-' sign when parsing an "
  295|  1.05k|                    "unsigned value");
  296|  1.05k|            }
  297|  49.1k|        }
  298|       |
  299|  48.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 13.5k, False: 34.5k]
  ------------------
  300|  13.5k|            value = T{0};
  301|  13.5k|            return std::next(prefix_result.iterator);
  302|  13.5k|        }
  303|       |
  304|  69.0k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  34.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  34.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15, False: 34.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     15|    }                                                  \
  |  |  |  |   70|  34.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  34.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  69.0k|                                     ranges::subrange{prefix_result.iterator,
  306|  69.0k|                                                      ranges::end(range)},
  307|  69.0k|                                     prefix_result.parsed_base));
  308|       |
  309|  69.0k|        auto buf = make_contiguous_buffer(
  310|  69.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  69.0k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  34.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  34.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  34.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  34.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.64k, False: 32.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.64k|    }                                                  \
  |  |  |  |   70|  34.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  32.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  32.8k|                                    prefix_result.parsed_base));
  314|       |
  315|  32.8k|        return ranges_polyfill::batch_next(
  316|  32.8k|            prefix_result.iterator,
  317|  32.8k|            ranges::distance(buf.view().begin(), result_it));
  318|  69.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  52.2k|    {
  324|  52.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  52.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  52.2k|        return read_default_with_base(range, value, 0);
  326|  52.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  52.2k|    {
  287|  52.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 52.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  52.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  52.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  52.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.09k, False: 51.1k]
  ------------------
  292|  1.09k|                return unexpected_scan_error(
  293|  1.09k|                    scan_error::invalid_scanned_value,
  294|  1.09k|                    "Unexpected '-' sign when parsing an "
  295|  1.09k|                    "unsigned value");
  296|  1.09k|            }
  297|  52.2k|        }
  298|       |
  299|  51.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 14.0k, False: 37.1k]
  ------------------
  300|  14.0k|            value = T{0};
  301|  14.0k|            return std::next(prefix_result.iterator);
  302|  14.0k|        }
  303|       |
  304|  74.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  37.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15, False: 37.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     15|    }                                                  \
  |  |  |  |   70|  37.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  37.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  74.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  74.2k|                                                      ranges::end(range)},
  307|  74.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  74.2k|        auto buf = make_contiguous_buffer(
  310|  74.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  74.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  37.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.48k, False: 35.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.48k|    }                                                  \
  |  |  |  |   70|  37.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  35.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  35.6k|                                    prefix_result.parsed_base));
  314|       |
  315|  35.6k|        return ranges_polyfill::batch_next(
  316|  35.6k|            prefix_result.iterator,
  317|  35.6k|            ranges::distance(buf.view().begin(), result_it));
  318|  74.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  52.6k|    {
  324|  52.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  52.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  52.6k|        return read_default_with_base(range, value, 0);
  326|  52.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  52.6k|    {
  287|  52.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  52.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 52.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  52.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  52.6k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  52.6k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  52.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.12k, False: 51.5k]
  ------------------
  292|  1.12k|                return unexpected_scan_error(
  293|  1.12k|                    scan_error::invalid_scanned_value,
  294|  1.12k|                    "Unexpected '-' sign when parsing an "
  295|  1.12k|                    "unsigned value");
  296|  1.12k|            }
  297|  52.6k|        }
  298|       |
  299|  51.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 14.0k, False: 37.4k]
  ------------------
  300|  14.0k|            value = T{0};
  301|  14.0k|            return std::next(prefix_result.iterator);
  302|  14.0k|        }
  303|       |
  304|  74.9k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  37.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15, False: 37.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     15|    }                                                  \
  |  |  |  |   70|  37.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  37.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  74.9k|                                     ranges::subrange{prefix_result.iterator,
  306|  74.9k|                                                      ranges::end(range)},
  307|  74.9k|                                     prefix_result.parsed_base));
  308|       |
  309|  74.9k|        auto buf = make_contiguous_buffer(
  310|  74.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  74.9k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  37.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.39k, False: 36.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.39k|    }                                                  \
  |  |  |  |   70|  37.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  36.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  36.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  36.0k|        return ranges_polyfill::batch_next(
  316|  36.0k|            prefix_result.iterator,
  317|  36.0k|            ranges::distance(buf.view().begin(), result_it));
  318|  74.9k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   160k|{
  185|   160k|    std::basic_string<CharT> output;
  186|   160k|    std::string thsep_indices;
  187|   160k|    auto it = ranges::begin(range);
  188|   160k|    bool digit_matched = false;
  189|   704k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 701k, False: 3.35k]
  ------------------
  190|   701k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 38.5k, False: 662k]
  ------------------
  191|  38.5k|            thsep_indices.push_back(static_cast<char>(
  192|  38.5k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  38.5k|        }
  194|   662k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 157k, False: 505k]
  ------------------
  195|   157k|            break;
  196|   157k|        }
  197|   505k|        else {
  198|   505k|            output.push_back(*it);
  199|   505k|            digit_matched = true;
  200|   505k|        }
  201|   701k|    }
  202|   160k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.21k, False: 155k]
  |  |  ------------------
  ------------------
  203|  5.21k|        return unexpected_scan_error(
  204|  5.21k|            scan_error::invalid_scanned_value,
  205|  5.21k|            "Failed to parse integer: No digits found");
  206|  5.21k|    }
  207|   155k|    return std::tuple{it, output, thsep_indices};
  208|   160k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  3.28k|    {
  324|  3.28k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  3.28k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  3.28k|        return read_default_with_base(range, value, 0);
  326|  3.28k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  3.28k|    {
  287|  3.28k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  3.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  3.28k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  3.28k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  3.28k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  3.28k|                return unexpected_scan_error(
  293|  3.28k|                    scan_error::invalid_scanned_value,
  294|  3.28k|                    "Unexpected '-' sign when parsing an "
  295|  3.28k|                    "unsigned value");
  296|  3.28k|            }
  297|  3.28k|        }
  298|       |
  299|  3.28k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 3.28k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  6.57k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  3.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  6.57k|                                     ranges::subrange{prefix_result.iterator,
  306|  6.57k|                                                      ranges::end(range)},
  307|  6.57k|                                     prefix_result.parsed_base));
  308|       |
  309|  6.57k|        auto buf = make_contiguous_buffer(
  310|  6.57k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  6.57k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  3.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.27k, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.27k|    }                                                  \
  |  |  |  |   70|  3.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      6|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      6|                                    prefix_result.parsed_base));
  314|       |
  315|      6|        return ranges_polyfill::batch_next(
  316|      6|            prefix_result.iterator,
  317|      6|            ranges::distance(buf.view().begin(), result_it));
  318|  6.57k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   182k|{
  121|   182k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   182k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   182k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   182k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 182k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   182k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   182k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   182k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   182k|        parse_integer_base_prefix(
  126|   182k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   182k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 182k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   182k|    else {
  139|   182k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 182k]
  ------------------
  140|   182k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 84.1k, False: 98.5k]
  ------------------
  141|  84.1k|            digits_begin_it = base_prefix_begin_it;
  142|  84.1k|        }
  143|   182k|    }
  144|       |
  145|   182k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 182k, False: 0]
  ------------------
  146|   182k|        sign = sign_type::plus_sign;
  147|   182k|    }
  148|   182k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   182k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   182k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   182k|{
   88|   182k|    switch (base) {
   89|  26.2k|        case 2:
  ------------------
  |  Branch (89:9): [True: 26.2k, False: 156k]
  ------------------
   90|       |            // allow 0b/0B
   91|  26.2k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  26.2k|                    false};
   93|       |
   94|  26.2k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 26.2k, False: 156k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  26.2k|            bool zero_parsed = false;
   97|  26.2k|            auto it = apply_opt(
   98|  26.2k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  26.2k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  21.8k|        case 16:
  ------------------
  |  Branch (102:9): [True: 21.8k, False: 160k]
  ------------------
  103|       |            // allow 0x/0X
  104|  21.8k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  21.8k|                    false};
  106|       |
  107|  84.2k|        case 0:
  ------------------
  |  Branch (107:9): [True: 84.2k, False: 98.4k]
  ------------------
  108|       |            // detect base
  109|  84.2k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  84.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  24.0k|        default:
  ------------------
  |  Branch (111:9): [True: 24.0k, False: 158k]
  ------------------
  112|       |            // no base prefix allowed
  113|  24.0k|            return {ranges::begin(range), base, false};
  114|   182k|    }
  115|   182k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   110k|{
   38|   110k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   110k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   110k|{
   53|   110k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 110k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   110k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 110k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   110k|    return unexpected(parse_error::error);
   63|   110k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   106k|{
   45|   106k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   106k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|  84.2k|{
   69|  84.2k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 84.2k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|  84.2k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 84.2k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|  84.2k|    {
   76|  84.2k|        bool zero_parsed{false};
   77|  84.2k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 84.2k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|  84.2k|    }
   81|  84.2k|    return {ranges::begin(range), 10, false};
   82|  84.2k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   158k|{
  156|   158k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   158k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   158k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   158k|            return unexpected_scan_error(
  161|   158k|                scan_error::invalid_scanned_value,
  162|   158k|                "Failed to parse integer: No digits found");
  163|   158k|        }
  164|   158k|        return ranges::end(range);
  165|   158k|    }
  166|   158k|    else {
  167|   158k|        return read_while1_code_unit(
  168|   158k|                   range, [&](char_type ch)
  169|   158k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   158k|            .transform_error(map_parse_error_to_scan_error(
  171|   158k|                scan_error::invalid_scanned_value,
  172|   158k|                "Failed to parse integer: No digits found"));
  173|   158k|    }
  174|   158k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   361k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.56k|    {
  324|  6.56k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.56k|        return read_default_with_base(range, value, 0);
  326|  6.56k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.56k|    {
  287|  6.56k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.56k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.56k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.56k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.56k|                return unexpected_scan_error(
  293|  6.56k|                    scan_error::invalid_scanned_value,
  294|  6.56k|                    "Unexpected '-' sign when parsing an "
  295|  6.56k|                    "unsigned value");
  296|  6.56k|            }
  297|  6.56k|        }
  298|       |
  299|  6.56k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.56k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  9.84k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.27k, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.27k|    }                                                  \
  |  |  |  |   70|  6.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  9.84k|                                     ranges::subrange{prefix_result.iterator,
  306|  9.84k|                                                      ranges::end(range)},
  307|  9.84k|                                     prefix_result.parsed_base));
  308|       |
  309|  9.84k|        auto buf = make_contiguous_buffer(
  310|  9.84k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  9.84k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  3.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  3.28k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  3.28k|                                    prefix_result.parsed_base));
  314|       |
  315|  3.28k|        return ranges_polyfill::batch_next(
  316|  3.28k|            prefix_result.iterator,
  317|  3.28k|            ranges::distance(buf.view().begin(), result_it));
  318|  9.84k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.56k|    {
  324|  6.56k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.56k|        return read_default_with_base(range, value, 0);
  326|  6.56k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.56k|    {
  287|  6.56k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.56k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.56k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.56k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.56k|                return unexpected_scan_error(
  293|  6.56k|                    scan_error::invalid_scanned_value,
  294|  6.56k|                    "Unexpected '-' sign when parsing an "
  295|  6.56k|                    "unsigned value");
  296|  6.56k|            }
  297|  6.56k|        }
  298|       |
  299|  6.56k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.56k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  9.84k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.27k, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.27k|    }                                                  \
  |  |  |  |   70|  6.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  9.84k|                                     ranges::subrange{prefix_result.iterator,
  306|  9.84k|                                                      ranges::end(range)},
  307|  9.84k|                                     prefix_result.parsed_base));
  308|       |
  309|  9.84k|        auto buf = make_contiguous_buffer(
  310|  9.84k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  9.84k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  3.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  3.28k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  3.28k|                                    prefix_result.parsed_base));
  314|       |
  315|  3.28k|        return ranges_polyfill::batch_next(
  316|  3.28k|            prefix_result.iterator,
  317|  3.28k|            ranges::distance(buf.view().begin(), result_it));
  318|  9.84k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.56k|    {
  324|  6.56k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.56k|        return read_default_with_base(range, value, 0);
  326|  6.56k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.56k|    {
  287|  6.56k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.56k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.56k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.56k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.56k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.56k|        }
  298|       |
  299|  6.56k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.56k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  9.84k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.27k, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.27k|    }                                                  \
  |  |  |  |   70|  6.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  9.84k|                                     ranges::subrange{prefix_result.iterator,
  306|  9.84k|                                                      ranges::end(range)},
  307|  9.84k|                                     prefix_result.parsed_base));
  308|       |
  309|  9.84k|        auto buf = make_contiguous_buffer(
  310|  9.84k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  9.84k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  3.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  3.28k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  3.28k|                                    prefix_result.parsed_base));
  314|       |
  315|  3.28k|        return ranges_polyfill::batch_next(
  316|  3.28k|            prefix_result.iterator,
  317|  3.28k|            ranges::distance(buf.view().begin(), result_it));
  318|  9.84k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.56k|    {
  324|  6.56k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.56k|        return read_default_with_base(range, value, 0);
  326|  6.56k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.56k|    {
  287|  6.56k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.56k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.56k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.56k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.56k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.56k|        }
  298|       |
  299|  6.56k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.56k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  9.84k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.27k, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.27k|    }                                                  \
  |  |  |  |   70|  6.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  9.84k|                                     ranges::subrange{prefix_result.iterator,
  306|  9.84k|                                                      ranges::end(range)},
  307|  9.84k|                                     prefix_result.parsed_base));
  308|       |
  309|  9.84k|        auto buf = make_contiguous_buffer(
  310|  9.84k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  9.84k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  3.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  3.28k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  3.28k|                                    prefix_result.parsed_base));
  314|       |
  315|  3.28k|        return ranges_polyfill::batch_next(
  316|  3.28k|            prefix_result.iterator,
  317|  3.28k|            ranges::distance(buf.view().begin(), result_it));
  318|  9.84k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.56k|    {
  324|  6.56k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.56k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.56k|        return read_default_with_base(range, value, 0);
  326|  6.56k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.56k|    {
  287|  6.56k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.56k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.56k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.56k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.56k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.56k|        }
  298|       |
  299|  6.56k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.56k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  9.84k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.56k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.56k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.56k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.27k, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.27k|    }                                                  \
  |  |  |  |   70|  6.56k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  9.84k|                                     ranges::subrange{prefix_result.iterator,
  306|  9.84k|                                                      ranges::end(range)},
  307|  9.84k|                                     prefix_result.parsed_base));
  308|       |
  309|  9.84k|        auto buf = make_contiguous_buffer(
  310|  9.84k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  9.84k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  3.28k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.28k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.28k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.28k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.28k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  3.28k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  3.28k|                                    prefix_result.parsed_base));
  314|       |
  315|  3.28k|        return ranges_polyfill::batch_next(
  316|  3.28k|            prefix_result.iterator,
  317|  3.28k|            ranges::distance(buf.view().begin(), result_it));
  318|  9.84k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  24.0k|{
  185|  24.0k|    std::basic_string<CharT> output;
  186|  24.0k|    std::string thsep_indices;
  187|  24.0k|    auto it = ranges::begin(range);
  188|  24.0k|    bool digit_matched = false;
  189|  63.4k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 63.4k, False: 36]
  ------------------
  190|  63.4k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 63.4k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  63.4k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 24.0k, False: 39.3k]
  ------------------
  195|  24.0k|            break;
  196|  24.0k|        }
  197|  39.3k|        else {
  198|  39.3k|            output.push_back(*it);
  199|  39.3k|            digit_matched = true;
  200|  39.3k|        }
  201|  63.4k|    }
  202|  24.0k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 10.9k, False: 13.1k]
  |  |  ------------------
  ------------------
  203|  10.9k|        return unexpected_scan_error(
  204|  10.9k|            scan_error::invalid_scanned_value,
  205|  10.9k|            "Failed to parse integer: No digits found");
  206|  10.9k|    }
  207|  13.1k|    return std::tuple{it, output, thsep_indices};
  208|  24.0k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  1.05M|    {
  280|  1.05M|        detail::check_int_type_specs(specs, eh);
  281|  1.05M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   131k|    {
  335|   131k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   131k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   131k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 10.7k, False: 120k]
  ------------------
  339|  10.7k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  10.7k|                return unexpected_scan_error(
  341|  10.7k|                    scan_error::invalid_scanned_value,
  342|  10.7k|                    "Unexpected '-' sign when parsing an "
  343|  10.7k|                    "unsigned value");
  344|  10.7k|            }
  345|  10.7k|            else {
  346|  10.7k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 10.7k]
  ------------------
  347|  10.7k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  10.7k|            }
  353|  10.7k|        }
  354|       |
  355|   131k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 22.1k, False: 109k]
  ------------------
  356|  22.1k|            value = T{0};
  357|  22.1k|            return std::next(prefix_result.iterator);
  358|  22.1k|        }
  359|       |
  360|   109k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   109k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 83.1k, False: 26.0k]
  |  |  ------------------
  ------------------
  361|  83.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  83.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 126, False: 82.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    126|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    126|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    126|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    126|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    126|    }                                                  \
  |  |  |  |   70|  83.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  82.9k|                    parse_integer_digits_without_thsep(
  363|  82.9k|                        ranges::subrange{prefix_result.iterator,
  364|  82.9k|                                         ranges::end(range)},
  365|  82.9k|                        prefix_result.parsed_base));
  366|       |
  367|  82.9k|            auto buf = make_contiguous_buffer(
  368|  82.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  82.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  82.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.24k, False: 73.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.24k|    }                                                  \
  |  |  |  |   70|  82.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  73.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  73.7k|                                        prefix_result.parsed_base));
  372|       |
  373|  73.7k|            return ranges_polyfill::batch_next(
  374|  73.7k|                prefix_result.iterator,
  375|  73.7k|                ranges::distance(buf.view().begin(), result_it));
  376|  82.9k|        }
  377|       |
  378|  26.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  26.0k|            localized_number_formatting_options<CharT>{loc};
  383|  26.0k|#endif
  384|       |
  385|  26.0k|        SCN_TRY(
  ------------------
  |  |   71|  26.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 892, False: 25.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    892|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    892|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    892|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    892|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    892|    }                                                  \
  |  |  |  |   70|  26.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  25.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  25.1k|            parse_digits_result,
  387|  25.1k|            parse_integer_digits_with_thsep(
  388|  25.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  25.1k|                prefix_result.parsed_base, locale_options));
  390|  25.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  25.1k|            parse_digits_result;
  392|       |
  393|  25.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 484, False: 24.6k]
  ------------------
  394|    484|            if (auto e = check_thsep_grouping(
  395|    484|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    484|                    thsep_indices, locale_options.grouping);
  397|    484|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    484|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 220, False: 264]
  |  |  ------------------
  ------------------
  398|    220|                return unexpected(e);
  399|    220|            }
  400|    484|        }
  401|       |
  402|  24.9k|        auto nothsep_source_view =
  403|  24.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  24.9k|        SCN_TRY(
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 614, False: 24.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    614|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    614|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    614|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    614|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    614|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  24.3k|            nothsep_source_it,
  406|  24.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  24.3k|                                prefix_result.parsed_base));
  408|       |
  409|  24.3k|        return ranges_polyfill::batch_next(
  410|  24.3k|            prefix_result.iterator,
  411|  24.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  24.3k|                ranges::ssize(thsep_indices));
  413|  24.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   169k|    {
  335|   169k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 169k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   169k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   169k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 11.4k, False: 158k]
  ------------------
  339|  11.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  11.4k|                return unexpected_scan_error(
  341|  11.4k|                    scan_error::invalid_scanned_value,
  342|  11.4k|                    "Unexpected '-' sign when parsing an "
  343|  11.4k|                    "unsigned value");
  344|  11.4k|            }
  345|  11.4k|            else {
  346|  11.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 11.4k]
  ------------------
  347|  11.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  11.4k|            }
  353|  11.4k|        }
  354|       |
  355|   169k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 25.2k, False: 144k]
  ------------------
  356|  25.2k|            value = T{0};
  357|  25.2k|            return std::next(prefix_result.iterator);
  358|  25.2k|        }
  359|       |
  360|   144k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   144k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 114k, False: 30.4k]
  |  |  ------------------
  ------------------
  361|   114k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 208, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    208|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    208|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    208|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    208|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    208|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   113k|                    parse_integer_digits_without_thsep(
  363|   113k|                        ranges::subrange{prefix_result.iterator,
  364|   113k|                                         ranges::end(range)},
  365|   113k|                        prefix_result.parsed_base));
  366|       |
  367|   113k|            auto buf = make_contiguous_buffer(
  368|   113k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   113k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.43k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.43k|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   105k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   105k|                                        prefix_result.parsed_base));
  372|       |
  373|   105k|            return ranges_polyfill::batch_next(
  374|   105k|                prefix_result.iterator,
  375|   105k|                ranges::distance(buf.view().begin(), result_it));
  376|   113k|        }
  377|       |
  378|  30.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  30.4k|            localized_number_formatting_options<CharT>{loc};
  383|  30.4k|#endif
  384|       |
  385|  30.4k|        SCN_TRY(
  ------------------
  |  |   71|  30.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.10k, False: 29.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.10k|    }                                                  \
  |  |  |  |   70|  30.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  29.3k|            parse_digits_result,
  387|  29.3k|            parse_integer_digits_with_thsep(
  388|  29.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  29.3k|                prefix_result.parsed_base, locale_options));
  390|  29.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  29.3k|            parse_digits_result;
  392|       |
  393|  29.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 520, False: 28.8k]
  ------------------
  394|    520|            if (auto e = check_thsep_grouping(
  395|    520|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    520|                    thsep_indices, locale_options.grouping);
  397|    520|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    520|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 256, False: 264]
  |  |  ------------------
  ------------------
  398|    256|                return unexpected(e);
  399|    256|            }
  400|    520|        }
  401|       |
  402|  29.0k|        auto nothsep_source_view =
  403|  29.0k|            std::basic_string_view<CharT>{nothsep_source};
  404|  29.0k|        SCN_TRY(
  ------------------
  |  |   71|  29.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  29.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  29.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 196, False: 28.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    196|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    196|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    196|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    196|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    196|    }                                                  \
  |  |  |  |   70|  29.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  28.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  28.9k|            nothsep_source_it,
  406|  28.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  28.9k|                                prefix_result.parsed_base));
  408|       |
  409|  28.9k|        return ranges_polyfill::batch_next(
  410|  28.9k|            prefix_result.iterator,
  411|  28.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  28.9k|                ranges::ssize(thsep_indices));
  413|  29.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   172k|    {
  335|   172k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   172k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   172k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   172k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 172k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   172k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   172k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   172k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 11.6k, False: 160k]
  ------------------
  339|  11.6k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  11.6k|                return unexpected_scan_error(
  341|  11.6k|                    scan_error::invalid_scanned_value,
  342|  11.6k|                    "Unexpected '-' sign when parsing an "
  343|  11.6k|                    "unsigned value");
  344|  11.6k|            }
  345|  11.6k|            else {
  346|  11.6k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 11.6k]
  ------------------
  347|  11.6k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  11.6k|            }
  353|  11.6k|        }
  354|       |
  355|   172k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 25.3k, False: 146k]
  ------------------
  356|  25.3k|            value = T{0};
  357|  25.3k|            return std::next(prefix_result.iterator);
  358|  25.3k|        }
  359|       |
  360|   146k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   146k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 115k, False: 30.8k]
  |  |  ------------------
  ------------------
  361|   115k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 240, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    240|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    240|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    240|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    240|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    240|    }                                                  \
  |  |  |  |   70|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   115k|                    parse_integer_digits_without_thsep(
  363|   115k|                        ranges::subrange{prefix_result.iterator,
  364|   115k|                                         ranges::end(range)},
  365|   115k|                        prefix_result.parsed_base));
  366|       |
  367|   115k|            auto buf = make_contiguous_buffer(
  368|   115k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   115k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.24k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.24k|    }                                                  \
  |  |  |  |   70|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   107k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   107k|                                        prefix_result.parsed_base));
  372|       |
  373|   107k|            return ranges_polyfill::batch_next(
  374|   107k|                prefix_result.iterator,
  375|   107k|                ranges::distance(buf.view().begin(), result_it));
  376|   115k|        }
  377|       |
  378|  30.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  30.8k|            localized_number_formatting_options<CharT>{loc};
  383|  30.8k|#endif
  384|       |
  385|  30.8k|        SCN_TRY(
  ------------------
  |  |   71|  30.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.16k, False: 29.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.16k|    }                                                  \
  |  |  |  |   70|  30.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  29.6k|            parse_digits_result,
  387|  29.6k|            parse_integer_digits_with_thsep(
  388|  29.6k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  29.6k|                prefix_result.parsed_base, locale_options));
  390|  29.6k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  29.6k|            parse_digits_result;
  392|       |
  393|  29.6k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 536, False: 29.1k]
  ------------------
  394|    536|            if (auto e = check_thsep_grouping(
  395|    536|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    536|                    thsep_indices, locale_options.grouping);
  397|    536|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    536|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 270, False: 266]
  |  |  ------------------
  ------------------
  398|    270|                return unexpected(e);
  399|    270|            }
  400|    536|        }
  401|       |
  402|  29.4k|        auto nothsep_source_view =
  403|  29.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  29.4k|        SCN_TRY(
  ------------------
  |  |   71|  29.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  29.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  29.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  29.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 76, False: 29.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     76|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     76|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     76|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     76|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     76|    }                                                  \
  |  |  |  |   70|  29.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  29.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  29.3k|            nothsep_source_it,
  406|  29.3k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  29.3k|                                prefix_result.parsed_base));
  408|       |
  409|  29.3k|        return ranges_polyfill::batch_next(
  410|  29.3k|            prefix_result.iterator,
  411|  29.3k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  29.3k|                ranges::ssize(thsep_indices));
  413|  29.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   128k|    {
  335|   128k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   128k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   128k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 3.80k, False: 124k]
  ------------------
  339|  3.80k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  3.80k|                return unexpected_scan_error(
  341|  3.80k|                    scan_error::invalid_scanned_value,
  342|  3.80k|                    "Unexpected '-' sign when parsing an "
  343|  3.80k|                    "unsigned value");
  344|  3.80k|            }
  345|  3.80k|            else {
  346|  3.80k|                if (specs.type ==
  347|  3.80k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  3.80k|                    return unexpected_scan_error(
  349|  3.80k|                        scan_error::invalid_scanned_value,
  350|  3.80k|                        "'u'-option disallows negative values");
  351|  3.80k|                }
  352|  3.80k|            }
  353|  3.80k|        }
  354|       |
  355|   124k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 22.2k, False: 102k]
  ------------------
  356|  22.2k|            value = T{0};
  357|  22.2k|            return std::next(prefix_result.iterator);
  358|  22.2k|        }
  359|       |
  360|   102k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   102k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 79.2k, False: 23.1k]
  |  |  ------------------
  ------------------
  361|  79.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  79.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 38, False: 79.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     38|    }                                                  \
  |  |  |  |   70|  79.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  79.1k|                    parse_integer_digits_without_thsep(
  363|  79.1k|                        ranges::subrange{prefix_result.iterator,
  364|  79.1k|                                         ranges::end(range)},
  365|  79.1k|                        prefix_result.parsed_base));
  366|       |
  367|  79.1k|            auto buf = make_contiguous_buffer(
  368|  79.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  79.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  79.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.49k, False: 72.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.49k|    }                                                  \
  |  |  |  |   70|  79.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  72.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  72.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  72.6k|            return ranges_polyfill::batch_next(
  374|  72.6k|                prefix_result.iterator,
  375|  72.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  79.1k|        }
  377|       |
  378|  23.1k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  23.1k|            localized_number_formatting_options<CharT>{loc};
  383|  23.1k|#endif
  384|       |
  385|  23.1k|        SCN_TRY(
  ------------------
  |  |   71|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 646, False: 22.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    646|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    646|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    646|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    646|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    646|    }                                                  \
  |  |  |  |   70|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  22.4k|            parse_digits_result,
  387|  22.4k|            parse_integer_digits_with_thsep(
  388|  22.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  22.4k|                prefix_result.parsed_base, locale_options));
  390|  22.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  22.4k|            parse_digits_result;
  392|       |
  393|  22.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 408, False: 22.0k]
  ------------------
  394|    408|            if (auto e = check_thsep_grouping(
  395|    408|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    408|                    thsep_indices, locale_options.grouping);
  397|    408|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    408|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 154, False: 254]
  |  |  ------------------
  ------------------
  398|    154|                return unexpected(e);
  399|    154|            }
  400|    408|        }
  401|       |
  402|  22.3k|        auto nothsep_source_view =
  403|  22.3k|            std::basic_string_view<CharT>{nothsep_source};
  404|  22.3k|        SCN_TRY(
  ------------------
  |  |   71|  22.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 286, False: 22.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    286|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    286|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    286|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    286|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    286|    }                                                  \
  |  |  |  |   70|  22.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  22.0k|            nothsep_source_it,
  406|  22.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  22.0k|                                prefix_result.parsed_base));
  408|       |
  409|  22.0k|        return ranges_polyfill::batch_next(
  410|  22.0k|            prefix_result.iterator,
  411|  22.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  22.0k|                ranges::ssize(thsep_indices));
  413|  22.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   145k|    {
  335|   145k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   145k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   145k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 3.94k, False: 141k]
  ------------------
  339|  3.94k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  3.94k|                return unexpected_scan_error(
  341|  3.94k|                    scan_error::invalid_scanned_value,
  342|  3.94k|                    "Unexpected '-' sign when parsing an "
  343|  3.94k|                    "unsigned value");
  344|  3.94k|            }
  345|  3.94k|            else {
  346|  3.94k|                if (specs.type ==
  347|  3.94k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  3.94k|                    return unexpected_scan_error(
  349|  3.94k|                        scan_error::invalid_scanned_value,
  350|  3.94k|                        "'u'-option disallows negative values");
  351|  3.94k|                }
  352|  3.94k|            }
  353|  3.94k|        }
  354|       |
  355|   141k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 22.8k, False: 118k]
  ------------------
  356|  22.8k|            value = T{0};
  357|  22.8k|            return std::next(prefix_result.iterator);
  358|  22.8k|        }
  359|       |
  360|   118k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   118k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 93.6k, False: 24.8k]
  |  |  ------------------
  ------------------
  361|  93.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  93.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  93.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 40, False: 93.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     40|    }                                                  \
  |  |  |  |   70|  93.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  93.5k|                    parse_integer_digits_without_thsep(
  363|  93.5k|                        ranges::subrange{prefix_result.iterator,
  364|  93.5k|                                         ranges::end(range)},
  365|  93.5k|                        prefix_result.parsed_base));
  366|       |
  367|  93.5k|            auto buf = make_contiguous_buffer(
  368|  93.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  93.5k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  93.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  93.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  93.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.99k, False: 87.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.99k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.99k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.99k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.99k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.99k|    }                                                  \
  |  |  |  |   70|  93.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  87.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  87.5k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  87.5k|                                        prefix_result.parsed_base));
  372|       |
  373|  87.5k|            return ranges_polyfill::batch_next(
  374|  87.5k|                prefix_result.iterator,
  375|  87.5k|                ranges::distance(buf.view().begin(), result_it));
  376|  93.5k|        }
  377|       |
  378|  24.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  24.8k|            localized_number_formatting_options<CharT>{loc};
  383|  24.8k|#endif
  384|       |
  385|  24.8k|        SCN_TRY(
  ------------------
  |  |   71|  24.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 694, False: 24.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    694|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    694|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    694|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    694|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    694|    }                                                  \
  |  |  |  |   70|  24.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  24.1k|            parse_digits_result,
  387|  24.1k|            parse_integer_digits_with_thsep(
  388|  24.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  24.1k|                prefix_result.parsed_base, locale_options));
  390|  24.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  24.1k|            parse_digits_result;
  392|       |
  393|  24.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 428, False: 23.7k]
  ------------------
  394|    428|            if (auto e = check_thsep_grouping(
  395|    428|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    428|                    thsep_indices, locale_options.grouping);
  397|    428|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 174, False: 254]
  |  |  ------------------
  ------------------
  398|    174|                return unexpected(e);
  399|    174|            }
  400|    428|        }
  401|       |
  402|  23.9k|        auto nothsep_source_view =
  403|  23.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  23.9k|        SCN_TRY(
  ------------------
  |  |   71|  23.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 112, False: 23.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    112|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    112|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    112|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    112|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    112|    }                                                  \
  |  |  |  |   70|  23.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  23.8k|            nothsep_source_it,
  406|  23.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  23.8k|                                prefix_result.parsed_base));
  408|       |
  409|  23.8k|        return ranges_polyfill::batch_next(
  410|  23.8k|            prefix_result.iterator,
  411|  23.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  23.8k|                ranges::ssize(thsep_indices));
  413|  23.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   146k|    {
  335|   146k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   146k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   146k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 4.03k, False: 142k]
  ------------------
  339|  4.03k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  4.03k|                return unexpected_scan_error(
  341|  4.03k|                    scan_error::invalid_scanned_value,
  342|  4.03k|                    "Unexpected '-' sign when parsing an "
  343|  4.03k|                    "unsigned value");
  344|  4.03k|            }
  345|  4.03k|            else {
  346|  4.03k|                if (specs.type ==
  347|  4.03k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  4.03k|                    return unexpected_scan_error(
  349|  4.03k|                        scan_error::invalid_scanned_value,
  350|  4.03k|                        "'u'-option disallows negative values");
  351|  4.03k|                }
  352|  4.03k|            }
  353|  4.03k|        }
  354|       |
  355|   142k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 22.9k, False: 119k]
  ------------------
  356|  22.9k|            value = T{0};
  357|  22.9k|            return std::next(prefix_result.iterator);
  358|  22.9k|        }
  359|       |
  360|   119k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   119k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 94.6k, False: 25.0k]
  |  |  ------------------
  ------------------
  361|  94.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  94.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 40, False: 94.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     40|    }                                                  \
  |  |  |  |   70|  94.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  94.6k|                    parse_integer_digits_without_thsep(
  363|  94.6k|                        ranges::subrange{prefix_result.iterator,
  364|  94.6k|                                         ranges::end(range)},
  365|  94.6k|                        prefix_result.parsed_base));
  366|       |
  367|  94.6k|            auto buf = make_contiguous_buffer(
  368|  94.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  94.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  94.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  94.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  94.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.81k, False: 88.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.81k|    }                                                  \
  |  |  |  |   70|  94.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  88.8k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  88.8k|                                        prefix_result.parsed_base));
  372|       |
  373|  88.8k|            return ranges_polyfill::batch_next(
  374|  88.8k|                prefix_result.iterator,
  375|  88.8k|                ranges::distance(buf.view().begin(), result_it));
  376|  94.6k|        }
  377|       |
  378|  25.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  25.0k|            localized_number_formatting_options<CharT>{loc};
  383|  25.0k|#endif
  384|       |
  385|  25.0k|        SCN_TRY(
  ------------------
  |  |   71|  25.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  25.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  25.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  25.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 712, False: 24.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    712|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    712|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    712|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    712|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    712|    }                                                  \
  |  |  |  |   70|  25.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  24.3k|            parse_digits_result,
  387|  24.3k|            parse_integer_digits_with_thsep(
  388|  24.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  24.3k|                prefix_result.parsed_base, locale_options));
  390|  24.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  24.3k|            parse_digits_result;
  392|       |
  393|  24.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 428, False: 23.9k]
  ------------------
  394|    428|            if (auto e = check_thsep_grouping(
  395|    428|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    428|                    thsep_indices, locale_options.grouping);
  397|    428|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 174, False: 254]
  |  |  ------------------
  ------------------
  398|    174|                return unexpected(e);
  399|    174|            }
  400|    428|        }
  401|       |
  402|  24.1k|        auto nothsep_source_view =
  403|  24.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  24.1k|        SCN_TRY(
  ------------------
  |  |   71|  24.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 24.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  24.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  24.1k|            nothsep_source_it,
  406|  24.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  24.1k|                                prefix_result.parsed_base));
  408|       |
  409|  24.1k|        return ranges_polyfill::batch_next(
  410|  24.1k|            prefix_result.iterator,
  411|  24.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  24.1k|                ranges::ssize(thsep_indices));
  413|  24.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  17.5k|    {
  335|  17.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  17.5k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  17.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 17.5k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  17.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 17.5k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  17.5k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  17.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 15.3k, False: 2.19k]
  |  |  ------------------
  ------------------
  361|  15.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  15.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  15.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  15.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  15.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.37k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.37k|    }                                                  \
  |  |  |  |   70|  15.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  10.9k|                    parse_integer_digits_without_thsep(
  363|  10.9k|                        ranges::subrange{prefix_result.iterator,
  364|  10.9k|                                         ranges::end(range)},
  365|  10.9k|                        prefix_result.parsed_base));
  366|       |
  367|  10.9k|            auto buf = make_contiguous_buffer(
  368|  10.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  10.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.55k, False: 4.39k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.55k|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.39k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  4.39k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  4.39k|                                        prefix_result.parsed_base));
  372|       |
  373|  4.39k|            return ranges_polyfill::batch_next(
  374|  4.39k|                prefix_result.iterator,
  375|  4.39k|                ranges::distance(buf.view().begin(), result_it));
  376|  10.9k|        }
  377|       |
  378|  2.19k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  2.19k|            localized_number_formatting_options<CharT>{loc};
  383|  2.19k|#endif
  384|       |
  385|  2.19k|        SCN_TRY(
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  2.19k|            parse_digits_result,
  387|  2.19k|            parse_integer_digits_with_thsep(
  388|  2.19k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  2.19k|                prefix_result.parsed_base, locale_options));
  390|  2.19k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  2.19k|            parse_digits_result;
  392|       |
  393|  2.19k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 2.19k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  2.19k|        auto nothsep_source_view =
  403|  2.19k|            std::basic_string_view<CharT>{nothsep_source};
  404|  2.19k|        SCN_TRY(
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      4|            nothsep_source_it,
  406|      4|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      4|                                prefix_result.parsed_base));
  408|       |
  409|      4|        return ranges_polyfill::batch_next(
  410|      4|            prefix_result.iterator,
  411|      4|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      4|                ranges::ssize(thsep_indices));
  413|  2.19k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  26.2k|    {
  335|  26.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  26.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  26.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 26.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  26.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 21.8k, False: 4.37k]
  |  |  ------------------
  ------------------
  361|  21.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  10.9k|                    parse_integer_digits_without_thsep(
  363|  10.9k|                        ranges::subrange{prefix_result.iterator,
  364|  10.9k|                                         ranges::end(range)},
  365|  10.9k|                        prefix_result.parsed_base));
  366|       |
  367|  10.9k|            auto buf = make_contiguous_buffer(
  368|  10.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  10.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  10.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  10.9k|                                        prefix_result.parsed_base));
  372|       |
  373|  10.9k|            return ranges_polyfill::batch_next(
  374|  10.9k|                prefix_result.iterator,
  375|  10.9k|                ranges::distance(buf.view().begin(), result_it));
  376|  10.9k|        }
  377|       |
  378|  4.37k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.37k|            localized_number_formatting_options<CharT>{loc};
  383|  4.37k|#endif
  384|       |
  385|  4.37k|        SCN_TRY(
  ------------------
  |  |   71|  4.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|  4.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  2.19k|            parse_digits_result,
  387|  2.19k|            parse_integer_digits_with_thsep(
  388|  2.19k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  2.19k|                prefix_result.parsed_base, locale_options));
  390|  2.19k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  2.19k|            parse_digits_result;
  392|       |
  393|  2.19k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 2.19k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  2.19k|        auto nothsep_source_view =
  403|  2.19k|            std::basic_string_view<CharT>{nothsep_source};
  404|  2.19k|        SCN_TRY(
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  2.19k|            nothsep_source_it,
  406|  2.19k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  2.19k|                                prefix_result.parsed_base));
  408|       |
  409|  2.19k|        return ranges_polyfill::batch_next(
  410|  2.19k|            prefix_result.iterator,
  411|  2.19k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  2.19k|                ranges::ssize(thsep_indices));
  413|  2.19k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  26.2k|    {
  335|  26.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  26.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  26.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 26.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  26.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 21.8k, False: 4.37k]
  |  |  ------------------
  ------------------
  361|  21.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  10.9k|                    parse_integer_digits_without_thsep(
  363|  10.9k|                        ranges::subrange{prefix_result.iterator,
  364|  10.9k|                                         ranges::end(range)},
  365|  10.9k|                        prefix_result.parsed_base));
  366|       |
  367|  10.9k|            auto buf = make_contiguous_buffer(
  368|  10.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  10.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  10.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  10.9k|                                        prefix_result.parsed_base));
  372|       |
  373|  10.9k|            return ranges_polyfill::batch_next(
  374|  10.9k|                prefix_result.iterator,
  375|  10.9k|                ranges::distance(buf.view().begin(), result_it));
  376|  10.9k|        }
  377|       |
  378|  4.37k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.37k|            localized_number_formatting_options<CharT>{loc};
  383|  4.37k|#endif
  384|       |
  385|  4.37k|        SCN_TRY(
  ------------------
  |  |   71|  4.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|  4.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  2.19k|            parse_digits_result,
  387|  2.19k|            parse_integer_digits_with_thsep(
  388|  2.19k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  2.19k|                prefix_result.parsed_base, locale_options));
  390|  2.19k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  2.19k|            parse_digits_result;
  392|       |
  393|  2.19k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 2.19k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  2.19k|        auto nothsep_source_view =
  403|  2.19k|            std::basic_string_view<CharT>{nothsep_source};
  404|  2.19k|        SCN_TRY(
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  2.19k|            nothsep_source_it,
  406|  2.19k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  2.19k|                                prefix_result.parsed_base));
  408|       |
  409|  2.19k|        return ranges_polyfill::batch_next(
  410|  2.19k|            prefix_result.iterator,
  411|  2.19k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  2.19k|                ranges::ssize(thsep_indices));
  413|  2.19k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  24.0k|    {
  335|  24.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  24.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  24.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  24.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 24.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  24.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 24.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  24.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  24.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 19.6k, False: 4.37k]
  |  |  ------------------
  ------------------
  361|  19.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  19.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  19.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  19.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.74k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.74k|    }                                                  \
  |  |  |  |   70|  19.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  10.9k|                    parse_integer_digits_without_thsep(
  363|  10.9k|                        ranges::subrange{prefix_result.iterator,
  364|  10.9k|                                         ranges::end(range)},
  365|  10.9k|                        prefix_result.parsed_base));
  366|       |
  367|  10.9k|            auto buf = make_contiguous_buffer(
  368|  10.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  10.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 8.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  8.76k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  8.76k|                                        prefix_result.parsed_base));
  372|       |
  373|  8.76k|            return ranges_polyfill::batch_next(
  374|  8.76k|                prefix_result.iterator,
  375|  8.76k|                ranges::distance(buf.view().begin(), result_it));
  376|  10.9k|        }
  377|       |
  378|  4.37k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.37k|            localized_number_formatting_options<CharT>{loc};
  383|  4.37k|#endif
  384|       |
  385|  4.37k|        SCN_TRY(
  ------------------
  |  |   71|  4.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|  4.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  2.19k|            parse_digits_result,
  387|  2.19k|            parse_integer_digits_with_thsep(
  388|  2.19k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  2.19k|                prefix_result.parsed_base, locale_options));
  390|  2.19k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  2.19k|            parse_digits_result;
  392|       |
  393|  2.19k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 2.19k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  2.19k|        auto nothsep_source_view =
  403|  2.19k|            std::basic_string_view<CharT>{nothsep_source};
  404|  2.19k|        SCN_TRY(
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  2.19k|            nothsep_source_it,
  406|  2.19k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  2.19k|                                prefix_result.parsed_base));
  408|       |
  409|  2.19k|        return ranges_polyfill::batch_next(
  410|  2.19k|            prefix_result.iterator,
  411|  2.19k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  2.19k|                ranges::ssize(thsep_indices));
  413|  2.19k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  26.2k|    {
  335|  26.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  26.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  26.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 26.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  26.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 21.8k, False: 4.37k]
  |  |  ------------------
  ------------------
  361|  21.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  10.9k|                    parse_integer_digits_without_thsep(
  363|  10.9k|                        ranges::subrange{prefix_result.iterator,
  364|  10.9k|                                         ranges::end(range)},
  365|  10.9k|                        prefix_result.parsed_base));
  366|       |
  367|  10.9k|            auto buf = make_contiguous_buffer(
  368|  10.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  10.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  10.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  10.9k|                                        prefix_result.parsed_base));
  372|       |
  373|  10.9k|            return ranges_polyfill::batch_next(
  374|  10.9k|                prefix_result.iterator,
  375|  10.9k|                ranges::distance(buf.view().begin(), result_it));
  376|  10.9k|        }
  377|       |
  378|  4.37k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.37k|            localized_number_formatting_options<CharT>{loc};
  383|  4.37k|#endif
  384|       |
  385|  4.37k|        SCN_TRY(
  ------------------
  |  |   71|  4.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|  4.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  2.19k|            parse_digits_result,
  387|  2.19k|            parse_integer_digits_with_thsep(
  388|  2.19k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  2.19k|                prefix_result.parsed_base, locale_options));
  390|  2.19k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  2.19k|            parse_digits_result;
  392|       |
  393|  2.19k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 2.19k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  2.19k|        auto nothsep_source_view =
  403|  2.19k|            std::basic_string_view<CharT>{nothsep_source};
  404|  2.19k|        SCN_TRY(
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  2.19k|            nothsep_source_it,
  406|  2.19k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  2.19k|                                prefix_result.parsed_base));
  408|       |
  409|  2.19k|        return ranges_polyfill::batch_next(
  410|  2.19k|            prefix_result.iterator,
  411|  2.19k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  2.19k|                ranges::ssize(thsep_indices));
  413|  2.19k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  26.2k|    {
  335|  26.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  26.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  26.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 26.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  26.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 26.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  26.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  26.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 21.8k, False: 4.37k]
  |  |  ------------------
  ------------------
  361|  21.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  21.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.9k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.9k|    }                                                  \
  |  |  |  |   70|  21.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  10.9k|                    parse_integer_digits_without_thsep(
  363|  10.9k|                        ranges::subrange{prefix_result.iterator,
  364|  10.9k|                                         ranges::end(range)},
  365|  10.9k|                        prefix_result.parsed_base));
  366|       |
  367|  10.9k|            auto buf = make_contiguous_buffer(
  368|  10.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  10.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  10.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  10.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  10.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  10.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  10.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  10.9k|                                        prefix_result.parsed_base));
  372|       |
  373|  10.9k|            return ranges_polyfill::batch_next(
  374|  10.9k|                prefix_result.iterator,
  375|  10.9k|                ranges::distance(buf.view().begin(), result_it));
  376|  10.9k|        }
  377|       |
  378|  4.37k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.37k|            localized_number_formatting_options<CharT>{loc};
  383|  4.37k|#endif
  384|       |
  385|  4.37k|        SCN_TRY(
  ------------------
  |  |   71|  4.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.18k, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.18k|    }                                                  \
  |  |  |  |   70|  4.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  2.19k|            parse_digits_result,
  387|  2.19k|            parse_integer_digits_with_thsep(
  388|  2.19k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  2.19k|                prefix_result.parsed_base, locale_options));
  390|  2.19k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  2.19k|            parse_digits_result;
  392|       |
  393|  2.19k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 2.19k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  2.19k|        auto nothsep_source_view =
  403|  2.19k|            std::basic_string_view<CharT>{nothsep_source};
  404|  2.19k|        SCN_TRY(
  ------------------
  |  |   71|  2.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 2.19k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  2.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.19k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  2.19k|            nothsep_source_it,
  406|  2.19k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  2.19k|                                prefix_result.parsed_base));
  408|       |
  409|  2.19k|        return ranges_polyfill::batch_next(
  410|  2.19k|            prefix_result.iterator,
  411|  2.19k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  2.19k|                ranges::ssize(thsep_indices));
  413|  2.19k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  52.2k|    {
  324|  52.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  52.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  52.2k|        return read_default_with_base(range, value, 0);
  326|  52.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  52.2k|    {
  287|  52.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  52.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 52.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  52.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  52.2k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  52.2k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  52.2k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  52.2k|                return unexpected_scan_error(
  293|  52.2k|                    scan_error::invalid_scanned_value,
  294|  52.2k|                    "Unexpected '-' sign when parsing an "
  295|  52.2k|                    "unsigned value");
  296|  52.2k|            }
  297|  52.2k|        }
  298|       |
  299|  52.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 12.6k, False: 39.6k]
  ------------------
  300|  12.6k|            value = T{0};
  301|  12.6k|            return std::next(prefix_result.iterator);
  302|  12.6k|        }
  303|       |
  304|  79.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 66, False: 39.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     66|    }                                                  \
  |  |  |  |   70|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  79.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  79.1k|                                                      ranges::end(range)},
  307|  79.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  79.1k|        auto buf = make_contiguous_buffer(
  310|  79.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  79.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  39.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  39.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  39.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  39.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.24k, False: 34.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.24k|    }                                                  \
  |  |  |  |   70|  39.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  34.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  34.3k|                                    prefix_result.parsed_base));
  314|       |
  315|  34.3k|        return ranges_polyfill::batch_next(
  316|  34.3k|            prefix_result.iterator,
  317|  34.3k|            ranges::distance(buf.view().begin(), result_it));
  318|  79.1k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  1.22M|{
  121|  1.22M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  1.22M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.22M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.22M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.22M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.22M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  1.22M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  1.22M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  1.22M|        parse_integer_base_prefix(
  126|  1.22M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  1.22M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 344k, False: 885k]
  ------------------
  129|   344k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 1.90k, False: 342k]
  ------------------
  130|   344k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 207k, False: 135k]
  ------------------
  131|   209k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   209k|                digits_begin_it, ranges::begin(range));
  133|   209k|        }
  134|   135k|        else {
  135|   135k|            parsed_zero = false;
  136|   135k|        }
  137|   344k|    }
  138|   885k|    else {
  139|   885k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 4.36k, False: 881k]
  ------------------
  140|   885k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 140k, False: 740k]
  ------------------
  141|   144k|            digits_begin_it = base_prefix_begin_it;
  142|   144k|        }
  143|   885k|    }
  144|       |
  145|  1.22M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 1.14M, False: 83.5k]
  ------------------
  146|  1.14M|        sign = sign_type::plus_sign;
  147|  1.14M|    }
  148|  1.22M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  1.22M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  1.22M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  1.22M|{
   88|  1.22M|    switch (base) {
   89|  49.1k|        case 2:
  ------------------
  |  Branch (89:9): [True: 49.1k, False: 1.18M]
  ------------------
   90|       |            // allow 0b/0B
   91|  49.1k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  49.1k|                    false};
   93|       |
   94|  82.8k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 82.8k, False: 1.14M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  82.8k|            bool zero_parsed = false;
   97|  82.8k|            auto it = apply_opt(
   98|  82.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  82.8k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   175k|        case 16:
  ------------------
  |  Branch (102:9): [True: 175k, False: 1.05M]
  ------------------
  103|       |            // allow 0x/0X
  104|   175k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   175k|                    false};
  106|       |
  107|   761k|        case 0:
  ------------------
  |  Branch (107:9): [True: 761k, False: 468k]
  ------------------
  108|       |            // detect base
  109|   761k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   761k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   160k|        default:
  ------------------
  |  Branch (111:9): [True: 160k, False: 1.06M]
  ------------------
  112|       |            // no base prefix allowed
  113|   160k|            return {ranges::begin(range), base, false};
  114|  1.22M|    }
  115|  1.22M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|   803k|{
   38|   803k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   803k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   803k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|   834k|{
   53|   834k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 10.1k, False: 824k]
  ------------------
   54|  10.1k|        return *r;
   55|  10.1k|    }
   56|       |
   57|   824k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 344k, False: 479k]
  ------------------
   58|   344k|        zero_parsed = true;
   59|   344k|        return *r;
   60|   344k|    }
   61|       |
   62|   479k|    return unexpected(parse_error::error);
   63|   824k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|   937k|{
   45|   937k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   937k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   937k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|   761k|{
   69|   761k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 7.93k, False: 753k]
  ------------------
   70|  7.93k|        return {*r, 16, false};
   71|  7.93k|    }
   72|   753k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 2.42k, False: 751k]
  ------------------
   73|  2.42k|        return {*r, 2, false};
   74|  2.42k|    }
   75|   751k|    {
   76|   751k|        bool zero_parsed{false};
   77|   751k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 320k, False: 431k]
  ------------------
   78|   320k|            return {*r, 8, zero_parsed};
   79|   320k|        }
   80|   751k|    }
   81|   431k|    return {ranges::begin(range), 10, false};
   82|   751k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|   845k|{
  156|   845k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   845k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   845k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   845k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.20k, False: 844k]
  |  |  ------------------
  ------------------
  160|  1.20k|            return unexpected_scan_error(
  161|  1.20k|                scan_error::invalid_scanned_value,
  162|  1.20k|                "Failed to parse integer: No digits found");
  163|  1.20k|        }
  164|   844k|        return ranges::end(range);
  165|   845k|    }
  166|   845k|    else {
  167|   845k|        return read_while1_code_unit(
  168|   845k|                   range, [&](char_type ch)
  169|   845k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   845k|            .transform_error(map_parse_error_to_scan_error(
  171|   845k|                scan_error::invalid_scanned_value,
  172|   845k|                "Failed to parse integer: No digits found"));
  173|   845k|    }
  174|   845k|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  59.7k|    {
  324|  59.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  59.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  59.7k|        return read_default_with_base(range, value, 0);
  326|  59.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  59.7k|    {
  287|  59.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  59.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  59.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  59.7k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  59.7k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  59.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  59.7k|                return unexpected_scan_error(
  293|  59.7k|                    scan_error::invalid_scanned_value,
  294|  59.7k|                    "Unexpected '-' sign when parsing an "
  295|  59.7k|                    "unsigned value");
  296|  59.7k|            }
  297|  59.7k|        }
  298|       |
  299|  59.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 14.3k, False: 45.4k]
  ------------------
  300|  14.3k|            value = T{0};
  301|  14.3k|            return std::next(prefix_result.iterator);
  302|  14.3k|        }
  303|       |
  304|  90.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  45.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 99, False: 45.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     99|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     99|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     99|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     99|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     99|    }                                                  \
  |  |  |  |   70|  45.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  90.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  90.8k|                                                      ranges::end(range)},
  307|  90.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  90.8k|        auto buf = make_contiguous_buffer(
  310|  90.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  90.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  45.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.94k, False: 40.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.94k|    }                                                  \
  |  |  |  |   70|  45.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  40.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  40.4k|                                    prefix_result.parsed_base));
  314|       |
  315|  40.4k|        return ranges_polyfill::batch_next(
  316|  40.4k|            prefix_result.iterator,
  317|  40.4k|            ranges::distance(buf.view().begin(), result_it));
  318|  90.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  60.4k|    {
  324|  60.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  60.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  60.4k|        return read_default_with_base(range, value, 0);
  326|  60.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  60.4k|    {
  287|  60.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  60.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  60.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  60.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  60.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 60.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  60.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  60.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  60.4k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  60.4k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  60.4k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  60.4k|                return unexpected_scan_error(
  293|  60.4k|                    scan_error::invalid_scanned_value,
  294|  60.4k|                    "Unexpected '-' sign when parsing an "
  295|  60.4k|                    "unsigned value");
  296|  60.4k|            }
  297|  60.4k|        }
  298|       |
  299|  60.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 14.4k, False: 46.0k]
  ------------------
  300|  14.4k|            value = T{0};
  301|  14.4k|            return std::next(prefix_result.iterator);
  302|  14.4k|        }
  303|       |
  304|  91.9k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  46.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  46.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  46.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  46.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 111, False: 45.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    111|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    111|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    111|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    111|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    111|    }                                                  \
  |  |  |  |   70|  46.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  45.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  91.9k|                                     ranges::subrange{prefix_result.iterator,
  306|  91.9k|                                                      ranges::end(range)},
  307|  91.9k|                                     prefix_result.parsed_base));
  308|       |
  309|  91.9k|        auto buf = make_contiguous_buffer(
  310|  91.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  91.9k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  45.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  45.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  45.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  45.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.87k, False: 41.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.87k|    }                                                  \
  |  |  |  |   70|  45.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  41.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  41.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  41.0k|        return ranges_polyfill::batch_next(
  316|  41.0k|            prefix_result.iterator,
  317|  41.0k|            ranges::distance(buf.view().begin(), result_it));
  318|  91.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  49.1k|    {
  324|  49.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  49.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  49.1k|        return read_default_with_base(range, value, 0);
  326|  49.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  49.1k|    {
  287|  49.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  49.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  49.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  49.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  49.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 49.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  49.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  49.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  49.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  49.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 870, False: 48.2k]
  ------------------
  292|    870|                return unexpected_scan_error(
  293|    870|                    scan_error::invalid_scanned_value,
  294|    870|                    "Unexpected '-' sign when parsing an "
  295|    870|                    "unsigned value");
  296|    870|            }
  297|  49.1k|        }
  298|       |
  299|  48.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 12.3k, False: 35.8k]
  ------------------
  300|  12.3k|            value = T{0};
  301|  12.3k|            return std::next(prefix_result.iterator);
  302|  12.3k|        }
  303|       |
  304|  71.7k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  35.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  35.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  35.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  35.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18, False: 35.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  35.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  35.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  71.7k|                                     ranges::subrange{prefix_result.iterator,
  306|  71.7k|                                                      ranges::end(range)},
  307|  71.7k|                                     prefix_result.parsed_base));
  308|       |
  309|  71.7k|        auto buf = make_contiguous_buffer(
  310|  71.7k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  71.7k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  35.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  35.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  35.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  35.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.53k, False: 31.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.53k|    }                                                  \
  |  |  |  |   70|  35.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  31.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  31.3k|                                    prefix_result.parsed_base));
  314|       |
  315|  31.3k|        return ranges_polyfill::batch_next(
  316|  31.3k|            prefix_result.iterator,
  317|  31.3k|            ranges::distance(buf.view().begin(), result_it));
  318|  71.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  52.1k|    {
  324|  52.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  52.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  52.1k|        return read_default_with_base(range, value, 0);
  326|  52.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  52.1k|    {
  287|  52.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  52.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 52.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  52.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  52.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  52.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  52.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 909, False: 51.2k]
  ------------------
  292|    909|                return unexpected_scan_error(
  293|    909|                    scan_error::invalid_scanned_value,
  294|    909|                    "Unexpected '-' sign when parsing an "
  295|    909|                    "unsigned value");
  296|    909|            }
  297|  52.1k|        }
  298|       |
  299|  51.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 12.8k, False: 38.4k]
  ------------------
  300|  12.8k|            value = T{0};
  301|  12.8k|            return std::next(prefix_result.iterator);
  302|  12.8k|        }
  303|       |
  304|  76.8k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  38.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18, False: 38.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  38.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  76.8k|                                     ranges::subrange{prefix_result.iterator,
  306|  76.8k|                                                      ranges::end(range)},
  307|  76.8k|                                     prefix_result.parsed_base));
  308|       |
  309|  76.8k|        auto buf = make_contiguous_buffer(
  310|  76.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  76.8k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  38.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.37k, False: 34.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.37k|    }                                                  \
  |  |  |  |   70|  38.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  34.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  34.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  34.0k|                                    prefix_result.parsed_base));
  314|       |
  315|  34.0k|        return ranges_polyfill::batch_next(
  316|  34.0k|            prefix_result.iterator,
  317|  34.0k|            ranges::distance(buf.view().begin(), result_it));
  318|  76.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|  52.5k|    {
  324|  52.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  52.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  52.5k|        return read_default_with_base(range, value, 0);
  326|  52.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|  52.5k|    {
  287|  52.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  52.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 52.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  52.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  52.5k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  52.5k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  52.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 942, False: 51.6k]
  ------------------
  292|    942|                return unexpected_scan_error(
  293|    942|                    scan_error::invalid_scanned_value,
  294|    942|                    "Unexpected '-' sign when parsing an "
  295|    942|                    "unsigned value");
  296|    942|            }
  297|  52.5k|        }
  298|       |
  299|  51.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 12.8k, False: 38.7k]
  ------------------
  300|  12.8k|            value = T{0};
  301|  12.8k|            return std::next(prefix_result.iterator);
  302|  12.8k|        }
  303|       |
  304|  77.4k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  38.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18, False: 38.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     18|    }                                                  \
  |  |  |  |   70|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  77.4k|                                     ranges::subrange{prefix_result.iterator,
  306|  77.4k|                                                      ranges::end(range)},
  307|  77.4k|                                     prefix_result.parsed_base));
  308|       |
  309|  77.4k|        auto buf = make_contiguous_buffer(
  310|  77.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  77.4k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  38.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.28k, False: 34.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.28k|    }                                                  \
  |  |  |  |   70|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  34.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  34.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  34.4k|                                    prefix_result.parsed_base));
  314|       |
  315|  34.4k|        return ranges_polyfill::batch_next(
  316|  34.4k|            prefix_result.iterator,
  317|  34.4k|            ranges::distance(buf.view().begin(), result_it));
  318|  77.4k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   163k|{
  185|   163k|    std::basic_string<CharT> output;
  186|   163k|    std::string thsep_indices;
  187|   163k|    auto it = ranges::begin(range);
  188|   163k|    bool digit_matched = false;
  189|   693k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 690k, False: 3.68k]
  ------------------
  190|   690k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 38.2k, False: 651k]
  ------------------
  191|  38.2k|            thsep_indices.push_back(static_cast<char>(
  192|  38.2k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  38.2k|        }
  194|   651k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 159k, False: 492k]
  ------------------
  195|   159k|            break;
  196|   159k|        }
  197|   492k|        else {
  198|   492k|            output.push_back(*it);
  199|   492k|            digit_matched = true;
  200|   492k|        }
  201|   690k|    }
  202|   163k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16.5k, False: 146k]
  |  |  ------------------
  ------------------
  203|  16.5k|        return unexpected_scan_error(
  204|  16.5k|            scan_error::invalid_scanned_value,
  205|  16.5k|            "Failed to parse integer: No digits found");
  206|  16.5k|    }
  207|   146k|    return std::tuple{it, output, thsep_indices};
  208|   163k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  1.17M|    {
  280|  1.17M|        detail::check_int_type_specs(specs, eh);
  281|  1.17M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   134k|    {
  335|   134k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   134k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   134k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.04k, False: 125k]
  ------------------
  339|  9.04k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.04k|                return unexpected_scan_error(
  341|  9.04k|                    scan_error::invalid_scanned_value,
  342|  9.04k|                    "Unexpected '-' sign when parsing an "
  343|  9.04k|                    "unsigned value");
  344|  9.04k|            }
  345|  9.04k|            else {
  346|  9.04k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 9.04k]
  ------------------
  347|  9.04k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  9.04k|            }
  353|  9.04k|        }
  354|       |
  355|   134k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 20.6k, False: 113k]
  ------------------
  356|  20.6k|            value = T{0};
  357|  20.6k|            return std::next(prefix_result.iterator);
  358|  20.6k|        }
  359|       |
  360|   113k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   113k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 87.3k, False: 26.5k]
  |  |  ------------------
  ------------------
  361|  87.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  87.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  87.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  87.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  87.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 176, False: 87.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    176|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    176|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    176|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    176|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    176|    }                                                  \
  |  |  |  |   70|  87.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  87.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  87.1k|                    parse_integer_digits_without_thsep(
  363|  87.1k|                        ranges::subrange{prefix_result.iterator,
  364|  87.1k|                                         ranges::end(range)},
  365|  87.1k|                        prefix_result.parsed_base));
  366|       |
  367|  87.1k|            auto buf = make_contiguous_buffer(
  368|  87.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  87.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  87.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  87.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  87.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  87.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.2k, False: 68.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.2k|    }                                                  \
  |  |  |  |   70|  87.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  68.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  68.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  68.9k|                                        prefix_result.parsed_base));
  372|       |
  373|  68.9k|            return ranges_polyfill::batch_next(
  374|  68.9k|                prefix_result.iterator,
  375|  68.9k|                ranges::distance(buf.view().begin(), result_it));
  376|  87.1k|        }
  377|       |
  378|  26.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  26.5k|            localized_number_formatting_options<CharT>{loc};
  383|  26.5k|#endif
  384|       |
  385|  26.5k|        SCN_TRY(
  ------------------
  |  |   71|  26.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.76k, False: 23.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.76k|    }                                                  \
  |  |  |  |   70|  26.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  23.7k|            parse_digits_result,
  387|  23.7k|            parse_integer_digits_with_thsep(
  388|  23.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  23.7k|                prefix_result.parsed_base, locale_options));
  390|  23.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  23.7k|            parse_digits_result;
  392|       |
  393|  23.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 472, False: 23.2k]
  ------------------
  394|    472|            if (auto e = check_thsep_grouping(
  395|    472|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    472|                    thsep_indices, locale_options.grouping);
  397|    472|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    472|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 210, False: 262]
  |  |  ------------------
  ------------------
  398|    210|                return unexpected(e);
  399|    210|            }
  400|    472|        }
  401|       |
  402|  23.5k|        auto nothsep_source_view =
  403|  23.5k|            std::basic_string_view<CharT>{nothsep_source};
  404|  23.5k|        SCN_TRY(
  ------------------
  |  |   71|  23.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 558, False: 22.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    558|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    558|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    558|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    558|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    558|    }                                                  \
  |  |  |  |   70|  23.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  22.9k|            nothsep_source_it,
  406|  22.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  22.9k|                                prefix_result.parsed_base));
  408|       |
  409|  22.9k|        return ranges_polyfill::batch_next(
  410|  22.9k|            prefix_result.iterator,
  411|  22.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  22.9k|                ranges::ssize(thsep_indices));
  413|  23.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   168k|    {
  335|   168k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 168k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   168k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   168k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.50k, False: 159k]
  ------------------
  339|  9.50k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.50k|                return unexpected_scan_error(
  341|  9.50k|                    scan_error::invalid_scanned_value,
  342|  9.50k|                    "Unexpected '-' sign when parsing an "
  343|  9.50k|                    "unsigned value");
  344|  9.50k|            }
  345|  9.50k|            else {
  346|  9.50k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 9.50k]
  ------------------
  347|  9.50k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  9.50k|            }
  353|  9.50k|        }
  354|       |
  355|   168k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 23.1k, False: 145k]
  ------------------
  356|  23.1k|            value = T{0};
  357|  23.1k|            return std::next(prefix_result.iterator);
  358|  23.1k|        }
  359|       |
  360|   145k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 115k, False: 30.3k]
  |  |  ------------------
  ------------------
  361|   115k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   115k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 258, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    258|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    258|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    258|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    258|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    258|    }                                                  \
  |  |  |  |   70|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   114k|                    parse_integer_digits_without_thsep(
  363|   114k|                        ranges::subrange{prefix_result.iterator,
  364|   114k|                                         ranges::end(range)},
  365|   114k|                        prefix_result.parsed_base));
  366|       |
  367|   114k|            auto buf = make_contiguous_buffer(
  368|   114k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   114k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.3k, False: 97.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.3k|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  97.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  97.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  97.4k|                                        prefix_result.parsed_base));
  372|       |
  373|  97.4k|            return ranges_polyfill::batch_next(
  374|  97.4k|                prefix_result.iterator,
  375|  97.4k|                ranges::distance(buf.view().begin(), result_it));
  376|   114k|        }
  377|       |
  378|  30.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  30.3k|            localized_number_formatting_options<CharT>{loc};
  383|  30.3k|#endif
  384|       |
  385|  30.3k|        SCN_TRY(
  ------------------
  |  |   71|  30.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.92k, False: 27.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.92k|    }                                                  \
  |  |  |  |   70|  30.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  27.4k|            parse_digits_result,
  387|  27.4k|            parse_integer_digits_with_thsep(
  388|  27.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  27.4k|                prefix_result.parsed_base, locale_options));
  390|  27.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  27.4k|            parse_digits_result;
  392|       |
  393|  27.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 506, False: 26.9k]
  ------------------
  394|    506|            if (auto e = check_thsep_grouping(
  395|    506|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    506|                    thsep_indices, locale_options.grouping);
  397|    506|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    506|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 244, False: 262]
  |  |  ------------------
  ------------------
  398|    244|                return unexpected(e);
  399|    244|            }
  400|    506|        }
  401|       |
  402|  27.2k|        auto nothsep_source_view =
  403|  27.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  27.2k|        SCN_TRY(
  ------------------
  |  |   71|  27.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 186, False: 27.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    186|    }                                                  \
  |  |  |  |   70|  27.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  27.0k|            nothsep_source_it,
  406|  27.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  27.0k|                                prefix_result.parsed_base));
  408|       |
  409|  27.0k|        return ranges_polyfill::batch_next(
  410|  27.0k|            prefix_result.iterator,
  411|  27.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  27.0k|                ranges::ssize(thsep_indices));
  413|  27.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   170k|    {
  335|   170k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   170k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   170k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   170k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 170k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   170k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   170k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   170k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.69k, False: 161k]
  ------------------
  339|  9.69k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.69k|                return unexpected_scan_error(
  341|  9.69k|                    scan_error::invalid_scanned_value,
  342|  9.69k|                    "Unexpected '-' sign when parsing an "
  343|  9.69k|                    "unsigned value");
  344|  9.69k|            }
  345|  9.69k|            else {
  346|  9.69k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 9.69k]
  ------------------
  347|  9.69k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  9.69k|            }
  353|  9.69k|        }
  354|       |
  355|   170k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 23.2k, False: 147k]
  ------------------
  356|  23.2k|            value = T{0};
  357|  23.2k|            return std::next(prefix_result.iterator);
  358|  23.2k|        }
  359|       |
  360|   147k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   147k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 116k, False: 30.7k]
  |  |  ------------------
  ------------------
  361|   116k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 290, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    290|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    290|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    290|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    290|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    290|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   116k|                    parse_integer_digits_without_thsep(
  363|   116k|                        ranges::subrange{prefix_result.iterator,
  364|   116k|                                         ranges::end(range)},
  365|   116k|                        prefix_result.parsed_base));
  366|       |
  367|   116k|            auto buf = make_contiguous_buffer(
  368|   116k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   116k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.2k, False: 99.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.2k|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  99.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  99.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  99.2k|                                        prefix_result.parsed_base));
  372|       |
  373|  99.2k|            return ranges_polyfill::batch_next(
  374|  99.2k|                prefix_result.iterator,
  375|  99.2k|                ranges::distance(buf.view().begin(), result_it));
  376|   116k|        }
  377|       |
  378|  30.7k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  30.7k|            localized_number_formatting_options<CharT>{loc};
  383|  30.7k|#endif
  384|       |
  385|  30.7k|        SCN_TRY(
  ------------------
  |  |   71|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.98k, False: 27.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.98k|    }                                                  \
  |  |  |  |   70|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  27.7k|            parse_digits_result,
  387|  27.7k|            parse_integer_digits_with_thsep(
  388|  27.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  27.7k|                prefix_result.parsed_base, locale_options));
  390|  27.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  27.7k|            parse_digits_result;
  392|       |
  393|  27.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 522, False: 27.2k]
  ------------------
  394|    522|            if (auto e = check_thsep_grouping(
  395|    522|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    522|                    thsep_indices, locale_options.grouping);
  397|    522|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    522|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 258, False: 264]
  |  |  ------------------
  ------------------
  398|    258|                return unexpected(e);
  399|    258|            }
  400|    522|        }
  401|       |
  402|  27.5k|        auto nothsep_source_view =
  403|  27.5k|            std::basic_string_view<CharT>{nothsep_source};
  404|  27.5k|        SCN_TRY(
  ------------------
  |  |   71|  27.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  27.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  27.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  27.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 72, False: 27.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     72|    }                                                  \
  |  |  |  |   70|  27.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  27.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  27.4k|            nothsep_source_it,
  406|  27.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  27.4k|                                prefix_result.parsed_base));
  408|       |
  409|  27.4k|        return ranges_polyfill::batch_next(
  410|  27.4k|            prefix_result.iterator,
  411|  27.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  27.4k|                ranges::ssize(thsep_indices));
  413|  27.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   132k|    {
  335|   132k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   132k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   132k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 3.11k, False: 129k]
  ------------------
  339|  3.11k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  3.11k|                return unexpected_scan_error(
  341|  3.11k|                    scan_error::invalid_scanned_value,
  342|  3.11k|                    "Unexpected '-' sign when parsing an "
  343|  3.11k|                    "unsigned value");
  344|  3.11k|            }
  345|  3.11k|            else {
  346|  3.11k|                if (specs.type ==
  347|  3.11k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  3.11k|                    return unexpected_scan_error(
  349|  3.11k|                        scan_error::invalid_scanned_value,
  350|  3.11k|                        "'u'-option disallows negative values");
  351|  3.11k|                }
  352|  3.11k|            }
  353|  3.11k|        }
  354|       |
  355|   129k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 20.3k, False: 108k]
  ------------------
  356|  20.3k|            value = T{0};
  357|  20.3k|            return std::next(prefix_result.iterator);
  358|  20.3k|        }
  359|       |
  360|   108k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   108k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 84.6k, False: 24.0k]
  |  |  ------------------
  ------------------
  361|  84.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  84.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  84.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  84.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  84.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 48, False: 84.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     48|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     48|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     48|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     48|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     48|    }                                                  \
  |  |  |  |   70|  84.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  84.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  84.6k|                    parse_integer_digits_without_thsep(
  363|  84.6k|                        ranges::subrange{prefix_result.iterator,
  364|  84.6k|                                         ranges::end(range)},
  365|  84.6k|                        prefix_result.parsed_base));
  366|       |
  367|  84.6k|            auto buf = make_contiguous_buffer(
  368|  84.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  84.6k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  84.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  84.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  84.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  84.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.0k, False: 68.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.0k|    }                                                  \
  |  |  |  |   70|  84.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  68.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  68.5k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  68.5k|                                        prefix_result.parsed_base));
  372|       |
  373|  68.5k|            return ranges_polyfill::batch_next(
  374|  68.5k|                prefix_result.iterator,
  375|  68.5k|                ranges::distance(buf.view().begin(), result_it));
  376|  84.6k|        }
  377|       |
  378|  24.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  24.0k|            localized_number_formatting_options<CharT>{loc};
  383|  24.0k|#endif
  384|       |
  385|  24.0k|        SCN_TRY(
  ------------------
  |  |   71|  24.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.58k, False: 21.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.58k|    }                                                  \
  |  |  |  |   70|  24.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  21.4k|            parse_digits_result,
  387|  21.4k|            parse_integer_digits_with_thsep(
  388|  21.4k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  21.4k|                prefix_result.parsed_base, locale_options));
  390|  21.4k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  21.4k|            parse_digits_result;
  392|       |
  393|  21.4k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 404, False: 21.0k]
  ------------------
  394|    404|            if (auto e = check_thsep_grouping(
  395|    404|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    404|                    thsep_indices, locale_options.grouping);
  397|    404|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 152, False: 252]
  |  |  ------------------
  ------------------
  398|    152|                return unexpected(e);
  399|    152|            }
  400|    404|        }
  401|       |
  402|  21.2k|        auto nothsep_source_view =
  403|  21.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  21.2k|        SCN_TRY(
  ------------------
  |  |   71|  21.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  21.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  21.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  21.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 278, False: 21.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    278|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    278|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    278|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    278|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    278|    }                                                  \
  |  |  |  |   70|  21.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  21.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  21.0k|            nothsep_source_it,
  406|  21.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  21.0k|                                prefix_result.parsed_base));
  408|       |
  409|  21.0k|        return ranges_polyfill::batch_next(
  410|  21.0k|            prefix_result.iterator,
  411|  21.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  21.0k|                ranges::ssize(thsep_indices));
  413|  21.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   148k|    {
  335|   148k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 148k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   148k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   148k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 3.24k, False: 144k]
  ------------------
  339|  3.24k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  3.24k|                return unexpected_scan_error(
  341|  3.24k|                    scan_error::invalid_scanned_value,
  342|  3.24k|                    "Unexpected '-' sign when parsing an "
  343|  3.24k|                    "unsigned value");
  344|  3.24k|            }
  345|  3.24k|            else {
  346|  3.24k|                if (specs.type ==
  347|  3.24k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  3.24k|                    return unexpected_scan_error(
  349|  3.24k|                        scan_error::invalid_scanned_value,
  350|  3.24k|                        "'u'-option disallows negative values");
  351|  3.24k|                }
  352|  3.24k|            }
  353|  3.24k|        }
  354|       |
  355|   144k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 20.9k, False: 123k]
  ------------------
  356|  20.9k|            value = T{0};
  357|  20.9k|            return std::next(prefix_result.iterator);
  358|  20.9k|        }
  359|       |
  360|   123k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   123k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 98.1k, False: 25.7k]
  |  |  ------------------
  ------------------
  361|  98.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  98.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 50, False: 98.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     50|    }                                                  \
  |  |  |  |   70|  98.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  98.1k|                    parse_integer_digits_without_thsep(
  363|  98.1k|                        ranges::subrange{prefix_result.iterator,
  364|  98.1k|                                         ranges::end(range)},
  365|  98.1k|                        prefix_result.parsed_base));
  366|       |
  367|  98.1k|            auto buf = make_contiguous_buffer(
  368|  98.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  98.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  98.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15.5k, False: 82.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.5k|    }                                                  \
  |  |  |  |   70|  98.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  82.5k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  82.5k|                                        prefix_result.parsed_base));
  372|       |
  373|  82.5k|            return ranges_polyfill::batch_next(
  374|  82.5k|                prefix_result.iterator,
  375|  82.5k|                ranges::distance(buf.view().begin(), result_it));
  376|  98.1k|        }
  377|       |
  378|  25.7k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  25.7k|            localized_number_formatting_options<CharT>{loc};
  383|  25.7k|#endif
  384|       |
  385|  25.7k|        SCN_TRY(
  ------------------
  |  |   71|  25.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  25.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  25.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  25.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.62k, False: 23.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.62k|    }                                                  \
  |  |  |  |   70|  25.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  23.0k|            parse_digits_result,
  387|  23.0k|            parse_integer_digits_with_thsep(
  388|  23.0k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  23.0k|                prefix_result.parsed_base, locale_options));
  390|  23.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  23.0k|            parse_digits_result;
  392|       |
  393|  23.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 424, False: 22.6k]
  ------------------
  394|    424|            if (auto e = check_thsep_grouping(
  395|    424|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    424|                    thsep_indices, locale_options.grouping);
  397|    424|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    424|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 172, False: 252]
  |  |  ------------------
  ------------------
  398|    172|                return unexpected(e);
  399|    172|            }
  400|    424|        }
  401|       |
  402|  22.9k|        auto nothsep_source_view =
  403|  22.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  22.9k|        SCN_TRY(
  ------------------
  |  |   71|  22.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  22.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  22.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 110, False: 22.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    110|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    110|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    110|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    110|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    110|    }                                                  \
  |  |  |  |   70|  22.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  22.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  22.8k|            nothsep_source_it,
  406|  22.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  22.8k|                                prefix_result.parsed_base));
  408|       |
  409|  22.8k|        return ranges_polyfill::batch_next(
  410|  22.8k|            prefix_result.iterator,
  411|  22.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  22.8k|                ranges::ssize(thsep_indices));
  413|  22.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   149k|    {
  335|   149k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   149k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   149k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   149k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 149k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   149k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   149k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   149k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 3.33k, False: 146k]
  ------------------
  339|  3.33k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  3.33k|                return unexpected_scan_error(
  341|  3.33k|                    scan_error::invalid_scanned_value,
  342|  3.33k|                    "Unexpected '-' sign when parsing an "
  343|  3.33k|                    "unsigned value");
  344|  3.33k|            }
  345|  3.33k|            else {
  346|  3.33k|                if (specs.type ==
  347|  3.33k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  3.33k|                    return unexpected_scan_error(
  349|  3.33k|                        scan_error::invalid_scanned_value,
  350|  3.33k|                        "'u'-option disallows negative values");
  351|  3.33k|                }
  352|  3.33k|            }
  353|  3.33k|        }
  354|       |
  355|   146k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 20.9k, False: 125k]
  ------------------
  356|  20.9k|            value = T{0};
  357|  20.9k|            return std::next(prefix_result.iterator);
  358|  20.9k|        }
  359|       |
  360|   125k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   125k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 99.2k, False: 25.9k]
  |  |  ------------------
  ------------------
  361|  99.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  99.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  99.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 50, False: 99.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     50|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     50|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     50|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     50|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     50|    }                                                  \
  |  |  |  |   70|  99.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  99.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  99.1k|                    parse_integer_digits_without_thsep(
  363|  99.1k|                        ranges::subrange{prefix_result.iterator,
  364|  99.1k|                                         ranges::end(range)},
  365|  99.1k|                        prefix_result.parsed_base));
  366|       |
  367|  99.1k|            auto buf = make_contiguous_buffer(
  368|  99.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  99.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  99.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  99.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15.4k, False: 83.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.4k|    }                                                  \
  |  |  |  |   70|  99.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  83.7k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  83.7k|                                        prefix_result.parsed_base));
  372|       |
  373|  83.7k|            return ranges_polyfill::batch_next(
  374|  83.7k|                prefix_result.iterator,
  375|  83.7k|                ranges::distance(buf.view().begin(), result_it));
  376|  99.1k|        }
  377|       |
  378|  25.9k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  25.9k|            localized_number_formatting_options<CharT>{loc};
  383|  25.9k|#endif
  384|       |
  385|  25.9k|        SCN_TRY(
  ------------------
  |  |   71|  25.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  25.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  25.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  25.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.64k, False: 23.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.64k|    }                                                  \
  |  |  |  |   70|  25.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  23.2k|            parse_digits_result,
  387|  23.2k|            parse_integer_digits_with_thsep(
  388|  23.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  23.2k|                prefix_result.parsed_base, locale_options));
  390|  23.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  23.2k|            parse_digits_result;
  392|       |
  393|  23.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 424, False: 22.8k]
  ------------------
  394|    424|            if (auto e = check_thsep_grouping(
  395|    424|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    424|                    thsep_indices, locale_options.grouping);
  397|    424|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    424|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 172, False: 252]
  |  |  ------------------
  ------------------
  398|    172|                return unexpected(e);
  399|    172|            }
  400|    424|        }
  401|       |
  402|  23.1k|        auto nothsep_source_view =
  403|  23.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  23.1k|        SCN_TRY(
  ------------------
  |  |   71|  23.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  23.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  23.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 32, False: 23.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     32|    }                                                  \
  |  |  |  |   70|  23.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  23.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  23.0k|            nothsep_source_it,
  406|  23.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  23.0k|                                prefix_result.parsed_base));
  408|       |
  409|  23.0k|        return ranges_polyfill::batch_next(
  410|  23.0k|            prefix_result.iterator,
  411|  23.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  23.0k|                ranges::ssize(thsep_indices));
  413|  23.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.06k|    {
  324|  6.06k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.06k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.06k|        return read_default_with_base(range, value, 0);
  326|  6.06k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.06k|    {
  287|  6.06k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.06k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.06k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.06k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  6.06k|                return unexpected_scan_error(
  293|  6.06k|                    scan_error::invalid_scanned_value,
  294|  6.06k|                    "Unexpected '-' sign when parsing an "
  295|  6.06k|                    "unsigned value");
  296|  6.06k|            }
  297|  6.06k|        }
  298|       |
  299|  6.06k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.06k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  12.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  12.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  12.1k|                                                      ranges::end(range)},
  307|  12.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  12.1k|        auto buf = make_contiguous_buffer(
  310|  12.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  12.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.05k, False: 9]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.05k|    }                                                  \
  |  |  |  |   70|  6.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      9|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      9|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      9|                                    prefix_result.parsed_base));
  314|       |
  315|      9|        return ranges_polyfill::batch_next(
  316|      9|            prefix_result.iterator,
  317|      9|            ranges::distance(buf.view().begin(), result_it));
  318|  12.1k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   318k|{
  121|   318k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   318k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   318k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   318k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   318k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   318k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   318k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   318k|        parse_integer_base_prefix(
  126|   318k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   318k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 318k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   318k|    else {
  139|   318k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 318k]
  ------------------
  140|   318k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 137k, False: 181k]
  ------------------
  141|   137k|            digits_begin_it = base_prefix_begin_it;
  142|   137k|        }
  143|   318k|    }
  144|       |
  145|   318k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 318k, False: 0]
  ------------------
  146|   318k|        sign = sign_type::plus_sign;
  147|   318k|    }
  148|   318k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   318k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   318k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   318k|{
   88|   318k|    switch (base) {
   89|  48.4k|        case 2:
  ------------------
  |  Branch (89:9): [True: 48.4k, False: 270k]
  ------------------
   90|       |            // allow 0b/0B
   91|  48.4k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  48.4k|                    false};
   93|       |
   94|  48.4k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 48.4k, False: 270k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  48.4k|            bool zero_parsed = false;
   97|  48.4k|            auto it = apply_opt(
   98|  48.4k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  48.4k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  40.3k|        case 16:
  ------------------
  |  Branch (102:9): [True: 40.3k, False: 278k]
  ------------------
  103|       |            // allow 0x/0X
  104|  40.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  40.3k|                    false};
  106|       |
  107|   141k|        case 0:
  ------------------
  |  Branch (107:9): [True: 141k, False: 177k]
  ------------------
  108|       |            // detect base
  109|   141k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  40.3k|        default:
  ------------------
  |  Branch (111:9): [True: 40.3k, False: 278k]
  ------------------
  112|       |            // no base prefix allowed
  113|  40.3k|            return {ranges::begin(range), base, false};
  114|   318k|    }
  115|   318k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   189k|{
   38|   189k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   189k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   189k|{
   53|   189k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 189k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   189k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 189k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   189k|    return unexpected(parse_error::error);
   63|   189k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   181k|{
   45|   181k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   181k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   181k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   141k|{
   69|   141k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 141k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   141k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 141k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   141k|    {
   76|   141k|        bool zero_parsed{false};
   77|   141k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 141k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   141k|    }
   81|   141k|    return {ranges::begin(range), 10, false};
   82|   141k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   278k|{
  156|   278k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   278k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   278k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   278k|            return unexpected_scan_error(
  161|   278k|                scan_error::invalid_scanned_value,
  162|   278k|                "Failed to parse integer: No digits found");
  163|   278k|        }
  164|   278k|        return ranges::end(range);
  165|   278k|    }
  166|   278k|    else {
  167|   278k|        return read_while1_code_unit(
  168|   278k|                   range, [&](char_type ch)
  169|   278k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   278k|            .transform_error(map_parse_error_to_scan_error(
  171|   278k|                scan_error::invalid_scanned_value,
  172|   278k|                "Failed to parse integer: No digits found"));
  173|   278k|    }
  174|   278k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|  1.02M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.1k|    {
  324|  12.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.1k|        return read_default_with_base(range, value, 0);
  326|  12.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.1k|    {
  287|  12.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  12.1k|                return unexpected_scan_error(
  293|  12.1k|                    scan_error::invalid_scanned_value,
  294|  12.1k|                    "Unexpected '-' sign when parsing an "
  295|  12.1k|                    "unsigned value");
  296|  12.1k|            }
  297|  12.1k|        }
  298|       |
  299|  12.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.04k, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.04k|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.1k|                                                      ranges::end(range)},
  307|  18.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.1k|        auto buf = make_contiguous_buffer(
  310|  18.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.06k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.06k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.06k|        return ranges_polyfill::batch_next(
  316|  6.06k|            prefix_result.iterator,
  317|  6.06k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.1k|    {
  324|  12.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.1k|        return read_default_with_base(range, value, 0);
  326|  12.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.1k|    {
  287|  12.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  12.1k|                return unexpected_scan_error(
  293|  12.1k|                    scan_error::invalid_scanned_value,
  294|  12.1k|                    "Unexpected '-' sign when parsing an "
  295|  12.1k|                    "unsigned value");
  296|  12.1k|            }
  297|  12.1k|        }
  298|       |
  299|  12.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.04k, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.04k|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.1k|                                                      ranges::end(range)},
  307|  18.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.1k|        auto buf = make_contiguous_buffer(
  310|  18.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.06k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.06k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.06k|        return ranges_polyfill::batch_next(
  316|  6.06k|            prefix_result.iterator,
  317|  6.06k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  6.06k|    {
  324|  6.06k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  6.06k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  6.06k|        return read_default_with_base(range, value, 0);
  326|  6.06k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  6.06k|    {
  287|  6.06k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  6.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  6.06k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  6.06k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  6.06k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 6.06k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  6.06k|        }
  298|       |
  299|  6.06k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 6.06k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  12.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  6.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  12.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  12.1k|                                                      ranges::end(range)},
  307|  12.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  12.1k|        auto buf = make_contiguous_buffer(
  310|  12.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  12.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.05k, False: 9]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.05k|    }                                                  \
  |  |  |  |   70|  6.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      9|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      9|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      9|                                    prefix_result.parsed_base));
  314|       |
  315|      9|        return ranges_polyfill::batch_next(
  316|      9|            prefix_result.iterator,
  317|      9|            ranges::distance(buf.view().begin(), result_it));
  318|  12.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.1k|    {
  324|  12.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.1k|        return read_default_with_base(range, value, 0);
  326|  12.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.1k|    {
  287|  12.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 12.1k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  12.1k|        }
  298|       |
  299|  12.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.04k, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.04k|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.1k|                                                      ranges::end(range)},
  307|  18.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.1k|        auto buf = make_contiguous_buffer(
  310|  18.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.06k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.06k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.06k|        return ranges_polyfill::batch_next(
  316|  6.06k|            prefix_result.iterator,
  317|  6.06k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  12.1k|    {
  324|  12.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  12.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  12.1k|        return read_default_with_base(range, value, 0);
  326|  12.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  12.1k|    {
  287|  12.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  12.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  12.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  12.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 12.1k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  12.1k|        }
  298|       |
  299|  12.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 12.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  18.1k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.04k, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.04k|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  18.1k|                                     ranges::subrange{prefix_result.iterator,
  306|  18.1k|                                                      ranges::end(range)},
  307|  18.1k|                                     prefix_result.parsed_base));
  308|       |
  309|  18.1k|        auto buf = make_contiguous_buffer(
  310|  18.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  18.1k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  6.06k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.06k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.06k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.06k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.06k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  6.06k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  6.06k|                                    prefix_result.parsed_base));
  314|       |
  315|  6.06k|        return ranges_polyfill::batch_next(
  316|  6.06k|            prefix_result.iterator,
  317|  6.06k|            ranges::distance(buf.view().begin(), result_it));
  318|  18.1k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  40.3k|{
  185|  40.3k|    std::basic_string<CharT> output;
  186|  40.3k|    std::string thsep_indices;
  187|  40.3k|    auto it = ranges::begin(range);
  188|  40.3k|    bool digit_matched = false;
  189|   185k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 185k, False: 72]
  ------------------
  190|   185k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 185k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|   185k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 40.2k, False: 145k]
  ------------------
  195|  40.2k|            break;
  196|  40.2k|        }
  197|   145k|        else {
  198|   145k|            output.push_back(*it);
  199|   145k|            digit_matched = true;
  200|   145k|        }
  201|   185k|    }
  202|  40.3k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16.1k, False: 24.2k]
  |  |  ------------------
  ------------------
  203|  16.1k|        return unexpected_scan_error(
  204|  16.1k|            scan_error::invalid_scanned_value,
  205|  16.1k|            "Failed to parse integer: No digits found");
  206|  16.1k|    }
  207|  24.2k|    return std::tuple{it, output, thsep_indices};
  208|  40.3k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  32.3k|    {
  335|  32.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 32.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  32.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  32.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 32.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  32.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 32.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  32.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  32.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 28.2k, False: 4.04k]
  |  |  ------------------
  ------------------
  361|  28.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  28.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.07k, False: 20.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.07k|    }                                                  \
  |  |  |  |   70|  28.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  20.2k|                    parse_integer_digits_without_thsep(
  363|  20.2k|                        ranges::subrange{prefix_result.iterator,
  364|  20.2k|                                         ranges::end(range)},
  365|  20.2k|                        prefix_result.parsed_base));
  366|       |
  367|  20.2k|            auto buf = make_contiguous_buffer(
  368|  20.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  20.2k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  20.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.1k, False: 8.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.1k|    }                                                  \
  |  |  |  |   70|  20.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  8.10k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  8.10k|                                        prefix_result.parsed_base));
  372|       |
  373|  8.10k|            return ranges_polyfill::batch_next(
  374|  8.10k|                prefix_result.iterator,
  375|  8.10k|                ranges::distance(buf.view().begin(), result_it));
  376|  20.2k|        }
  377|       |
  378|  4.04k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.04k|            localized_number_formatting_options<CharT>{loc};
  383|  4.04k|#endif
  384|       |
  385|  4.04k|        SCN_TRY(
  ------------------
  |  |   71|  4.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.04k|            parse_digits_result,
  387|  4.04k|            parse_integer_digits_with_thsep(
  388|  4.04k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.04k|                prefix_result.parsed_base, locale_options));
  390|  4.04k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.04k|            parse_digits_result;
  392|       |
  393|  4.04k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.04k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.04k|        auto nothsep_source_view =
  403|  4.04k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.04k|        SCN_TRY(
  ------------------
  |  |   71|  4.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.03k, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.03k|    }                                                  \
  |  |  |  |   70|  4.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      6|            nothsep_source_it,
  406|      6|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      6|                                prefix_result.parsed_base));
  408|       |
  409|      6|        return ranges_polyfill::batch_next(
  410|      6|            prefix_result.iterator,
  411|      6|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      6|                ranges::ssize(thsep_indices));
  413|  4.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  48.4k|    {
  335|  48.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  48.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  48.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  48.4k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  48.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 48.4k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  48.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 48.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  48.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  48.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 40.3k, False: 8.07k]
  |  |  ------------------
  ------------------
  361|  40.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  40.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.1k, False: 20.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.1k|    }                                                  \
  |  |  |  |   70|  40.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  20.2k|                    parse_integer_digits_without_thsep(
  363|  20.2k|                        ranges::subrange{prefix_result.iterator,
  364|  20.2k|                                         ranges::end(range)},
  365|  20.2k|                        prefix_result.parsed_base));
  366|       |
  367|  20.2k|            auto buf = make_contiguous_buffer(
  368|  20.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  20.2k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  20.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  20.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  20.2k|                                        prefix_result.parsed_base));
  372|       |
  373|  20.2k|            return ranges_polyfill::batch_next(
  374|  20.2k|                prefix_result.iterator,
  375|  20.2k|                ranges::distance(buf.view().begin(), result_it));
  376|  20.2k|        }
  377|       |
  378|  8.07k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.07k|            localized_number_formatting_options<CharT>{loc};
  383|  8.07k|#endif
  384|       |
  385|  8.07k|        SCN_TRY(
  ------------------
  |  |   71|  8.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.02k, False: 4.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.02k|    }                                                  \
  |  |  |  |   70|  8.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.04k|            parse_digits_result,
  387|  4.04k|            parse_integer_digits_with_thsep(
  388|  4.04k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.04k|                prefix_result.parsed_base, locale_options));
  390|  4.04k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.04k|            parse_digits_result;
  392|       |
  393|  4.04k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.04k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.04k|        auto nothsep_source_view =
  403|  4.04k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.04k|        SCN_TRY(
  ------------------
  |  |   71|  4.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.04k|            nothsep_source_it,
  406|  4.04k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.04k|                                prefix_result.parsed_base));
  408|       |
  409|  4.04k|        return ranges_polyfill::batch_next(
  410|  4.04k|            prefix_result.iterator,
  411|  4.04k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.04k|                ranges::ssize(thsep_indices));
  413|  4.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  48.4k|    {
  335|  48.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  48.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  48.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  48.4k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  48.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 48.4k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  48.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 48.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  48.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  48.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 40.3k, False: 8.07k]
  |  |  ------------------
  ------------------
  361|  40.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  40.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.1k, False: 20.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.1k|    }                                                  \
  |  |  |  |   70|  40.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  20.2k|                    parse_integer_digits_without_thsep(
  363|  20.2k|                        ranges::subrange{prefix_result.iterator,
  364|  20.2k|                                         ranges::end(range)},
  365|  20.2k|                        prefix_result.parsed_base));
  366|       |
  367|  20.2k|            auto buf = make_contiguous_buffer(
  368|  20.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  20.2k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  20.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  20.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  20.2k|                                        prefix_result.parsed_base));
  372|       |
  373|  20.2k|            return ranges_polyfill::batch_next(
  374|  20.2k|                prefix_result.iterator,
  375|  20.2k|                ranges::distance(buf.view().begin(), result_it));
  376|  20.2k|        }
  377|       |
  378|  8.07k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.07k|            localized_number_formatting_options<CharT>{loc};
  383|  8.07k|#endif
  384|       |
  385|  8.07k|        SCN_TRY(
  ------------------
  |  |   71|  8.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.02k, False: 4.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.02k|    }                                                  \
  |  |  |  |   70|  8.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.04k|            parse_digits_result,
  387|  4.04k|            parse_integer_digits_with_thsep(
  388|  4.04k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.04k|                prefix_result.parsed_base, locale_options));
  390|  4.04k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.04k|            parse_digits_result;
  392|       |
  393|  4.04k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.04k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.04k|        auto nothsep_source_view =
  403|  4.04k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.04k|        SCN_TRY(
  ------------------
  |  |   71|  4.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.04k|            nothsep_source_it,
  406|  4.04k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.04k|                                prefix_result.parsed_base));
  408|       |
  409|  4.04k|        return ranges_polyfill::batch_next(
  410|  4.04k|            prefix_result.iterator,
  411|  4.04k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.04k|                ranges::ssize(thsep_indices));
  413|  4.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  32.3k|    {
  335|  32.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 32.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  32.3k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  32.3k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 32.3k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  32.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 32.3k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  32.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  32.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 28.2k, False: 4.04k]
  |  |  ------------------
  ------------------
  361|  28.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  28.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  28.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  28.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.07k, False: 20.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.07k|    }                                                  \
  |  |  |  |   70|  28.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  20.2k|                    parse_integer_digits_without_thsep(
  363|  20.2k|                        ranges::subrange{prefix_result.iterator,
  364|  20.2k|                                         ranges::end(range)},
  365|  20.2k|                        prefix_result.parsed_base));
  366|       |
  367|  20.2k|            auto buf = make_contiguous_buffer(
  368|  20.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  20.2k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  20.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.1k, False: 8.10k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.1k|    }                                                  \
  |  |  |  |   70|  20.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  8.10k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  8.10k|                                        prefix_result.parsed_base));
  372|       |
  373|  8.10k|            return ranges_polyfill::batch_next(
  374|  8.10k|                prefix_result.iterator,
  375|  8.10k|                ranges::distance(buf.view().begin(), result_it));
  376|  20.2k|        }
  377|       |
  378|  4.04k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  4.04k|            localized_number_formatting_options<CharT>{loc};
  383|  4.04k|#endif
  384|       |
  385|  4.04k|        SCN_TRY(
  ------------------
  |  |   71|  4.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.04k|            parse_digits_result,
  387|  4.04k|            parse_integer_digits_with_thsep(
  388|  4.04k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.04k|                prefix_result.parsed_base, locale_options));
  390|  4.04k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.04k|            parse_digits_result;
  392|       |
  393|  4.04k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.04k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.04k|        auto nothsep_source_view =
  403|  4.04k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.04k|        SCN_TRY(
  ------------------
  |  |   71|  4.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.03k, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.03k|    }                                                  \
  |  |  |  |   70|  4.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      6|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      6|            nothsep_source_it,
  406|      6|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      6|                                prefix_result.parsed_base));
  408|       |
  409|      6|        return ranges_polyfill::batch_next(
  410|      6|            prefix_result.iterator,
  411|      6|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      6|                ranges::ssize(thsep_indices));
  413|  4.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  48.4k|    {
  335|  48.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  48.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  48.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  48.4k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  48.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 48.4k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  48.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 48.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  48.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  48.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 40.3k, False: 8.07k]
  |  |  ------------------
  ------------------
  361|  40.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  40.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.1k, False: 20.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.1k|    }                                                  \
  |  |  |  |   70|  40.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  20.2k|                    parse_integer_digits_without_thsep(
  363|  20.2k|                        ranges::subrange{prefix_result.iterator,
  364|  20.2k|                                         ranges::end(range)},
  365|  20.2k|                        prefix_result.parsed_base));
  366|       |
  367|  20.2k|            auto buf = make_contiguous_buffer(
  368|  20.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  20.2k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  20.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  20.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  20.2k|                                        prefix_result.parsed_base));
  372|       |
  373|  20.2k|            return ranges_polyfill::batch_next(
  374|  20.2k|                prefix_result.iterator,
  375|  20.2k|                ranges::distance(buf.view().begin(), result_it));
  376|  20.2k|        }
  377|       |
  378|  8.07k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.07k|            localized_number_formatting_options<CharT>{loc};
  383|  8.07k|#endif
  384|       |
  385|  8.07k|        SCN_TRY(
  ------------------
  |  |   71|  8.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.02k, False: 4.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.02k|    }                                                  \
  |  |  |  |   70|  8.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.04k|            parse_digits_result,
  387|  4.04k|            parse_integer_digits_with_thsep(
  388|  4.04k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.04k|                prefix_result.parsed_base, locale_options));
  390|  4.04k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.04k|            parse_digits_result;
  392|       |
  393|  4.04k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.04k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.04k|        auto nothsep_source_view =
  403|  4.04k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.04k|        SCN_TRY(
  ------------------
  |  |   71|  4.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.04k|            nothsep_source_it,
  406|  4.04k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.04k|                                prefix_result.parsed_base));
  408|       |
  409|  4.04k|        return ranges_polyfill::batch_next(
  410|  4.04k|            prefix_result.iterator,
  411|  4.04k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.04k|                ranges::ssize(thsep_indices));
  413|  4.04k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  48.4k|    {
  335|  48.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  48.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  48.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  48.4k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  48.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 48.4k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  48.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 48.4k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  48.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  48.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 40.3k, False: 8.07k]
  |  |  ------------------
  ------------------
  361|  40.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  40.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  40.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  40.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  40.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.1k, False: 20.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.1k|    }                                                  \
  |  |  |  |   70|  40.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  20.2k|                    parse_integer_digits_without_thsep(
  363|  20.2k|                        ranges::subrange{prefix_result.iterator,
  364|  20.2k|                                         ranges::end(range)},
  365|  20.2k|                        prefix_result.parsed_base));
  366|       |
  367|  20.2k|            auto buf = make_contiguous_buffer(
  368|  20.2k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  20.2k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  20.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  20.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  20.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 20.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  20.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  20.2k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  20.2k|                                        prefix_result.parsed_base));
  372|       |
  373|  20.2k|            return ranges_polyfill::batch_next(
  374|  20.2k|                prefix_result.iterator,
  375|  20.2k|                ranges::distance(buf.view().begin(), result_it));
  376|  20.2k|        }
  377|       |
  378|  8.07k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  8.07k|            localized_number_formatting_options<CharT>{loc};
  383|  8.07k|#endif
  384|       |
  385|  8.07k|        SCN_TRY(
  ------------------
  |  |   71|  8.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.02k, False: 4.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.02k|    }                                                  \
  |  |  |  |   70|  8.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.04k|            parse_digits_result,
  387|  4.04k|            parse_integer_digits_with_thsep(
  388|  4.04k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.04k|                prefix_result.parsed_base, locale_options));
  390|  4.04k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.04k|            parse_digits_result;
  392|       |
  393|  4.04k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.04k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.04k|        auto nothsep_source_view =
  403|  4.04k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.04k|        SCN_TRY(
  ------------------
  |  |   71|  4.04k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.04k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.04k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.04k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.04k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.04k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.04k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.04k|            nothsep_source_it,
  406|  4.04k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.04k|                                prefix_result.parsed_base));
  408|       |
  409|  4.04k|        return ranges_polyfill::batch_next(
  410|  4.04k|            prefix_result.iterator,
  411|  4.04k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.04k|                ranges::ssize(thsep_indices));
  413|  4.04k|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  1.22M|{
   69|  1.22M|    auto r = read_one_of_code_unit(range, "+-");
   70|  1.22M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.12M, False: 94.4k]
  ------------------
   71|  1.12M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.12M, False: 0]
  ------------------
   72|  1.12M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.12M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.12M|    }
   76|       |
   77|  94.4k|    auto& it = *r;
   78|  94.4k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 59.2k, False: 35.2k]
  ------------------
   79|  59.2k|        return std::pair{it, sign_type::minus_sign};
   80|  59.2k|    }
   81|  35.2k|    return std::pair{it, sign_type::plus_sign};
   82|  94.4k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  14.4M|{
   51|  14.4M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  14.4M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  2.80k|{
  140|  2.80k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  2.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  2.80k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 1.24k, False: 1.55k]
  ------------------
  143|  1.24k|        SCN_UNLIKELY_ATTR
  144|  1.24k|        return {scan_error::invalid_scanned_value,
  145|  1.24k|                "Invalid thousands separator grouping"};
  146|  1.24k|    }
  147|       |
  148|  1.55k|    return {};
  149|  2.80k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  2.80k|{
  101|  2.80k|    transform_thsep_indices(
  102|  2.80k|        thsep_indices,
  103|  2.80k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  2.80k|    auto thsep_it = thsep_indices.rbegin();
  106|  2.80k|    for (auto grouping_it = grouping.begin();
  107|  2.80k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 2.80k]
  |  Branch (107:10): [True: 0, False: 2.80k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  2.80k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  2.80k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  2.80k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  32.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 30.5k, False: 2.33k]
  ------------------
  119|  30.5k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 474, False: 30.1k]
  ------------------
  120|    474|            return false;
  121|    474|        }
  122|  30.5k|    }
  123|       |
  124|  2.33k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 2.33k, False: 0]
  ------------------
  125|  2.33k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 774, False: 1.55k]
  ------------------
  126|    774|            return false;
  127|    774|        }
  128|  2.33k|    }
  129|       |
  130|  1.55k|    SCN_CLANG_POP
  131|       |
  132|  1.55k|    return true;
  133|  2.33k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  5.55k|{
   87|  77.3k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 71.7k, False: 5.55k]
  ------------------
   88|  71.7k|         ++thsep_it) {
   89|  71.7k|        const auto tmp = *thsep_it;
   90|  71.7k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|  71.7k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|  71.7k|    }
   93|  5.55k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  5.55k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   182k|{
   69|   182k|    auto r = read_one_of_code_unit(range, "+-");
   70|   182k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 182k, False: 0]
  ------------------
   71|   182k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 182k, False: 0]
  ------------------
   72|   182k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   182k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   182k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  1.22M|{
   69|  1.22M|    auto r = read_one_of_code_unit(range, "+-");
   70|  1.22M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 1.14M, False: 83.5k]
  ------------------
   71|  1.14M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 1.14M, False: 0]
  ------------------
   72|  1.14M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  1.14M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  1.14M|    }
   76|       |
   77|  83.5k|    auto& it = *r;
   78|  83.5k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 49.2k, False: 34.3k]
  ------------------
   79|  49.2k|        return std::pair{it, sign_type::minus_sign};
   80|  49.2k|    }
   81|  34.3k|    return std::pair{it, sign_type::plus_sign};
   82|  83.5k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  8.16M|{
   55|  8.16M|#if WCHAR_MIN < 0
   56|  8.16M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 8.13M, False: 21.2k]
  |  Branch (56:20): [True: 7.96M, False: 172k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  7.96M|        return char_to_int(static_cast<char>(ch));
   61|  7.96M|    }
   62|   194k|    return 255;
   63|  8.16M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  2.75k|{
  140|  2.75k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  2.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  2.75k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 1.20k, False: 1.54k]
  ------------------
  143|  1.20k|        SCN_UNLIKELY_ATTR
  144|  1.20k|        return {scan_error::invalid_scanned_value,
  145|  1.20k|                "Invalid thousands separator grouping"};
  146|  1.20k|    }
  147|       |
  148|  1.54k|    return {};
  149|  2.75k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  2.75k|{
  101|  2.75k|    transform_thsep_indices(
  102|  2.75k|        thsep_indices,
  103|  2.75k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  2.75k|    auto thsep_it = thsep_indices.rbegin();
  106|  2.75k|    for (auto grouping_it = grouping.begin();
  107|  2.75k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 2.75k]
  |  Branch (107:10): [True: 0, False: 2.75k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  2.75k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  2.75k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  2.75k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  32.4k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 30.1k, False: 2.34k]
  ------------------
  119|  30.1k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 408, False: 29.7k]
  ------------------
  120|    408|            return false;
  121|    408|        }
  122|  30.1k|    }
  123|       |
  124|  2.34k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 2.34k, False: 0]
  ------------------
  125|  2.34k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 800, False: 1.54k]
  ------------------
  126|    800|            return false;
  127|    800|        }
  128|  2.34k|    }
  129|       |
  130|  1.54k|    SCN_CLANG_POP
  131|       |
  132|  1.54k|    return true;
  133|  2.34k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   318k|{
   69|   318k|    auto r = read_one_of_code_unit(range, "+-");
   70|   318k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 318k, False: 0]
  ------------------
   71|   318k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 318k, False: 0]
  ------------------
   72|   318k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   318k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   318k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|  53.0k|    {
  122|  53.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  53.0k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  53.0k|                          basic_contiguous_scan_context<char_type>>) {
  126|  53.0k|            auto rd = make_reader<T, char_type>();
  127|  53.0k|            return impl(rd, range, value);
  128|  53.0k|        }
  129|  53.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  53.0k|            auto rd = make_reader<T, char_type>();
  131|  53.0k|            if (!is_segment_contiguous(range)) {
  132|  53.0k|                return impl(rd, range, value);
  133|  53.0k|            }
  134|  53.0k|            auto crange = get_as_contiguous(range);
  135|  53.0k|            SCN_TRY(it, impl(rd, crange, value));
  136|  53.0k|            return ranges_polyfill::batch_next(
  137|  53.0k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  53.0k|        }
  139|  53.0k|        else {
  140|  53.0k|            SCN_EXPECT(false);
  141|  53.0k|            SCN_UNREACHABLE;
  142|  53.0k|        }
  143|  53.0k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  53.0k|    {
  112|  53.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  53.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  53.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 681, False: 52.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    681|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    681|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    681|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    681|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    681|    }                                                  \
  |  |  |  |   70|  53.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  52.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  52.3k|                    .transform_error(make_eof_scan_error));
  115|  52.3k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  52.3k|                               loc);
  117|  53.0k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  1.24M|{
   43|  1.24M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.2k, False: 1.22M]
  |  |  ------------------
  ------------------
   44|  14.2k|        return unexpected(e);
   45|  14.2k|    }
   46|       |
   47|  1.22M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 1.22M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  1.22M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  1.22M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|  62.1k|    {
  122|  62.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  62.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  62.1k|                          basic_contiguous_scan_context<char_type>>) {
  126|  62.1k|            auto rd = make_reader<T, char_type>();
  127|  62.1k|            return impl(rd, range, value);
  128|  62.1k|        }
  129|  62.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  62.1k|            auto rd = make_reader<T, char_type>();
  131|  62.1k|            if (!is_segment_contiguous(range)) {
  132|  62.1k|                return impl(rd, range, value);
  133|  62.1k|            }
  134|  62.1k|            auto crange = get_as_contiguous(range);
  135|  62.1k|            SCN_TRY(it, impl(rd, crange, value));
  136|  62.1k|            return ranges_polyfill::batch_next(
  137|  62.1k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  62.1k|        }
  139|  62.1k|        else {
  140|  62.1k|            SCN_EXPECT(false);
  141|  62.1k|            SCN_UNREACHABLE;
  142|  62.1k|        }
  143|  62.1k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  62.1k|    {
  112|  62.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  62.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  62.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  62.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  62.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 942, False: 61.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    942|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    942|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    942|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    942|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    942|    }                                                  \
  |  |  |  |   70|  62.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  61.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  61.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  61.2k|                    .transform_error(make_eof_scan_error));
  115|  61.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  61.2k|                               loc);
  117|  62.1k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|  62.9k|    {
  122|  62.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  62.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  62.9k|                          basic_contiguous_scan_context<char_type>>) {
  126|  62.9k|            auto rd = make_reader<T, char_type>();
  127|  62.9k|            return impl(rd, range, value);
  128|  62.9k|        }
  129|  62.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  62.9k|            auto rd = make_reader<T, char_type>();
  131|  62.9k|            if (!is_segment_contiguous(range)) {
  132|  62.9k|                return impl(rd, range, value);
  133|  62.9k|            }
  134|  62.9k|            auto crange = get_as_contiguous(range);
  135|  62.9k|            SCN_TRY(it, impl(rd, crange, value));
  136|  62.9k|            return ranges_polyfill::batch_next(
  137|  62.9k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  62.9k|        }
  139|  62.9k|        else {
  140|  62.9k|            SCN_EXPECT(false);
  141|  62.9k|            SCN_UNREACHABLE;
  142|  62.9k|        }
  143|  62.9k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  62.9k|    {
  112|  62.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  62.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  62.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  62.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  62.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.00k, False: 61.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.00k|    }                                                  \
  |  |  |  |   70|  62.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  61.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  61.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  61.9k|                    .transform_error(make_eof_scan_error));
  115|  61.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  61.9k|                               loc);
  117|  62.9k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|  49.7k|    {
  122|  49.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  49.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  49.7k|                          basic_contiguous_scan_context<char_type>>) {
  126|  49.7k|            auto rd = make_reader<T, char_type>();
  127|  49.7k|            return impl(rd, range, value);
  128|  49.7k|        }
  129|  49.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  49.7k|            auto rd = make_reader<T, char_type>();
  131|  49.7k|            if (!is_segment_contiguous(range)) {
  132|  49.7k|                return impl(rd, range, value);
  133|  49.7k|            }
  134|  49.7k|            auto crange = get_as_contiguous(range);
  135|  49.7k|            SCN_TRY(it, impl(rd, crange, value));
  136|  49.7k|            return ranges_polyfill::batch_next(
  137|  49.7k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  49.7k|        }
  139|  49.7k|        else {
  140|  49.7k|            SCN_EXPECT(false);
  141|  49.7k|            SCN_UNREACHABLE;
  142|  49.7k|        }
  143|  49.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  49.7k|    {
  112|  49.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 573, False: 49.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    573|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    573|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    573|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    573|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    573|    }                                                  \
  |  |  |  |   70|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  49.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  49.1k|                    .transform_error(make_eof_scan_error));
  115|  49.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  49.1k|                               loc);
  117|  49.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|  52.9k|    {
  122|  52.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  52.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  52.9k|                          basic_contiguous_scan_context<char_type>>) {
  126|  52.9k|            auto rd = make_reader<T, char_type>();
  127|  52.9k|            return impl(rd, range, value);
  128|  52.9k|        }
  129|  52.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  52.9k|            auto rd = make_reader<T, char_type>();
  131|  52.9k|            if (!is_segment_contiguous(range)) {
  132|  52.9k|                return impl(rd, range, value);
  133|  52.9k|            }
  134|  52.9k|            auto crange = get_as_contiguous(range);
  135|  52.9k|            SCN_TRY(it, impl(rd, crange, value));
  136|  52.9k|            return ranges_polyfill::batch_next(
  137|  52.9k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  52.9k|        }
  139|  52.9k|        else {
  140|  52.9k|            SCN_EXPECT(false);
  141|  52.9k|            SCN_UNREACHABLE;
  142|  52.9k|        }
  143|  52.9k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  52.9k|    {
  112|  52.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  52.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 690, False: 52.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    690|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    690|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    690|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    690|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    690|    }                                                  \
  |  |  |  |   70|  52.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  52.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  52.2k|                    .transform_error(make_eof_scan_error));
  115|  52.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  52.2k|                               loc);
  117|  52.9k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|  53.4k|    {
  122|  53.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  53.4k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  53.4k|                          basic_contiguous_scan_context<char_type>>) {
  126|  53.4k|            auto rd = make_reader<T, char_type>();
  127|  53.4k|            return impl(rd, range, value);
  128|  53.4k|        }
  129|  53.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  53.4k|            auto rd = make_reader<T, char_type>();
  131|  53.4k|            if (!is_segment_contiguous(range)) {
  132|  53.4k|                return impl(rd, range, value);
  133|  53.4k|            }
  134|  53.4k|            auto crange = get_as_contiguous(range);
  135|  53.4k|            SCN_TRY(it, impl(rd, crange, value));
  136|  53.4k|            return ranges_polyfill::batch_next(
  137|  53.4k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  53.4k|        }
  139|  53.4k|        else {
  140|  53.4k|            SCN_EXPECT(false);
  141|  53.4k|            SCN_UNREACHABLE;
  142|  53.4k|        }
  143|  53.4k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  53.4k|    {
  112|  53.4k|        SCN_TRY(it,
  ------------------
  |  |   71|  53.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  53.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 750, False: 52.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    750|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    750|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    750|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    750|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    750|    }                                                  \
  |  |  |  |   70|  53.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  52.6k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  52.6k|                    .transform_error(make_eof_scan_error));
  115|  52.6k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  52.6k|                               loc);
  117|  53.4k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  3.29k|    {
  122|  3.29k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  3.29k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  3.29k|            auto rd = make_reader<T, char_type>();
  127|  3.29k|            return impl(rd, range, value);
  128|  3.29k|        }
  129|  3.29k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  3.29k|            auto rd = make_reader<T, char_type>();
  131|  3.29k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 3.29k, False: 0]
  ------------------
  132|  3.29k|                return impl(rd, range, value);
  133|  3.29k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  3.29k|        else {
  140|  3.29k|            SCN_EXPECT(false);
  141|  3.29k|            SCN_UNREACHABLE;
  142|  3.29k|        }
  143|  3.29k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  3.29k|    {
  112|  3.29k|        SCN_TRY(it,
  ------------------
  |  |   71|  3.29k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.29k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.29k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 3.28k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  3.29k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  3.28k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  3.28k|                    .transform_error(make_eof_scan_error));
  115|  3.28k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  3.28k|                               loc);
  117|  3.29k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   182k|{
   43|   182k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 209, False: 182k]
  |  |  ------------------
  ------------------
   44|    209|        return unexpected(e);
   45|    209|    }
   46|       |
   47|   182k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 182k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   182k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   182k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.57k|    {
  122|  6.57k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.57k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.57k|            auto rd = make_reader<T, char_type>();
  127|  6.57k|            return impl(rd, range, value);
  128|  6.57k|        }
  129|  6.57k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.57k|            auto rd = make_reader<T, char_type>();
  131|  6.57k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.57k, False: 0]
  ------------------
  132|  6.57k|                return impl(rd, range, value);
  133|  6.57k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.57k|        else {
  140|  6.57k|            SCN_EXPECT(false);
  141|  6.57k|            SCN_UNREACHABLE;
  142|  6.57k|        }
  143|  6.57k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.57k|    {
  112|  6.57k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9, False: 6.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  6.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.56k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.56k|                    .transform_error(make_eof_scan_error));
  115|  6.56k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.56k|                               loc);
  117|  6.57k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.57k|    {
  122|  6.57k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.57k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.57k|            auto rd = make_reader<T, char_type>();
  127|  6.57k|            return impl(rd, range, value);
  128|  6.57k|        }
  129|  6.57k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.57k|            auto rd = make_reader<T, char_type>();
  131|  6.57k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.57k, False: 0]
  ------------------
  132|  6.57k|                return impl(rd, range, value);
  133|  6.57k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.57k|        else {
  140|  6.57k|            SCN_EXPECT(false);
  141|  6.57k|            SCN_UNREACHABLE;
  142|  6.57k|        }
  143|  6.57k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.57k|    {
  112|  6.57k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9, False: 6.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  6.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.56k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.56k|                    .transform_error(make_eof_scan_error));
  115|  6.56k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.56k|                               loc);
  117|  6.57k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.57k|    {
  122|  6.57k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.57k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.57k|            auto rd = make_reader<T, char_type>();
  127|  6.57k|            return impl(rd, range, value);
  128|  6.57k|        }
  129|  6.57k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.57k|            auto rd = make_reader<T, char_type>();
  131|  6.57k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.57k, False: 0]
  ------------------
  132|  6.57k|                return impl(rd, range, value);
  133|  6.57k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.57k|        else {
  140|  6.57k|            SCN_EXPECT(false);
  141|  6.57k|            SCN_UNREACHABLE;
  142|  6.57k|        }
  143|  6.57k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.57k|    {
  112|  6.57k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9, False: 6.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  6.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.56k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.56k|                    .transform_error(make_eof_scan_error));
  115|  6.56k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.56k|                               loc);
  117|  6.57k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.57k|    {
  122|  6.57k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.57k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.57k|            auto rd = make_reader<T, char_type>();
  127|  6.57k|            return impl(rd, range, value);
  128|  6.57k|        }
  129|  6.57k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.57k|            auto rd = make_reader<T, char_type>();
  131|  6.57k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.57k, False: 0]
  ------------------
  132|  6.57k|                return impl(rd, range, value);
  133|  6.57k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.57k|        else {
  140|  6.57k|            SCN_EXPECT(false);
  141|  6.57k|            SCN_UNREACHABLE;
  142|  6.57k|        }
  143|  6.57k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.57k|    {
  112|  6.57k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9, False: 6.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  6.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.56k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.56k|                    .transform_error(make_eof_scan_error));
  115|  6.56k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.56k|                               loc);
  117|  6.57k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  6.57k|    {
  122|  6.57k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.57k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.57k|            auto rd = make_reader<T, char_type>();
  127|  6.57k|            return impl(rd, range, value);
  128|  6.57k|        }
  129|  6.57k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.57k|            auto rd = make_reader<T, char_type>();
  131|  6.57k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.57k, False: 0]
  ------------------
  132|  6.57k|                return impl(rd, range, value);
  133|  6.57k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.57k|        else {
  140|  6.57k|            SCN_EXPECT(false);
  141|  6.57k|            SCN_UNREACHABLE;
  142|  6.57k|        }
  143|  6.57k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.57k|    {
  112|  6.57k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.57k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.57k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.57k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9, False: 6.56k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  6.57k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.56k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.56k|                    .transform_error(make_eof_scan_error));
  115|  6.56k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.56k|                               loc);
  117|  6.57k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   133k|    {
  223|   133k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   133k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   133k|                          basic_contiguous_scan_context<char_type>>) {
  227|   133k|            auto rd = make_reader<T, char_type>();
  228|   133k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 133k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   133k|            return impl(rd, range, value);
  233|   133k|        }
  234|   133k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   133k|            auto rd = make_reader<T, char_type>();
  236|   133k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   133k|                return unexpected(e);
  238|   133k|            }
  239|       |
  240|   133k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   133k|                return impl(rd, range, value);
  242|   133k|            }
  243|       |
  244|   133k|            auto crange = get_as_contiguous(range);
  245|   133k|            SCN_TRY(it, impl(rd, crange, value));
  246|   133k|            return ranges_polyfill::batch_next(
  247|   133k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   133k|        }
  249|   133k|        else {
  250|   133k|            SCN_EXPECT(false);
  251|   133k|            SCN_UNREACHABLE;
  252|   133k|        }
  253|   133k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   133k|    {
  205|   133k|        SCN_TRY(it,
  ------------------
  |  |   71|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.04k, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.04k|    }                                                  \
  |  |  |  |   70|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   131k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   131k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   131k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   131k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 131k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   131k|        return rd.read_specs(subr, specs, value, loc);
  218|   131k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   172k|    {
  223|   172k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   172k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   172k|                          basic_contiguous_scan_context<char_type>>) {
  227|   172k|            auto rd = make_reader<T, char_type>();
  228|   172k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 172k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   172k|            return impl(rd, range, value);
  233|   172k|        }
  234|   172k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   172k|            auto rd = make_reader<T, char_type>();
  236|   172k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   172k|                return unexpected(e);
  238|   172k|            }
  239|       |
  240|   172k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   172k|                return impl(rd, range, value);
  242|   172k|            }
  243|       |
  244|   172k|            auto crange = get_as_contiguous(range);
  245|   172k|            SCN_TRY(it, impl(rd, crange, value));
  246|   172k|            return ranges_polyfill::batch_next(
  247|   172k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   172k|        }
  249|   172k|        else {
  250|   172k|            SCN_EXPECT(false);
  251|   172k|            SCN_UNREACHABLE;
  252|   172k|        }
  253|   172k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   172k|    {
  205|   172k|        SCN_TRY(it,
  ------------------
  |  |   71|   172k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   172k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   172k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.94k, False: 169k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.94k|    }                                                  \
  |  |  |  |   70|   172k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   169k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   169k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   169k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   169k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 169k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   169k|        return rd.read_specs(subr, specs, value, loc);
  218|   169k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   175k|    {
  223|   175k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   175k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   175k|                          basic_contiguous_scan_context<char_type>>) {
  227|   175k|            auto rd = make_reader<T, char_type>();
  228|   175k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 175k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   175k|            return impl(rd, range, value);
  233|   175k|        }
  234|   175k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   175k|            auto rd = make_reader<T, char_type>();
  236|   175k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   175k|                return unexpected(e);
  238|   175k|            }
  239|       |
  240|   175k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   175k|                return impl(rd, range, value);
  242|   175k|            }
  243|       |
  244|   175k|            auto crange = get_as_contiguous(range);
  245|   175k|            SCN_TRY(it, impl(rd, crange, value));
  246|   175k|            return ranges_polyfill::batch_next(
  247|   175k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   175k|        }
  249|   175k|        else {
  250|   175k|            SCN_EXPECT(false);
  251|   175k|            SCN_UNREACHABLE;
  252|   175k|        }
  253|   175k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   175k|    {
  205|   175k|        SCN_TRY(it,
  ------------------
  |  |   71|   175k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   175k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   175k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.14k, False: 172k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.14k|    }                                                  \
  |  |  |  |   70|   175k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   172k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   172k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   172k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   172k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   172k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 172k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   172k|        return rd.read_specs(subr, specs, value, loc);
  218|   172k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   130k|    {
  223|   130k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   130k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   130k|                          basic_contiguous_scan_context<char_type>>) {
  227|   130k|            auto rd = make_reader<T, char_type>();
  228|   130k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   130k|            return impl(rd, range, value);
  233|   130k|        }
  234|   130k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   130k|            auto rd = make_reader<T, char_type>();
  236|   130k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   130k|                return unexpected(e);
  238|   130k|            }
  239|       |
  240|   130k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   130k|                return impl(rd, range, value);
  242|   130k|            }
  243|       |
  244|   130k|            auto crange = get_as_contiguous(range);
  245|   130k|            SCN_TRY(it, impl(rd, crange, value));
  246|   130k|            return ranges_polyfill::batch_next(
  247|   130k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   130k|        }
  249|   130k|        else {
  250|   130k|            SCN_EXPECT(false);
  251|   130k|            SCN_UNREACHABLE;
  252|   130k|        }
  253|   130k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   130k|    {
  205|   130k|        SCN_TRY(it,
  ------------------
  |  |   71|   130k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   130k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   130k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.71k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.71k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.71k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.71k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.71k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.71k|    }                                                  \
  |  |  |  |   70|   130k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   128k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   128k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   128k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   128k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 128k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   128k|        return rd.read_specs(subr, specs, value, loc);
  218|   128k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   147k|    {
  223|   147k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   147k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   147k|                          basic_contiguous_scan_context<char_type>>) {
  227|   147k|            auto rd = make_reader<T, char_type>();
  228|   147k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   147k|            return impl(rd, range, value);
  233|   147k|        }
  234|   147k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   147k|            auto rd = make_reader<T, char_type>();
  236|   147k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   147k|                return unexpected(e);
  238|   147k|            }
  239|       |
  240|   147k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   147k|                return impl(rd, range, value);
  242|   147k|            }
  243|       |
  244|   147k|            auto crange = get_as_contiguous(range);
  245|   147k|            SCN_TRY(it, impl(rd, crange, value));
  246|   147k|            return ranges_polyfill::batch_next(
  247|   147k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   147k|        }
  249|   147k|        else {
  250|   147k|            SCN_EXPECT(false);
  251|   147k|            SCN_UNREACHABLE;
  252|   147k|        }
  253|   147k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   147k|    {
  205|   147k|        SCN_TRY(it,
  ------------------
  |  |   71|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.17k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.17k|    }                                                  \
  |  |  |  |   70|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   145k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   145k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   145k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   145k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 145k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   145k|        return rd.read_specs(subr, specs, value, loc);
  218|   145k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   149k|    {
  223|   149k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   149k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   149k|                          basic_contiguous_scan_context<char_type>>) {
  227|   149k|            auto rd = make_reader<T, char_type>();
  228|   149k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   149k|            return impl(rd, range, value);
  233|   149k|        }
  234|   149k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   149k|            auto rd = make_reader<T, char_type>();
  236|   149k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   149k|                return unexpected(e);
  238|   149k|            }
  239|       |
  240|   149k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   149k|                return impl(rd, range, value);
  242|   149k|            }
  243|       |
  244|   149k|            auto crange = get_as_contiguous(range);
  245|   149k|            SCN_TRY(it, impl(rd, crange, value));
  246|   149k|            return ranges_polyfill::batch_next(
  247|   149k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   149k|        }
  249|   149k|        else {
  250|   149k|            SCN_EXPECT(false);
  251|   149k|            SCN_UNREACHABLE;
  252|   149k|        }
  253|   149k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   149k|    {
  205|   149k|        SCN_TRY(it,
  ------------------
  |  |   71|   149k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   149k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   149k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.33k, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.33k|    }                                                  \
  |  |  |  |   70|   149k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   146k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   146k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   146k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   146k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 146k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   146k|        return rd.read_specs(subr, specs, value, loc);
  218|   146k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  17.5k|    {
  223|  17.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  17.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  17.5k|            auto rd = make_reader<T, char_type>();
  228|  17.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  17.5k|                return unexpected(e);
  230|  17.5k|            }
  231|       |
  232|  17.5k|            return impl(rd, range, value);
  233|  17.5k|        }
  234|  17.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  17.5k|            auto rd = make_reader<T, char_type>();
  236|  17.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 17.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  17.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 17.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  17.5k|                return impl(rd, range, value);
  242|  17.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  17.5k|        else {
  250|  17.5k|            SCN_EXPECT(false);
  251|  17.5k|            SCN_UNREACHABLE;
  252|  17.5k|        }
  253|  17.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  17.5k|    {
  205|  17.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     20|    }                                                  \
  |  |  |  |   70|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  17.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  17.5k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  17.5k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  17.5k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 17.5k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  17.5k|        return rd.read_specs(subr, specs, value, loc);
  218|  17.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.2k|    {
  223|  26.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.2k|            auto rd = make_reader<T, char_type>();
  228|  26.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.2k|                return unexpected(e);
  230|  26.2k|            }
  231|       |
  232|  26.2k|            return impl(rd, range, value);
  233|  26.2k|        }
  234|  26.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.2k|            auto rd = make_reader<T, char_type>();
  236|  26.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.2k|                return impl(rd, range, value);
  242|  26.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.2k|        else {
  250|  26.2k|            SCN_EXPECT(false);
  251|  26.2k|            SCN_UNREACHABLE;
  252|  26.2k|        }
  253|  26.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.2k|    {
  205|  26.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 28, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     28|    }                                                  \
  |  |  |  |   70|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.2k|    {
  223|  26.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.2k|            auto rd = make_reader<T, char_type>();
  228|  26.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.2k|                return unexpected(e);
  230|  26.2k|            }
  231|       |
  232|  26.2k|            return impl(rd, range, value);
  233|  26.2k|        }
  234|  26.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.2k|            auto rd = make_reader<T, char_type>();
  236|  26.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.2k|                return impl(rd, range, value);
  242|  26.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.2k|        else {
  250|  26.2k|            SCN_EXPECT(false);
  251|  26.2k|            SCN_UNREACHABLE;
  252|  26.2k|        }
  253|  26.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.2k|    {
  205|  26.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 28, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     28|    }                                                  \
  |  |  |  |   70|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  24.0k|    {
  223|  24.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  24.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  24.0k|            auto rd = make_reader<T, char_type>();
  228|  24.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  24.0k|                return unexpected(e);
  230|  24.0k|            }
  231|       |
  232|  24.0k|            return impl(rd, range, value);
  233|  24.0k|        }
  234|  24.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  24.0k|            auto rd = make_reader<T, char_type>();
  236|  24.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 24.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  24.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 24.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  24.0k|                return impl(rd, range, value);
  242|  24.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  24.0k|        else {
  250|  24.0k|            SCN_EXPECT(false);
  251|  24.0k|            SCN_UNREACHABLE;
  252|  24.0k|        }
  253|  24.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  24.0k|    {
  205|  24.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 26, False: 24.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     26|    }                                                  \
  |  |  |  |   70|  24.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  24.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  24.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  24.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  24.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 24.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  24.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  24.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.2k|    {
  223|  26.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.2k|            auto rd = make_reader<T, char_type>();
  228|  26.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.2k|                return unexpected(e);
  230|  26.2k|            }
  231|       |
  232|  26.2k|            return impl(rd, range, value);
  233|  26.2k|        }
  234|  26.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.2k|            auto rd = make_reader<T, char_type>();
  236|  26.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.2k|                return impl(rd, range, value);
  242|  26.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.2k|        else {
  250|  26.2k|            SCN_EXPECT(false);
  251|  26.2k|            SCN_UNREACHABLE;
  252|  26.2k|        }
  253|  26.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.2k|    {
  205|  26.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 28, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     28|    }                                                  \
  |  |  |  |   70|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  26.2k|    {
  223|  26.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  26.2k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  26.2k|            auto rd = make_reader<T, char_type>();
  228|  26.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  26.2k|                return unexpected(e);
  230|  26.2k|            }
  231|       |
  232|  26.2k|            return impl(rd, range, value);
  233|  26.2k|        }
  234|  26.2k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  26.2k|            auto rd = make_reader<T, char_type>();
  236|  26.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 26.2k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  26.2k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 26.2k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  26.2k|                return impl(rd, range, value);
  242|  26.2k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  26.2k|        else {
  250|  26.2k|            SCN_EXPECT(false);
  251|  26.2k|            SCN_UNREACHABLE;
  252|  26.2k|        }
  253|  26.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  26.2k|    {
  205|  26.2k|        SCN_TRY(it,
  ------------------
  |  |   71|  26.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  26.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  26.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  26.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 28, False: 26.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     28|    }                                                  \
  |  |  |  |   70|  26.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  26.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  26.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  26.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  26.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  26.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 26.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  26.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  26.2k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|  52.9k|    {
  122|  52.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  52.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  52.9k|                          basic_contiguous_scan_context<char_type>>) {
  126|  52.9k|            auto rd = make_reader<T, char_type>();
  127|  52.9k|            return impl(rd, range, value);
  128|  52.9k|        }
  129|  52.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  52.9k|            auto rd = make_reader<T, char_type>();
  131|  52.9k|            if (!is_segment_contiguous(range)) {
  132|  52.9k|                return impl(rd, range, value);
  133|  52.9k|            }
  134|  52.9k|            auto crange = get_as_contiguous(range);
  135|  52.9k|            SCN_TRY(it, impl(rd, crange, value));
  136|  52.9k|            return ranges_polyfill::batch_next(
  137|  52.9k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  52.9k|        }
  139|  52.9k|        else {
  140|  52.9k|            SCN_EXPECT(false);
  141|  52.9k|            SCN_UNREACHABLE;
  142|  52.9k|        }
  143|  52.9k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  52.9k|    {
  112|  52.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  52.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 756, False: 52.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    756|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    756|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    756|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    756|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    756|    }                                                  \
  |  |  |  |   70|  52.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  52.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  52.2k|                    .transform_error(make_eof_scan_error));
  115|  52.2k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  52.2k|                               loc);
  117|  52.9k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  1.25M|{
   43|  1.25M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 15.1k, False: 1.23M]
  |  |  ------------------
  ------------------
   44|  15.1k|        return unexpected(e);
   45|  15.1k|    }
   46|       |
   47|  1.23M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 1.23M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  1.23M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  1.23M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|  60.7k|    {
  122|  60.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  60.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  60.7k|                          basic_contiguous_scan_context<char_type>>) {
  126|  60.7k|            auto rd = make_reader<T, char_type>();
  127|  60.7k|            return impl(rd, range, value);
  128|  60.7k|        }
  129|  60.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  60.7k|            auto rd = make_reader<T, char_type>();
  131|  60.7k|            if (!is_segment_contiguous(range)) {
  132|  60.7k|                return impl(rd, range, value);
  133|  60.7k|            }
  134|  60.7k|            auto crange = get_as_contiguous(range);
  135|  60.7k|            SCN_TRY(it, impl(rd, crange, value));
  136|  60.7k|            return ranges_polyfill::batch_next(
  137|  60.7k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  60.7k|        }
  139|  60.7k|        else {
  140|  60.7k|            SCN_EXPECT(false);
  141|  60.7k|            SCN_UNREACHABLE;
  142|  60.7k|        }
  143|  60.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  60.7k|    {
  112|  60.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  60.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  60.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  60.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  60.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.01k, False: 59.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.01k|    }                                                  \
  |  |  |  |   70|  60.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  59.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  59.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  59.7k|                    .transform_error(make_eof_scan_error));
  115|  59.7k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  59.7k|                               loc);
  117|  60.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|  61.5k|    {
  122|  61.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  61.5k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  61.5k|                          basic_contiguous_scan_context<char_type>>) {
  126|  61.5k|            auto rd = make_reader<T, char_type>();
  127|  61.5k|            return impl(rd, range, value);
  128|  61.5k|        }
  129|  61.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  61.5k|            auto rd = make_reader<T, char_type>();
  131|  61.5k|            if (!is_segment_contiguous(range)) {
  132|  61.5k|                return impl(rd, range, value);
  133|  61.5k|            }
  134|  61.5k|            auto crange = get_as_contiguous(range);
  135|  61.5k|            SCN_TRY(it, impl(rd, crange, value));
  136|  61.5k|            return ranges_polyfill::batch_next(
  137|  61.5k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  61.5k|        }
  139|  61.5k|        else {
  140|  61.5k|            SCN_EXPECT(false);
  141|  61.5k|            SCN_UNREACHABLE;
  142|  61.5k|        }
  143|  61.5k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  61.5k|    {
  112|  61.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  61.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  61.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.07k, False: 60.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.07k|    }                                                  \
  |  |  |  |   70|  61.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  60.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  60.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  60.4k|                    .transform_error(make_eof_scan_error));
  115|  60.4k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  60.4k|                               loc);
  117|  61.5k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|  49.7k|    {
  122|  49.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  49.7k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  49.7k|                          basic_contiguous_scan_context<char_type>>) {
  126|  49.7k|            auto rd = make_reader<T, char_type>();
  127|  49.7k|            return impl(rd, range, value);
  128|  49.7k|        }
  129|  49.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  49.7k|            auto rd = make_reader<T, char_type>();
  131|  49.7k|            if (!is_segment_contiguous(range)) {
  132|  49.7k|                return impl(rd, range, value);
  133|  49.7k|            }
  134|  49.7k|            auto crange = get_as_contiguous(range);
  135|  49.7k|            SCN_TRY(it, impl(rd, crange, value));
  136|  49.7k|            return ranges_polyfill::batch_next(
  137|  49.7k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  49.7k|        }
  139|  49.7k|        else {
  140|  49.7k|            SCN_EXPECT(false);
  141|  49.7k|            SCN_UNREACHABLE;
  142|  49.7k|        }
  143|  49.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  49.7k|    {
  112|  49.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 645, False: 49.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    645|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    645|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    645|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    645|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    645|    }                                                  \
  |  |  |  |   70|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  49.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  49.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  49.1k|                    .transform_error(make_eof_scan_error));
  115|  49.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  49.1k|                               loc);
  117|  49.7k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|  52.8k|    {
  122|  52.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  52.8k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  52.8k|                          basic_contiguous_scan_context<char_type>>) {
  126|  52.8k|            auto rd = make_reader<T, char_type>();
  127|  52.8k|            return impl(rd, range, value);
  128|  52.8k|        }
  129|  52.8k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  52.8k|            auto rd = make_reader<T, char_type>();
  131|  52.8k|            if (!is_segment_contiguous(range)) {
  132|  52.8k|                return impl(rd, range, value);
  133|  52.8k|            }
  134|  52.8k|            auto crange = get_as_contiguous(range);
  135|  52.8k|            SCN_TRY(it, impl(rd, crange, value));
  136|  52.8k|            return ranges_polyfill::batch_next(
  137|  52.8k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  52.8k|        }
  139|  52.8k|        else {
  140|  52.8k|            SCN_EXPECT(false);
  141|  52.8k|            SCN_UNREACHABLE;
  142|  52.8k|        }
  143|  52.8k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  52.8k|    {
  112|  52.8k|        SCN_TRY(it,
  ------------------
  |  |   71|  52.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  52.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  52.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  52.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 762, False: 52.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    762|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    762|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    762|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    762|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    762|    }                                                  \
  |  |  |  |   70|  52.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  52.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  52.1k|                    .transform_error(make_eof_scan_error));
  115|  52.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  52.1k|                               loc);
  117|  52.8k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|  53.3k|    {
  122|  53.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  53.3k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|  53.3k|                          basic_contiguous_scan_context<char_type>>) {
  126|  53.3k|            auto rd = make_reader<T, char_type>();
  127|  53.3k|            return impl(rd, range, value);
  128|  53.3k|        }
  129|  53.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|  53.3k|            auto rd = make_reader<T, char_type>();
  131|  53.3k|            if (!is_segment_contiguous(range)) {
  132|  53.3k|                return impl(rd, range, value);
  133|  53.3k|            }
  134|  53.3k|            auto crange = get_as_contiguous(range);
  135|  53.3k|            SCN_TRY(it, impl(rd, crange, value));
  136|  53.3k|            return ranges_polyfill::batch_next(
  137|  53.3k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|  53.3k|        }
  139|  53.3k|        else {
  140|  53.3k|            SCN_EXPECT(false);
  141|  53.3k|            SCN_UNREACHABLE;
  142|  53.3k|        }
  143|  53.3k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|  53.3k|    {
  112|  53.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  53.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  53.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  53.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 822, False: 52.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    822|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    822|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    822|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    822|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    822|    }                                                  \
  |  |  |  |   70|  53.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  52.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  52.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  52.5k|                    .transform_error(make_eof_scan_error));
  115|  52.5k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  52.5k|                               loc);
  117|  53.3k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   136k|    {
  223|   136k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   136k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   136k|                          basic_contiguous_scan_context<char_type>>) {
  227|   136k|            auto rd = make_reader<T, char_type>();
  228|   136k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   136k|            return impl(rd, range, value);
  233|   136k|        }
  234|   136k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   136k|            auto rd = make_reader<T, char_type>();
  236|   136k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   136k|                return unexpected(e);
  238|   136k|            }
  239|       |
  240|   136k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   136k|                return impl(rd, range, value);
  242|   136k|            }
  243|       |
  244|   136k|            auto crange = get_as_contiguous(range);
  245|   136k|            SCN_TRY(it, impl(rd, crange, value));
  246|   136k|            return ranges_polyfill::batch_next(
  247|   136k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   136k|        }
  249|   136k|        else {
  250|   136k|            SCN_EXPECT(false);
  251|   136k|            SCN_UNREACHABLE;
  252|   136k|        }
  253|   136k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   136k|    {
  205|   136k|        SCN_TRY(it,
  ------------------
  |  |   71|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.34k, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.34k|    }                                                  \
  |  |  |  |   70|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   134k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   134k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   134k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   134k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 134k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   134k|        return rd.read_specs(subr, specs, value, loc);
  218|   134k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   171k|    {
  223|   171k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   171k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   171k|                          basic_contiguous_scan_context<char_type>>) {
  227|   171k|            auto rd = make_reader<T, char_type>();
  228|   171k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 171k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   171k|            return impl(rd, range, value);
  233|   171k|        }
  234|   171k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   171k|            auto rd = make_reader<T, char_type>();
  236|   171k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   171k|                return unexpected(e);
  238|   171k|            }
  239|       |
  240|   171k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   171k|                return impl(rd, range, value);
  242|   171k|            }
  243|       |
  244|   171k|            auto crange = get_as_contiguous(range);
  245|   171k|            SCN_TRY(it, impl(rd, crange, value));
  246|   171k|            return ranges_polyfill::batch_next(
  247|   171k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   171k|        }
  249|   171k|        else {
  250|   171k|            SCN_EXPECT(false);
  251|   171k|            SCN_UNREACHABLE;
  252|   171k|        }
  253|   171k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   171k|    {
  205|   171k|        SCN_TRY(it,
  ------------------
  |  |   71|   171k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   171k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   171k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.24k, False: 168k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.24k|    }                                                  \
  |  |  |  |   70|   171k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   168k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   168k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   168k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   168k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 168k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   168k|        return rd.read_specs(subr, specs, value, loc);
  218|   168k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   174k|    {
  223|   174k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   174k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   174k|                          basic_contiguous_scan_context<char_type>>) {
  227|   174k|            auto rd = make_reader<T, char_type>();
  228|   174k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 174k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   174k|            return impl(rd, range, value);
  233|   174k|        }
  234|   174k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   174k|            auto rd = make_reader<T, char_type>();
  236|   174k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   174k|                return unexpected(e);
  238|   174k|            }
  239|       |
  240|   174k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   174k|                return impl(rd, range, value);
  242|   174k|            }
  243|       |
  244|   174k|            auto crange = get_as_contiguous(range);
  245|   174k|            SCN_TRY(it, impl(rd, crange, value));
  246|   174k|            return ranges_polyfill::batch_next(
  247|   174k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   174k|        }
  249|   174k|        else {
  250|   174k|            SCN_EXPECT(false);
  251|   174k|            SCN_UNREACHABLE;
  252|   174k|        }
  253|   174k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   174k|    {
  205|   174k|        SCN_TRY(it,
  ------------------
  |  |   71|   174k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   174k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   174k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.44k, False: 170k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.44k|    }                                                  \
  |  |  |  |   70|   174k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   170k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   170k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   170k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   170k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 170k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   170k|        return rd.read_specs(subr, specs, value, loc);
  218|   170k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   134k|    {
  223|   134k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   134k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   134k|                          basic_contiguous_scan_context<char_type>>) {
  227|   134k|            auto rd = make_reader<T, char_type>();
  228|   134k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 134k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   134k|            return impl(rd, range, value);
  233|   134k|        }
  234|   134k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   134k|            auto rd = make_reader<T, char_type>();
  236|   134k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   134k|                return unexpected(e);
  238|   134k|            }
  239|       |
  240|   134k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   134k|                return impl(rd, range, value);
  242|   134k|            }
  243|       |
  244|   134k|            auto crange = get_as_contiguous(range);
  245|   134k|            SCN_TRY(it, impl(rd, crange, value));
  246|   134k|            return ranges_polyfill::batch_next(
  247|   134k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   134k|        }
  249|   134k|        else {
  250|   134k|            SCN_EXPECT(false);
  251|   134k|            SCN_UNREACHABLE;
  252|   134k|        }
  253|   134k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   134k|    {
  205|   134k|        SCN_TRY(it,
  ------------------
  |  |   71|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.00k, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.00k|    }                                                  \
  |  |  |  |   70|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   132k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   132k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   132k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   132k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 132k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   132k|        return rd.read_specs(subr, specs, value, loc);
  218|   132k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   150k|    {
  223|   150k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   150k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   150k|                          basic_contiguous_scan_context<char_type>>) {
  227|   150k|            auto rd = make_reader<T, char_type>();
  228|   150k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   150k|            return impl(rd, range, value);
  233|   150k|        }
  234|   150k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   150k|            auto rd = make_reader<T, char_type>();
  236|   150k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   150k|                return unexpected(e);
  238|   150k|            }
  239|       |
  240|   150k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   150k|                return impl(rd, range, value);
  242|   150k|            }
  243|       |
  244|   150k|            auto crange = get_as_contiguous(range);
  245|   150k|            SCN_TRY(it, impl(rd, crange, value));
  246|   150k|            return ranges_polyfill::batch_next(
  247|   150k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   150k|        }
  249|   150k|        else {
  250|   150k|            SCN_EXPECT(false);
  251|   150k|            SCN_UNREACHABLE;
  252|   150k|        }
  253|   150k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   150k|    {
  205|   150k|        SCN_TRY(it,
  ------------------
  |  |   71|   150k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   150k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   150k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.46k, False: 148k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.46k|    }                                                  \
  |  |  |  |   70|   150k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   148k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   148k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   148k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   148k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 148k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   148k|        return rd.read_specs(subr, specs, value, loc);
  218|   148k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   152k|    {
  223|   152k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   152k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   152k|                          basic_contiguous_scan_context<char_type>>) {
  227|   152k|            auto rd = make_reader<T, char_type>();
  228|   152k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 152k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   152k|            return impl(rd, range, value);
  233|   152k|        }
  234|   152k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   152k|            auto rd = make_reader<T, char_type>();
  236|   152k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   152k|                return unexpected(e);
  238|   152k|            }
  239|       |
  240|   152k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   152k|                return impl(rd, range, value);
  242|   152k|            }
  243|       |
  244|   152k|            auto crange = get_as_contiguous(range);
  245|   152k|            SCN_TRY(it, impl(rd, crange, value));
  246|   152k|            return ranges_polyfill::batch_next(
  247|   152k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   152k|        }
  249|   152k|        else {
  250|   152k|            SCN_EXPECT(false);
  251|   152k|            SCN_UNREACHABLE;
  252|   152k|        }
  253|   152k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   152k|    {
  205|   152k|        SCN_TRY(it,
  ------------------
  |  |   71|   152k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.62k, False: 149k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.62k|    }                                                  \
  |  |  |  |   70|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   149k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   149k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   149k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   149k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 149k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   149k|        return rd.read_specs(subr, specs, value, loc);
  218|   149k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  6.07k|    {
  122|  6.07k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.07k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.07k|            auto rd = make_reader<T, char_type>();
  127|  6.07k|            return impl(rd, range, value);
  128|  6.07k|        }
  129|  6.07k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.07k|            auto rd = make_reader<T, char_type>();
  131|  6.07k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.07k, False: 0]
  ------------------
  132|  6.07k|                return impl(rd, range, value);
  133|  6.07k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.07k|        else {
  140|  6.07k|            SCN_EXPECT(false);
  141|  6.07k|            SCN_UNREACHABLE;
  142|  6.07k|        }
  143|  6.07k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.07k|    {
  112|  6.07k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  6.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.06k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.06k|                    .transform_error(make_eof_scan_error));
  115|  6.06k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.06k|                               loc);
  117|  6.07k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   319k|{
   43|   319k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 374, False: 319k]
  |  |  ------------------
  ------------------
   44|    374|        return unexpected(e);
   45|    374|    }
   46|       |
   47|   319k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 319k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   319k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   319k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  12.1k|    {
  122|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.1k|            auto rd = make_reader<T, char_type>();
  127|  12.1k|            return impl(rd, range, value);
  128|  12.1k|        }
  129|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.1k|            auto rd = make_reader<T, char_type>();
  131|  12.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.1k, False: 0]
  ------------------
  132|  12.1k|                return impl(rd, range, value);
  133|  12.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.1k|        else {
  140|  12.1k|            SCN_EXPECT(false);
  141|  12.1k|            SCN_UNREACHABLE;
  142|  12.1k|        }
  143|  12.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.1k|    {
  112|  12.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.1k|                    .transform_error(make_eof_scan_error));
  115|  12.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.1k|                               loc);
  117|  12.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  12.1k|    {
  122|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.1k|            auto rd = make_reader<T, char_type>();
  127|  12.1k|            return impl(rd, range, value);
  128|  12.1k|        }
  129|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.1k|            auto rd = make_reader<T, char_type>();
  131|  12.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.1k, False: 0]
  ------------------
  132|  12.1k|                return impl(rd, range, value);
  133|  12.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.1k|        else {
  140|  12.1k|            SCN_EXPECT(false);
  141|  12.1k|            SCN_UNREACHABLE;
  142|  12.1k|        }
  143|  12.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.1k|    {
  112|  12.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.1k|                    .transform_error(make_eof_scan_error));
  115|  12.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.1k|                               loc);
  117|  12.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  6.07k|    {
  122|  6.07k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  6.07k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  6.07k|            auto rd = make_reader<T, char_type>();
  127|  6.07k|            return impl(rd, range, value);
  128|  6.07k|        }
  129|  6.07k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  6.07k|            auto rd = make_reader<T, char_type>();
  131|  6.07k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 6.07k, False: 0]
  ------------------
  132|  6.07k|                return impl(rd, range, value);
  133|  6.07k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  6.07k|        else {
  140|  6.07k|            SCN_EXPECT(false);
  141|  6.07k|            SCN_UNREACHABLE;
  142|  6.07k|        }
  143|  6.07k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  6.07k|    {
  112|  6.07k|        SCN_TRY(it,
  ------------------
  |  |   71|  6.07k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.07k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.07k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      9|    }                                                  \
  |  |  |  |   70|  6.07k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  6.06k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  6.06k|                    .transform_error(make_eof_scan_error));
  115|  6.06k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  6.06k|                               loc);
  117|  6.07k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  12.1k|    {
  122|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.1k|            auto rd = make_reader<T, char_type>();
  127|  12.1k|            return impl(rd, range, value);
  128|  12.1k|        }
  129|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.1k|            auto rd = make_reader<T, char_type>();
  131|  12.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.1k, False: 0]
  ------------------
  132|  12.1k|                return impl(rd, range, value);
  133|  12.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.1k|        else {
  140|  12.1k|            SCN_EXPECT(false);
  141|  12.1k|            SCN_UNREACHABLE;
  142|  12.1k|        }
  143|  12.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.1k|    {
  112|  12.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.1k|                    .transform_error(make_eof_scan_error));
  115|  12.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.1k|                               loc);
  117|  12.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  12.1k|    {
  122|  12.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  12.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  12.1k|            auto rd = make_reader<T, char_type>();
  127|  12.1k|            return impl(rd, range, value);
  128|  12.1k|        }
  129|  12.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.1k|            auto rd = make_reader<T, char_type>();
  131|  12.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 12.1k, False: 0]
  ------------------
  132|  12.1k|                return impl(rd, range, value);
  133|  12.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  12.1k|        else {
  140|  12.1k|            SCN_EXPECT(false);
  141|  12.1k|            SCN_UNREACHABLE;
  142|  12.1k|        }
  143|  12.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  12.1k|    {
  112|  12.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     21|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     21|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     21|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     21|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     21|    }                                                  \
  |  |  |  |   70|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  12.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  12.1k|                    .transform_error(make_eof_scan_error));
  115|  12.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  12.1k|                               loc);
  117|  12.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  32.3k|    {
  223|  32.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  32.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  32.3k|            auto rd = make_reader<T, char_type>();
  228|  32.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  32.3k|                return unexpected(e);
  230|  32.3k|            }
  231|       |
  232|  32.3k|            return impl(rd, range, value);
  233|  32.3k|        }
  234|  32.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  32.3k|            auto rd = make_reader<T, char_type>();
  236|  32.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 32.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  32.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 32.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  32.3k|                return impl(rd, range, value);
  242|  32.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  32.3k|        else {
  250|  32.3k|            SCN_EXPECT(false);
  251|  32.3k|            SCN_UNREACHABLE;
  252|  32.3k|        }
  253|  32.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  32.3k|    {
  205|  32.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 32.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  32.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  32.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  32.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  32.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 32.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  32.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  32.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  48.5k|    {
  223|  48.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  48.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  48.5k|            auto rd = make_reader<T, char_type>();
  228|  48.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  48.5k|                return unexpected(e);
  230|  48.5k|            }
  231|       |
  232|  48.5k|            return impl(rd, range, value);
  233|  48.5k|        }
  234|  48.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  48.5k|            auto rd = make_reader<T, char_type>();
  236|  48.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 48.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  48.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 48.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  48.5k|                return impl(rd, range, value);
  242|  48.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  48.5k|        else {
  250|  48.5k|            SCN_EXPECT(false);
  251|  48.5k|            SCN_UNREACHABLE;
  252|  48.5k|        }
  253|  48.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  48.5k|    {
  205|  48.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  48.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 64, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     64|    }                                                  \
  |  |  |  |   70|  48.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  48.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  48.4k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  48.4k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  48.4k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 48.4k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  48.4k|        return rd.read_specs(subr, specs, value, loc);
  218|  48.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  48.5k|    {
  223|  48.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  48.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  48.5k|            auto rd = make_reader<T, char_type>();
  228|  48.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  48.5k|                return unexpected(e);
  230|  48.5k|            }
  231|       |
  232|  48.5k|            return impl(rd, range, value);
  233|  48.5k|        }
  234|  48.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  48.5k|            auto rd = make_reader<T, char_type>();
  236|  48.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 48.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  48.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 48.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  48.5k|                return impl(rd, range, value);
  242|  48.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  48.5k|        else {
  250|  48.5k|            SCN_EXPECT(false);
  251|  48.5k|            SCN_UNREACHABLE;
  252|  48.5k|        }
  253|  48.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  48.5k|    {
  205|  48.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  48.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 64, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     64|    }                                                  \
  |  |  |  |   70|  48.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  48.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  48.4k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  48.4k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  48.4k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 48.4k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  48.4k|        return rd.read_specs(subr, specs, value, loc);
  218|  48.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  32.3k|    {
  223|  32.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  32.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  32.3k|            auto rd = make_reader<T, char_type>();
  228|  32.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  32.3k|                return unexpected(e);
  230|  32.3k|            }
  231|       |
  232|  32.3k|            return impl(rd, range, value);
  233|  32.3k|        }
  234|  32.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  32.3k|            auto rd = make_reader<T, char_type>();
  236|  32.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 32.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  32.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 32.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  32.3k|                return impl(rd, range, value);
  242|  32.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  32.3k|        else {
  250|  32.3k|            SCN_EXPECT(false);
  251|  32.3k|            SCN_UNREACHABLE;
  252|  32.3k|        }
  253|  32.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  32.3k|    {
  205|  32.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  32.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 32.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  32.3k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  32.3k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  32.3k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  32.3k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 32.3k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  32.3k|        return rd.read_specs(subr, specs, value, loc);
  218|  32.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  48.5k|    {
  223|  48.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  48.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  48.5k|            auto rd = make_reader<T, char_type>();
  228|  48.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  48.5k|                return unexpected(e);
  230|  48.5k|            }
  231|       |
  232|  48.5k|            return impl(rd, range, value);
  233|  48.5k|        }
  234|  48.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  48.5k|            auto rd = make_reader<T, char_type>();
  236|  48.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 48.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  48.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 48.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  48.5k|                return impl(rd, range, value);
  242|  48.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  48.5k|        else {
  250|  48.5k|            SCN_EXPECT(false);
  251|  48.5k|            SCN_UNREACHABLE;
  252|  48.5k|        }
  253|  48.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  48.5k|    {
  205|  48.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  48.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 64, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     64|    }                                                  \
  |  |  |  |   70|  48.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  48.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  48.4k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  48.4k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  48.4k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 48.4k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  48.4k|        return rd.read_specs(subr, specs, value, loc);
  218|  48.4k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  48.5k|    {
  223|  48.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  48.5k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  48.5k|            auto rd = make_reader<T, char_type>();
  228|  48.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  48.5k|                return unexpected(e);
  230|  48.5k|            }
  231|       |
  232|  48.5k|            return impl(rd, range, value);
  233|  48.5k|        }
  234|  48.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  48.5k|            auto rd = make_reader<T, char_type>();
  236|  48.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 48.5k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  48.5k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 48.5k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  48.5k|                return impl(rd, range, value);
  242|  48.5k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  48.5k|        else {
  250|  48.5k|            SCN_EXPECT(false);
  251|  48.5k|            SCN_UNREACHABLE;
  252|  48.5k|        }
  253|  48.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  48.5k|    {
  205|  48.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  48.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 64, False: 48.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     64|    }                                                  \
  |  |  |  |   70|  48.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  48.4k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  48.4k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  48.4k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  48.4k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 48.4k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  48.4k|        return rd.read_specs(subr, specs, value, loc);
  218|  48.4k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   182k|{
  110|   182k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   182k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   101k|{
  263|   101k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   101k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 59.7k, False: 41.3k]
  |  |  ------------------
  ------------------
  267|  59.7k|        return {get_start_of_next_code_point(input),
  268|  59.7k|                detail::invalid_code_point};
  269|  59.7k|    }
  270|  41.3k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.12k, False: 40.2k]
  |  |  ------------------
  ------------------
  271|  1.12k|        return {input.end(), detail::invalid_code_point};
  272|  1.12k|    }
  273|       |
  274|  40.2k|    constexpr auto enc = get_encoding<CharT>();
  275|  40.2k|    std::size_t result{1};
  276|  40.2k|    char32_t output{};
  277|  40.2k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  40.2k|        result = simdutf::convert_utf8_to_utf32(
  279|  40.2k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  40.2k|    }
  281|  40.2k|    else if constexpr (enc == encoding::utf16) {
  282|  40.2k|        result = simdutf::convert_utf16_to_utf32(
  283|  40.2k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  40.2k|    }
  285|  40.2k|    else if constexpr (enc == encoding::utf32) {
  286|  40.2k|        SCN_EXPECT(len == 1);
  287|  40.2k|        output = static_cast<char32_t>(input[0]);
  288|  40.2k|    }
  289|       |
  290|  40.2k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  40.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.87k, False: 38.3k]
  |  |  ------------------
  ------------------
  291|  1.87k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  1.87k|                detail::invalid_code_point};
  293|  1.87k|    }
  294|       |
  295|  38.3k|    return {input.begin() + len, output};
  296|  40.2k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  61.5k|{
  248|  61.5k|    auto it = input.begin();
  249|   140k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 81.5k, False: 59.4k]
  ------------------
  250|  81.5k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 2.15k, False: 79.3k]
  ------------------
  251|  2.15k|            break;
  252|  2.15k|        }
  253|  81.5k|    }
  254|       |
  255|  61.5k|    return it;
  256|  61.5k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  17.9M|{
  110|  17.9M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  17.9M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  1.55M|{
  449|  1.55M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 1.55M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  1.55M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  1.55M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  1.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  1.55M|                    input.size() * sizeof(SourceCharT));
  457|  1.55M|        return input.size();
  458|  1.55M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}
_ZN3scn2v24impl28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
  115|   177k|{
  116|   177k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   177k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   177k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|       |
  118|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  119|   177k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
  120|      0|        return detail::invalid_code_point;
  121|      0|    }
  122|       |
  123|   177k|    constexpr auto enc = get_encoding<CharT>();
  124|   177k|    char32_t output{};
  125|   177k|    size_t ret{};
  126|   177k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|   177k|#ifndef NDEBUG
  128|   177k|        if (validate_unicode(input)) {
  129|   177k|            auto len =
  130|   177k|                simdutf::utf32_length_from_utf8(input.data(), input.size());
  131|   177k|            SCN_EXPECT(len == 1);
  132|   177k|        }
  133|   177k|#endif
  134|   177k|        ret = simdutf::convert_utf8_to_utf32(input.data(), len, &output);
  135|   177k|    }
  136|   177k|    else if constexpr (enc == encoding::utf16) {
  ------------------
  |  Branch (136:24): [Folded - Ignored]
  ------------------
  137|   177k|#ifndef NDEBUG
  138|   177k|        if (validate_unicode(input)) {
  139|   177k|            auto len = simdutf::utf32_length_from_utf16(
  140|   177k|                reinterpret_cast<const char16_t*>(input.data()), input.size());
  141|   177k|            SCN_EXPECT(len == 1);
  142|   177k|        }
  143|   177k|#endif
  144|   177k|        ret = simdutf::convert_utf16_to_utf32(
  145|   177k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  146|   177k|    }
  147|   177k|    else if constexpr (enc == encoding::utf32) {
  ------------------
  |  Branch (147:24): [Folded - Ignored]
  ------------------
  148|   177k|        output = static_cast<char32_t>(input[0]);
  149|   177k|        ret = output < detail::invalid_code_point;
  150|   177k|    }
  151|       |
  152|   177k|    if (SCN_UNLIKELY(ret != 1)) {
  ------------------
  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
  153|      0|        return detail::invalid_code_point;
  154|      0|    }
  155|   177k|    return static_cast<char32_t>(output);
  156|   177k|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  2.99M|{
   29|       |    // Pattern_White_Space property
   30|  2.99M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 2.98M, False: 9.78k]
  |  Branch (30:27): [True: 1.15M, False: 1.82M]
  ------------------
   31|  2.99M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 15.1k, False: 1.82M]
  ------------------
   32|  2.99M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 180k, False: 1.64M]
  ------------------
   33|  2.99M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 1.43k, False: 1.64M]
  ------------------
   34|  2.99M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 1.38k, False: 1.63M]
  ------------------
   35|  2.99M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 2.21k, False: 1.63M]
  ------------------
   36|  2.99M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 1.63M]
  ------------------
   37|  2.99M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  2.54M|{
   58|  2.54M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  2.54M|        static_cast<unsigned char>(ch))];
   60|  2.54M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  1.42M|{
   92|  1.42M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  1.42M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|   947k|    {
   57|   947k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  2.68M|    {
   61|  2.68M|        return m_current;
   62|  2.68M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  1.73M|    {
   66|  1.73M|        return m_range.end();
   67|  1.73M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|   829k|    {
   81|   829k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|   829k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   829k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|   829k|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|   829k|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 829k]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|   829k|        }
   87|   829k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   829k|    static_cast<    \
  |  |  247|   829k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|   829k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|   907k|    {
   71|   907k|        return ranges::subrange{begin(), end()};
   72|   907k|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|   992k|    {
   57|   992k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  2.68M|    {
   61|  2.68M|        return m_current;
   62|  2.68M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  1.69M|    {
   66|  1.69M|        return m_range.end();
   67|  1.69M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|   774k|    {
   81|   774k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|   774k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   774k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|   774k|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|   774k|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 774k]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|   774k|        }
   87|   774k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   774k|    static_cast<    \
  |  |  247|   774k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|   774k|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|   919k|    {
   71|   919k|        return ranges::subrange{begin(), end()};
   72|   919k|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   723k|    {
  205|   723k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   723k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   723k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   158k|    {
  196|   158k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   361k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   361k|              cvref<T> obj = *get<T>(fn);
  187|   361k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   361k|                  obj(static_cast<decltype(args)>(args)...);
  189|   361k|              }
  190|   361k|              else {
  191|   361k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   361k|              }
  193|   361k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   361k|    {
  126|   361k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   361k|            return static_cast<T*>(s.m_cp);
  128|   361k|        }
  129|   361k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   361k|            return static_cast<T*>(s.m_p);
  131|   361k|        }
  132|   361k|        else {
  133|   361k|            return reinterpret_cast<T*>(s.m_fp);
  134|   361k|        }
  135|   361k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   158k|        {
  104|   158k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  5.79M|    {
  205|  5.79M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  5.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  5.79M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  1.55M|    {
  196|  1.55M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  2.89M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  2.89M|              cvref<T> obj = *get<T>(fn);
  187|  2.89M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  2.89M|                  obj(static_cast<decltype(args)>(args)...);
  189|  2.89M|              }
  190|  2.89M|              else {
  191|  2.89M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  2.89M|              }
  193|  2.89M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  2.89M|    {
  126|  2.89M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  2.89M|            return static_cast<T*>(s.m_cp);
  128|  2.89M|        }
  129|  2.89M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  2.89M|            return static_cast<T*>(s.m_p);
  131|  2.89M|        }
  132|  2.89M|        else {
  133|  2.89M|            return reinterpret_cast<T*>(s.m_fp);
  134|  2.89M|        }
  135|  2.89M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  1.55M|        {
  104|  1.55M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   158k|    {
  196|   158k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   361k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   361k|              cvref<T> obj = *get<T>(fn);
  187|   361k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   361k|                  obj(static_cast<decltype(args)>(args)...);
  189|   361k|              }
  190|   361k|              else {
  191|   361k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   361k|              }
  193|   361k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   361k|    {
  126|   361k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   361k|            return static_cast<T*>(s.m_cp);
  128|   361k|        }
  129|   361k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   361k|            return static_cast<T*>(s.m_p);
  131|   361k|        }
  132|   361k|        else {
  133|   361k|            return reinterpret_cast<T*>(s.m_fp);
  134|   361k|        }
  135|   361k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   158k|        {
  104|   158k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  1.23M|    {
  196|  1.23M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  2.39M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  2.39M|              cvref<T> obj = *get<T>(fn);
  187|  2.39M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  2.39M|                  obj(static_cast<decltype(args)>(args)...);
  189|  2.39M|              }
  190|  2.39M|              else {
  191|  2.39M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  2.39M|              }
  193|  2.39M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  2.39M|    {
  126|  2.39M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  2.39M|            return static_cast<T*>(s.m_cp);
  128|  2.39M|        }
  129|  2.39M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  2.39M|            return static_cast<T*>(s.m_p);
  131|  2.39M|        }
  132|  2.39M|        else {
  133|  2.39M|            return reinterpret_cast<T*>(s.m_fp);
  134|  2.39M|        }
  135|  2.39M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  1.23M|        {
  104|  1.23M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  2.05M|    {
  205|  2.05M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  2.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  2.05M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   278k|    {
  196|   278k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|  1.02M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.02M|              cvref<T> obj = *get<T>(fn);
  187|  1.02M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.02M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.02M|              }
  190|  1.02M|              else {
  191|  1.02M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.02M|              }
  193|  1.02M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|  1.02M|    {
  126|  1.02M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.02M|            return static_cast<T*>(s.m_cp);
  128|  1.02M|        }
  129|  1.02M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.02M|            return static_cast<T*>(s.m_p);
  131|  1.02M|        }
  132|  1.02M|        else {
  133|  1.02M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.02M|        }
  135|  1.02M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   278k|        {
  104|   278k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   319k|    {
  196|   319k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   496k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   496k|              cvref<T> obj = *get<T>(fn);
  187|   496k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   496k|                  obj(static_cast<decltype(args)>(args)...);
  189|   496k|              }
  190|   496k|              else {
  191|   496k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   496k|              }
  193|   496k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   496k|    {
  126|   496k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   496k|            return static_cast<T*>(s.m_cp);
  128|   496k|        }
  129|   496k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   496k|            return static_cast<T*>(s.m_p);
  131|   496k|        }
  132|   496k|        else {
  133|   496k|            return reinterpret_cast<T*>(s.m_fp);
  134|   496k|        }
  135|   496k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   319k|        {
  104|   319k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   278k|    {
  196|   278k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|  1.02M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  1.02M|              cvref<T> obj = *get<T>(fn);
  187|  1.02M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  1.02M|                  obj(static_cast<decltype(args)>(args)...);
  189|  1.02M|              }
  190|  1.02M|              else {
  191|  1.02M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  1.02M|              }
  193|  1.02M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|  1.02M|    {
  126|  1.02M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  1.02M|            return static_cast<T*>(s.m_cp);
  128|  1.02M|        }
  129|  1.02M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  1.02M|            return static_cast<T*>(s.m_p);
  131|  1.02M|        }
  132|  1.02M|        else {
  133|  1.02M|            return reinterpret_cast<T*>(s.m_fp);
  134|  1.02M|        }
  135|  1.02M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   278k|        {
  104|   278k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  40.8k|{
   44|  40.8k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  40.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  40.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  40.8k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  12.5M|{
   30|  12.5M|    return e != eof_error::good;
   31|  12.5M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   137k|{
   91|   137k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   137k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  3.16M|    {
   69|  3.16M|        return a.m_code == b.m_code;
   70|  3.16M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  14.6M|    {
   55|  14.6M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  14.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  14.6M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   194k|    return [code, msg](parse_error err) {
  115|   194k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   194k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   194k|{
  100|   194k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 194k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   194k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 194k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   194k|    return scan_error{code, msg};
  109|   194k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   437k|{
  114|   437k|    return [code, msg](parse_error err) {
  115|   437k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   437k|    };
  117|   437k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|   585k|{
  587|   585k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|   585k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   105k|{
  595|   105k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   105k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   105k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.4k, False: 65.7k]
  |  |  ------------------
  ------------------
  597|  39.4k|        source.sync(*n);
  598|  39.4k|    }
  599|  65.7k|    else {
  600|  65.7k|        source.sync_all();
  601|  65.7k|    }
  602|   105k|    return n;
  603|   105k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|   606k|{
  611|   606k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|   606k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   185k|{
  619|   185k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   185k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   185k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 64.7k, False: 121k]
  |  |  ------------------
  ------------------
  621|  64.7k|        source.sync(*n);
  622|  64.7k|    }
  623|   121k|    else {
  624|   121k|        source.sync_all();
  625|   121k|    }
  626|   185k|    return n;
  627|   185k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|   585k|{
  544|   585k|    return vscan_internal(source, format, args);
  545|   585k|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   105k|{
  550|   105k|    auto n = vscan_internal(source, format, args);
  551|   105k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   105k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 39.4k, False: 65.7k]
  |  |  ------------------
  ------------------
  552|  39.4k|        source.sync(*n);
  553|  39.4k|    }
  554|  65.7k|    else {
  555|  65.7k|        source.sync_all();
  556|  65.7k|    }
  557|   105k|    return n;
  558|   105k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|   606k|{
  564|   606k|    return vscan_internal(source, format, args);
  565|   606k|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   185k|{
  570|   185k|    auto n = vscan_internal(source, format, args);
  571|   185k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   185k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 64.7k, False: 121k]
  |  |  ------------------
  ------------------
  572|  64.7k|        source.sync(*n);
  573|  64.7k|    }
  574|   121k|    else {
  575|   121k|        source.sync_all();
  576|   121k|    }
  577|   185k|    return n;
  578|   185k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   111k|{
  654|   111k|    return vscan_value_internal(source, arg);
  655|   111k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  12.0k|{
  659|  12.0k|    auto n = vscan_value_internal(source, arg);
  660|  12.0k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  12.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.47k, False: 6.57k]
  |  |  ------------------
  ------------------
  661|  5.47k|        source.sync(*n);
  662|  5.47k|    }
  663|  6.57k|    else {
  664|  6.57k|        source.sync_all();
  665|  6.57k|    }
  666|  12.0k|    return n;
  667|  12.0k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   110k|{
  673|   110k|    return vscan_value_internal(source, arg);
  674|   110k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  20.2k|{
  679|  20.2k|    auto n = vscan_value_internal(source, arg);
  680|  20.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  20.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 8.09k, False: 12.1k]
  |  |  ------------------
  ------------------
  681|  8.09k|        source.sync(*n);
  682|  8.09k|    }
  683|  12.1k|    else {
  684|  12.1k|        source.sync_all();
  685|  12.1k|    }
  686|  20.2k|    return n;
  687|  20.2k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   210k|{
  476|   210k|    const auto argcount = args.size();
  477|   210k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 24.0k, False: 186k]
  |  Branch (477:60): [True: 24.0k, False: 0]
  ------------------
  478|  24.0k|        auto arg = args.get(0);
  479|  24.0k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  24.0k|    static_cast<    \
  |  |  247|  24.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  24.0k|    }
  481|       |
  482|   186k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 186k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   186k|    SCN_UNLIKELY_ATTR
  490|   186k|    {
  491|   186k|        auto handler = format_handler<false, CharT>{
  492|   186k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   186k|    static_cast<    \
  |  |  247|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   186k|    static_cast<    \
  |  |  247|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   186k|        return vscan_parse_format_string(format, handler);
  494|   186k|    }
  495|   186k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  1.38M|{
   36|  1.38M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 1.13M, False: 246k]
  ------------------
   37|  1.13M|        return false;
   38|  1.13M|    }
   39|   246k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 246k, False: 0]
  |  Branch (39:39): [True: 246k, False: 0]
  ------------------
   40|  1.38M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  36.1k|{
   69|  36.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 36.1k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  36.1k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  36.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 36.1k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  36.1k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  36.1k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  36.1k|    static_cast<    \
  |  |  247|  36.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  36.1k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.7k, False: 16.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.7k|    }                                                  \
  |  |  |  |   70|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  16.4k|    return it.position();
   86|  36.1k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|   947k|    {
  314|   947k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  2.45M|    {
  133|  2.45M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.45M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  2.45M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|   947k|    {
  264|   947k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   947k|{
  441|   947k|    const auto beg = handler.get_ctx().begin();
  442|   947k|    detail::parse_format_string<false>(format, handler);
  443|   947k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   947k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 118k, False: 829k]
  |  |  ------------------
  ------------------
  444|   118k|        return unexpected(handler.error);
  445|   118k|    }
  446|   829k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   947k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  6.31M|    {
  425|  6.31M|        return ctx.get();
  426|  6.31M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  6.31M|    {
  268|  6.31M|        return contiguous_ctx;
  269|  6.31M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  1.77M|    {
  318|  1.77M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 1.77M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  1.77M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|   947k|{
   92|   947k|    auto arg = ctx.arg(id);
   93|   947k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   947k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 947k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   947k|    return arg;
   97|   947k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  2.45M|    {
  208|  2.45M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.45M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  2.45M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.45M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  2.45M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  2.45M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.45M, False: 0]
  |  |  ------------------
  ------------------
  218|  2.45M|            visited_args_lower64 |= (1ull << id);
  219|  2.45M|            return;
  220|  2.45M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  2.45M|    {
  193|  2.45M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.45M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  2.45M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  2.45M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 2.45M, False: 0]
  |  |  ------------------
  ------------------
  199|  2.45M|            return (visited_args_lower64 >> id) & 1ull;
  200|  2.45M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  2.45M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   448k|    {
  177|   448k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   448k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 448k, False: 0]
  |  |  ------------------
  ------------------
  178|   448k|            error = err;
  179|   448k|        }
  180|   448k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|   947k|    {
  347|   947k|        return parse_ctx.next_arg_id();
  348|   947k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|   947k|    {
  388|   947k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   947k|        set_arg_as_visited(arg_id);
  390|       |
  391|   947k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 947k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   947k|        auto specs = detail::format_specs{};
  401|   947k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   947k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   947k|            arg.type()};
  404|       |
  405|   947k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   947k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 947k]
  |  Branch (406:29): [True: 26.2k, False: 921k]
  ------------------
  407|  26.2k|            SCN_UNLIKELY_ATTR
  408|  26.2k|            on_error("Missing '}' in format string");
  409|  26.2k|            return parse_ctx.begin();
  410|  26.2k|        }
  411|   921k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   921k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.1k, False: 907k]
  |  |  ------------------
  ------------------
  412|  13.1k|            return parse_ctx.begin();
  413|  13.1k|        }
  414|   907k|        parse_ctx.advance_to(begin);
  415|       |
  416|   907k|        on_visit_scan_arg(
  417|   907k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   907k|                                           get_ctx().locale()},
  419|   907k|            arg);
  420|   907k|        return parse_ctx.begin();
  421|   921k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|   947k|    {
  112|   947k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|   907k|    {
  359|   907k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 907k]
  |  Branch (359:23): [True: 0, False: 907k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   907k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   907k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   907k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   907k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78.8k, False: 829k]
  |  |  ------------------
  ------------------
  366|  78.8k|            on_error(r.error());
  367|  78.8k|        }
  368|   829k|        else {
  369|   829k|            get_ctx().advance_to(*r);
  370|   829k|        }
  371|   907k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|   373k|    {
  172|   373k|        SCN_UNLIKELY_ATTR
  173|   373k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|   373k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  2.45M|    {
  140|  2.45M|        {
  141|  2.45M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 2.45M]
  ------------------
  142|  2.45M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 2.45M]
  ------------------
  143|  2.45M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  2.45M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  2.45M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 2.45M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  2.45M|        }
  150|       |
  151|  2.45M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 2.45M, False: 0]
  ------------------
  152|  2.45M|            return;
  153|  2.45M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  2.45M|    {
  188|  2.45M|        return error;
  189|  2.45M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  7.14M|    {
  184|  7.14M|        return static_cast<bool>(error);
  185|  7.14M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   186k|    {
  314|   186k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   186k|    {
  241|   186k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   186k|{
  441|   186k|    const auto beg = handler.get_ctx().begin();
  442|   186k|    detail::parse_format_string<false>(format, handler);
  443|   186k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 118k, False: 67.9k]
  |  |  ------------------
  ------------------
  444|   118k|        return unexpected(handler.error);
  445|   118k|    }
  446|  67.9k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   186k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|   987k|    {
  425|   987k|        return ctx.get();
  426|   987k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|   987k|    {
  245|   987k|        return ctx;
  246|   987k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   254k|    {
  318|   254k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 254k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   254k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   186k|{
   92|   186k|    auto arg = ctx.arg(id);
   93|   186k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   186k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 186k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   186k|    return arg;
   97|   186k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   186k|    {
  347|   186k|        return parse_ctx.next_arg_id();
  348|   186k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   186k|    {
  388|   186k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   186k|        set_arg_as_visited(arg_id);
  390|       |
  391|   186k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 186k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   186k|        auto specs = detail::format_specs{};
  401|   186k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   186k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   186k|            arg.type()};
  404|       |
  405|   186k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   186k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 186k]
  |  Branch (406:29): [True: 26.2k, False: 159k]
  ------------------
  407|  26.2k|            SCN_UNLIKELY_ATTR
  408|  26.2k|            on_error("Missing '}' in format string");
  409|  26.2k|            return parse_ctx.begin();
  410|  26.2k|        }
  411|   159k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.1k, False: 146k]
  |  |  ------------------
  ------------------
  412|  13.1k|            return parse_ctx.begin();
  413|  13.1k|        }
  414|   146k|        parse_ctx.advance_to(begin);
  415|       |
  416|   146k|        on_visit_scan_arg(
  417|   146k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   146k|                                           get_ctx().locale()},
  419|   146k|            arg);
  420|   146k|        return parse_ctx.begin();
  421|   159k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   186k|    {
  112|   186k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   146k|    {
  359|   146k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 146k]
  |  Branch (359:23): [True: 0, False: 146k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   146k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   146k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 78.8k, False: 67.9k]
  |  |  ------------------
  ------------------
  366|  78.8k|            on_error(r.error());
  367|  78.8k|        }
  368|  67.9k|        else {
  369|  67.9k|            get_ctx().advance_to(*r);
  370|  67.9k|        }
  371|   146k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  1.17M|{
  456|  1.17M|    const auto argcount = args.size();
  457|  1.17M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 222k, False: 947k]
  |  Branch (457:60): [True: 222k, False: 0]
  ------------------
  458|   222k|        auto arg = args.get(0);
  459|   222k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   222k|    static_cast<    \
  |  |  247|   222k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   222k|    }
  461|       |
  462|   947k|    auto handler = format_handler<true, CharT>{
  463|   947k|        ranges::subrange<const CharT*>{source.data(),
  464|   947k|                                       source.data() + source.size()},
  465|   947k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   947k|    static_cast<    \
  |  |  247|   947k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   947k|    static_cast<    \
  |  |  247|   947k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|   947k|    return vscan_parse_format_string(format, handler);
  467|  1.17M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   334k|{
   49|   334k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 334k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   334k|    auto reader =
   55|   334k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   334k|            ranges::subrange<const CharT*>{source.data(),
   57|   334k|                                           source.data() + source.size()},
   58|   334k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   334k|    static_cast<    \
  |  |  247|   334k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   334k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   334k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   334k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   334k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.7k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.7k|    }                                                  \
  |  |  |  |   70|   334k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   314k|    return ranges::distance(source.data(), it);
   61|   334k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  1.21M|{
  456|  1.21M|    const auto argcount = args.size();
  457|  1.21M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 220k, False: 992k]
  |  Branch (457:60): [True: 220k, False: 0]
  ------------------
  458|   220k|        auto arg = args.get(0);
  459|   220k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   220k|    static_cast<    \
  |  |  247|   220k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   220k|    }
  461|       |
  462|   992k|    auto handler = format_handler<true, CharT>{
  463|   992k|        ranges::subrange<const CharT*>{source.data(),
  464|   992k|                                       source.data() + source.size()},
  465|   992k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   992k|    static_cast<    \
  |  |  247|   992k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   992k|    static_cast<    \
  |  |  247|   992k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|   992k|    return vscan_parse_format_string(format, handler);
  467|  1.21M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  1.58M|{
   36|  1.58M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 1.32M, False: 261k]
  ------------------
   37|  1.32M|        return false;
   38|  1.32M|    }
   39|   261k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 261k, False: 0]
  |  Branch (39:39): [True: 261k, False: 0]
  ------------------
   40|  1.58M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|   331k|{
   49|   331k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|   331k|    auto reader =
   55|   331k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|   331k|            ranges::subrange<const CharT*>{source.data(),
   57|   331k|                                           source.data() + source.size()},
   58|   331k|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|   331k|    static_cast<    \
  |  |  247|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   331k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   331k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   331k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   331k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.3k, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.3k|    }                                                  \
  |  |  |  |   70|   331k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   294k|    return ranges::distance(source.data(), it);
   61|   331k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|   992k|    {
  314|   992k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|   992k|    {
  264|   992k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   992k|{
  441|   992k|    const auto beg = handler.get_ctx().begin();
  442|   992k|    detail::parse_format_string<false>(format, handler);
  443|   992k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   992k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 218k, False: 774k]
  |  |  ------------------
  ------------------
  444|   218k|        return unexpected(handler.error);
  445|   218k|    }
  446|   774k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   992k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  6.36M|    {
  425|  6.36M|        return ctx.get();
  426|  6.36M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  6.36M|    {
  268|  6.36M|        return contiguous_ctx;
  269|  6.36M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  1.76M|    {
  318|  1.76M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 1.76M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  1.76M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|   992k|{
   92|   992k|    auto arg = ctx.arg(id);
   93|   992k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   992k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 992k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   992k|    return arg;
   97|   992k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|   992k|    {
  347|   992k|        return parse_ctx.next_arg_id();
  348|   992k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|   992k|    {
  388|   992k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   992k|        set_arg_as_visited(arg_id);
  390|       |
  391|   992k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 992k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   992k|        auto specs = detail::format_specs{};
  401|   992k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   992k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   992k|            arg.type()};
  404|       |
  405|   992k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   992k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 992k]
  |  Branch (406:29): [True: 48.5k, False: 944k]
  ------------------
  407|  48.5k|            SCN_UNLIKELY_ATTR
  408|  48.5k|            on_error("Missing '}' in format string");
  409|  48.5k|            return parse_ctx.begin();
  410|  48.5k|        }
  411|   944k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   944k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.2k, False: 919k]
  |  |  ------------------
  ------------------
  412|  24.2k|            return parse_ctx.begin();
  413|  24.2k|        }
  414|   919k|        parse_ctx.advance_to(begin);
  415|       |
  416|   919k|        on_visit_scan_arg(
  417|   919k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   919k|                                           get_ctx().locale()},
  419|   919k|            arg);
  420|   919k|        return parse_ctx.begin();
  421|   944k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|   992k|    {
  112|   992k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|   919k|    {
  359|   919k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 919k]
  |  Branch (359:23): [True: 0, False: 919k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   919k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   919k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   919k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   919k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 145k, False: 774k]
  |  |  ------------------
  ------------------
  366|   145k|            on_error(r.error());
  367|   145k|        }
  368|   774k|        else {
  369|   774k|            get_ctx().advance_to(*r);
  370|   774k|        }
  371|   919k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   371k|{
  476|   371k|    const auto argcount = args.size();
  477|   371k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 40.4k, False: 331k]
  |  Branch (477:60): [True: 40.4k, False: 0]
  ------------------
  478|  40.4k|        auto arg = args.get(0);
  479|  40.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  40.4k|    static_cast<    \
  |  |  247|  40.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  40.4k|    }
  481|       |
  482|   331k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 331k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   331k|    SCN_UNLIKELY_ATTR
  490|   331k|    {
  491|   331k|        auto handler = format_handler<false, CharT>{
  492|   331k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   331k|    static_cast<    \
  |  |  247|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   331k|    static_cast<    \
  |  |  247|   331k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   331k|        return vscan_parse_format_string(format, handler);
  494|   331k|    }
  495|   331k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  60.6k|{
   69|  60.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 60.6k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  60.6k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  60.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 60.6k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  60.6k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  60.6k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  60.6k|    static_cast<    \
  |  |  247|  60.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  60.6k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  60.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  60.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  60.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36.3k, False: 24.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  36.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  36.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  36.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  36.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  36.3k|    }                                                  \
  |  |  |  |   70|  60.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  24.2k|    return it.position();
   86|  60.6k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   331k|    {
  314|   331k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   331k|    {
  241|   331k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   331k|{
  441|   331k|    const auto beg = handler.get_ctx().begin();
  442|   331k|    detail::parse_format_string<false>(format, handler);
  443|   331k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 218k, False: 113k]
  |  |  ------------------
  ------------------
  444|   218k|        return unexpected(handler.error);
  445|   218k|    }
  446|   113k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   331k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  1.73M|    {
  425|  1.73M|        return ctx.get();
  426|  1.73M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  1.73M|    {
  245|  1.73M|        return ctx;
  246|  1.73M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   444k|    {
  318|   444k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 444k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   444k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   331k|{
   92|   331k|    auto arg = ctx.arg(id);
   93|   331k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 331k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   331k|    return arg;
   97|   331k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   331k|    {
  347|   331k|        return parse_ctx.next_arg_id();
  348|   331k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   331k|    {
  388|   331k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   331k|        set_arg_as_visited(arg_id);
  390|       |
  391|   331k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 331k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   331k|        auto specs = detail::format_specs{};
  401|   331k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   331k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   331k|            arg.type()};
  404|       |
  405|   331k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   331k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 331k]
  |  Branch (406:29): [True: 48.5k, False: 282k]
  ------------------
  407|  48.5k|            SCN_UNLIKELY_ATTR
  408|  48.5k|            on_error("Missing '}' in format string");
  409|  48.5k|            return parse_ctx.begin();
  410|  48.5k|        }
  411|   282k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.2k, False: 258k]
  |  |  ------------------
  ------------------
  412|  24.2k|            return parse_ctx.begin();
  413|  24.2k|        }
  414|   258k|        parse_ctx.advance_to(begin);
  415|       |
  416|   258k|        on_visit_scan_arg(
  417|   258k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   258k|                                           get_ctx().locale()},
  419|   258k|            arg);
  420|   258k|        return parse_ctx.begin();
  421|   282k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   331k|    {
  112|   331k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   258k|    {
  359|   258k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 258k]
  |  Branch (359:23): [True: 0, False: 258k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   258k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   258k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 145k, False: 113k]
  |  |  ------------------
  ------------------
  366|   145k|            on_error(r.error());
  367|   145k|        }
  368|   113k|        else {
  369|   113k|            get_ctx().advance_to(*r);
  370|   113k|        }
  371|   258k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   111k|{
  502|   111k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   111k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  12.0k|{
  502|  12.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  12.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  12.0k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   110k|{
  502|   110k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   110k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  20.2k|{
  502|  20.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  20.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  20.2k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  1.09k|{
   52|  1.09k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  1.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|  1.09k|    std::copy(data.begin(), data.end(),
   57|  1.09k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  1.09k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  1.09k|    const auto wsv_reinterpret_size =
   62|  1.09k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 118, False: 977]
  ------------------
   63|  1.09k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  1.09k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  1.09k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  1.09k|    std::wstring_view wsv_transcoded;
   69|  1.09k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 926, False: 169]
  ------------------
   70|    926|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|    926|        else {
   79|    926|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|    926|            wstring_buffer_transcoded_wide.resize(size);
   81|    926|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|    926|                sv.data(), sv.size(),
   83|    926|                reinterpret_cast<char32_t*>(
   84|    926|                    wstring_buffer_transcoded_wide.data()));
   85|    926|        }
   86|    926|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|    926|    }
   88|       |
   89|  1.09k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  1.09k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  1.09k|{
  140|  1.09k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  1.09k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  1.09k|    buf.resize(sizeof...(Args));
  143|  1.09k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  1.09k|    return {buf.data(), buf.size()};
  145|  1.09k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  1.09k|{
  126|  1.09k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  1.09k|        return format_string_view_buffer;
  128|  1.09k|    }
  129|  1.09k|    else {
  130|  1.09k|        return wformat_string_view_buffer;
  131|  1.09k|    }
  132|  1.09k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  1.09k|{
  200|  1.09k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  1.09k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  1.09k|                                   format_strings);
  203|  1.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.09k|{
  151|       |    // Regular scan
  152|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 10.9k, False: 1.09k]
  ------------------
  153|  10.9k|        auto it = scn::ranges::begin(source);
  154|  87.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  87.6k|            auto result = scn::scan<T>(
  156|  87.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  87.6k|                scn::runtime_format(f));
  158|  87.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 76.6k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|  76.6k|            it = result->begin();
  162|  76.6k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan localized
  166|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 10.9k, False: 1.09k]
  ------------------
  167|  10.9k|        auto it = scn::ranges::begin(source);
  168|  87.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  87.6k|            auto result = scn::scan<T>(
  170|  87.6k|                global_locale,
  171|  87.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  87.6k|                scn::runtime_format(f));
  173|  87.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 10.9k, False: 76.6k]
  ------------------
  174|  10.9k|                break;
  175|  10.9k|            }
  176|  76.6k|            it = result->begin();
  177|  76.6k|        }
  178|  10.9k|    }
  179|       |
  180|       |    // scan_value
  181|  1.09k|    {
  182|  1.09k|        auto it = scn::ranges::begin(source);
  183|  17.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  17.6k|            auto result = scn::scan_value<T>(
  185|  17.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  17.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.09k, False: 16.5k]
  ------------------
  187|  1.09k|                break;
  188|  1.09k|            }
  189|  16.5k|            it = result->begin();
  190|  16.5k|        }
  191|  1.09k|    }
  192|  1.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.09k|{
  151|       |    // Regular scan
  152|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 10.9k, False: 1.09k]
  ------------------
  153|  10.9k|        auto it = scn::ranges::begin(source);
  154|  84.9k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  84.9k|            auto result = scn::scan<T>(
  156|  84.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  84.9k|                scn::runtime_format(f));
  158|  84.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 73.9k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|  73.9k|            it = result->begin();
  162|  73.9k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan localized
  166|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 10.9k, False: 1.09k]
  ------------------
  167|  10.9k|        auto it = scn::ranges::begin(source);
  168|  84.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  84.9k|            auto result = scn::scan<T>(
  170|  84.9k|                global_locale,
  171|  84.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  84.9k|                scn::runtime_format(f));
  173|  84.9k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 10.9k, False: 73.9k]
  ------------------
  174|  10.9k|                break;
  175|  10.9k|            }
  176|  73.9k|            it = result->begin();
  177|  73.9k|        }
  178|  10.9k|    }
  179|       |
  180|       |    // scan_value
  181|  1.09k|    {
  182|  1.09k|        auto it = scn::ranges::begin(source);
  183|  16.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  16.5k|            auto result = scn::scan_value<T>(
  185|  16.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  16.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.09k, False: 15.4k]
  ------------------
  187|  1.09k|                break;
  188|  1.09k|            }
  189|  15.4k|            it = result->begin();
  190|  15.4k|        }
  191|  1.09k|    }
  192|  1.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.09k|{
  151|       |    // Regular scan
  152|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 10.9k, False: 1.09k]
  ------------------
  153|  10.9k|        auto it = scn::ranges::begin(source);
  154|   110k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   110k|            auto result = scn::scan<T>(
  156|   110k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   110k|                scn::runtime_format(f));
  158|   110k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 99.4k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|  99.4k|            it = result->begin();
  162|  99.4k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan localized
  166|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 10.9k, False: 1.09k]
  ------------------
  167|  10.9k|        auto it = scn::ranges::begin(source);
  168|   110k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   110k|            auto result = scn::scan<T>(
  170|   110k|                global_locale,
  171|   110k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   110k|                scn::runtime_format(f));
  173|   110k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 10.9k, False: 99.4k]
  ------------------
  174|  10.9k|                break;
  175|  10.9k|            }
  176|  99.4k|            it = result->begin();
  177|  99.4k|        }
  178|  10.9k|    }
  179|       |
  180|       |    // scan_value
  181|  1.09k|    {
  182|  1.09k|        auto it = scn::ranges::begin(source);
  183|  20.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  20.7k|            auto result = scn::scan_value<T>(
  185|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  20.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.09k, False: 19.6k]
  ------------------
  187|  1.09k|                break;
  188|  1.09k|            }
  189|  19.6k|            it = result->begin();
  190|  19.6k|        }
  191|  1.09k|    }
  192|  1.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.09k|{
  151|       |    // Regular scan
  152|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 10.9k, False: 1.09k]
  ------------------
  153|  10.9k|        auto it = scn::ranges::begin(source);
  154|  94.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  94.6k|            auto result = scn::scan<T>(
  156|  94.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  94.6k|                scn::runtime_format(f));
  158|  94.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 83.6k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|  83.6k|            it = result->begin();
  162|  83.6k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan localized
  166|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 10.9k, False: 1.09k]
  ------------------
  167|  10.9k|        auto it = scn::ranges::begin(source);
  168|  94.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  94.6k|            auto result = scn::scan<T>(
  170|  94.6k|                global_locale,
  171|  94.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  94.6k|                scn::runtime_format(f));
  173|  94.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 10.9k, False: 83.6k]
  ------------------
  174|  10.9k|                break;
  175|  10.9k|            }
  176|  83.6k|            it = result->begin();
  177|  83.6k|        }
  178|  10.9k|    }
  179|       |
  180|       |    // scan_value
  181|  1.09k|    {
  182|  1.09k|        auto it = scn::ranges::begin(source);
  183|  17.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  17.6k|            auto result = scn::scan_value<T>(
  185|  17.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  17.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.09k, False: 16.5k]
  ------------------
  187|  1.09k|                break;
  188|  1.09k|            }
  189|  16.5k|            it = result->begin();
  190|  16.5k|        }
  191|  1.09k|    }
  192|  1.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.09k|{
  151|       |    // Regular scan
  152|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 10.9k, False: 1.09k]
  ------------------
  153|  10.9k|        auto it = scn::ranges::begin(source);
  154|   111k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   111k|            auto result = scn::scan<T>(
  156|   111k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   111k|                scn::runtime_format(f));
  158|   111k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 100k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|   100k|            it = result->begin();
  162|   100k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan localized
  166|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 10.9k, False: 1.09k]
  ------------------
  167|  10.9k|        auto it = scn::ranges::begin(source);
  168|   111k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   111k|            auto result = scn::scan<T>(
  170|   111k|                global_locale,
  171|   111k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   111k|                scn::runtime_format(f));
  173|   111k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 10.9k, False: 100k]
  ------------------
  174|  10.9k|                break;
  175|  10.9k|            }
  176|   100k|            it = result->begin();
  177|   100k|        }
  178|  10.9k|    }
  179|       |
  180|       |    // scan_value
  181|  1.09k|    {
  182|  1.09k|        auto it = scn::ranges::begin(source);
  183|  20.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  20.9k|            auto result = scn::scan_value<T>(
  185|  20.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  20.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.09k, False: 19.8k]
  ------------------
  187|  1.09k|                break;
  188|  1.09k|            }
  189|  19.8k|            it = result->begin();
  190|  19.8k|        }
  191|  1.09k|    }
  192|  1.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  1.09k|{
  151|       |    // Regular scan
  152|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 10.9k, False: 1.09k]
  ------------------
  153|  10.9k|        auto it = scn::ranges::begin(source);
  154|  95.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  95.6k|            auto result = scn::scan<T>(
  156|  95.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  95.6k|                scn::runtime_format(f));
  158|  95.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 84.6k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|  84.6k|            it = result->begin();
  162|  84.6k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan localized
  166|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 10.9k, False: 1.09k]
  ------------------
  167|  10.9k|        auto it = scn::ranges::begin(source);
  168|  95.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  95.6k|            auto result = scn::scan<T>(
  170|  95.6k|                global_locale,
  171|  95.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  95.6k|                scn::runtime_format(f));
  173|  95.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 10.9k, False: 84.6k]
  ------------------
  174|  10.9k|                break;
  175|  10.9k|            }
  176|  84.6k|            it = result->begin();
  177|  84.6k|        }
  178|  10.9k|    }
  179|       |
  180|       |    // scan_value
  181|  1.09k|    {
  182|  1.09k|        auto it = scn::ranges::begin(source);
  183|  17.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  17.8k|            auto result = scn::scan_value<T>(
  185|  17.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  17.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.09k, False: 16.7k]
  ------------------
  187|  1.09k|                break;
  188|  1.09k|            }
  189|  16.7k|            it = result->begin();
  190|  16.7k|        }
  191|  1.09k|    }
  192|  1.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.09k|{
  151|       |    // Regular scan
  152|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 10.9k, False: 1.09k]
  ------------------
  153|  10.9k|        auto it = scn::ranges::begin(source);
  154|  13.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  13.1k|            auto result = scn::scan<T>(
  156|  13.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  13.1k|                scn::runtime_format(f));
  158|  13.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 2.20k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|  2.20k|            it = result->begin();
  162|  2.20k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan localized
  166|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 10.9k, False: 1.09k]
  ------------------
  167|  10.9k|        auto it = scn::ranges::begin(source);
  168|  13.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  13.1k|            auto result = scn::scan<T>(
  170|  13.1k|                global_locale,
  171|  13.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  13.1k|                scn::runtime_format(f));
  173|  13.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 10.9k, False: 2.20k]
  ------------------
  174|  10.9k|                break;
  175|  10.9k|            }
  176|  2.20k|            it = result->begin();
  177|  2.20k|        }
  178|  10.9k|    }
  179|       |
  180|       |    // scan_value
  181|  1.09k|    {
  182|  1.09k|        auto it = scn::ranges::begin(source);
  183|  1.09k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  1.09k|            auto result = scn::scan_value<T>(
  185|  1.09k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  1.09k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.09k, False: 2]
  ------------------
  187|  1.09k|                break;
  188|  1.09k|            }
  189|      2|            it = result->begin();
  190|      2|        }
  191|  1.09k|    }
  192|  1.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.09k|{
  151|       |    // Regular scan
  152|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 10.9k, False: 1.09k]
  ------------------
  153|  10.9k|        auto it = scn::ranges::begin(source);
  154|  17.5k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  17.5k|            auto result = scn::scan<T>(
  156|  17.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  17.5k|                scn::runtime_format(f));
  158|  17.5k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 6.57k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|  6.57k|            it = result->begin();
  162|  6.57k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan localized
  166|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 10.9k, False: 1.09k]
  ------------------
  167|  10.9k|        auto it = scn::ranges::begin(source);
  168|  17.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  17.5k|            auto result = scn::scan<T>(
  170|  17.5k|                global_locale,
  171|  17.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  17.5k|                scn::runtime_format(f));
  173|  17.5k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 10.9k, False: 6.57k]
  ------------------
  174|  10.9k|                break;
  175|  10.9k|            }
  176|  6.57k|            it = result->begin();
  177|  6.57k|        }
  178|  10.9k|    }
  179|       |
  180|       |    // scan_value
  181|  1.09k|    {
  182|  1.09k|        auto it = scn::ranges::begin(source);
  183|  2.19k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.19k|            auto result = scn::scan_value<T>(
  185|  2.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.19k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.09k, False: 1.09k]
  ------------------
  187|  1.09k|                break;
  188|  1.09k|            }
  189|  1.09k|            it = result->begin();
  190|  1.09k|        }
  191|  1.09k|    }
  192|  1.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.09k|{
  151|       |    // Regular scan
  152|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 10.9k, False: 1.09k]
  ------------------
  153|  10.9k|        auto it = scn::ranges::begin(source);
  154|  18.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  18.6k|            auto result = scn::scan<T>(
  156|  18.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  18.6k|                scn::runtime_format(f));
  158|  18.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 7.66k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|  7.66k|            it = result->begin();
  162|  7.66k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan localized
  166|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 10.9k, False: 1.09k]
  ------------------
  167|  10.9k|        auto it = scn::ranges::begin(source);
  168|  18.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.6k|            auto result = scn::scan<T>(
  170|  18.6k|                global_locale,
  171|  18.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  18.6k|                scn::runtime_format(f));
  173|  18.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 10.9k, False: 7.66k]
  ------------------
  174|  10.9k|                break;
  175|  10.9k|            }
  176|  7.66k|            it = result->begin();
  177|  7.66k|        }
  178|  10.9k|    }
  179|       |
  180|       |    // scan_value
  181|  1.09k|    {
  182|  1.09k|        auto it = scn::ranges::begin(source);
  183|  2.19k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.19k|            auto result = scn::scan_value<T>(
  185|  2.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.19k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.09k, False: 1.09k]
  ------------------
  187|  1.09k|                break;
  188|  1.09k|            }
  189|  1.09k|            it = result->begin();
  190|  1.09k|        }
  191|  1.09k|    }
  192|  1.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.09k|{
  151|       |    // Regular scan
  152|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 10.9k, False: 1.09k]
  ------------------
  153|  10.9k|        auto it = scn::ranges::begin(source);
  154|  18.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  18.6k|            auto result = scn::scan<T>(
  156|  18.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  18.6k|                scn::runtime_format(f));
  158|  18.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 7.66k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|  7.66k|            it = result->begin();
  162|  7.66k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan localized
  166|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 10.9k, False: 1.09k]
  ------------------
  167|  10.9k|        auto it = scn::ranges::begin(source);
  168|  18.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.6k|            auto result = scn::scan<T>(
  170|  18.6k|                global_locale,
  171|  18.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  18.6k|                scn::runtime_format(f));
  173|  18.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 10.9k, False: 7.66k]
  ------------------
  174|  10.9k|                break;
  175|  10.9k|            }
  176|  7.66k|            it = result->begin();
  177|  7.66k|        }
  178|  10.9k|    }
  179|       |
  180|       |    // scan_value
  181|  1.09k|    {
  182|  1.09k|        auto it = scn::ranges::begin(source);
  183|  2.19k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.19k|            auto result = scn::scan_value<T>(
  185|  2.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.19k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.09k, False: 1.09k]
  ------------------
  187|  1.09k|                break;
  188|  1.09k|            }
  189|  1.09k|            it = result->begin();
  190|  1.09k|        }
  191|  1.09k|    }
  192|  1.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.09k|{
  151|       |    // Regular scan
  152|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 10.9k, False: 1.09k]
  ------------------
  153|  10.9k|        auto it = scn::ranges::begin(source);
  154|  18.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  18.6k|            auto result = scn::scan<T>(
  156|  18.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  18.6k|                scn::runtime_format(f));
  158|  18.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 7.66k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|  7.66k|            it = result->begin();
  162|  7.66k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan localized
  166|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 10.9k, False: 1.09k]
  ------------------
  167|  10.9k|        auto it = scn::ranges::begin(source);
  168|  18.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.6k|            auto result = scn::scan<T>(
  170|  18.6k|                global_locale,
  171|  18.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  18.6k|                scn::runtime_format(f));
  173|  18.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 10.9k, False: 7.66k]
  ------------------
  174|  10.9k|                break;
  175|  10.9k|            }
  176|  7.66k|            it = result->begin();
  177|  7.66k|        }
  178|  10.9k|    }
  179|       |
  180|       |    // scan_value
  181|  1.09k|    {
  182|  1.09k|        auto it = scn::ranges::begin(source);
  183|  2.19k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.19k|            auto result = scn::scan_value<T>(
  185|  2.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.19k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.09k, False: 1.09k]
  ------------------
  187|  1.09k|                break;
  188|  1.09k|            }
  189|  1.09k|            it = result->begin();
  190|  1.09k|        }
  191|  1.09k|    }
  192|  1.09k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  1.09k|{
  151|       |    // Regular scan
  152|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 10.9k, False: 1.09k]
  ------------------
  153|  10.9k|        auto it = scn::ranges::begin(source);
  154|  18.6k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  18.6k|            auto result = scn::scan<T>(
  156|  18.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  18.6k|                scn::runtime_format(f));
  158|  18.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.9k, False: 7.66k]
  ------------------
  159|  10.9k|                break;
  160|  10.9k|            }
  161|  7.66k|            it = result->begin();
  162|  7.66k|        }
  163|  10.9k|    }
  164|       |
  165|       |    // scan localized
  166|  10.9k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 10.9k, False: 1.09k]
  ------------------
  167|  10.9k|        auto it = scn::ranges::begin(source);
  168|  18.6k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.6k|            auto result = scn::scan<T>(
  170|  18.6k|                global_locale,
  171|  18.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  18.6k|                scn::runtime_format(f));
  173|  18.6k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 10.9k, False: 7.66k]
  ------------------
  174|  10.9k|                break;
  175|  10.9k|            }
  176|  7.66k|            it = result->begin();
  177|  7.66k|        }
  178|  10.9k|    }
  179|       |
  180|       |    // scan_value
  181|  1.09k|    {
  182|  1.09k|        auto it = scn::ranges::begin(source);
  183|  2.19k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.19k|            auto result = scn::scan_value<T>(
  185|  2.19k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.19k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 1.09k, False: 1.09k]
  ------------------
  187|  1.09k|                break;
  188|  1.09k|            }
  189|  1.09k|            it = result->begin();
  190|  1.09k|        }
  191|  1.09k|    }
  192|  1.09k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  1.09k|{
  109|  1.09k|    using char_type = ranges::range_value_t<Source>;
  110|  1.09k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  1.09k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  1.09k|              std::back_inserter(deque));
  113|  1.09k|    return deque;
  114|  1.09k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  1.09k|{
   98|  1.09k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  1.09k|        return noncontiguous_buffer;
  100|  1.09k|    }
  101|  1.09k|    else {
  102|  1.09k|        return wnoncontiguous_buffer;
  103|  1.09k|    }
  104|  1.09k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  1.09k|{
  140|  1.09k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  1.09k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  1.09k|    buf.resize(sizeof...(Args));
  143|  1.09k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  1.09k|    return {buf.data(), buf.size()};
  145|  1.09k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  1.09k|{
  126|  1.09k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  1.09k|        return format_string_view_buffer;
  128|  1.09k|    }
  129|  1.09k|    else {
  130|  1.09k|        return wformat_string_view_buffer;
  131|  1.09k|    }
  132|  1.09k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  2.02k|{
  200|  2.02k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  2.02k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  2.02k|                                   format_strings);
  203|  2.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.02k|{
  151|       |    // Regular scan
  152|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.2k, False: 2.02k]
  ------------------
  153|  20.2k|        auto it = scn::ranges::begin(source);
  154|  92.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  92.1k|            auto result = scn::scan<T>(
  156|  92.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  92.1k|                scn::runtime_format(f));
  158|  92.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.2k, False: 71.9k]
  ------------------
  159|  20.2k|                break;
  160|  20.2k|            }
  161|  71.9k|            it = result->begin();
  162|  71.9k|        }
  163|  20.2k|    }
  164|       |
  165|       |    // scan localized
  166|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.2k, False: 2.02k]
  ------------------
  167|  20.2k|        auto it = scn::ranges::begin(source);
  168|  92.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  92.1k|            auto result = scn::scan<T>(
  170|  92.1k|                global_locale,
  171|  92.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  92.1k|                scn::runtime_format(f));
  173|  92.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.2k, False: 71.9k]
  ------------------
  174|  20.2k|                break;
  175|  20.2k|            }
  176|  71.9k|            it = result->begin();
  177|  71.9k|        }
  178|  20.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.02k|    {
  182|  2.02k|        auto it = scn::ranges::begin(source);
  183|  17.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  17.6k|            auto result = scn::scan_value<T>(
  185|  17.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  17.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.02k, False: 15.6k]
  ------------------
  187|  2.02k|                break;
  188|  2.02k|            }
  189|  15.6k|            it = result->begin();
  190|  15.6k|        }
  191|  2.02k|    }
  192|  2.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.02k|{
  151|       |    // Regular scan
  152|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.2k, False: 2.02k]
  ------------------
  153|  20.2k|        auto it = scn::ranges::begin(source);
  154|  89.7k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  89.7k|            auto result = scn::scan<T>(
  156|  89.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  89.7k|                scn::runtime_format(f));
  158|  89.7k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.2k, False: 69.5k]
  ------------------
  159|  20.2k|                break;
  160|  20.2k|            }
  161|  69.5k|            it = result->begin();
  162|  69.5k|        }
  163|  20.2k|    }
  164|       |
  165|       |    // scan localized
  166|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.2k, False: 2.02k]
  ------------------
  167|  20.2k|        auto it = scn::ranges::begin(source);
  168|  89.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  89.7k|            auto result = scn::scan<T>(
  170|  89.7k|                global_locale,
  171|  89.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  89.7k|                scn::runtime_format(f));
  173|  89.7k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.2k, False: 69.5k]
  ------------------
  174|  20.2k|                break;
  175|  20.2k|            }
  176|  69.5k|            it = result->begin();
  177|  69.5k|        }
  178|  20.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.02k|    {
  182|  2.02k|        auto it = scn::ranges::begin(source);
  183|  16.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  16.5k|            auto result = scn::scan_value<T>(
  185|  16.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  16.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.02k, False: 14.5k]
  ------------------
  187|  2.02k|                break;
  188|  2.02k|            }
  189|  14.5k|            it = result->begin();
  190|  14.5k|        }
  191|  2.02k|    }
  192|  2.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.02k|{
  151|       |    // Regular scan
  152|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.2k, False: 2.02k]
  ------------------
  153|  20.2k|        auto it = scn::ranges::begin(source);
  154|   112k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   112k|            auto result = scn::scan<T>(
  156|   112k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   112k|                scn::runtime_format(f));
  158|   112k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.2k, False: 92.0k]
  ------------------
  159|  20.2k|                break;
  160|  20.2k|            }
  161|  92.0k|            it = result->begin();
  162|  92.0k|        }
  163|  20.2k|    }
  164|       |
  165|       |    // scan localized
  166|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.2k, False: 2.02k]
  ------------------
  167|  20.2k|        auto it = scn::ranges::begin(source);
  168|   112k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   112k|            auto result = scn::scan<T>(
  170|   112k|                global_locale,
  171|   112k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   112k|                scn::runtime_format(f));
  173|   112k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.2k, False: 92.0k]
  ------------------
  174|  20.2k|                break;
  175|  20.2k|            }
  176|  92.0k|            it = result->begin();
  177|  92.0k|        }
  178|  20.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.02k|    {
  182|  2.02k|        auto it = scn::ranges::begin(source);
  183|  20.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  20.2k|            auto result = scn::scan_value<T>(
  185|  20.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  20.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.02k, False: 18.2k]
  ------------------
  187|  2.02k|                break;
  188|  2.02k|            }
  189|  18.2k|            it = result->begin();
  190|  18.2k|        }
  191|  2.02k|    }
  192|  2.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.02k|{
  151|       |    // Regular scan
  152|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.2k, False: 2.02k]
  ------------------
  153|  20.2k|        auto it = scn::ranges::begin(source);
  154|  98.9k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  98.9k|            auto result = scn::scan<T>(
  156|  98.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  98.9k|                scn::runtime_format(f));
  158|  98.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.2k, False: 78.7k]
  ------------------
  159|  20.2k|                break;
  160|  20.2k|            }
  161|  78.7k|            it = result->begin();
  162|  78.7k|        }
  163|  20.2k|    }
  164|       |
  165|       |    // scan localized
  166|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.2k, False: 2.02k]
  ------------------
  167|  20.2k|        auto it = scn::ranges::begin(source);
  168|  98.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  98.9k|            auto result = scn::scan<T>(
  170|  98.9k|                global_locale,
  171|  98.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  98.9k|                scn::runtime_format(f));
  173|  98.9k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.2k, False: 78.7k]
  ------------------
  174|  20.2k|                break;
  175|  20.2k|            }
  176|  78.7k|            it = result->begin();
  177|  78.7k|        }
  178|  20.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.02k|    {
  182|  2.02k|        auto it = scn::ranges::begin(source);
  183|  17.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  17.6k|            auto result = scn::scan_value<T>(
  185|  17.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  17.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.02k, False: 15.6k]
  ------------------
  187|  2.02k|                break;
  188|  2.02k|            }
  189|  15.6k|            it = result->begin();
  190|  15.6k|        }
  191|  2.02k|    }
  192|  2.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.02k|{
  151|       |    // Regular scan
  152|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.2k, False: 2.02k]
  ------------------
  153|  20.2k|        auto it = scn::ranges::begin(source);
  154|   113k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   113k|            auto result = scn::scan<T>(
  156|   113k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   113k|                scn::runtime_format(f));
  158|   113k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.2k, False: 93.4k]
  ------------------
  159|  20.2k|                break;
  160|  20.2k|            }
  161|  93.4k|            it = result->begin();
  162|  93.4k|        }
  163|  20.2k|    }
  164|       |
  165|       |    // scan localized
  166|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.2k, False: 2.02k]
  ------------------
  167|  20.2k|        auto it = scn::ranges::begin(source);
  168|   113k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   113k|            auto result = scn::scan<T>(
  170|   113k|                global_locale,
  171|   113k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   113k|                scn::runtime_format(f));
  173|   113k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.2k, False: 93.4k]
  ------------------
  174|  20.2k|                break;
  175|  20.2k|            }
  176|  93.4k|            it = result->begin();
  177|  93.4k|        }
  178|  20.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.02k|    {
  182|  2.02k|        auto it = scn::ranges::begin(source);
  183|  20.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  20.5k|            auto result = scn::scan_value<T>(
  185|  20.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  20.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.02k, False: 18.4k]
  ------------------
  187|  2.02k|                break;
  188|  2.02k|            }
  189|  18.4k|            it = result->begin();
  190|  18.4k|        }
  191|  2.02k|    }
  192|  2.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.02k|{
  151|       |    // Regular scan
  152|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.2k, False: 2.02k]
  ------------------
  153|  20.2k|        auto it = scn::ranges::begin(source);
  154|  99.8k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  99.8k|            auto result = scn::scan<T>(
  156|  99.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  99.8k|                scn::runtime_format(f));
  158|  99.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.2k, False: 79.6k]
  ------------------
  159|  20.2k|                break;
  160|  20.2k|            }
  161|  79.6k|            it = result->begin();
  162|  79.6k|        }
  163|  20.2k|    }
  164|       |
  165|       |    // scan localized
  166|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.2k, False: 2.02k]
  ------------------
  167|  20.2k|        auto it = scn::ranges::begin(source);
  168|  99.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  99.8k|            auto result = scn::scan<T>(
  170|  99.8k|                global_locale,
  171|  99.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  99.8k|                scn::runtime_format(f));
  173|  99.8k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.2k, False: 79.6k]
  ------------------
  174|  20.2k|                break;
  175|  20.2k|            }
  176|  79.6k|            it = result->begin();
  177|  79.6k|        }
  178|  20.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.02k|    {
  182|  2.02k|        auto it = scn::ranges::begin(source);
  183|  17.7k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  17.7k|            auto result = scn::scan_value<T>(
  185|  17.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  17.7k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.02k, False: 15.7k]
  ------------------
  187|  2.02k|                break;
  188|  2.02k|            }
  189|  15.7k|            it = result->begin();
  190|  15.7k|        }
  191|  2.02k|    }
  192|  2.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.02k|{
  151|       |    // Regular scan
  152|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.2k, False: 2.02k]
  ------------------
  153|  20.2k|        auto it = scn::ranges::begin(source);
  154|  24.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  24.2k|            auto result = scn::scan<T>(
  156|  24.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  24.2k|                scn::runtime_format(f));
  158|  24.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.2k, False: 4.05k]
  ------------------
  159|  20.2k|                break;
  160|  20.2k|            }
  161|  4.05k|            it = result->begin();
  162|  4.05k|        }
  163|  20.2k|    }
  164|       |
  165|       |    // scan localized
  166|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.2k, False: 2.02k]
  ------------------
  167|  20.2k|        auto it = scn::ranges::begin(source);
  168|  24.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  24.2k|            auto result = scn::scan<T>(
  170|  24.2k|                global_locale,
  171|  24.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  24.2k|                scn::runtime_format(f));
  173|  24.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.2k, False: 4.05k]
  ------------------
  174|  20.2k|                break;
  175|  20.2k|            }
  176|  4.05k|            it = result->begin();
  177|  4.05k|        }
  178|  20.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.02k|    {
  182|  2.02k|        auto it = scn::ranges::begin(source);
  183|  2.02k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.02k|            auto result = scn::scan_value<T>(
  185|  2.02k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.02k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.02k, False: 3]
  ------------------
  187|  2.02k|                break;
  188|  2.02k|            }
  189|      3|            it = result->begin();
  190|      3|        }
  191|  2.02k|    }
  192|  2.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.02k|{
  151|       |    // Regular scan
  152|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.2k, False: 2.02k]
  ------------------
  153|  20.2k|        auto it = scn::ranges::begin(source);
  154|  24.2k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  24.2k|            auto result = scn::scan<T>(
  156|  24.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  24.2k|                scn::runtime_format(f));
  158|  24.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.2k, False: 4.05k]
  ------------------
  159|  20.2k|                break;
  160|  20.2k|            }
  161|  4.05k|            it = result->begin();
  162|  4.05k|        }
  163|  20.2k|    }
  164|       |
  165|       |    // scan localized
  166|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.2k, False: 2.02k]
  ------------------
  167|  20.2k|        auto it = scn::ranges::begin(source);
  168|  24.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  24.2k|            auto result = scn::scan<T>(
  170|  24.2k|                global_locale,
  171|  24.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  24.2k|                scn::runtime_format(f));
  173|  24.2k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.2k, False: 4.05k]
  ------------------
  174|  20.2k|                break;
  175|  20.2k|            }
  176|  4.05k|            it = result->begin();
  177|  4.05k|        }
  178|  20.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.02k|    {
  182|  2.02k|        auto it = scn::ranges::begin(source);
  183|  2.02k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  2.02k|            auto result = scn::scan_value<T>(
  185|  2.02k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  2.02k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.02k, False: 3]
  ------------------
  187|  2.02k|                break;
  188|  2.02k|            }
  189|      3|            it = result->begin();
  190|      3|        }
  191|  2.02k|    }
  192|  2.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.02k|{
  151|       |    // Regular scan
  152|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.2k, False: 2.02k]
  ------------------
  153|  20.2k|        auto it = scn::ranges::begin(source);
  154|  34.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  34.3k|            auto result = scn::scan<T>(
  156|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.3k|                scn::runtime_format(f));
  158|  34.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.2k, False: 14.1k]
  ------------------
  159|  20.2k|                break;
  160|  20.2k|            }
  161|  14.1k|            it = result->begin();
  162|  14.1k|        }
  163|  20.2k|    }
  164|       |
  165|       |    // scan localized
  166|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.2k, False: 2.02k]
  ------------------
  167|  20.2k|        auto it = scn::ranges::begin(source);
  168|  34.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.3k|            auto result = scn::scan<T>(
  170|  34.3k|                global_locale,
  171|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  34.3k|                scn::runtime_format(f));
  173|  34.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.2k, False: 14.1k]
  ------------------
  174|  20.2k|                break;
  175|  20.2k|            }
  176|  14.1k|            it = result->begin();
  177|  14.1k|        }
  178|  20.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.02k|    {
  182|  2.02k|        auto it = scn::ranges::begin(source);
  183|  4.04k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.04k|            auto result = scn::scan_value<T>(
  185|  4.04k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.04k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.02k, False: 2.02k]
  ------------------
  187|  2.02k|                break;
  188|  2.02k|            }
  189|  2.02k|            it = result->begin();
  190|  2.02k|        }
  191|  2.02k|    }
  192|  2.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.02k|{
  151|       |    // Regular scan
  152|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.2k, False: 2.02k]
  ------------------
  153|  20.2k|        auto it = scn::ranges::begin(source);
  154|  34.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  34.3k|            auto result = scn::scan<T>(
  156|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.3k|                scn::runtime_format(f));
  158|  34.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.2k, False: 14.1k]
  ------------------
  159|  20.2k|                break;
  160|  20.2k|            }
  161|  14.1k|            it = result->begin();
  162|  14.1k|        }
  163|  20.2k|    }
  164|       |
  165|       |    // scan localized
  166|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.2k, False: 2.02k]
  ------------------
  167|  20.2k|        auto it = scn::ranges::begin(source);
  168|  34.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.3k|            auto result = scn::scan<T>(
  170|  34.3k|                global_locale,
  171|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  34.3k|                scn::runtime_format(f));
  173|  34.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.2k, False: 14.1k]
  ------------------
  174|  20.2k|                break;
  175|  20.2k|            }
  176|  14.1k|            it = result->begin();
  177|  14.1k|        }
  178|  20.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.02k|    {
  182|  2.02k|        auto it = scn::ranges::begin(source);
  183|  4.04k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.04k|            auto result = scn::scan_value<T>(
  185|  4.04k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.04k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.02k, False: 2.02k]
  ------------------
  187|  2.02k|                break;
  188|  2.02k|            }
  189|  2.02k|            it = result->begin();
  190|  2.02k|        }
  191|  2.02k|    }
  192|  2.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.02k|{
  151|       |    // Regular scan
  152|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.2k, False: 2.02k]
  ------------------
  153|  20.2k|        auto it = scn::ranges::begin(source);
  154|  34.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  34.3k|            auto result = scn::scan<T>(
  156|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.3k|                scn::runtime_format(f));
  158|  34.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.2k, False: 14.1k]
  ------------------
  159|  20.2k|                break;
  160|  20.2k|            }
  161|  14.1k|            it = result->begin();
  162|  14.1k|        }
  163|  20.2k|    }
  164|       |
  165|       |    // scan localized
  166|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.2k, False: 2.02k]
  ------------------
  167|  20.2k|        auto it = scn::ranges::begin(source);
  168|  34.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.3k|            auto result = scn::scan<T>(
  170|  34.3k|                global_locale,
  171|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  34.3k|                scn::runtime_format(f));
  173|  34.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.2k, False: 14.1k]
  ------------------
  174|  20.2k|                break;
  175|  20.2k|            }
  176|  14.1k|            it = result->begin();
  177|  14.1k|        }
  178|  20.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.02k|    {
  182|  2.02k|        auto it = scn::ranges::begin(source);
  183|  4.04k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.04k|            auto result = scn::scan_value<T>(
  185|  4.04k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.04k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.02k, False: 2.02k]
  ------------------
  187|  2.02k|                break;
  188|  2.02k|            }
  189|  2.02k|            it = result->begin();
  190|  2.02k|        }
  191|  2.02k|    }
  192|  2.02k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.02k|{
  151|       |    // Regular scan
  152|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 20.2k, False: 2.02k]
  ------------------
  153|  20.2k|        auto it = scn::ranges::begin(source);
  154|  34.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  34.3k|            auto result = scn::scan<T>(
  156|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.3k|                scn::runtime_format(f));
  158|  34.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 20.2k, False: 14.1k]
  ------------------
  159|  20.2k|                break;
  160|  20.2k|            }
  161|  14.1k|            it = result->begin();
  162|  14.1k|        }
  163|  20.2k|    }
  164|       |
  165|       |    // scan localized
  166|  20.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 20.2k, False: 2.02k]
  ------------------
  167|  20.2k|        auto it = scn::ranges::begin(source);
  168|  34.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  34.3k|            auto result = scn::scan<T>(
  170|  34.3k|                global_locale,
  171|  34.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  34.3k|                scn::runtime_format(f));
  173|  34.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 20.2k, False: 14.1k]
  ------------------
  174|  20.2k|                break;
  175|  20.2k|            }
  176|  14.1k|            it = result->begin();
  177|  14.1k|        }
  178|  20.2k|    }
  179|       |
  180|       |    // scan_value
  181|  2.02k|    {
  182|  2.02k|        auto it = scn::ranges::begin(source);
  183|  4.04k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.04k|            auto result = scn::scan_value<T>(
  185|  4.04k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.04k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.02k, False: 2.02k]
  ------------------
  187|  2.02k|                break;
  188|  2.02k|            }
  189|  2.02k|            it = result->begin();
  190|  2.02k|        }
  191|  2.02k|    }
  192|  2.02k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  2.02k|{
  109|  2.02k|    using char_type = ranges::range_value_t<Source>;
  110|  2.02k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  2.02k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  2.02k|              std::back_inserter(deque));
  113|  2.02k|    return deque;
  114|  2.02k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  2.02k|{
   98|  2.02k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  2.02k|        return noncontiguous_buffer;
  100|  2.02k|    }
  101|  2.02k|    else {
  102|  2.02k|        return wnoncontiguous_buffer;
  103|  2.02k|    }
  104|  2.02k|}

LLVMFuzzerTestOneInput:
   59|  1.09k|{
   60|  1.09k|    scn::fuzz::run({data, size});
   61|  1.09k|    return 0;
   62|  1.09k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  1.09k|{
   36|  1.09k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 1.09k]
  |  Branch (36:42): [True: 0, False: 1.09k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  1.09k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   41|       |
   42|  1.09k|    auto f =
   43|  1.09k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  1.09k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  1.09k|    do_basic_run(sv, f);
   46|       |
   47|  1.09k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   48|  1.09k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  1.09k|                                          L"{:'}", L"{:'L}");
   50|  1.09k|    do_basic_run(wsv_reinterpret, wf);
   51|  1.09k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 926, False: 169]
  ------------------
   52|    926|        do_basic_run(wsv_transcode, wf);
   53|    926|    }
   54|  1.09k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  1.09k|{
   25|  1.09k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.09k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.09k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.09k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.09k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.09k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.09k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  1.09k|{
   25|  1.09k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.09k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.09k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.09k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.09k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.09k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.09k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.02k|{
   25|  2.02k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.02k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.02k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.02k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.02k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.02k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.02k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.02k|{
   25|  2.02k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.02k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.02k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.02k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.02k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.02k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.02k|}

