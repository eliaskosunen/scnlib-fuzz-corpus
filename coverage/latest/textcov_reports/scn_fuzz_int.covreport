_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|   502k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|   949k|{
 3803|   949k|    if constexpr (sizeof(U) == 1) {
 3804|   949k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|   949k|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|   949k|{
 3767|   949k|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|   949k|    SCN_GCC_COMPAT_PUSH
 3770|   949k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|   949k|    constexpr char lengths[] =
 3772|   949k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|   949k|        "\1\1\1\1\1\1\1\1"
 3774|   949k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|   949k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|   949k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|   949k|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|   949k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|   949k|    SCN_GCC_COMPAT_POP
 3781|   949k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   930k|{
 4009|   930k|    if constexpr (sizeof(CharT) == 1) {
 4010|   930k|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|   930k|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|   930k|{
 3822|   930k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   930k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   930k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|   930k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   930k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   930k|    };
 3827|       |
 3828|   930k|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 919k, False: 11.5k]
  ------------------
 3829|   919k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 1.20k, False: 917k]
  ------------------
 3830|  1.20k|            SCN_UNLIKELY_ATTR
 3831|  1.20k|            return invalid_code_point;
 3832|  1.20k|        }
 3833|   917k|        return static_cast<char32_t>(input[0]);
 3834|   919k|    }
 3835|       |
 3836|  11.5k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 5.80k, False: 5.74k]
  ------------------
 3837|  5.80k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 44, False: 5.75k]
  ------------------
 3838|     44|            SCN_UNLIKELY_ATTR
 3839|     44|            return invalid_code_point;
 3840|     44|        }
 3841|  5.75k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 916, False: 4.84k]
  ------------------
 3842|    916|            SCN_UNLIKELY_ATTR
 3843|    916|            return invalid_code_point;
 3844|    916|        }
 3845|       |
 3846|  4.84k|        char32_t cp{};
 3847|  4.84k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  4.84k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  4.84k|        return cp;
 3850|  5.75k|    }
 3851|       |
 3852|  5.74k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 4.52k, False: 1.21k]
  ------------------
 3853|  4.52k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 53, False: 4.46k]
  ------------------
 3854|     53|            SCN_UNLIKELY_ATTR
 3855|     53|            return invalid_code_point;
 3856|     53|        }
 3857|  4.46k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 614, False: 3.85k]
  ------------------
 3858|  4.46k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 260, False: 3.59k]
  ------------------
 3859|    874|            SCN_UNLIKELY_ATTR
 3860|    874|            return invalid_code_point;
 3861|    874|        }
 3862|       |
 3863|  3.59k|        char32_t cp{};
 3864|  3.59k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|  3.59k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|  3.59k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|  3.59k|        return cp;
 3868|  4.46k|    }
 3869|       |
 3870|  1.21k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 1.21k, False: 0]
  ------------------
 3871|  1.21k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 1.21k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  1.21k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 264, False: 955]
  ------------------
 3876|    264|            SCN_UNLIKELY_ATTR
 3877|    264|            return invalid_code_point;
 3878|    264|        }
 3879|    955|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 452, False: 503]
  ------------------
 3880|    955|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 13, False: 490]
  ------------------
 3881|    955|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 3, False: 487]
  ------------------
 3882|    468|            SCN_UNLIKELY_ATTR
 3883|    468|            return invalid_code_point;
 3884|    468|        }
 3885|       |
 3886|    487|        char32_t cp{};
 3887|    487|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|    487|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|    487|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|    487|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|    487|        return cp;
 3892|    955|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  16.0k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  16.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  16.0k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|   664k|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|   664k|    else {
 3701|   664k|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|   664k|                                       to_address(first), to_address(last)))};
 3703|   664k|    }
 3704|   664k|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.00M|{
  326|  2.00M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.00M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  4.27M|{
  304|  4.27M|    return p;
  305|  4.27M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  1.50M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  1.50M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  1.50M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.50M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  1.50M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  1.50M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   100k|    {
 2724|   100k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   100k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   100k|    {
 2705|   100k|        return decay_copy(t.begin());
 2706|   100k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  3.93M|{
 1949|  3.93M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.93M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   989k|    {
 2781|   989k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   989k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   989k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   989k|    {
 2763|   989k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   989k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   989k|    }
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  37.3k|{
 8878|  37.3k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  37.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  37.3k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDav:
 5405|   149k|{
 5406|   149k|    detail::check_scan_arg_types<Args...>();
 5407|   149k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   149k|}
_ZN3scn2v36detail20check_scan_arg_typesIJaEEEvv:
 5144|   228k|{
 5145|   228k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   228k|                  "Scan argument types must be default constructible");
 5147|   228k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   228k|                  "Scan argument types must be Destructible");
 5149|   228k|    static_assert(
 5150|   228k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   228k|        "Scan argument types must not be references");
 5152|   228k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2Ev:
 5357|   149k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   149k|    {
 5359|   149k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   149k|    {
 5370|   149k|        return {detail::make_arg<
 5371|   149k|            kind, Context,
 5372|   149k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   149k|                                 typename Context::char_type>::value>(args)...};
 5374|   149k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEEPvRT2_:
 5179|   149k|{
 5180|   149k|    return make_value<Context>(value).ref_value;
 5181|   149k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
 5129|   161k|{
 5130|   161k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   161k|                                  needs_context_tag>) {
 5134|   161k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   161k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERa:
 4968|   161k|    {                                                                        \
 4969|   161k|        return val;                                                          \
 4970|   161k|    }
_ZN3scn2v36detail15make_value_implIRaEEDaOT_:
 5098|   228k|{
 5099|   228k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   228k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   228k|    constexpr bool scannable_char =
 5103|   228k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   228k|    static_assert(scannable_char,
 5105|   228k|                  "Cannot scan an argument of an unsupported character "
 5106|   228k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   228k|    constexpr bool scannable_const =
 5109|   228k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   228k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   228k|    constexpr bool scannable_disabled =
 5113|   228k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   228k|    static_assert(scannable_disabled,
 5115|   228k|                  "Cannot scan an argument that has been disabled by "
 5116|   228k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   228k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   228k|    static_assert(
 5120|   228k|        scannable,
 5121|   228k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   228k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   228k|    return arg_value{arg};
 5125|   228k|}
_ZN3scn2v36detail9arg_valueC2IaEERT_:
 4909|   228k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   228k|    {
 4911|   228k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   229k|{
 8665|   229k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   229k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   229k|{
 8602|   229k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   229k|    auto result = vscan_impl(buffer, format, args);
 8605|   229k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.3k, False: 182k]
  |  |  ------------------
  ------------------
 8606|  47.3k|        return unexpected(result.error());
 8607|  47.3k|    }
 8608|   182k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   229k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|   494k|{
 4729|   494k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   494k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   494k|                  "\n"
 4733|   494k|                  "Unsupported range type given as input to a scanning "
 4734|   494k|                  "function.\n"
 4735|   494k|                  "A range needs to have a character type (value type) "
 4736|   494k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   494k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   494k|                  "to be included.\n"
 4739|   494k|                  "See the scnlib documentation for more details.");
 4740|   494k|    static_assert(
 4741|   494k|        !std::is_same_v<T, custom_char_traits>,
 4742|   494k|        "\n"
 4743|   494k|        "Unsupported range type given as input to a scanning "
 4744|   494k|        "function.\n"
 4745|   494k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   494k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   494k|        "not supported.");
 4748|   494k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   494k|                  "\n"
 4750|   494k|                  "Unsupported range type given as input to a scanning "
 4751|   494k|                  "function.\n"
 4752|   494k|                  "file_marker_found cannot be used as an "
 4753|   494k|                  "source range type to scn::scan.\n"
 4754|   494k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   494k|                  "and do not provide an explicit source range, "
 4756|   494k|                  "or use scn::scan with a FILE* directly.");
 4757|   494k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   494k|                  "\n"
 4759|   494k|                  "Unsupported range type given as input to a scanning "
 4760|   494k|                  "function.\n"
 4761|   494k|                  "In order to be scannable, a range needs to satisfy "
 4762|   494k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   494k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   494k|                  "\n"
 4765|   494k|                  "Unsupported range type given as input to a scanning "
 4766|   494k|                  "function.\n"
 4767|   494k|                  "A range needs to model forward_range and have a valid "
 4768|   494k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   494k|                  "Examples of scannable ranges are std::string, "
 4770|   494k|                  "std::string_view, "
 4771|   494k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   494k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   494k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   494k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   494k|{
 4668|   494k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   494k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   494k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   494k|    {
 2855|   494k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   494k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   494k|    {
 2836|   494k|        return t.data();
 2837|   494k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|   494k|    {
 3229|   494k|        return detail::to_address(ranges::begin(derived()));
 3230|   494k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.27M|{
  326|  2.27M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.27M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   889k|    {
 2724|   889k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   889k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   889k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   889k|    {
 2705|   889k|        return decay_copy(t.begin());
 2706|   889k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  8.01M|    {
 3326|  8.01M|        return m_iterator;
 3327|  8.01M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   494k|    {
 3185|   494k|        return static_cast<const D&>(*this);
 3186|   494k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   494k|    {
 2930|   494k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   494k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   494k|    {
 2896|   494k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   494k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   494k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|   819k|{
 1949|   819k|    return SCN_FWD(t);
  ------------------
  |  |  930|   819k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   819k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  1.66M|    {
 3342|  1.66M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  1.66M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  2.08M|    {
 1598|  2.08M|        return has_value();
 1599|  2.08M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  3.87M|    {
  485|  3.87M|        return m_has_value;
  486|  3.87M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   596k|    {
 1604|   596k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   596k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   596k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   596k|        return this->get_unexpected().error();
 1606|   596k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   596k|    {
  468|   596k|        return m_unexpected;
  469|   596k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  5.16M|    {
  361|  5.16M|        return m_unexpected;
  362|  5.16M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  2.54M|        : m_unexpected(std::forward<Err>(e))
  346|  2.54M|    {
  347|  2.54M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.54M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.54M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  99.4k|        : base(unexpect, std::move(e.error())),
 1474|  99.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  99.4k|    {
 1476|  99.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  99.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  99.4k|          m_has_value(false)
  446|  99.4k|    {
  447|  99.4k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  2.96M|        : m_unexpected(std::forward<Args>(args)...)
  355|  2.96M|    {
  356|  2.96M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.96M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.96M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   494k|    {
 1177|   494k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   395k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   395k|                      ranges::iterator_t<SourceRange>>) {
 5935|   395k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   395k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.55M|    {
 2724|  1.55M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.55M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.55M|    {
 2705|  1.55M|        return decay_copy(t.begin());
 2706|  1.55M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   395k|{
 5920|   395k|    return ranges::end(source);
 5921|   395k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   395k|    {
 2781|   395k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   395k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   395k|    {
 2763|   395k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   395k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  6.15M|    {
 3330|  6.15M|        return m_sentinel;
 3331|  6.15M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  1.19M|    {
 1653|  1.19M|        return value();
 1654|  1.19M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  1.19M|    {
 1627|  1.19M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.19M|        return this->get_value();
 1629|  1.19M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.19M|    {
  451|  1.19M|        return m_value;
  452|  1.19M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   395k|        : base(std::in_place, std::forward<U>(val)),
 1428|   395k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   395k|    {
 1430|   395k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   395k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   395k|    {
  437|   395k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  74.7k|    {
 7986|  74.7k|        return m_str;
 7987|  74.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   149k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   149k|    {
 5436|   149k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE12arg_pointersEv:
 5388|   149k|    {
 5389|   149k|        return m_argptrs;
 5390|   149k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   918k|        : m_desc(desc), m_builtin_values(data)
 5487|   918k|    {
 5488|   918k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  74.7k|{
 8831|  74.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 58.9k]
  |  |  ------------------
  ------------------
 8832|  15.7k|        return unexpected(result.error());
 8833|  15.7k|    }
 8834|  58.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  58.9k|    static_cast<    \
  |  |  929|  58.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  58.9k|    static_cast<    \
  |  |  929|  58.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  74.7k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   494k|    {
 1598|   494k|        return has_value();
 1599|   494k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   988k|    {
  485|   988k|        return m_has_value;
  486|   988k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  99.4k|    {
 1604|  99.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  99.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  99.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  99.4k|        return this->get_unexpected().error();
 1606|  99.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  99.4k|    {
  468|  99.4k|        return m_unexpected;
  469|  99.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  80.5k|    {
 1177|  80.5k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   364k|    {
 1653|   364k|        return value();
 1654|   364k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   395k|    {
 1627|   395k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   395k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   395k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   395k|        return this->get_value();
 1629|   395k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   395k|    {
  451|   395k|        return m_value;
  452|   395k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ES8_ONSt3__15tupleIJaEEE:
 5838|  63.9k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  63.9k|    static_cast<    \
  |  |  929|  63.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  63.9k|    static_cast<    \
  |  |  929|  63.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  63.9k|    {
 5840|  63.9k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   395k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   395k|    static_cast<    \
  |  |  929|   395k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   395k|    {
 5691|   395k|    }
_ZN3scn2v36detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
 5624|   128k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   128k|    static_cast<    \
  |  |  929|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   128k|    {
 5626|   128k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  63.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  63.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  63.9k|    {
 1430|  63.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  63.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  63.9k|    {
  437|  63.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
 5383|   149k|    {
 5384|   149k|        return m_args;
 5385|   149k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  4.16M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  4.16M|    static_cast<    \
  |  |  929|  4.16M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  4.16M|    static_cast<    \
  |  |  929|  4.16M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  4.16M|    {
 3312|  4.16M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|   918k|{
 7702|   918k|    return s;
 7703|   918k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|   918k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  74.7k|        : m_str(r.str)
 7981|  74.7k|    {
 7982|  74.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  80.5k|    {
 1598|  80.5k|        return has_value();
 1599|  80.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   144k|    {
  485|   144k|        return m_has_value;
  486|   144k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEEptEv:
 1672|  63.9k|    {
 1673|  63.9k|        return &value();
 1674|  63.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  63.9k|    {
 1627|  63.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  63.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  63.9k|        return this->get_value();
 1629|  63.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  63.9k|    {
  451|  63.9k|        return m_value;
  452|  63.9k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   395k|    {
 5708|   395k|        return ranges::begin(m_range);
 5709|   395k|    }
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  37.3k|{
 8945|  37.3k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  37.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  37.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   229k|{
 8683|   229k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   229k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   229k|{
 8618|   229k|#if !SCN_DISABLE_LOCALE
 8619|   229k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   229k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   229k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   229k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   229k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.3k, False: 182k]
  |  |  ------------------
  ------------------
 8626|  47.3k|        return unexpected(result.error());
 8627|  47.3k|    }
 8628|   182k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   229k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  5.80k|{
 8984|  5.80k|    T value;
 8985|  5.80k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.80k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 789, False: 5.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    789|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    789|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    789|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    789|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    789|    }                                                  \
  |  |  |  | 3667|  5.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.01k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.01k|    static_cast<    \
  |  |  929|  5.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.01k|    static_cast<    \
  |  |  929|  5.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.80k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
 5164|  11.6k|{
 5165|  11.6k|    check_scan_arg_types<T>();
 5166|       |
 5167|  11.6k|    basic_scan_arg<Context> arg;
 5168|  11.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  11.6k|    arg.m_value = make_value<Context>(value);
 5170|  11.6k|    return arg;
 5171|  11.6k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|   987k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  1.39M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  34.9k|{
 8696|  34.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  34.9k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  34.9k|{
 8642|  34.9k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  34.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  34.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  34.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.73k, False: 30.2k]
  |  |  ------------------
  ------------------
 8646|  4.73k|        return unexpected(result.error());
 8647|  4.73k|    }
 8648|  30.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  30.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  34.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  30.2k|    {
 1663|  30.2k|        return std::move(value());
 1664|  30.2k|    }
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  32.7k|{
 8878|  32.7k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  32.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  32.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.7k|    static_cast<    \
  |  |  929|  32.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.7k|    static_cast<    \
  |  |  929|  32.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  32.7k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDav:
 5405|   130k|{
 5406|   130k|    detail::check_scan_arg_types<Args...>();
 5407|   130k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   130k|}
_ZN3scn2v36detail20check_scan_arg_typesIJhEEEvv:
 5144|   207k|{
 5145|   207k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   207k|                  "Scan argument types must be default constructible");
 5147|   207k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   207k|                  "Scan argument types must be Destructible");
 5149|   207k|    static_assert(
 5150|   207k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   207k|        "Scan argument types must not be references");
 5152|   207k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2Ev:
 5357|   130k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   130k|    {
 5359|   130k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   130k|    {
 5370|   130k|        return {detail::make_arg<
 5371|   130k|            kind, Context,
 5372|   130k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   130k|                                 typename Context::char_type>::value>(args)...};
 5374|   130k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEEPvRT2_:
 5179|   130k|{
 5180|   130k|    return make_value<Context>(value).ref_value;
 5181|   130k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
 5129|   140k|{
 5130|   140k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   140k|                                  needs_context_tag>) {
 5134|   140k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   140k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERh:
 4968|   140k|    {                                                                        \
 4969|   140k|        return val;                                                          \
 4970|   140k|    }
_ZN3scn2v36detail15make_value_implIRhEEDaOT_:
 5098|   207k|{
 5099|   207k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   207k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   207k|    constexpr bool scannable_char =
 5103|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   207k|    static_assert(scannable_char,
 5105|   207k|                  "Cannot scan an argument of an unsupported character "
 5106|   207k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   207k|    constexpr bool scannable_const =
 5109|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   207k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   207k|    constexpr bool scannable_disabled =
 5113|   207k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   207k|    static_assert(scannable_disabled,
 5115|   207k|                  "Cannot scan an argument that has been disabled by "
 5116|   207k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   207k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   207k|    static_assert(
 5120|   207k|        scannable,
 5121|   207k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   207k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   207k|    return arg_value{arg};
 5125|   207k|}
_ZN3scn2v36detail9arg_valueC2IhEERT_:
 4909|   207k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   207k|    {
 4911|   207k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  65.4k|    {
 7986|  65.4k|        return m_str;
 7987|  65.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   130k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   130k|    {
 5436|   130k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE12arg_pointersEv:
 5388|   130k|    {
 5389|   130k|        return m_argptrs;
 5390|   130k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  65.4k|{
 8831|  65.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 49.7k]
  |  |  ------------------
  ------------------
 8832|  15.7k|        return unexpected(result.error());
 8833|  15.7k|    }
 8834|  49.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  49.7k|    static_cast<    \
  |  |  929|  49.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  49.7k|    static_cast<    \
  |  |  929|  49.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  65.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  70.2k|    {
 1177|  70.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ES8_ONSt3__15tupleIJhEEE:
 5838|  53.7k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  53.7k|    static_cast<    \
  |  |  929|  53.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  53.7k|    static_cast<    \
  |  |  929|  53.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  53.7k|    {
 5840|  53.7k|    }
_ZN3scn2v36detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
 5624|   108k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   108k|    static_cast<    \
  |  |  929|   108k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   108k|    {
 5626|   108k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  53.7k|        : base(std::in_place, std::forward<U>(val)),
 1428|  53.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  53.7k|    {
 1430|  53.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  53.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  53.7k|    {
  437|  53.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
 5383|   130k|    {
 5384|   130k|        return m_args;
 5385|   130k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  65.4k|        : m_str(r.str)
 7981|  65.4k|    {
 7982|  65.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  70.2k|    {
 1598|  70.2k|        return has_value();
 1599|  70.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   124k|    {
  485|   124k|        return m_has_value;
  486|   124k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEEptEv:
 1672|  53.7k|    {
 1673|  53.7k|        return &value();
 1674|  53.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  53.7k|    {
 1627|  53.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  53.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  53.7k|        return this->get_value();
 1629|  53.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  53.7k|    {
  451|  53.7k|        return m_value;
  452|  53.7k|    }
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  32.7k|{
 8945|  32.7k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  32.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  32.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.7k|    static_cast<    \
  |  |  929|  32.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.7k|    static_cast<    \
  |  |  929|  32.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  32.7k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  4.81k|{
 8984|  4.81k|    T value;
 8985|  4.81k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.81k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.81k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.81k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.81k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 789, False: 4.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    789|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    789|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    789|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    789|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    789|    }                                                  \
  |  |  |  | 3667|  4.81k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.02k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.02k|    static_cast<    \
  |  |  929|  4.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.02k|    static_cast<    \
  |  |  929|  4.02k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.81k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
 5164|  9.60k|{
 5165|  9.60k|    check_scan_arg_types<T>();
 5166|       |
 5167|  9.60k|    basic_scan_arg<Context> arg;
 5168|  9.60k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  9.60k|    arg.m_value = make_value<Context>(value);
 5170|  9.60k|    return arg;
 5171|  9.60k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  43.6k|{
 8878|  43.6k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  43.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  43.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.6k|    static_cast<    \
  |  |  929|  43.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.6k|    static_cast<    \
  |  |  929|  43.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  43.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDav:
 5405|   174k|{
 5406|   174k|    detail::check_scan_arg_types<Args...>();
 5407|   174k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   174k|}
_ZN3scn2v36detail20check_scan_arg_typesIJiEEEvv:
 5144|   255k|{
 5145|   255k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   255k|                  "Scan argument types must be default constructible");
 5147|   255k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   255k|                  "Scan argument types must be Destructible");
 5149|   255k|    static_assert(
 5150|   255k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   255k|        "Scan argument types must not be references");
 5152|   255k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2Ev:
 5357|   174k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   174k|    {
 5359|   174k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   174k|    {
 5370|   174k|        return {detail::make_arg<
 5371|   174k|            kind, Context,
 5372|   174k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   174k|                                 typename Context::char_type>::value>(args)...};
 5374|   174k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|   174k|{
 5180|   174k|    return make_value<Context>(value).ref_value;
 5181|   174k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
 5129|   187k|{
 5130|   187k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   187k|                                  needs_context_tag>) {
 5134|   187k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   187k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERi:
 4968|   187k|    {                                                                        \
 4969|   187k|        return val;                                                          \
 4970|   187k|    }
_ZN3scn2v36detail15make_value_implIRiEEDaOT_:
 5098|   255k|{
 5099|   255k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   255k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   255k|    constexpr bool scannable_char =
 5103|   255k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   255k|    static_assert(scannable_char,
 5105|   255k|                  "Cannot scan an argument of an unsupported character "
 5106|   255k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   255k|    constexpr bool scannable_const =
 5109|   255k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   255k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   255k|    constexpr bool scannable_disabled =
 5113|   255k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   255k|    static_assert(scannable_disabled,
 5115|   255k|                  "Cannot scan an argument that has been disabled by "
 5116|   255k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   255k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   255k|    static_assert(
 5120|   255k|        scannable,
 5121|   255k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   255k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   255k|    return arg_value{arg};
 5125|   255k|}
_ZN3scn2v36detail9arg_valueC2IiEERT_:
 4909|   255k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   255k|    {
 4911|   255k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  87.3k|    {
 7986|  87.3k|        return m_str;
 7987|  87.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   174k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   174k|    {
 5436|   174k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE12arg_pointersEv:
 5388|   174k|    {
 5389|   174k|        return m_argptrs;
 5390|   174k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  87.3k|{
 8831|  87.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  87.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 71.5k]
  |  |  ------------------
  ------------------
 8832|  15.7k|        return unexpected(result.error());
 8833|  15.7k|    }
 8834|  71.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  71.5k|    static_cast<    \
  |  |  929|  71.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  71.5k|    static_cast<    \
  |  |  929|  71.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  87.3k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  94.0k|    {
 1177|  94.0k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ES8_ONSt3__15tupleIJiEEE:
 5838|  77.4k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  77.4k|    static_cast<    \
  |  |  929|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  77.4k|    static_cast<    \
  |  |  929|  77.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  77.4k|    {
 5840|  77.4k|    }
_ZN3scn2v36detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
 5624|   155k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   155k|    {
 5626|   155k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  77.4k|        : base(std::in_place, std::forward<U>(val)),
 1428|  77.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  77.4k|    {
 1430|  77.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  77.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  77.4k|    {
  437|  77.4k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
 5383|   174k|    {
 5384|   174k|        return m_args;
 5385|   174k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  87.3k|        : m_str(r.str)
 7981|  87.3k|    {
 7982|  87.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  94.0k|    {
 1598|  94.0k|        return has_value();
 1599|  94.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   171k|    {
  485|   171k|        return m_has_value;
  486|   171k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEEptEv:
 1672|  77.4k|    {
 1673|  77.4k|        return &value();
 1674|  77.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  77.4k|    {
 1627|  77.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  77.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  77.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  77.4k|        return this->get_value();
 1629|  77.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  77.4k|    {
  451|  77.4k|        return m_value;
  452|  77.4k|    }
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  43.6k|{
 8945|  43.6k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  43.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  43.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.6k|    static_cast<    \
  |  |  929|  43.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.6k|    static_cast<    \
  |  |  929|  43.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  43.6k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  6.72k|{
 8984|  6.72k|    T value;
 8985|  6.72k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.72k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 789, False: 5.93k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    789|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    789|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    789|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    789|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    789|    }                                                  \
  |  |  |  | 3667|  6.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.93k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.93k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.93k|    static_cast<    \
  |  |  929|  5.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.93k|    static_cast<    \
  |  |  929|  5.93k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.72k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
 5164|  13.2k|{
 5165|  13.2k|    check_scan_arg_types<T>();
 5166|       |
 5167|  13.2k|    basic_scan_arg<Context> arg;
 5168|  13.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  13.2k|    arg.m_value = make_value<Context>(value);
 5170|  13.2k|    return arg;
 5171|  13.2k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  35.6k|{
 8878|  35.6k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  35.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  35.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  35.6k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDav:
 5405|   142k|{
 5406|   142k|    detail::check_scan_arg_types<Args...>();
 5407|   142k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   142k|}
_ZN3scn2v36detail20check_scan_arg_typesIJjEEEvv:
 5144|   220k|{
 5145|   220k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   220k|                  "Scan argument types must be default constructible");
 5147|   220k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   220k|                  "Scan argument types must be Destructible");
 5149|   220k|    static_assert(
 5150|   220k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   220k|        "Scan argument types must not be references");
 5152|   220k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2Ev:
 5357|   142k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   142k|    {
 5359|   142k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   142k|    {
 5370|   142k|        return {detail::make_arg<
 5371|   142k|            kind, Context,
 5372|   142k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   142k|                                 typename Context::char_type>::value>(args)...};
 5374|   142k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|   142k|{
 5180|   142k|    return make_value<Context>(value).ref_value;
 5181|   142k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
 5129|   153k|{
 5130|   153k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   153k|                                  needs_context_tag>) {
 5134|   153k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   153k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERj:
 4968|   153k|    {                                                                        \
 4969|   153k|        return val;                                                          \
 4970|   153k|    }
_ZN3scn2v36detail15make_value_implIRjEEDaOT_:
 5098|   220k|{
 5099|   220k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   220k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   220k|    constexpr bool scannable_char =
 5103|   220k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   220k|    static_assert(scannable_char,
 5105|   220k|                  "Cannot scan an argument of an unsupported character "
 5106|   220k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   220k|    constexpr bool scannable_const =
 5109|   220k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   220k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   220k|    constexpr bool scannable_disabled =
 5113|   220k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   220k|    static_assert(scannable_disabled,
 5115|   220k|                  "Cannot scan an argument that has been disabled by "
 5116|   220k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   220k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   220k|    static_assert(
 5120|   220k|        scannable,
 5121|   220k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   220k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   220k|    return arg_value{arg};
 5125|   220k|}
_ZN3scn2v36detail9arg_valueC2IjEERT_:
 4909|   220k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   220k|    {
 4911|   220k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  71.2k|    {
 7986|  71.2k|        return m_str;
 7987|  71.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   142k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   142k|    {
 5436|   142k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE12arg_pointersEv:
 5388|   142k|    {
 5389|   142k|        return m_argptrs;
 5390|   142k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  71.2k|{
 8831|  71.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 55.4k]
  |  |  ------------------
  ------------------
 8832|  15.7k|        return unexpected(result.error());
 8833|  15.7k|    }
 8834|  55.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.4k|    static_cast<    \
  |  |  929|  55.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.4k|    static_cast<    \
  |  |  929|  55.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  71.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  76.5k|    {
 1177|  76.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ES8_ONSt3__15tupleIJjEEE:
 5838|  59.9k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  59.9k|    static_cast<    \
  |  |  929|  59.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  59.9k|    static_cast<    \
  |  |  929|  59.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  59.9k|    {
 5840|  59.9k|    }
_ZN3scn2v36detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
 5624|   121k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   121k|    {
 5626|   121k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  59.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  59.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  59.9k|    {
 1430|  59.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  59.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  59.9k|    {
  437|  59.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
 5383|   142k|    {
 5384|   142k|        return m_args;
 5385|   142k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  71.2k|        : m_str(r.str)
 7981|  71.2k|    {
 7982|  71.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  76.5k|    {
 1598|  76.5k|        return has_value();
 1599|  76.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   136k|    {
  485|   136k|        return m_has_value;
  486|   136k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEEptEv:
 1672|  59.9k|    {
 1673|  59.9k|        return &value();
 1674|  59.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  59.9k|    {
 1627|  59.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  59.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  59.9k|        return this->get_value();
 1629|  59.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  59.9k|    {
  451|  59.9k|        return m_value;
  452|  59.9k|    }
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  35.6k|{
 8945|  35.6k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  35.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  35.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  35.6k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  5.33k|{
 8984|  5.33k|    T value;
 8985|  5.33k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.33k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 789, False: 4.54k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    789|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    789|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    789|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    789|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    789|    }                                                  \
  |  |  |  | 3667|  5.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.54k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.54k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.54k|    static_cast<    \
  |  |  929|  4.54k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.54k|    static_cast<    \
  |  |  929|  4.54k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.33k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
 5164|  10.6k|{
 5165|  10.6k|    check_scan_arg_types<T>();
 5166|       |
 5167|  10.6k|    basic_scan_arg<Context> arg;
 5168|  10.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  10.6k|    arg.m_value = make_value<Context>(value);
 5170|  10.6k|    return arg;
 5171|  10.6k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  44.4k|{
 8878|  44.4k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  44.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  44.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.4k|    static_cast<    \
  |  |  929|  44.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.4k|    static_cast<    \
  |  |  929|  44.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  44.4k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDav:
 5405|   177k|{
 5406|   177k|    detail::check_scan_arg_types<Args...>();
 5407|   177k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   177k|}
_ZN3scn2v36detail20check_scan_arg_typesIJxEEEvv:
 5144|   258k|{
 5145|   258k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   258k|                  "Scan argument types must be default constructible");
 5147|   258k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   258k|                  "Scan argument types must be Destructible");
 5149|   258k|    static_assert(
 5150|   258k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   258k|        "Scan argument types must not be references");
 5152|   258k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2Ev:
 5357|   177k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   177k|    {
 5359|   177k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   177k|    {
 5370|   177k|        return {detail::make_arg<
 5371|   177k|            kind, Context,
 5372|   177k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   177k|                                 typename Context::char_type>::value>(args)...};
 5374|   177k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEEPvRT2_:
 5179|   177k|{
 5180|   177k|    return make_value<Context>(value).ref_value;
 5181|   177k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
 5129|   190k|{
 5130|   190k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   190k|                                  needs_context_tag>) {
 5134|   190k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   190k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERx:
 4968|   190k|    {                                                                        \
 4969|   190k|        return val;                                                          \
 4970|   190k|    }
_ZN3scn2v36detail15make_value_implIRxEEDaOT_:
 5098|   258k|{
 5099|   258k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   258k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   258k|    constexpr bool scannable_char =
 5103|   258k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   258k|    static_assert(scannable_char,
 5105|   258k|                  "Cannot scan an argument of an unsupported character "
 5106|   258k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   258k|    constexpr bool scannable_const =
 5109|   258k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   258k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   258k|    constexpr bool scannable_disabled =
 5113|   258k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   258k|    static_assert(scannable_disabled,
 5115|   258k|                  "Cannot scan an argument that has been disabled by "
 5116|   258k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   258k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   258k|    static_assert(
 5120|   258k|        scannable,
 5121|   258k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   258k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   258k|    return arg_value{arg};
 5125|   258k|}
_ZN3scn2v36detail9arg_valueC2IxEERT_:
 4909|   258k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   258k|    {
 4911|   258k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  88.8k|    {
 7986|  88.8k|        return m_str;
 7987|  88.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   177k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   177k|    {
 5436|   177k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE12arg_pointersEv:
 5388|   177k|    {
 5389|   177k|        return m_argptrs;
 5390|   177k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  88.8k|{
 8831|  88.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  88.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 73.0k]
  |  |  ------------------
  ------------------
 8832|  15.7k|        return unexpected(result.error());
 8833|  15.7k|    }
 8834|  73.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  73.0k|    static_cast<    \
  |  |  929|  73.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  73.0k|    static_cast<    \
  |  |  929|  73.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  88.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  95.6k|    {
 1177|  95.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ES8_ONSt3__15tupleIJxEEE:
 5838|  79.1k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  79.1k|    static_cast<    \
  |  |  929|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  79.1k|    static_cast<    \
  |  |  929|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  79.1k|    {
 5840|  79.1k|    }
_ZN3scn2v36detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
 5624|   159k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   159k|    static_cast<    \
  |  |  929|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   159k|    {
 5626|   159k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  79.1k|        : base(std::in_place, std::forward<U>(val)),
 1428|  79.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  79.1k|    {
 1430|  79.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  79.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  79.1k|    {
  437|  79.1k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
 5383|   177k|    {
 5384|   177k|        return m_args;
 5385|   177k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  88.8k|        : m_str(r.str)
 7981|  88.8k|    {
 7982|  88.8k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  95.6k|    {
 1598|  95.6k|        return has_value();
 1599|  95.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   174k|    {
  485|   174k|        return m_has_value;
  486|   174k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEEptEv:
 1672|  79.1k|    {
 1673|  79.1k|        return &value();
 1674|  79.1k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  79.1k|    {
 1627|  79.1k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  79.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  79.1k|        return this->get_value();
 1629|  79.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  79.1k|    {
  451|  79.1k|        return m_value;
  452|  79.1k|    }
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  44.4k|{
 8945|  44.4k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  44.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  44.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.4k|    static_cast<    \
  |  |  929|  44.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.4k|    static_cast<    \
  |  |  929|  44.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  44.4k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  6.85k|{
 8984|  6.85k|    T value;
 8985|  6.85k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.85k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 789, False: 6.06k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    789|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    789|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    789|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    789|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    789|    }                                                  \
  |  |  |  | 3667|  6.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.06k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  6.06k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.06k|    static_cast<    \
  |  |  929|  6.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  6.06k|    static_cast<    \
  |  |  929|  6.06k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.85k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
 5164|  13.4k|{
 5165|  13.4k|    check_scan_arg_types<T>();
 5166|       |
 5167|  13.4k|    basic_scan_arg<Context> arg;
 5168|  13.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  13.4k|    arg.m_value = make_value<Context>(value);
 5170|  13.4k|    return arg;
 5171|  13.4k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|  35.9k|{
 8878|  35.9k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  35.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  35.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  35.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.9k|    static_cast<    \
  |  |  929|  35.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.9k|    static_cast<    \
  |  |  929|  35.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  35.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDav:
 5405|   143k|{
 5406|   143k|    detail::check_scan_arg_types<Args...>();
 5407|   143k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   143k|}
_ZN3scn2v36detail20check_scan_arg_typesIJyEEEvv:
 5144|   222k|{
 5145|   222k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   222k|                  "Scan argument types must be default constructible");
 5147|   222k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   222k|                  "Scan argument types must be Destructible");
 5149|   222k|    static_assert(
 5150|   222k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   222k|        "Scan argument types must not be references");
 5152|   222k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2Ev:
 5357|   143k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   143k|    {
 5359|   143k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   143k|    {
 5370|   143k|        return {detail::make_arg<
 5371|   143k|            kind, Context,
 5372|   143k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   143k|                                 typename Context::char_type>::value>(args)...};
 5374|   143k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEEPvRT2_:
 5179|   143k|{
 5180|   143k|    return make_value<Context>(value).ref_value;
 5181|   143k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
 5129|   154k|{
 5130|   154k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   154k|                                  needs_context_tag>) {
 5134|   154k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   154k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERy:
 4968|   154k|    {                                                                        \
 4969|   154k|        return val;                                                          \
 4970|   154k|    }
_ZN3scn2v36detail15make_value_implIRyEEDaOT_:
 5098|   222k|{
 5099|   222k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   222k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   222k|    constexpr bool scannable_char =
 5103|   222k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   222k|    static_assert(scannable_char,
 5105|   222k|                  "Cannot scan an argument of an unsupported character "
 5106|   222k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   222k|    constexpr bool scannable_const =
 5109|   222k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   222k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   222k|    constexpr bool scannable_disabled =
 5113|   222k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   222k|    static_assert(scannable_disabled,
 5115|   222k|                  "Cannot scan an argument that has been disabled by "
 5116|   222k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   222k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   222k|    static_assert(
 5120|   222k|        scannable,
 5121|   222k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   222k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   222k|    return arg_value{arg};
 5125|   222k|}
_ZN3scn2v36detail9arg_valueC2IyEERT_:
 4909|   222k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   222k|    {
 4911|   222k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|  71.9k|    {
 7986|  71.9k|        return m_str;
 7987|  71.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   143k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   143k|    {
 5436|   143k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE12arg_pointersEv:
 5388|   143k|    {
 5389|   143k|        return m_argptrs;
 5390|   143k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  71.9k|{
 8831|  71.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  71.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 56.1k]
  |  |  ------------------
  ------------------
 8832|  15.7k|        return unexpected(result.error());
 8833|  15.7k|    }
 8834|  56.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  56.1k|    static_cast<    \
  |  |  929|  56.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  71.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  77.3k|    {
 1177|  77.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ES8_ONSt3__15tupleIJyEEE:
 5838|  60.8k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  60.8k|    static_cast<    \
  |  |  929|  60.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  60.8k|    static_cast<    \
  |  |  929|  60.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  60.8k|    {
 5840|  60.8k|    }
_ZN3scn2v36detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
 5624|   122k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   122k|    static_cast<    \
  |  |  929|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   122k|    {
 5626|   122k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  60.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  60.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  60.8k|    {
 1430|  60.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|  60.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  60.8k|    {
  437|  60.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
 5383|   143k|    {
 5384|   143k|        return m_args;
 5385|   143k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  71.9k|        : m_str(r.str)
 7981|  71.9k|    {
 7982|  71.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  77.3k|    {
 1598|  77.3k|        return has_value();
 1599|  77.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   138k|    {
  485|   138k|        return m_has_value;
  486|   138k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEEptEv:
 1672|  60.8k|    {
 1673|  60.8k|        return &value();
 1674|  60.8k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|  60.8k|    {
 1627|  60.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  60.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  60.8k|        return this->get_value();
 1629|  60.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  60.8k|    {
  451|  60.8k|        return m_value;
  452|  60.8k|    }
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|  35.9k|{
 8945|  35.9k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  35.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  35.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  35.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.9k|    static_cast<    \
  |  |  929|  35.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.9k|    static_cast<    \
  |  |  929|  35.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  35.9k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  5.40k|{
 8984|  5.40k|    T value;
 8985|  5.40k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.40k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.40k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.40k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.40k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 789, False: 4.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    789|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    789|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    789|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    789|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    789|    }                                                  \
  |  |  |  | 3667|  5.40k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.61k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.61k|    static_cast<    \
  |  |  929|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.61k|    static_cast<    \
  |  |  929|  4.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.40k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
 5164|  10.7k|{
 5165|  10.7k|    check_scan_arg_types<T>();
 5166|       |
 5167|  10.7k|    basic_scan_arg<Context> arg;
 5168|  10.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  10.7k|    arg.m_value = make_value<Context>(value);
 5170|  10.7k|    return arg;
 5171|  10.7k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  99.4k|    {
 2724|  99.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  99.4k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  99.4k|    {
 2705|  99.4k|        return decay_copy(t.begin());
 2706|  99.4k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  10.3M|{
 1949|  10.3M|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  10.3M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   987k|    {
 2781|   987k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   987k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   987k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   987k|    {
 2763|   987k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   987k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   987k|    }
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  37.3k|{
 8878|  37.3k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  37.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  37.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   229k|{
 8665|   229k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   229k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   229k|{
 8602|   229k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   229k|    auto result = vscan_impl(buffer, format, args);
 8605|   229k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.3k, False: 182k]
  |  |  ------------------
  ------------------
 8606|  47.3k|        return unexpected(result.error());
 8607|  47.3k|    }
 8608|   182k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   229k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|   493k|{
 4729|   493k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   493k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   493k|                  "\n"
 4733|   493k|                  "Unsupported range type given as input to a scanning "
 4734|   493k|                  "function.\n"
 4735|   493k|                  "A range needs to have a character type (value type) "
 4736|   493k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   493k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   493k|                  "to be included.\n"
 4739|   493k|                  "See the scnlib documentation for more details.");
 4740|   493k|    static_assert(
 4741|   493k|        !std::is_same_v<T, custom_char_traits>,
 4742|   493k|        "\n"
 4743|   493k|        "Unsupported range type given as input to a scanning "
 4744|   493k|        "function.\n"
 4745|   493k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   493k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   493k|        "not supported.");
 4748|   493k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   493k|                  "\n"
 4750|   493k|                  "Unsupported range type given as input to a scanning "
 4751|   493k|                  "function.\n"
 4752|   493k|                  "file_marker_found cannot be used as an "
 4753|   493k|                  "source range type to scn::scan.\n"
 4754|   493k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   493k|                  "and do not provide an explicit source range, "
 4756|   493k|                  "or use scn::scan with a FILE* directly.");
 4757|   493k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   493k|                  "\n"
 4759|   493k|                  "Unsupported range type given as input to a scanning "
 4760|   493k|                  "function.\n"
 4761|   493k|                  "In order to be scannable, a range needs to satisfy "
 4762|   493k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   493k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   493k|                  "\n"
 4765|   493k|                  "Unsupported range type given as input to a scanning "
 4766|   493k|                  "function.\n"
 4767|   493k|                  "A range needs to model forward_range and have a valid "
 4768|   493k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   493k|                  "Examples of scannable ranges are std::string, "
 4770|   493k|                  "std::string_view, "
 4771|   493k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   493k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   493k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   493k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   493k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   493k|    else {
 4714|   493k|        return make_forward_scan_buffer(r);
 4715|   493k|    }
 4716|   493k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|   493k|{
 4533|   493k|    return basic_scan_forward_buffer_impl(range);
 4534|   493k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   493k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   493k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   493k|          m_cursor(ranges::begin(*m_range))
 4419|   493k|    {
 4420|   493k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|   493k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   493k|    {
 4391|   493k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|   493k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   493k|    {
 4159|   493k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|   493k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   887k|    {
 2724|   887k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   887k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   887k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   887k|    {
 2705|   887k|        return decay_copy(t.begin());
 2706|   887k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  1.28M|    {
 3326|  1.28M|        return m_iterator;
 3327|  1.28M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  2.64M|    {
 4424|  2.64M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 154k, False: 2.48M]
  ------------------
 4425|   154k|            return false;
 4426|   154k|        }
 4427|  2.48M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  2.48M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  2.48M|        }
 4430|  2.48M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 2.03M, False: 456k]
  ------------------
 4431|  2.03M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  2.03M|                                          this->m_current_view.begin(),
 4433|  2.03M|                                          this->m_current_view.end());
 4434|  2.03M|        }
 4435|  2.48M|        m_latest = *m_cursor;
 4436|  2.48M|        ++m_cursor;
 4437|  2.48M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  2.48M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  2.48M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  2.48M|        }
 4441|  2.48M|        return true;
 4442|  2.64M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  7.61M|    {
 2781|  7.61M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  7.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  7.61M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  7.61M|    {
 2763|  7.61M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  7.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  7.61M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  8.00M|    {
 3330|  8.00M|        return m_sentinel;
 3331|  8.00M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|   493k|    {
 4079|   493k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   493k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   493k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  99.4k|        : base(unexpect, std::move(e.error())),
 1474|  99.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  99.4k|    {
 1476|  99.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  99.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  99.4k|          m_has_value(false)
  446|  99.4k|    {
  447|  99.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   493k|    {
 1177|   493k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   394k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   394k|                      ranges::iterator_t<SourceRange>>) {
 5935|   394k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   394k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   394k|    {
 2724|   394k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   394k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   394k|    {
 2705|   394k|        return decay_copy(t.begin());
 2706|   394k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|   394k|{
 5920|   394k|    return ranges::end(source);
 5921|   394k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   394k|    {
 2781|   394k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   394k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   394k|    {
 2763|   394k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   394k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   394k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   394k|        : base(std::in_place, std::forward<U>(val)),
 1428|   394k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   394k|    {
 1430|   394k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   394k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   394k|    {
  437|   394k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  74.7k|    {
 7986|  74.7k|        return m_str;
 7987|  74.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  74.7k|{
 8831|  74.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 58.9k]
  |  |  ------------------
  ------------------
 8832|  15.7k|        return unexpected(result.error());
 8833|  15.7k|    }
 8834|  58.9k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  58.9k|    static_cast<    \
  |  |  929|  58.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  58.9k|    static_cast<    \
  |  |  929|  58.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  74.7k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   493k|    {
 1598|   493k|        return has_value();
 1599|   493k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   987k|    {
  485|   987k|        return m_has_value;
  486|   987k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  99.4k|    {
 1604|  99.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  99.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  99.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  99.4k|        return this->get_unexpected().error();
 1606|  99.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  99.4k|    {
  468|  99.4k|        return m_unexpected;
  469|  99.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  80.5k|    {
 1177|  80.5k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   364k|    {
 1653|   364k|        return value();
 1654|   364k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   394k|    {
 1627|   394k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   394k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   394k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   394k|        return this->get_value();
 1629|   394k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   394k|    {
  451|   394k|        return m_value;
  452|   394k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ESE_ONS6_5tupleIJaEEE:
 5838|  63.9k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  63.9k|    static_cast<    \
  |  |  929|  63.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  63.9k|    static_cast<    \
  |  |  929|  63.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  63.9k|    {
 5840|  63.9k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|   394k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   394k|    static_cast<    \
  |  |  929|   394k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   394k|    {
 5691|   394k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  63.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  63.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  63.9k|    {
 1430|  63.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  63.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  63.9k|    {
  437|  63.9k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   887k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   887k|    static_cast<    \
  |  |  929|   887k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   887k|    static_cast<    \
  |  |  929|   887k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   887k|    {
 3312|   887k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  74.7k|        : m_str(r.str)
 7981|  74.7k|    {
 7982|  74.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  80.5k|    {
 1598|  80.5k|        return has_value();
 1599|  80.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   144k|    {
  485|   144k|        return m_has_value;
  486|   144k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1672|  63.9k|    {
 1673|  63.9k|        return &value();
 1674|  63.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  63.9k|    {
 1627|  63.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  63.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  63.9k|        return this->get_value();
 1629|  63.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  63.9k|    {
  451|  63.9k|        return m_value;
  452|  63.9k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|   394k|    {
 5708|   394k|        return ranges::begin(m_range);
 5709|   394k|    }
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  37.3k|{
 8945|  37.3k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  37.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  37.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  37.3k|    static_cast<    \
  |  |  929|  37.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  37.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   229k|{
 8683|   229k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   229k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   229k|{
 8618|   229k|#if !SCN_DISABLE_LOCALE
 8619|   229k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   229k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   229k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   229k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   229k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   229k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.3k, False: 182k]
  |  |  ------------------
  ------------------
 8626|  47.3k|        return unexpected(result.error());
 8627|  47.3k|    }
 8628|   182k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   229k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  5.79k|{
 8984|  5.79k|    T value;
 8985|  5.79k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.79k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 789, False: 5.00k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    789|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    789|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    789|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    789|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    789|    }                                                  \
  |  |  |  | 3667|  5.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.00k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.00k|    static_cast<    \
  |  |  929|  5.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.00k|    static_cast<    \
  |  |  929|  5.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.79k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  34.4k|{
 8696|  34.4k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  34.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  34.4k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  34.4k|{
 8642|  34.4k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  34.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  34.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  34.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.73k, False: 29.7k]
  |  |  ------------------
  ------------------
 8646|  4.73k|        return unexpected(result.error());
 8647|  4.73k|    }
 8648|  29.7k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  29.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  34.4k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  29.7k|    {
 1663|  29.7k|        return std::move(value());
 1664|  29.7k|    }
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  32.7k|{
 8878|  32.7k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  32.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  32.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.7k|    static_cast<    \
  |  |  929|  32.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.7k|    static_cast<    \
  |  |  929|  32.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  32.7k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  65.5k|    {
 7986|  65.5k|        return m_str;
 7987|  65.5k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  65.5k|{
 8831|  65.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  65.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 49.7k]
  |  |  ------------------
  ------------------
 8832|  15.7k|        return unexpected(result.error());
 8833|  15.7k|    }
 8834|  49.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  49.7k|    static_cast<    \
  |  |  929|  49.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  49.7k|    static_cast<    \
  |  |  929|  49.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  65.5k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  70.2k|    {
 1177|  70.2k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ESE_ONS6_5tupleIJhEEE:
 5838|  53.7k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  53.7k|    static_cast<    \
  |  |  929|  53.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  53.7k|    static_cast<    \
  |  |  929|  53.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  53.7k|    {
 5840|  53.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  53.7k|        : base(std::in_place, std::forward<U>(val)),
 1428|  53.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  53.7k|    {
 1430|  53.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  53.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  53.7k|    {
  437|  53.7k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  65.5k|        : m_str(r.str)
 7981|  65.5k|    {
 7982|  65.5k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  70.2k|    {
 1598|  70.2k|        return has_value();
 1599|  70.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   124k|    {
  485|   124k|        return m_has_value;
  486|   124k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1672|  53.7k|    {
 1673|  53.7k|        return &value();
 1674|  53.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  53.7k|    {
 1627|  53.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  53.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  53.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  53.7k|        return this->get_value();
 1629|  53.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  53.7k|    {
  451|  53.7k|        return m_value;
  452|  53.7k|    }
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  32.7k|{
 8945|  32.7k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  32.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  32.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.7k|    static_cast<    \
  |  |  929|  32.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  32.7k|    static_cast<    \
  |  |  929|  32.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  32.7k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  4.79k|{
 8984|  4.79k|    T value;
 8985|  4.79k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  4.79k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  4.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 789, False: 4.01k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    789|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    789|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    789|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    789|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    789|    }                                                  \
  |  |  |  | 3667|  4.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.01k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.01k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.01k|    static_cast<    \
  |  |  929|  4.01k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  4.79k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  43.5k|{
 8878|  43.5k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  43.5k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  43.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.5k|    static_cast<    \
  |  |  929|  43.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.5k|    static_cast<    \
  |  |  929|  43.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  43.5k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  87.0k|    {
 7986|  87.0k|        return m_str;
 7987|  87.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  87.0k|{
 8831|  87.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  87.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 71.2k]
  |  |  ------------------
  ------------------
 8832|  15.7k|        return unexpected(result.error());
 8833|  15.7k|    }
 8834|  71.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  71.2k|    static_cast<    \
  |  |  929|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  71.2k|    static_cast<    \
  |  |  929|  71.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  87.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  93.5k|    {
 1177|  93.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ESE_ONS6_5tupleIJiEEE:
 5838|  76.9k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  76.9k|    static_cast<    \
  |  |  929|  76.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  76.9k|    static_cast<    \
  |  |  929|  76.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  76.9k|    {
 5840|  76.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  76.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  76.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  76.9k|    {
 1430|  76.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  76.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  76.9k|    {
  437|  76.9k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  87.0k|        : m_str(r.str)
 7981|  87.0k|    {
 7982|  87.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  93.5k|    {
 1598|  93.5k|        return has_value();
 1599|  93.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   170k|    {
  485|   170k|        return m_has_value;
  486|   170k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1672|  76.9k|    {
 1673|  76.9k|        return &value();
 1674|  76.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  76.9k|    {
 1627|  76.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  76.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  76.9k|        return this->get_value();
 1629|  76.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  76.9k|    {
  451|  76.9k|        return m_value;
  452|  76.9k|    }
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  43.5k|{
 8945|  43.5k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  43.5k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  43.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  43.5k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.5k|    static_cast<    \
  |  |  929|  43.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  43.5k|    static_cast<    \
  |  |  929|  43.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  43.5k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  6.52k|{
 8984|  6.52k|    T value;
 8985|  6.52k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.52k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.52k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.52k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.52k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.52k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 789, False: 5.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    789|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    789|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    789|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    789|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    789|    }                                                  \
  |  |  |  | 3667|  6.52k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.73k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.73k|    static_cast<    \
  |  |  929|  5.73k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.73k|    static_cast<    \
  |  |  929|  5.73k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.52k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  35.6k|{
 8878|  35.6k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  35.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  35.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  35.6k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  71.2k|    {
 7986|  71.2k|        return m_str;
 7987|  71.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  71.2k|{
 8831|  71.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 55.4k]
  |  |  ------------------
  ------------------
 8832|  15.7k|        return unexpected(result.error());
 8833|  15.7k|    }
 8834|  55.4k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.4k|    static_cast<    \
  |  |  929|  55.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  55.4k|    static_cast<    \
  |  |  929|  55.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  71.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  76.5k|    {
 1177|  76.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ESE_ONS6_5tupleIJjEEE:
 5838|  60.0k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  60.0k|    static_cast<    \
  |  |  929|  60.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  60.0k|    static_cast<    \
  |  |  929|  60.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  60.0k|    {
 5840|  60.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  60.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  60.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  60.0k|    {
 1430|  60.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  60.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  60.0k|    {
  437|  60.0k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  71.2k|        : m_str(r.str)
 7981|  71.2k|    {
 7982|  71.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  76.5k|    {
 1598|  76.5k|        return has_value();
 1599|  76.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   136k|    {
  485|   136k|        return m_has_value;
  486|   136k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1672|  60.0k|    {
 1673|  60.0k|        return &value();
 1674|  60.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  60.0k|    {
 1627|  60.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  60.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  60.0k|        return this->get_value();
 1629|  60.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  60.0k|    {
  451|  60.0k|        return m_value;
  452|  60.0k|    }
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  35.6k|{
 8945|  35.6k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  35.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  35.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  35.6k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  5.30k|{
 8984|  5.30k|    T value;
 8985|  5.30k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 789, False: 4.52k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    789|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    789|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    789|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    789|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    789|    }                                                  \
  |  |  |  | 3667|  5.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.52k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.52k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.52k|    static_cast<    \
  |  |  929|  4.52k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.30k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  44.2k|{
 8878|  44.2k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  44.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  44.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.2k|    static_cast<    \
  |  |  929|  44.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.2k|    static_cast<    \
  |  |  929|  44.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  44.2k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  88.5k|    {
 7986|  88.5k|        return m_str;
 7987|  88.5k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  88.5k|{
 8831|  88.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  88.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 72.7k]
  |  |  ------------------
  ------------------
 8832|  15.7k|        return unexpected(result.error());
 8833|  15.7k|    }
 8834|  72.7k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  72.7k|    static_cast<    \
  |  |  929|  72.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  72.7k|    static_cast<    \
  |  |  929|  72.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  88.5k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  95.1k|    {
 1177|  95.1k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ESE_ONS6_5tupleIJxEEE:
 5838|  78.5k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  78.5k|    static_cast<    \
  |  |  929|  78.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  78.5k|    static_cast<    \
  |  |  929|  78.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  78.5k|    {
 5840|  78.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  78.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  78.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  78.5k|    {
 1430|  78.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  78.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  78.5k|    {
  437|  78.5k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  88.5k|        : m_str(r.str)
 7981|  88.5k|    {
 7982|  88.5k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  95.1k|    {
 1598|  95.1k|        return has_value();
 1599|  95.1k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   173k|    {
  485|   173k|        return m_has_value;
  486|   173k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1672|  78.5k|    {
 1673|  78.5k|        return &value();
 1674|  78.5k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  78.5k|    {
 1627|  78.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  78.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  78.5k|        return this->get_value();
 1629|  78.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  78.5k|    {
  451|  78.5k|        return m_value;
  452|  78.5k|    }
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  44.2k|{
 8945|  44.2k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  44.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  44.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  44.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.2k|    static_cast<    \
  |  |  929|  44.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  44.2k|    static_cast<    \
  |  |  929|  44.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  44.2k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  6.63k|{
 8984|  6.63k|    T value;
 8985|  6.63k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  6.63k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  6.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  6.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  6.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 789, False: 5.85k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    789|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    789|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    789|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    789|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    789|    }                                                  \
  |  |  |  | 3667|  6.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.85k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  5.85k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.85k|    static_cast<    \
  |  |  929|  5.85k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  6.63k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|  36.0k|{
 8878|  36.0k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  36.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  36.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.0k|    static_cast<    \
  |  |  929|  36.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.0k|    static_cast<    \
  |  |  929|  36.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  36.0k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|  72.0k|    {
 7986|  72.0k|        return m_str;
 7987|  72.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  72.0k|{
 8831|  72.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  72.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.7k, False: 56.2k]
  |  |  ------------------
  ------------------
 8832|  15.7k|        return unexpected(result.error());
 8833|  15.7k|    }
 8834|  56.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  56.2k|    static_cast<    \
  |  |  929|  56.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  56.2k|    static_cast<    \
  |  |  929|  56.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  72.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  16.5k|        : base(unexpect, std::move(e.error())),
 1474|  16.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  16.5k|    {
 1476|  16.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  16.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  16.5k|          m_has_value(false)
  446|  16.5k|    {
  447|  16.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  77.3k|    {
 1177|  77.3k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ESE_ONS6_5tupleIJyEEE:
 5838|  60.8k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  60.8k|    static_cast<    \
  |  |  929|  60.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  60.8k|    static_cast<    \
  |  |  929|  60.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  60.8k|    {
 5840|  60.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|  60.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  60.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  60.8k|    {
 1430|  60.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|  60.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  60.8k|    {
  437|  60.8k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  72.0k|        : m_str(r.str)
 7981|  72.0k|    {
 7982|  72.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  77.3k|    {
 1598|  77.3k|        return has_value();
 1599|  77.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   138k|    {
  485|   138k|        return m_has_value;
  486|   138k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1672|  60.8k|    {
 1673|  60.8k|        return &value();
 1674|  60.8k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|  60.8k|    {
 1627|  60.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  60.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  60.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  60.8k|        return this->get_value();
 1629|  60.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  60.8k|    {
  451|  60.8k|        return m_value;
  452|  60.8k|    }
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|  36.0k|{
 8945|  36.0k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  36.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  36.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  36.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.0k|    static_cast<    \
  |  |  929|  36.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  36.0k|    static_cast<    \
  |  |  929|  36.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  36.0k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  5.37k|{
 8984|  5.37k|    T value;
 8985|  5.37k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  5.37k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  5.37k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  5.37k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  5.37k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.37k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 789, False: 4.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    789|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    789|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    789|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    789|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    789|    }                                                  \
  |  |  |  | 3667|  5.37k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  4.58k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.58k|    static_cast<    \
  |  |  929|  4.58k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.58k|    static_cast<    \
  |  |  929|  4.58k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  5.37k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   200k|    {
 2724|   200k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   200k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   200k|    {
 2705|   200k|        return decay_copy(t.begin());
 2706|   200k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|   942k|{
 1949|   942k|    return SCN_FWD(t);
  ------------------
  |  |  930|   942k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   942k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   406k|    {
 2781|   406k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   406k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   406k|    {
 2763|   406k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   406k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDav:
 5405|  64.0k|{
 5406|  64.0k|    detail::check_scan_arg_types<Args...>();
 5407|  64.0k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  64.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2Ev:
 5357|  64.0k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  64.0k|    {
 5359|  64.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE12make_argptrsIJaEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  64.0k|    {
 5370|  64.0k|        return {detail::make_arg<
 5371|  64.0k|            kind, Context,
 5372|  64.0k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  64.0k|                                 typename Context::char_type>::value>(args)...};
 5374|  64.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEEPvRT2_:
 5179|  64.0k|{
 5180|  64.0k|    return make_value<Context>(value).ref_value;
 5181|  64.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
 5129|  67.3k|{
 5130|  67.3k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  67.3k|                                  needs_context_tag>) {
 5134|  67.3k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  67.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  67.3k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERa:
 4968|  67.3k|    {                                                                        \
 4969|  67.3k|        return val;                                                          \
 4970|  67.3k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|  96.2k|{
 8602|  96.2k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  96.2k|    auto result = vscan_impl(buffer, format, args);
 8605|  96.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 94.6k, False: 1.59k]
  |  |  ------------------
  ------------------
 8606|  94.6k|        return unexpected(result.error());
 8607|  94.6k|    }
 8608|  1.59k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  96.2k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|   202k|{
 4729|   202k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   202k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   202k|                  "\n"
 4733|   202k|                  "Unsupported range type given as input to a scanning "
 4734|   202k|                  "function.\n"
 4735|   202k|                  "A range needs to have a character type (value type) "
 4736|   202k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   202k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   202k|                  "to be included.\n"
 4739|   202k|                  "See the scnlib documentation for more details.");
 4740|   202k|    static_assert(
 4741|   202k|        !std::is_same_v<T, custom_char_traits>,
 4742|   202k|        "\n"
 4743|   202k|        "Unsupported range type given as input to a scanning "
 4744|   202k|        "function.\n"
 4745|   202k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   202k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   202k|        "not supported.");
 4748|   202k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   202k|                  "\n"
 4750|   202k|                  "Unsupported range type given as input to a scanning "
 4751|   202k|                  "function.\n"
 4752|   202k|                  "file_marker_found cannot be used as an "
 4753|   202k|                  "source range type to scn::scan.\n"
 4754|   202k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   202k|                  "and do not provide an explicit source range, "
 4756|   202k|                  "or use scn::scan with a FILE* directly.");
 4757|   202k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   202k|                  "\n"
 4759|   202k|                  "Unsupported range type given as input to a scanning "
 4760|   202k|                  "function.\n"
 4761|   202k|                  "In order to be scannable, a range needs to satisfy "
 4762|   202k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   202k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   202k|                  "\n"
 4765|   202k|                  "Unsupported range type given as input to a scanning "
 4766|   202k|                  "function.\n"
 4767|   202k|                  "A range needs to model forward_range and have a valid "
 4768|   202k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   202k|                  "Examples of scannable ranges are std::string, "
 4770|   202k|                  "std::string_view, "
 4771|   202k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   202k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   202k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   202k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   202k|{
 4668|   202k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   202k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   202k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   202k|    {
 2855|   202k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   202k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   202k|    {
 2836|   202k|        return t.data();
 2837|   202k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|   202k|    {
 3229|   202k|        return detail::to_address(ranges::begin(derived()));
 3230|   202k|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   331k|{
  326|   331k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   331k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   331k|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   331k|{
  304|   331k|    return p;
  305|   331k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   205k|    {
 2724|   205k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   205k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   205k|    {
 2705|   205k|        return decay_copy(t.begin());
 2706|   205k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  41.6M|    {
 3326|  41.6M|        return m_iterator;
 3327|  41.6M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   202k|    {
 3185|   202k|        return static_cast<const D&>(*this);
 3186|   202k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   202k|    {
 2930|   202k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   202k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   202k|    {
 2896|   202k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   202k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|   440k|    {
 3342|   440k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|   440k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   198k|        : base(unexpect, std::move(e.error())),
 1474|   198k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   198k|    {
 1476|   198k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   198k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   198k|          m_has_value(false)
  446|   198k|    {
  447|   198k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   202k|    {
 1177|   202k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|  3.45k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  3.45k|                      ranges::iterator_t<SourceRange>>) {
 5935|  3.45k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  3.45k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   126k|    {
 2724|   126k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   126k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   126k|    {
 2705|   126k|        return decay_copy(t.begin());
 2706|   126k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|  3.45k|{
 5920|  3.45k|    return ranges::end(source);
 5921|  3.45k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.45k|    {
 2781|  3.45k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.45k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.45k|    {
 2763|  3.45k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.45k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  40.6M|    {
 3330|  40.6M|        return m_sentinel;
 3331|  40.6M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  3.45k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.45k|    {
 1430|  3.45k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  3.45k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.45k|    {
  437|  3.45k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  32.0k|    {
 7986|  32.0k|        return m_str;
 7987|  32.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  64.0k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  64.0k|    {
 5436|  64.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE12arg_pointersEv:
 5388|  64.0k|    {
 5389|  64.0k|        return m_argptrs;
 5390|  64.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|   385k|        : m_desc(desc), m_builtin_values(data)
 5487|   385k|    {
 5488|   385k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  32.0k|{
 8831|  32.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 484]
  |  |  ------------------
  ------------------
 8832|  31.5k|        return unexpected(result.error());
 8833|  31.5k|    }
 8834|    484|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  32.0k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   202k|    {
 1598|   202k|        return has_value();
 1599|   202k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   404k|    {
  485|   404k|        return m_has_value;
  486|   404k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   198k|    {
 1604|   198k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   198k|        return this->get_unexpected().error();
 1606|   198k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   198k|    {
  468|   198k|        return m_unexpected;
  469|   198k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  33.1k|        : base(unexpect, std::move(e.error())),
 1474|  33.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.1k|    {
 1476|  33.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  33.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.1k|          m_has_value(false)
  446|  33.1k|    {
  447|  33.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.6k|    {
 1177|  33.6k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  3.19k|    {
 1653|  3.19k|        return value();
 1654|  3.19k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  3.45k|    {
 1627|  3.45k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.45k|        return this->get_value();
 1629|  3.45k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.45k|    {
  451|  3.45k|        return m_value;
  452|  3.45k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ES8_ONSt3__15tupleIJaEEE:
 5838|    523|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    523|    static_cast<    \
  |  |  929|    523|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    523|    static_cast<    \
  |  |  929|    523|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    523|    {
 5840|    523|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  3.45k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  3.45k|    static_cast<    \
  |  |  929|  3.45k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  3.45k|    {
 5691|  3.45k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    523|        : base(std::in_place, std::forward<U>(val)),
 1428|    523|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    523|    {
 1430|    523|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    523|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    523|    {
  437|    523|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
 5383|  64.0k|    {
 5384|  64.0k|        return m_args;
 5385|  64.0k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  1.37M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.37M|    static_cast<    \
  |  |  929|  1.37M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.37M|    static_cast<    \
  |  |  929|  1.37M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.37M|    {
 3312|  1.37M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|   385k|{
 7707|   385k|    return s;
 7708|   385k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|   385k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  32.0k|        : m_str(r.str)
 7981|  32.0k|    {
 7982|  32.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  33.6k|    {
 1598|  33.6k|        return has_value();
 1599|  33.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.1k|    {
  485|  34.1k|        return m_has_value;
  486|  34.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEEptEv:
 1672|    523|    {
 1673|    523|        return &value();
 1674|    523|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJaEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    523|    {
 1627|    523|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    523|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    523|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    523|        return this->get_value();
 1629|    523|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    523|    {
  451|    523|        return m_value;
  452|    523|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|  3.45k|    {
 5708|  3.45k|        return ranges::begin(m_range);
 5709|  3.45k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|  96.2k|{
 8618|  96.2k|#if !SCN_DISABLE_LOCALE
 8619|  96.2k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  96.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  96.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  96.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  96.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 94.6k, False: 1.59k]
  |  |  ------------------
  ------------------
 8626|  94.6k|        return unexpected(result.error());
 8627|  94.6k|    }
 8628|  1.59k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  96.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
 5164|  3.23k|{
 5165|  3.23k|    check_scan_arg_types<T>();
 5166|       |
 5167|  3.23k|    basic_scan_arg<Context> arg;
 5168|  3.23k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  3.23k|    arg.m_value = make_value<Context>(value);
 5170|  3.23k|    return arg;
 5171|  3.23k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|   404k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  9.72k|{
 8642|  9.72k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  9.72k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  9.72k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.46k, False: 261]
  |  |  ------------------
  ------------------
 8646|  9.46k|        return unexpected(result.error());
 8647|  9.46k|    }
 8648|    261|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    261|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  9.72k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|    261|    {
 1663|    261|        return std::move(value());
 1664|    261|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDav:
 5405|  63.9k|{
 5406|  63.9k|    detail::check_scan_arg_types<Args...>();
 5407|  63.9k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  63.9k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2Ev:
 5357|  63.9k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  63.9k|    {
 5359|  63.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE12make_argptrsIJhEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  63.9k|    {
 5370|  63.9k|        return {detail::make_arg<
 5371|  63.9k|            kind, Context,
 5372|  63.9k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  63.9k|                                 typename Context::char_type>::value>(args)...};
 5374|  63.9k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEEPvRT2_:
 5179|  63.9k|{
 5180|  63.9k|    return make_value<Context>(value).ref_value;
 5181|  63.9k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
 5129|  67.1k|{
 5130|  67.1k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  67.1k|                                  needs_context_tag>) {
 5134|  67.1k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  67.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  67.1k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERh:
 4968|  67.1k|    {                                                                        \
 4969|  67.1k|        return val;                                                          \
 4970|  67.1k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  31.9k|    {
 7986|  31.9k|        return m_str;
 7987|  31.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  63.9k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  63.9k|    {
 5436|  63.9k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE12arg_pointersEv:
 5388|  63.9k|    {
 5389|  63.9k|        return m_argptrs;
 5390|  63.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  31.9k|{
 8831|  31.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 408]
  |  |  ------------------
  ------------------
 8832|  31.5k|        return unexpected(result.error());
 8833|  31.5k|    }
 8834|    408|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    408|    static_cast<    \
  |  |  929|    408|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    408|    static_cast<    \
  |  |  929|    408|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  31.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  33.1k|        : base(unexpect, std::move(e.error())),
 1474|  33.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.1k|    {
 1476|  33.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  33.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.1k|          m_has_value(false)
  446|  33.1k|    {
  447|  33.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.5k|    {
 1177|  33.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ES8_ONSt3__15tupleIJhEEE:
 5838|    439|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    439|    static_cast<    \
  |  |  929|    439|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    439|    static_cast<    \
  |  |  929|    439|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    439|    {
 5840|    439|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    439|        : base(std::in_place, std::forward<U>(val)),
 1428|    439|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    439|    {
 1430|    439|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    439|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    439|    {
  437|    439|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
 5383|  63.9k|    {
 5384|  63.9k|        return m_args;
 5385|  63.9k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  31.9k|        : m_str(r.str)
 7981|  31.9k|    {
 7982|  31.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  33.5k|    {
 1598|  33.5k|        return has_value();
 1599|  33.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.0k|    {
  485|  34.0k|        return m_has_value;
  486|  34.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEEptEv:
 1672|    439|    {
 1673|    439|        return &value();
 1674|    439|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJhEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    439|    {
 1627|    439|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    439|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    439|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    439|        return this->get_value();
 1629|    439|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    439|    {
  451|    439|        return m_value;
  452|    439|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
 5164|  3.21k|{
 5165|  3.21k|    check_scan_arg_types<T>();
 5166|       |
 5167|  3.21k|    basic_scan_arg<Context> arg;
 5168|  3.21k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  3.21k|    arg.m_value = make_value<Context>(value);
 5170|  3.21k|    return arg;
 5171|  3.21k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDav:
 5405|  64.3k|{
 5406|  64.3k|    detail::check_scan_arg_types<Args...>();
 5407|  64.3k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  64.3k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2Ev:
 5357|  64.3k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  64.3k|    {
 5359|  64.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12make_argptrsIJiEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  64.3k|    {
 5370|  64.3k|        return {detail::make_arg<
 5371|  64.3k|            kind, Context,
 5372|  64.3k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  64.3k|                                 typename Context::char_type>::value>(args)...};
 5374|  64.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEEPvRT2_:
 5179|  64.3k|{
 5180|  64.3k|    return make_value<Context>(value).ref_value;
 5181|  64.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
 5129|  67.5k|{
 5130|  67.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  67.5k|                                  needs_context_tag>) {
 5134|  67.5k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  67.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  67.5k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERi:
 4968|  67.5k|    {                                                                        \
 4969|  67.5k|        return val;                                                          \
 4970|  67.5k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  32.1k|    {
 7986|  32.1k|        return m_str;
 7987|  32.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  64.3k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  64.3k|    {
 5436|  64.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE12arg_pointersEv:
 5388|  64.3k|    {
 5389|  64.3k|        return m_argptrs;
 5390|  64.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  32.1k|{
 8831|  32.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 590]
  |  |  ------------------
  ------------------
 8832|  31.5k|        return unexpected(result.error());
 8833|  31.5k|    }
 8834|    590|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    590|    static_cast<    \
  |  |  929|    590|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    590|    static_cast<    \
  |  |  929|    590|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  32.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  33.1k|        : base(unexpect, std::move(e.error())),
 1474|  33.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.1k|    {
 1476|  33.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  33.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.1k|          m_has_value(false)
  446|  33.1k|    {
  447|  33.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.7k|    {
 1177|  33.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ES8_ONSt3__15tupleIJiEEE:
 5838|    639|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    639|    static_cast<    \
  |  |  929|    639|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    639|    static_cast<    \
  |  |  929|    639|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    639|    {
 5840|    639|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    639|        : base(std::in_place, std::forward<U>(val)),
 1428|    639|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    639|    {
 1430|    639|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    639|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    639|    {
  437|    639|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
 5383|  64.3k|    {
 5384|  64.3k|        return m_args;
 5385|  64.3k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  32.1k|        : m_str(r.str)
 7981|  32.1k|    {
 7982|  32.1k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  33.7k|    {
 1598|  33.7k|        return has_value();
 1599|  33.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.4k|    {
  485|  34.4k|        return m_has_value;
  486|  34.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEEptEv:
 1672|    639|    {
 1673|    639|        return &value();
 1674|    639|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJiEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    639|    {
 1627|    639|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    639|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    639|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    639|        return this->get_value();
 1629|    639|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    639|    {
  451|    639|        return m_value;
  452|    639|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
 5164|  3.25k|{
 5165|  3.25k|    check_scan_arg_types<T>();
 5166|       |
 5167|  3.25k|    basic_scan_arg<Context> arg;
 5168|  3.25k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  3.25k|    arg.m_value = make_value<Context>(value);
 5170|  3.25k|    return arg;
 5171|  3.25k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDav:
 5405|  64.0k|{
 5406|  64.0k|    detail::check_scan_arg_types<Args...>();
 5407|  64.0k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  64.0k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2Ev:
 5357|  64.0k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  64.0k|    {
 5359|  64.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12make_argptrsIJjEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  64.0k|    {
 5370|  64.0k|        return {detail::make_arg<
 5371|  64.0k|            kind, Context,
 5372|  64.0k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  64.0k|                                 typename Context::char_type>::value>(args)...};
 5374|  64.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEEPvRT2_:
 5179|  64.0k|{
 5180|  64.0k|    return make_value<Context>(value).ref_value;
 5181|  64.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
 5129|  67.2k|{
 5130|  67.2k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  67.2k|                                  needs_context_tag>) {
 5134|  67.2k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  67.2k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERj:
 4968|  67.2k|    {                                                                        \
 4969|  67.2k|        return val;                                                          \
 4970|  67.2k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  32.0k|    {
 7986|  32.0k|        return m_str;
 7987|  32.0k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  64.0k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  64.0k|    {
 5436|  64.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE12arg_pointersEv:
 5388|  64.0k|    {
 5389|  64.0k|        return m_argptrs;
 5390|  64.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  32.0k|{
 8831|  32.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 466]
  |  |  ------------------
  ------------------
 8832|  31.5k|        return unexpected(result.error());
 8833|  31.5k|    }
 8834|    466|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    466|    static_cast<    \
  |  |  929|    466|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    466|    static_cast<    \
  |  |  929|    466|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  32.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  33.1k|        : base(unexpect, std::move(e.error())),
 1474|  33.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.1k|    {
 1476|  33.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  33.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.1k|          m_has_value(false)
  446|  33.1k|    {
  447|  33.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.6k|    {
 1177|  33.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ES8_ONSt3__15tupleIJjEEE:
 5838|    503|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    503|    static_cast<    \
  |  |  929|    503|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    503|    static_cast<    \
  |  |  929|    503|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    503|    {
 5840|    503|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    503|        : base(std::in_place, std::forward<U>(val)),
 1428|    503|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    503|    {
 1430|    503|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    503|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    503|    {
  437|    503|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
 5383|  64.0k|    {
 5384|  64.0k|        return m_args;
 5385|  64.0k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  32.0k|        : m_str(r.str)
 7981|  32.0k|    {
 7982|  32.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  33.6k|    {
 1598|  33.6k|        return has_value();
 1599|  33.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.1k|    {
  485|  34.1k|        return m_has_value;
  486|  34.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEEptEv:
 1672|    503|    {
 1673|    503|        return &value();
 1674|    503|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJjEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    503|    {
 1627|    503|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    503|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    503|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    503|        return this->get_value();
 1629|    503|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    503|    {
  451|    503|        return m_value;
  452|    503|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
 5164|  3.23k|{
 5165|  3.23k|    check_scan_arg_types<T>();
 5166|       |
 5167|  3.23k|    basic_scan_arg<Context> arg;
 5168|  3.23k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  3.23k|    arg.m_value = make_value<Context>(value);
 5170|  3.23k|    return arg;
 5171|  3.23k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDav:
 5405|  64.5k|{
 5406|  64.5k|    detail::check_scan_arg_types<Args...>();
 5407|  64.5k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  64.5k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2Ev:
 5357|  64.5k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  64.5k|    {
 5359|  64.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE12make_argptrsIJxEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  64.5k|    {
 5370|  64.5k|        return {detail::make_arg<
 5371|  64.5k|            kind, Context,
 5372|  64.5k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  64.5k|                                 typename Context::char_type>::value>(args)...};
 5374|  64.5k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEEPvRT2_:
 5179|  64.5k|{
 5180|  64.5k|    return make_value<Context>(value).ref_value;
 5181|  64.5k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
 5129|  67.7k|{
 5130|  67.7k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  67.7k|                                  needs_context_tag>) {
 5134|  67.7k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  67.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  67.7k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERx:
 4968|  67.7k|    {                                                                        \
 4969|  67.7k|        return val;                                                          \
 4970|  67.7k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  32.2k|    {
 7986|  32.2k|        return m_str;
 7987|  32.2k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  64.5k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  64.5k|    {
 5436|  64.5k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE12arg_pointersEv:
 5388|  64.5k|    {
 5389|  64.5k|        return m_argptrs;
 5390|  64.5k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  32.2k|{
 8831|  32.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 696]
  |  |  ------------------
  ------------------
 8832|  31.5k|        return unexpected(result.error());
 8833|  31.5k|    }
 8834|    696|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    696|    static_cast<    \
  |  |  929|    696|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    696|    static_cast<    \
  |  |  929|    696|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  32.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  33.1k|        : base(unexpect, std::move(e.error())),
 1474|  33.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.1k|    {
 1476|  33.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  33.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.1k|          m_has_value(false)
  446|  33.1k|    {
  447|  33.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.8k|    {
 1177|  33.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ES8_ONSt3__15tupleIJxEEE:
 5838|    756|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    756|    static_cast<    \
  |  |  929|    756|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    756|    static_cast<    \
  |  |  929|    756|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    756|    {
 5840|    756|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    756|        : base(std::in_place, std::forward<U>(val)),
 1428|    756|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    756|    {
 1430|    756|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    756|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    756|    {
  437|    756|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
 5383|  64.5k|    {
 5384|  64.5k|        return m_args;
 5385|  64.5k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  32.2k|        : m_str(r.str)
 7981|  32.2k|    {
 7982|  32.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  33.8k|    {
 1598|  33.8k|        return has_value();
 1599|  33.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.6k|    {
  485|  34.6k|        return m_has_value;
  486|  34.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEEptEv:
 1672|    756|    {
 1673|    756|        return &value();
 1674|    756|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJxEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    756|    {
 1627|    756|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    756|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    756|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    756|        return this->get_value();
 1629|    756|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    756|    {
  451|    756|        return m_value;
  452|    756|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
 5164|  3.27k|{
 5165|  3.27k|    check_scan_arg_types<T>();
 5166|       |
 5167|  3.27k|    basic_scan_arg<Context> arg;
 5168|  3.27k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  3.27k|    arg.m_value = make_value<Context>(value);
 5170|  3.27k|    return arg;
 5171|  3.27k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDav:
 5405|  64.2k|{
 5406|  64.2k|    detail::check_scan_arg_types<Args...>();
 5407|  64.2k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  64.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2Ev:
 5357|  64.2k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  64.2k|    {
 5359|  64.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE12make_argptrsIJyEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|  64.2k|    {
 5370|  64.2k|        return {detail::make_arg<
 5371|  64.2k|            kind, Context,
 5372|  64.2k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  64.2k|                                 typename Context::char_type>::value>(args)...};
 5374|  64.2k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEEPvRT2_:
 5179|  64.2k|{
 5180|  64.2k|    return make_value<Context>(value).ref_value;
 5181|  64.2k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
 5129|  67.4k|{
 5130|  67.4k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  67.4k|                                  needs_context_tag>) {
 5134|  67.4k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  67.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  67.4k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERy:
 4968|  67.4k|    {                                                                        \
 4969|  67.4k|        return val;                                                          \
 4970|  67.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|  32.1k|    {
 7986|  32.1k|        return m_str;
 7987|  32.1k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  64.2k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  64.2k|    {
 5436|  64.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE12arg_pointersEv:
 5388|  64.2k|    {
 5389|  64.2k|        return m_argptrs;
 5390|  64.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|  32.1k|{
 8831|  32.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 548]
  |  |  ------------------
  ------------------
 8832|  31.5k|        return unexpected(result.error());
 8833|  31.5k|    }
 8834|    548|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    548|    static_cast<    \
  |  |  929|    548|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    548|    static_cast<    \
  |  |  929|    548|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  32.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  33.1k|        : base(unexpect, std::move(e.error())),
 1474|  33.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.1k|    {
 1476|  33.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  33.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.1k|          m_has_value(false)
  446|  33.1k|    {
  447|  33.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.7k|    {
 1177|  33.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ES8_ONSt3__15tupleIJyEEE:
 5838|    593|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    593|    static_cast<    \
  |  |  929|    593|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    593|    static_cast<    \
  |  |  929|    593|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    593|    {
 5840|    593|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|    593|        : base(std::in_place, std::forward<U>(val)),
 1428|    593|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    593|    {
 1430|    593|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|    593|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    593|    {
  437|    593|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
 5383|  64.2k|    {
 5384|  64.2k|        return m_args;
 5385|  64.2k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  32.1k|        : m_str(r.str)
 7981|  32.1k|    {
 7982|  32.1k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  33.7k|    {
 1598|  33.7k|        return has_value();
 1599|  33.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.3k|    {
  485|  34.3k|        return m_has_value;
  486|  34.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEEptEv:
 1672|    593|    {
 1673|    593|        return &value();
 1674|    593|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJyEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|    593|    {
 1627|    593|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    593|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    593|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    593|        return this->get_value();
 1629|    593|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    593|    {
  451|    593|        return m_value;
  452|    593|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
 5164|  3.24k|{
 5165|  3.24k|    check_scan_arg_types<T>();
 5166|       |
 5167|  3.24k|    basic_scan_arg<Context> arg;
 5168|  3.24k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  3.24k|    arg.m_value = make_value<Context>(value);
 5170|  3.24k|    return arg;
 5171|  3.24k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   198k|    {
 2724|   198k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   198k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   198k|    {
 2705|   198k|        return decay_copy(t.begin());
 2706|   198k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|   118M|{
 1949|   118M|    return SCN_FWD(t);
  ------------------
  |  |  930|   118M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   118M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   404k|    {
 2781|   404k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   404k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   404k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   404k|    {
 2763|   404k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   404k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   404k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|  96.2k|{
 8602|  96.2k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  96.2k|    auto result = vscan_impl(buffer, format, args);
 8605|  96.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 94.6k, False: 1.59k]
  |  |  ------------------
  ------------------
 8606|  94.6k|        return unexpected(result.error());
 8607|  94.6k|    }
 8608|  1.59k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  96.2k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   202k|{
 4729|   202k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   202k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   202k|                  "\n"
 4733|   202k|                  "Unsupported range type given as input to a scanning "
 4734|   202k|                  "function.\n"
 4735|   202k|                  "A range needs to have a character type (value type) "
 4736|   202k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   202k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   202k|                  "to be included.\n"
 4739|   202k|                  "See the scnlib documentation for more details.");
 4740|   202k|    static_assert(
 4741|   202k|        !std::is_same_v<T, custom_char_traits>,
 4742|   202k|        "\n"
 4743|   202k|        "Unsupported range type given as input to a scanning "
 4744|   202k|        "function.\n"
 4745|   202k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   202k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   202k|        "not supported.");
 4748|   202k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   202k|                  "\n"
 4750|   202k|                  "Unsupported range type given as input to a scanning "
 4751|   202k|                  "function.\n"
 4752|   202k|                  "file_marker_found cannot be used as an "
 4753|   202k|                  "source range type to scn::scan.\n"
 4754|   202k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   202k|                  "and do not provide an explicit source range, "
 4756|   202k|                  "or use scn::scan with a FILE* directly.");
 4757|   202k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   202k|                  "\n"
 4759|   202k|                  "Unsupported range type given as input to a scanning "
 4760|   202k|                  "function.\n"
 4761|   202k|                  "In order to be scannable, a range needs to satisfy "
 4762|   202k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   202k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   202k|                  "\n"
 4765|   202k|                  "Unsupported range type given as input to a scanning "
 4766|   202k|                  "function.\n"
 4767|   202k|                  "A range needs to model forward_range and have a valid "
 4768|   202k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   202k|                  "Examples of scannable ranges are std::string, "
 4770|   202k|                  "std::string_view, "
 4771|   202k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   202k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   202k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   202k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   202k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   202k|    else {
 4714|   202k|        return make_forward_scan_buffer(r);
 4715|   202k|    }
 4716|   202k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   202k|{
 4533|   202k|    return basic_scan_forward_buffer_impl(range);
 4534|   202k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   202k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   202k|          m_cursor(ranges::begin(*m_range))
 4419|   202k|    {
 4420|   202k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   202k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   202k|    {
 4391|   202k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   202k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   202k|    {
 4159|   202k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   202k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   205k|    {
 2724|   205k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   205k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   205k|    {
 2705|   205k|        return decay_copy(t.begin());
 2706|   205k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|   209k|    {
 3326|   209k|        return m_iterator;
 3327|   209k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  39.2M|    {
 4424|  39.2M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 117k, False: 39.1M]
  ------------------
 4425|   117k|            return false;
 4426|   117k|        }
 4427|  39.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  39.1M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  39.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  39.1M|        }
 4430|  39.1M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 38.9M, False: 144k]
  ------------------
 4431|  38.9M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  38.9M|                                          this->m_current_view.begin(),
 4433|  38.9M|                                          this->m_current_view.end());
 4434|  38.9M|        }
 4435|  39.1M|        m_latest = *m_cursor;
 4436|  39.1M|        ++m_cursor;
 4437|  39.1M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  39.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  39.1M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  39.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  39.1M|        }
 4441|  39.1M|        return true;
 4442|  39.2M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   117M|    {
 2781|   117M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   117M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   117M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   117M|    {
 2763|   117M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   117M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   117M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|   117M|    {
 3330|   117M|        return m_sentinel;
 3331|   117M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   202k|    {
 4079|   202k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   202k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   202k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   198k|        : base(unexpect, std::move(e.error())),
 1474|   198k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   198k|    {
 1476|   198k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   198k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   198k|          m_has_value(false)
  446|   198k|    {
  447|   198k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   202k|    {
 1177|   202k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|  3.45k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  3.45k|                      ranges::iterator_t<SourceRange>>) {
 5935|  3.45k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  3.45k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.45k|    {
 2724|  3.45k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.45k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.45k|    {
 2705|  3.45k|        return decay_copy(t.begin());
 2706|  3.45k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|  3.45k|{
 5920|  3.45k|    return ranges::end(source);
 5921|  3.45k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.45k|    {
 2781|  3.45k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.45k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.45k|    {
 2763|  3.45k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.45k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.45k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  3.45k|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.45k|    {
 1430|  3.45k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  3.45k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.45k|    {
  437|  3.45k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  32.0k|    {
 7986|  32.0k|        return m_str;
 7987|  32.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  32.0k|{
 8831|  32.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 484]
  |  |  ------------------
  ------------------
 8832|  31.5k|        return unexpected(result.error());
 8833|  31.5k|    }
 8834|    484|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    484|    static_cast<    \
  |  |  929|    484|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  32.0k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   202k|    {
 1598|   202k|        return has_value();
 1599|   202k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   404k|    {
  485|   404k|        return m_has_value;
  486|   404k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   198k|    {
 1604|   198k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   198k|        return this->get_unexpected().error();
 1606|   198k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   198k|    {
  468|   198k|        return m_unexpected;
  469|   198k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  33.1k|        : base(unexpect, std::move(e.error())),
 1474|  33.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.1k|    {
 1476|  33.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  33.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.1k|          m_has_value(false)
  446|  33.1k|    {
  447|  33.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.6k|    {
 1177|  33.6k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  3.19k|    {
 1653|  3.19k|        return value();
 1654|  3.19k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  3.45k|    {
 1627|  3.45k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.45k|        return this->get_value();
 1629|  3.45k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  3.45k|    {
  451|  3.45k|        return m_value;
  452|  3.45k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ESE_ONS6_5tupleIJaEEE:
 5838|    523|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    523|    static_cast<    \
  |  |  929|    523|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    523|    static_cast<    \
  |  |  929|    523|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    523|    {
 5840|    523|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|  3.45k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  3.45k|    static_cast<    \
  |  |  929|  3.45k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  3.45k|    {
 5691|  3.45k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    523|        : base(std::in_place, std::forward<U>(val)),
 1428|    523|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    523|    {
 1430|    523|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    523|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    523|    {
  437|    523|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   205k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   205k|    static_cast<    \
  |  |  929|   205k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   205k|    static_cast<    \
  |  |  929|   205k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   205k|    {
 3312|   205k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  32.0k|        : m_str(r.str)
 7981|  32.0k|    {
 7982|  32.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEcvbEv:
 1597|  33.6k|    {
 1598|  33.6k|        return has_value();
 1599|  33.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.1k|    {
  485|  34.1k|        return m_has_value;
  486|  34.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEEptEv:
 1672|    523|    {
 1673|    523|        return &value();
 1674|    523|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJaEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    523|    {
 1627|    523|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    523|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    523|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    523|        return this->get_value();
 1629|    523|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    523|    {
  451|    523|        return m_value;
  452|    523|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|  3.45k|    {
 5708|  3.45k|        return ranges::begin(m_range);
 5709|  3.45k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|  96.2k|{
 8618|  96.2k|#if !SCN_DISABLE_LOCALE
 8619|  96.2k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  96.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  96.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  96.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  96.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 94.6k, False: 1.59k]
  |  |  ------------------
  ------------------
 8626|  94.6k|        return unexpected(result.error());
 8627|  94.6k|    }
 8628|  1.59k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.59k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  96.2k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  9.72k|{
 8642|  9.72k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  9.72k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  9.72k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.46k, False: 261]
  |  |  ------------------
  ------------------
 8646|  9.46k|        return unexpected(result.error());
 8647|  9.46k|    }
 8648|    261|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|    261|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  9.72k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|    261|    {
 1663|    261|        return std::move(value());
 1664|    261|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  31.9k|    {
 7986|  31.9k|        return m_str;
 7987|  31.9k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  31.9k|{
 8831|  31.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  31.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 408]
  |  |  ------------------
  ------------------
 8832|  31.5k|        return unexpected(result.error());
 8833|  31.5k|    }
 8834|    408|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    408|    static_cast<    \
  |  |  929|    408|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    408|    static_cast<    \
  |  |  929|    408|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  31.9k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  33.1k|        : base(unexpect, std::move(e.error())),
 1474|  33.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.1k|    {
 1476|  33.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  33.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.1k|          m_has_value(false)
  446|  33.1k|    {
  447|  33.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.5k|    {
 1177|  33.5k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ESE_ONS6_5tupleIJhEEE:
 5838|    439|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    439|    static_cast<    \
  |  |  929|    439|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    439|    static_cast<    \
  |  |  929|    439|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    439|    {
 5840|    439|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    439|        : base(std::in_place, std::forward<U>(val)),
 1428|    439|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    439|    {
 1430|    439|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    439|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    439|    {
  437|    439|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  31.9k|        : m_str(r.str)
 7981|  31.9k|    {
 7982|  31.9k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEcvbEv:
 1597|  33.5k|    {
 1598|  33.5k|        return has_value();
 1599|  33.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.0k|    {
  485|  34.0k|        return m_has_value;
  486|  34.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEEptEv:
 1672|    439|    {
 1673|    439|        return &value();
 1674|    439|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJhEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    439|    {
 1627|    439|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    439|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    439|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    439|        return this->get_value();
 1629|    439|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    439|    {
  451|    439|        return m_value;
  452|    439|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  32.1k|    {
 7986|  32.1k|        return m_str;
 7987|  32.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  32.1k|{
 8831|  32.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 590]
  |  |  ------------------
  ------------------
 8832|  31.5k|        return unexpected(result.error());
 8833|  31.5k|    }
 8834|    590|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    590|    static_cast<    \
  |  |  929|    590|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    590|    static_cast<    \
  |  |  929|    590|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  32.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  33.1k|        : base(unexpect, std::move(e.error())),
 1474|  33.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.1k|    {
 1476|  33.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  33.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.1k|          m_has_value(false)
  446|  33.1k|    {
  447|  33.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.7k|    {
 1177|  33.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ESE_ONS6_5tupleIJiEEE:
 5838|    639|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    639|    static_cast<    \
  |  |  929|    639|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    639|    static_cast<    \
  |  |  929|    639|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    639|    {
 5840|    639|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    639|        : base(std::in_place, std::forward<U>(val)),
 1428|    639|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    639|    {
 1430|    639|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    639|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    639|    {
  437|    639|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  32.1k|        : m_str(r.str)
 7981|  32.1k|    {
 7982|  32.1k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEcvbEv:
 1597|  33.7k|    {
 1598|  33.7k|        return has_value();
 1599|  33.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.4k|    {
  485|  34.4k|        return m_has_value;
  486|  34.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEEptEv:
 1672|    639|    {
 1673|    639|        return &value();
 1674|    639|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJiEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    639|    {
 1627|    639|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    639|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    639|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    639|        return this->get_value();
 1629|    639|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    639|    {
  451|    639|        return m_value;
  452|    639|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  32.0k|    {
 7986|  32.0k|        return m_str;
 7987|  32.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  32.0k|{
 8831|  32.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 466]
  |  |  ------------------
  ------------------
 8832|  31.5k|        return unexpected(result.error());
 8833|  31.5k|    }
 8834|    466|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    466|    static_cast<    \
  |  |  929|    466|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    466|    static_cast<    \
  |  |  929|    466|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  32.0k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  33.1k|        : base(unexpect, std::move(e.error())),
 1474|  33.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.1k|    {
 1476|  33.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  33.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.1k|          m_has_value(false)
  446|  33.1k|    {
  447|  33.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.6k|    {
 1177|  33.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ESE_ONS6_5tupleIJjEEE:
 5838|    503|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    503|    static_cast<    \
  |  |  929|    503|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    503|    static_cast<    \
  |  |  929|    503|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    503|    {
 5840|    503|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    503|        : base(std::in_place, std::forward<U>(val)),
 1428|    503|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    503|    {
 1430|    503|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    503|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    503|    {
  437|    503|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  32.0k|        : m_str(r.str)
 7981|  32.0k|    {
 7982|  32.0k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEcvbEv:
 1597|  33.6k|    {
 1598|  33.6k|        return has_value();
 1599|  33.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.1k|    {
  485|  34.1k|        return m_has_value;
  486|  34.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEEptEv:
 1672|    503|    {
 1673|    503|        return &value();
 1674|    503|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJjEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    503|    {
 1627|    503|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    503|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    503|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    503|        return this->get_value();
 1629|    503|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    503|    {
  451|    503|        return m_value;
  452|    503|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  32.2k|    {
 7986|  32.2k|        return m_str;
 7987|  32.2k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  32.2k|{
 8831|  32.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 696]
  |  |  ------------------
  ------------------
 8832|  31.5k|        return unexpected(result.error());
 8833|  31.5k|    }
 8834|    696|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    696|    static_cast<    \
  |  |  929|    696|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    696|    static_cast<    \
  |  |  929|    696|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  32.2k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  33.1k|        : base(unexpect, std::move(e.error())),
 1474|  33.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.1k|    {
 1476|  33.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  33.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.1k|          m_has_value(false)
  446|  33.1k|    {
  447|  33.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.8k|    {
 1177|  33.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ESE_ONS6_5tupleIJxEEE:
 5838|    756|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    756|    static_cast<    \
  |  |  929|    756|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    756|    static_cast<    \
  |  |  929|    756|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    756|    {
 5840|    756|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    756|        : base(std::in_place, std::forward<U>(val)),
 1428|    756|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    756|    {
 1430|    756|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    756|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    756|    {
  437|    756|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  32.2k|        : m_str(r.str)
 7981|  32.2k|    {
 7982|  32.2k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEcvbEv:
 1597|  33.8k|    {
 1598|  33.8k|        return has_value();
 1599|  33.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.6k|    {
  485|  34.6k|        return m_has_value;
  486|  34.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEEptEv:
 1672|    756|    {
 1673|    756|        return &value();
 1674|    756|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJxEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    756|    {
 1627|    756|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    756|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    756|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    756|        return this->get_value();
 1629|    756|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    756|    {
  451|    756|        return m_value;
  452|    756|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|  32.1k|    {
 7986|  32.1k|        return m_str;
 7987|  32.1k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|  32.1k|{
 8831|  32.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.5k, False: 548]
  |  |  ------------------
  ------------------
 8832|  31.5k|        return unexpected(result.error());
 8833|  31.5k|    }
 8834|    548|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    548|    static_cast<    \
  |  |  929|    548|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|    548|    static_cast<    \
  |  |  929|    548|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  32.1k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  33.1k|        : base(unexpect, std::move(e.error())),
 1474|  33.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.1k|    {
 1476|  33.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  33.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.1k|          m_has_value(false)
  446|  33.1k|    {
  447|  33.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  33.7k|    {
 1177|  33.7k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ESE_ONS6_5tupleIJyEEE:
 5838|    593|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    593|    static_cast<    \
  |  |  929|    593|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|    593|    static_cast<    \
  |  |  929|    593|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|    593|    {
 5840|    593|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|    593|        : base(std::in_place, std::forward<U>(val)),
 1428|    593|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    593|    {
 1430|    593|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|    593|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    593|    {
  437|    593|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|  32.1k|        : m_str(r.str)
 7981|  32.1k|    {
 7982|  32.1k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEcvbEv:
 1597|  33.7k|    {
 1598|  33.7k|        return has_value();
 1599|  33.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  34.3k|    {
  485|  34.3k|        return m_has_value;
  486|  34.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEEptEv:
 1672|    593|    {
 1673|    593|        return &value();
 1674|    593|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJyEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|    593|    {
 1627|    593|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    593|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    593|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    593|        return this->get_value();
 1629|    593|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  450|    593|    {
  451|    593|        return m_value;
  452|    593|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|   823k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|   823k|    {
 3564|   823k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   823k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   823k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  5.79M|    {
 3570|  5.79M|        return m_code == good;
 3571|  5.79M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   340k|    {
 3581|   340k|        return m_code;
 3582|   340k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  11.6M|    {
 3326|  11.6M|        return m_iterator;
 3327|  11.6M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  41.9M|    {
 3326|  41.9M|        return m_iterator;
 3327|  41.9M|    }
_ZNK3scn2v36detail12format_specs8get_baseEv:
 6231|   933k|    {
 6232|   933k|        SCN_GCC_COMPAT_PUSH
 6233|   933k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 6234|   933k|        switch (type) {
 6235|   174k|            case presentation_type::none:
  ------------------
  |  Branch (6235:13): [True: 174k, False: 758k]
  ------------------
 6236|   174k|                return 10;
 6237|   193k|            case presentation_type::int_generic:
  ------------------
  |  Branch (6237:13): [True: 193k, False: 739k]
  ------------------
 6238|   193k|                return 0;
 6239|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (6239:13): [True: 0, False: 933k]
  ------------------
 6240|      0|                return arbitrary_base;
 6241|       |
 6242|  85.4k|            case presentation_type::int_binary:
  ------------------
  |  Branch (6242:13): [True: 85.4k, False: 847k]
  ------------------
 6243|  85.4k|                return 2;
 6244|   123k|            case presentation_type::int_octal:
  ------------------
  |  Branch (6244:13): [True: 123k, False: 809k]
  ------------------
 6245|   123k|                return 8;
 6246|   174k|            case presentation_type::int_decimal:
  ------------------
  |  Branch (6246:13): [True: 174k, False: 758k]
  ------------------
 6247|   174k|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (6247:13): [True: 0, False: 933k]
  ------------------
 6248|   174k|                return 10;
 6249|   180k|            case presentation_type::int_hex:
  ------------------
  |  Branch (6249:13): [True: 180k, False: 752k]
  ------------------
 6250|   180k|                return 16;
 6251|       |
 6252|      0|            default:
  ------------------
  |  Branch (6252:13): [True: 0, False: 933k]
  ------------------
 6253|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6254|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6255|   933k|        }
 6256|   933k|        SCN_GCC_COMPAT_POP
 6257|   933k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  1.12M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|   833k|    {
 6314|   833k|        m_specs.type = type;
 6315|   833k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6375|   113k|    {
 6376|   113k|        SCN_UNLIKELY_ATTR
 6377|   113k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6378|   113k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|  1.01M|    {
 6387|  1.01M|        return static_cast<bool>(m_error);
 6388|  1.01M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   340k|{
 3605|   340k|    return a.code() == b;
 3606|   340k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   340k|{
 3609|   340k|    return !(a == b);
 3610|   340k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  1.16M|{
 4043|       |    // Pattern_White_Space property
 4044|  1.16M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 1.01M, False: 150k]
  |  Branch (4044:27): [True: 406k, False: 611k]
  ------------------
 4045|  1.16M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 9.99k, False: 751k]
  ------------------
 4046|  1.16M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 4.91k, False: 746k]
  ------------------
 4047|  1.16M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 1.72k, False: 744k]
  ------------------
 4048|  1.16M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 2.08k, False: 742k]
  ------------------
 4049|  1.16M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 2.48k, False: 739k]
  ------------------
 4050|  1.16M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 0, False: 739k]
  ------------------
 4051|  1.16M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|   179k|{
 7074|   179k|    switch (type) {
 7075|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 179k]
  ------------------
 7076|      0|            return arg_type_category::none;
 7077|       |
 7078|  29.7k|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 29.7k, False: 149k]
  ------------------
 7079|  29.7k|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 179k]
  ------------------
 7080|  63.2k|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 33.4k, False: 145k]
  ------------------
 7081|  63.2k|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 179k]
  ------------------
 7082|  97.2k|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 33.9k, False: 145k]
  ------------------
 7083|  97.2k|            return arg_type_category::integer;
 7084|       |
 7085|  25.8k|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 25.8k, False: 153k]
  ------------------
 7086|  25.8k|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 179k]
  ------------------
 7087|  53.7k|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 27.9k, False: 151k]
  ------------------
 7088|  53.7k|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 179k]
  ------------------
 7089|  81.9k|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 28.2k, False: 150k]
  ------------------
 7090|  81.9k|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 179k]
  ------------------
 7093|      0|            return arg_type_category::pointer;
 7094|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 179k]
  ------------------
 7095|      0|            return arg_type_category::boolean;
 7096|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 179k]
  ------------------
 7097|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 179k]
  ------------------
 7098|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 179k]
  ------------------
 7099|      0|            return arg_type_category::character;
 7100|       |
 7101|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 179k]
  ------------------
 7102|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 0, False: 179k]
  ------------------
 7103|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 0, False: 179k]
  ------------------
 7104|      0|            return arg_type_category::floating;
 7105|       |
 7106|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 0, False: 179k]
  ------------------
 7107|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 0, False: 179k]
  ------------------
 7108|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 0, False: 179k]
  ------------------
 7109|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 0, False: 179k]
  ------------------
 7110|      0|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 179k]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 179k]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   179k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|   179k|            SCN_CLANG_POP
 7121|   179k|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|   179k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  44.8k|{
 3650|  44.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  44.8k|}
_ZN3scn2v36detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7159|   955k|{
 7160|   955k|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  859|   955k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 955k]
  |  |  ------------------
  ------------------
 7161|      0|        return handler.on_error("Invalid type specifier for integer type");
 7162|      0|    }
 7163|   955k|    if (specs.localized) {
  ------------------
  |  Branch (7163:9): [True: 179k, False: 776k]
  ------------------
 7164|   179k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  859|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 7165|       |            // clang-format off
 7166|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 7167|       |            // clang-format on
 7168|      0|            return;
 7169|      0|        }
 7170|   179k|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  859|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 179k]
  |  |  ------------------
  ------------------
 7171|       |            // clang-format off
 7172|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 7173|       |            // clang-format on
 7174|      0|        }
 7175|   179k|    }
 7176|   955k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
 3649|  27.4k|{
 3650|  27.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  27.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  27.4k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|  73.9M|    {
 4203|  73.9M|        assert(m_begin);
 4204|  73.9M|        return m_end == nullptr;
 4205|  73.9M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   652k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   652k|    else {
 3716|   652k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   652k|    }
 3718|   652k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|  1.54M|    {
 4220|  1.54M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 1.54M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  1.54M|        return parent()->get_segment_starting_at(position());
 4226|  1.54M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|  40.4M|    {
 4214|  40.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  40.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  40.4M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  40.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|  1.54M|    {
 4109|  1.54M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 411k, False: 1.13M]
  |  |  ------------------
  ------------------
 4110|  1.54M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   411k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   411k|        }
 4113|  1.13M|        const auto start = pos - m_putback_buffer.size();
 4114|  1.13M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|  1.13M|        return m_current_view.substr(start);
 4116|  1.13M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4208|   369k|    {
 4209|   369k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|   369k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|   369k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|  2.39M|    {
 4198|  2.39M|        return m_position;
 4199|  2.39M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|  1.48M|    {
 4131|  1.48M|        return m_is_contiguous;
 4132|  1.48M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|   159G|    {
 4203|   159G|        assert(m_begin);
 4204|   159G|        return m_end == nullptr;
 4205|   159G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  6.10k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|  6.10k|    else {
 3716|  6.10k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  6.10k|    }
 3718|  6.10k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|   151k|    {
 4220|   151k|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 151k]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|   151k|        return parent()->get_segment_starting_at(position());
 4226|   151k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|  79.6G|    {
 4214|  79.6G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  79.6G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.6G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  79.6G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  79.6G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|   151k|    {
 4109|   151k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.88k, False: 148k]
  |  |  ------------------
  ------------------
 4110|   151k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  2.88k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  2.88k|        }
 4113|   148k|        const auto start = pos - m_putback_buffer.size();
 4114|   148k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   148k|        return m_current_view.substr(start);
 4116|   148k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4208|   114k|    {
 4209|   114k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   114k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   114k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|   114k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|   114k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|   271k|    {
 4198|   271k|        return m_position;
 4199|   271k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|   606k|    {
 4131|   606k|        return m_is_contiguous;
 4132|   606k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  1.16M|    {
 3180|  1.16M|        return static_cast<D&>(*this);
 3181|  1.16M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  1.16M|    {
 3221|  1.16M|        return detail::to_address(ranges::begin(derived()));
 3222|  1.16M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   123k|    {
 3180|   123k|        return static_cast<D&>(*this);
 3181|   123k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   123k|    {
 3221|   123k|        return detail::to_address(ranges::begin(derived()));
 3222|   123k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8179|   361k|    {
 8180|   361k|        return ranges::subrange{begin(), end()};
 8181|   361k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8163|  1.05M|    {
 8164|  1.05M|        return m_current;
 8165|  1.05M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8171|   361k|    {
 8172|   361k|        return ranges::default_sentinel;
 8173|   361k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  3.76M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.76M|    static_cast<    \
  |  |  929|  3.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.76M|    static_cast<    \
  |  |  929|  3.76M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.76M|    {
 3312|  3.76M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|   918k|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   465k|    {
 1837|   465k|        return detail::transform_error_impl(std::move(*this),
 1838|   465k|                                            std::forward<F>(f));
 1839|   465k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   465k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   465k|    else {
 1333|   465k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   465k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   465k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 452k, False: 12.6k]
  |  |  ------------------
  ------------------
 1335|   465k|                   ? result(*std::forward<Exp>(exp))
 1336|   465k|                   : result(unexpect,
 1337|  12.6k|                            trivial_invoke(std::forward<F>(f),
 1338|  12.6k|                                           std::forward<Exp>(exp).error()));
 1339|   465k|    }
 1340|   465k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  2.34M|    {
  485|  2.34M|        return m_has_value;
  486|  2.34M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   809k|    {
 1663|   809k|        return std::move(value());
 1664|   809k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   914k|    {
 1627|   914k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   914k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   914k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   914k|        return this->get_value();
 1629|   914k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   914k|    {
  451|   914k|        return m_value;
  452|   914k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  1.45M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.45M|    {
 1430|  1.45M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.45M|    {
  437|  1.45M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.62M|    {
 1177|  1.62M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  28.3k|{
 1211|  28.3k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  28.3k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  25.0k|    {
 1614|  25.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  25.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  25.0k|        return std::move(this->get_unexpected().error());
 1616|  25.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  25.4k|    {
  468|  25.4k|        return m_unexpected;
  469|  25.4k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   167k|    {
  361|   167k|        return m_unexpected;
  362|   167k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  45.4k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  45.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  45.4k|    {
 1486|  45.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   163k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   163k|          m_has_value(false)
  446|   163k|    {
  447|   163k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8179|   116k|    {
 8180|   116k|        return ranges::subrange{begin(), end()};
 8181|   116k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8163|   292k|    {
 8164|   292k|        return m_current;
 8165|   292k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8171|   116k|    {
 8172|   116k|        return ranges::default_sentinel;
 8173|   116k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  1.04M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.04M|    static_cast<    \
  |  |  929|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.04M|    static_cast<    \
  |  |  929|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.04M|    {
 3312|  1.04M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   145k|    {
 1837|   145k|        return detail::transform_error_impl(std::move(*this),
 1838|   145k|                                            std::forward<F>(f));
 1839|   145k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   145k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   145k|    else {
 1333|   145k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   145k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 143k, False: 1.99k]
  |  |  ------------------
  ------------------
 1335|   145k|                   ? result(*std::forward<Exp>(exp))
 1336|   145k|                   : result(unexpect,
 1337|  1.99k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.99k|                                           std::forward<Exp>(exp).error()));
 1339|   145k|    }
 1340|   145k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   704k|    {
  485|   704k|        return m_has_value;
  486|   704k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   237k|    {
 1663|   237k|        return std::move(value());
 1664|   237k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   239k|    {
 1627|   239k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   239k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   239k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   239k|        return this->get_value();
 1629|   239k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   239k|    {
  451|   239k|        return m_value;
  452|   239k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|   152k|        : base(std::in_place, std::forward<U>(val)),
 1428|   152k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   152k|    {
 1430|   152k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   152k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   152k|    {
  437|   152k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   528k|    {
 1177|   528k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  23.0k|    {
 1614|  23.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  23.0k|        return std::move(this->get_unexpected().error());
 1616|  23.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  23.1k|    {
  468|  23.1k|        return m_unexpected;
  469|  23.1k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|   122k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   122k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   122k|    {
 1486|   122k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   376k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   376k|          m_has_value(false)
  446|   376k|    {
  447|   376k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
 3649|   152k|{
 3650|   152k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   152k|}
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   242k|        : m_unexpected(std::forward<Err>(e))
  346|   242k|    {
  347|   242k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   242k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   242k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   184k|        : base(unexpect, std::move(e.error())),
 1474|   184k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   184k|    {
 1476|   184k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   196k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   196k|          m_has_value(false)
  446|   196k|    {
  447|   196k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.94M|    {
 1177|  2.94M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  2.74M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.74M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.74M|    {
 1430|  2.74M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.74M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.74M|    {
  437|  2.74M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  2.94M|    {
 1598|  2.94M|        return has_value();
 1599|  2.94M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  5.88M|    {
  485|  5.88M|        return m_has_value;
  486|  5.88M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   196k|    {
 1604|   196k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   196k|        return this->get_unexpected().error();
 1606|   196k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   196k|    {
  468|   196k|        return m_unexpected;
  469|   196k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  2.43M|    {
 1663|  2.43M|        return std::move(value());
 1664|  2.43M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  2.74M|    {
 1627|  2.74M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.74M|        return this->get_value();
 1629|  2.74M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  2.74M|    {
  451|  2.74M|        return m_value;
  452|  2.74M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   376k|        : base(unexpect, std::move(e.error())),
 1474|   376k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   376k|    {
 1476|   376k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   378k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   378k|          m_has_value(false)
  446|   378k|    {
  447|   378k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   661k|    {
 1177|   661k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|   283k|        : base(std::in_place, std::forward<U>(val)),
 1428|   283k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   283k|    {
 1430|   283k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   283k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   283k|    {
  437|   283k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   661k|    {
 1598|   661k|        return has_value();
 1599|   661k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.32M|    {
  485|  1.32M|        return m_has_value;
  486|  1.32M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   378k|    {
 1604|   378k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   378k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   378k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   378k|        return this->get_unexpected().error();
 1606|   378k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   378k|    {
  468|   378k|        return m_unexpected;
  469|   378k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|   280k|    {
 1663|   280k|        return std::move(value());
 1664|   280k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|   283k|    {
 1627|   283k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   283k|        return this->get_value();
 1629|   283k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|   283k|    {
  451|   283k|        return m_value;
  452|   283k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   466k|    {
 1837|   466k|        return detail::transform_error_impl(std::move(*this),
 1838|   466k|                                            std::forward<F>(f));
 1839|   466k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   466k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   466k|    else {
 1333|   466k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   466k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   466k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 454k, False: 11.7k]
  |  |  ------------------
  ------------------
 1335|   466k|                   ? result(*std::forward<Exp>(exp))
 1336|   466k|                   : result(unexpect,
 1337|  11.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  11.7k|                                           std::forward<Exp>(exp).error()));
 1339|   466k|    }
 1340|   466k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.61M|    {
  485|  1.61M|        return m_has_value;
  486|  1.61M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   454k|    {
 1663|   454k|        return std::move(value());
 1664|   454k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   559k|    {
 1627|   559k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   559k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   559k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   559k|        return this->get_value();
 1629|   559k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   559k|    {
  451|   559k|        return m_value;
  452|   559k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  11.7k|    {
 1614|  11.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  11.7k|        return std::move(this->get_unexpected().error());
 1616|  11.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  12.1k|    {
  468|  12.1k|        return m_unexpected;
  469|  12.1k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  11.7k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  11.7k|    {
 1486|  11.7k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  3.82M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   117k|        : base(unexpect, std::move(e.error())),
 1474|   117k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   117k|    {
 1476|   117k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  2.50M|    {
 4289|  2.50M|        return x.is_at_end();
 4290|  2.50M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  5.41M|    {
 4333|  5.41M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 5.41M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  5.41M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 5.41M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  5.41M|        return !read_at_position();
 4340|  5.41M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|  24.2M|    {
 4313|  24.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  24.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  24.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 24.2M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  24.2M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  24.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 21.5M, False: 2.64M]
  |  |  ------------------
  ------------------
 4320|  21.5M|            return true;
 4321|  21.5M|        }
 4322|       |
 4323|  5.12M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 2.64M, False: 2.48M]
  ------------------
 4324|  2.64M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 154k, False: 2.48M]
  ------------------
 4325|   154k|                return false;
 4326|   154k|            }
 4327|  2.64M|        }
 4328|  2.48M|        return true;
 4329|  2.64M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|  29.7M|    {
 4089|  29.7M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  29.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  6.98M|    {
 4248|  6.98M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  6.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  6.98M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 6.98M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  6.98M|        auto res = read_at_position();
 4257|  6.98M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  6.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  6.98M|        return parent()->get_character_at(m_position);
 4259|  6.98M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  6.98M|    {
 4120|  6.98M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  6.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.30M, False: 2.67M]
  |  |  ------------------
  ------------------
 4121|  6.98M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  4.30M|            return m_putback_buffer[pos];
 4123|  4.30M|        }
 4124|  2.67M|        const auto start = pos - m_putback_buffer.size();
 4125|  2.67M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  2.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  2.67M|        return m_current_view[start];
 4127|  2.67M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  1.38M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.38M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.38M|    {
 1430|  1.38M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.38M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.38M|    {
  437|  1.38M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.40M|    {
 1177|  1.40M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|  54.5k|        : m_unexpected(std::forward<Err>(e))
  346|  54.5k|    {
  347|  54.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  54.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  54.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  25.4k|        : base(unexpect, std::move(e.error())),
 1474|  25.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  25.4k|    {
 1476|  25.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  25.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  25.4k|          m_has_value(false)
  446|  25.4k|    {
  447|  25.4k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  83.8k|        : m_unexpected(std::forward<Args>(args)...)
  355|  83.8k|    {
  356|  83.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  83.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  83.8k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   571k|    {
 1598|   571k|        return has_value();
 1599|   571k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   105k|    {
 1653|   105k|        return value();
 1654|   105k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  8.13M|    {
 4283|  8.13M|        return !(lhs == rhs);
 4284|  8.13M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  8.47M|    {
 4278|  8.47M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 8.47M, False: 0]
  |  Branch (4278:46): [True: 598k, False: 7.87M]
  ------------------
 4279|  8.47M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  11.8M|    {
 4234|  11.8M|        ++m_position;
 4235|  11.8M|        (void)read_at_position();
 4236|  11.8M|        return *this;
 4237|  11.8M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  29.2k|        : m_unexpected(std::forward<Err>(e))
  346|  29.2k|    {
  347|  29.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  29.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  29.2k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  10.1k|        : base(unexpect, std::move(e.error())),
 1474|  10.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  10.1k|    {
 1476|  10.1k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  10.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  10.1k|          m_has_value(false)
  446|  10.1k|    {
  447|  10.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   659k|    {
 1177|   659k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   649k|        : base(std::in_place, std::forward<U>(val)),
 1428|   649k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   649k|    {
 1430|   649k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   649k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   649k|    {
  437|   649k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   659k|    {
 1598|   659k|        return has_value();
 1599|   659k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.31M|    {
  485|  1.31M|        return m_has_value;
  486|  1.31M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  10.1k|    {
 1604|  10.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  10.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  10.1k|        return this->get_unexpected().error();
 1606|  10.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  10.1k|    {
  468|  10.1k|        return m_unexpected;
  469|  10.1k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   649k|    {
 1663|   649k|        return std::move(value());
 1664|   649k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   649k|    {
 1627|   649k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   649k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   649k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   649k|        return this->get_value();
 1629|   649k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   649k|    {
  451|   649k|        return m_value;
  452|   649k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  8.31M|    {
 3330|  8.31M|        return m_sentinel;
 3331|  8.31M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  13.5k|        : m_unexpected(std::forward<Err>(e))
  346|  13.5k|    {
  347|  13.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  13.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  13.5k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  1.34M|    {
  361|  1.34M|        return m_unexpected;
  362|  1.34M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   122k|        : m_unexpected(std::forward<Args>(args)...)
  355|   122k|    {
  356|   122k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   122k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   122k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  2.56M|        : m_unexpected(std::forward<Err>(e))
  346|  2.56M|    {
  347|  2.56M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.56M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.56M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  2.56M|    {
  361|  2.56M|        return m_unexpected;
  362|  2.56M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  2.56M|        : m_unexpected(std::forward<Args>(args)...)
  355|  2.56M|    {
  356|  2.56M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.56M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  2.56M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  54.5k|{
 1211|  54.5k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  54.5k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  54.5k|        : m_unexpected(std::forward<Err>(e))
  346|  54.5k|    {
  347|  54.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  54.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  54.5k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JS8_EvEEDcOT_DpOT0_:
 1210|   153k|{
 1211|   153k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   153k|}
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  43.8k|{
  392|  43.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  43.8k|        T(std::forward<Args>(args)...);
  394|  43.8k|}
_ZNK3scn2v36ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSF_:
 2961|   122k|    {
 2962|   122k|        return fn::impl(std::forward<T>(t));
 2963|   122k|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISF_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 2952|   122k|    {
 2953|   122k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|   122k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSF_:
 2929|   122k|    {
 2930|   122k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   122k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESG_E4typeEOSH_NS0_6detail12priority_tagILm2EEE:
 2895|   122k|    {
 2896|   122k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   122k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  43.8k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  43.8k|    else {
  404|  43.8k|        p->~T();
  405|  43.8k|    }
  406|  43.8k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|    360|    {
 1604|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    360|        return this->get_unexpected().error();
 1606|    360|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  12.8k|        : base(unexpect, std::move(e.error())),
 1474|  12.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.8k|    {
 1476|  12.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  25.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  25.2k|          m_has_value(false)
  446|  25.2k|    {
  447|  25.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.76M|    {
 1177|  1.76M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   151k|        : base(std::in_place, std::forward<U>(val)),
 1428|   151k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   151k|    {
 1430|   151k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   151k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   151k|    {
  437|   151k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|   925k|        : base(unexpect, std::move(e.error())),
 1474|   925k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   925k|    {
 1476|   925k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   925k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   925k|          m_has_value(false)
  446|   925k|    {
  447|   925k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  1.42M|    {
 1598|  1.42M|        return has_value();
 1599|  1.42M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  3.02M|    {
  485|  3.02M|        return m_has_value;
  486|  3.02M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|   404k|    {
 1604|   404k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   404k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   404k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   404k|        return this->get_unexpected().error();
 1606|   404k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   437k|    {
  468|   437k|        return m_unexpected;
  469|   437k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   452k|        : base(std::in_place, std::forward<U>(val)),
 1428|   452k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   452k|    {
 1430|   452k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   452k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   452k|    {
  437|   452k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   452k|    {
 1177|   452k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   154k|    {
 1653|   154k|        return value();
 1654|   154k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   818k|    {
 1627|   818k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   818k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   818k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   818k|        return this->get_value();
 1629|   818k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   818k|    {
  451|   818k|        return m_value;
  452|   818k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   452k|    {
 1598|   452k|        return has_value();
 1599|   452k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   904k|    {
  485|   904k|        return m_has_value;
  486|   904k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   452k|    {
 1177|   452k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   452k|    {
 1663|   452k|        return std::move(value());
 1664|   452k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   452k|    {
 1627|   452k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   452k|        return this->get_value();
 1629|   452k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   452k|    {
  451|   452k|        return m_value;
  452|   452k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   369k|    {
 1837|   369k|        return detail::transform_error_impl(std::move(*this),
 1838|   369k|                                            std::forward<F>(f));
 1839|   369k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   369k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   369k|    else {
 1333|   369k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   369k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   369k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 356k, False: 12.4k]
  |  |  ------------------
  ------------------
 1335|   369k|                   ? result(*std::forward<Exp>(exp))
 1336|   369k|                   : result(unexpect,
 1337|  12.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  12.4k|                                           std::forward<Exp>(exp).error()));
 1339|   369k|    }
 1340|   369k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|   667k|        : base(std::in_place, std::forward<U>(val)),
 1428|   667k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   667k|    {
 1430|   667k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   667k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   667k|    {
  437|   667k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  12.4k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  12.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  12.4k|    {
 1486|  12.4k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   664k|    {
 1663|   664k|        return std::move(value());
 1664|   664k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1427|   452k|        : base(std::in_place, std::forward<U>(val)),
 1428|   452k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   452k|    {
 1430|   452k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   452k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   452k|    {
  437|   452k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   452k|    {
 1837|   452k|        return detail::transform_error_impl(std::move(*this),
 1838|   452k|                                            std::forward<F>(f));
 1839|   452k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|   452k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   452k|    else {
 1333|   452k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   452k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   452k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 452k, False: 0]
  |  |  ------------------
  ------------------
 1335|   452k|                   ? result(*std::forward<Exp>(exp))
 1336|   452k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   452k|    }
 1340|   452k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  484|   904k|    {
  485|   904k|        return m_has_value;
  486|   904k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   452k|    {
 1663|   452k|        return std::move(value());
 1664|   452k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   452k|    {
 1627|   452k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   452k|        return this->get_value();
 1629|   452k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  450|   452k|    {
  451|   452k|        return m_value;
  452|   452k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   452k|        : base(std::in_place, std::forward<U>(val)),
 1428|   452k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   452k|    {
 1430|   452k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   452k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   452k|    {
  437|   452k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   452k|    {
 1177|   452k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1597|   452k|    {
 1598|   452k|        return has_value();
 1599|   452k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   904k|    {
  485|   904k|        return m_has_value;
  486|   904k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   452k|    {
 1663|   452k|        return std::move(value());
 1664|   452k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   452k|    {
 1627|   452k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   452k|        return this->get_value();
 1629|   452k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   452k|    {
  451|   452k|        return m_value;
  452|   452k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   340k|    {
 1837|   340k|        return detail::transform_error_impl(std::move(*this),
 1838|   340k|                                            std::forward<F>(f));
 1839|   340k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   340k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   340k|    else {
 1333|   340k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   340k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   340k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 307k, False: 32.8k]
  |  |  ------------------
  ------------------
 1335|   340k|                   ? result(*std::forward<Exp>(exp))
 1336|   340k|                   : result(unexpect,
 1337|  32.8k|                            trivial_invoke(std::forward<F>(f),
 1338|  32.8k|                                           std::forward<Exp>(exp).error()));
 1339|   340k|    }
 1340|   340k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1613|  32.8k|    {
 1614|  32.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  32.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  32.8k|        return std::move(this->get_unexpected().error());
 1616|  32.8k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  3.44k|        : base(unexpect, std::move(e.error())),
 1474|  3.44k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.44k|    {
 1476|  3.44k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  624|  3.44k|        : m_has_value(false)
  625|  3.44k|    {
  626|  3.44k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  3.44k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  688|  3.44k|    {
  689|  3.44k|        scn::detail::construct_at(unexpected_ptr(),
  690|  3.44k|                                  std::forward<Args>(args)...);
  691|  3.44k|        m_has_value = false;
  692|  3.44k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  10.3k|    {
  718|  10.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  10.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  10.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  10.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  66.4k|    {
 1177|  66.4k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  63.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  63.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  63.0k|    {
 1430|  63.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  614|  63.0k|        : m_has_value(true)
  615|  63.0k|    {
  616|  63.0k|        construct(std::forward<Args>(args)...);
  617|  63.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  681|  63.0k|    {
  682|  63.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  63.0k|        m_has_value = true;
  684|  63.0k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  391|  63.0k|{
  392|  63.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  63.0k|        T(std::forward<Args>(args)...);
  394|  63.0k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   189k|    {
  706|   189k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   189k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   189k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1597|  66.4k|    {
 1598|  66.4k|        return has_value();
 1599|  66.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|   199k|    {
  675|   199k|        return m_has_value;
  676|   199k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1603|  3.44k|    {
 1604|  3.44k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.44k|        return this->get_unexpected().error();
 1606|  3.44k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  3.44k|    {
  658|  3.44k|        return *unexpected_ptr();
  659|  3.44k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  63.0k|    {
 1663|  63.0k|        return std::move(value());
 1664|  63.0k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  63.0k|    {
 1627|  63.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  63.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  63.0k|        return this->get_value();
 1629|  63.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  640|  63.0k|    {
  641|  63.0k|        return *value_ptr();
  642|  63.0k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|   701k|    {
 3326|   701k|        return m_iterator;
 3327|   701k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|   701k|    {
 3330|   701k|        return m_sentinel;
 3331|   701k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  630|  66.4k|    {
  631|  66.4k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 63.0k, False: 3.44k]
  ------------------
  632|  63.0k|            destroy_value();
  633|  63.0k|        }
  634|  3.44k|        else {
  635|  3.44k|            destroy_unexpected();
  636|  3.44k|        }
  637|  66.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  63.0k|    {
  696|  63.0k|        scn::detail::destroy_at(value_ptr());
  697|  63.0k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  397|  63.0k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  63.0k|    else {
  404|  63.0k|        p->~T();
  405|  63.0k|    }
  406|  63.0k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  3.44k|    {
  700|  3.44k|        scn::detail::destroy_at(unexpected_ptr());
  701|  3.44k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  1.62M|    {
 1598|  1.62M|        return has_value();
 1599|  1.62M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.24M|    {
  485|  3.24M|        return m_has_value;
  486|  3.24M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   163k|    {
 1604|   163k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   163k|        return this->get_unexpected().error();
 1606|   163k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   163k|    {
  468|   163k|        return m_unexpected;
  469|   163k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.15M|    {
 1663|  1.15M|        return std::move(value());
 1664|  1.15M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.45M|    {
 1627|  1.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.45M|        return this->get_value();
 1629|  1.45M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.45M|    {
  451|  1.45M|        return m_value;
  452|  1.45M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   309k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   309k|    static_cast<    \
  |  |  929|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   309k|    static_cast<    \
  |  |  929|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   309k|    {
 3312|   309k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  2.90M|    {
 4300|  2.90M|        return !x.is_at_end();
 4301|  2.90M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  12.1k|        : base(unexpect, std::move(e.error())),
 1474|  12.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.1k|    {
 1476|  12.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  12.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.1k|          m_has_value(false)
  446|  12.1k|    {
  447|  12.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.03M|    {
 1177|  1.03M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  1.02M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.02M|    {
 1430|  1.02M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.02M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.02M|    {
  437|  1.02M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|   573k|    {
 1598|   573k|        return has_value();
 1599|   573k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   105k|    {
 1653|   105k|        return value();
 1654|   105k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  9.14k|        : base(unexpect, std::move(e.error())),
 1474|  9.14k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  9.14k|    {
 1476|  9.14k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  9.14k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  9.14k|          m_has_value(false)
  446|  9.14k|    {
  447|  9.14k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   659k|    {
 1177|   659k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   649k|        : base(std::in_place, std::forward<U>(val)),
 1428|   649k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   649k|    {
 1430|   649k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   649k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   649k|    {
  437|   649k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   659k|    {
 1598|   659k|        return has_value();
 1599|   659k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.31M|    {
  485|  1.31M|        return m_has_value;
  486|  1.31M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  9.14k|    {
 1604|  9.14k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.14k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.14k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  9.14k|        return this->get_unexpected().error();
 1606|  9.14k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  9.14k|    {
  468|  9.14k|        return m_unexpected;
  469|  9.14k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   649k|    {
 1663|   649k|        return std::move(value());
 1664|   649k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   649k|    {
 1627|   649k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   649k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   649k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   649k|        return this->get_value();
 1629|   649k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   649k|    {
  451|   649k|        return m_value;
  452|   649k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|    360|    {
 1604|    360|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    360|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    360|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    360|        return this->get_unexpected().error();
 1606|    360|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  13.0k|        : base(unexpect, std::move(e.error())),
 1474|  13.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.0k|    {
 1476|  13.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  13.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  13.0k|          m_has_value(false)
  446|  13.0k|    {
  447|  13.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.06M|    {
 1177|  1.06M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   151k|        : base(std::in_place, std::forward<U>(val)),
 1428|   151k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   151k|    {
 1430|   151k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   151k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   151k|    {
  437|   151k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   895k|        : base(unexpect, std::move(e.error())),
 1474|   895k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   895k|    {
 1476|   895k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   895k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   895k|          m_has_value(false)
  446|   895k|    {
  447|   895k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  1.06M|    {
 1598|  1.06M|        return has_value();
 1599|  1.06M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  1.61M|    {
  485|  1.61M|        return m_has_value;
  486|  1.61M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|   393k|    {
 1604|   393k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   393k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   393k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   393k|        return this->get_unexpected().error();
 1606|   393k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   393k|    {
  468|   393k|        return m_unexpected;
  469|   393k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   454k|        : base(std::in_place, std::forward<U>(val)),
 1428|   454k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   454k|    {
 1430|   454k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   454k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   454k|    {
  437|   454k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   454k|    {
 1177|   454k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   154k|    {
 1653|   154k|        return value();
 1654|   154k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   154k|    {
 1627|   154k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   154k|        return this->get_value();
 1629|   154k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|   154k|    {
  451|   154k|        return m_value;
  452|   154k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|   454k|    {
 1598|   454k|        return has_value();
 1599|   454k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   908k|    {
  485|   908k|        return m_has_value;
  486|   908k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   454k|    {
 1177|   454k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   454k|    {
 1663|   454k|        return std::move(value());
 1664|   454k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   454k|    {
 1627|   454k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   454k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   454k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   454k|        return this->get_value();
 1629|   454k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   454k|    {
  451|   454k|        return m_value;
  452|   454k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  2.68k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.68k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.68k|    {
 1430|  2.68k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.68k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.68k|    {
  437|  2.68k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|   454k|        : base(std::in_place, std::forward<U>(val)),
 1428|   454k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   454k|    {
 1430|   454k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   454k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   454k|    {
  437|   454k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   454k|    {
 1837|   454k|        return detail::transform_error_impl(std::move(*this),
 1838|   454k|                                            std::forward<F>(f));
 1839|   454k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|   454k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   454k|    else {
 1333|   454k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   454k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   454k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 454k, False: 0]
  |  |  ------------------
  ------------------
 1335|   454k|                   ? result(*std::forward<Exp>(exp))
 1336|   454k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   454k|    }
 1340|   454k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  484|   908k|    {
  485|   908k|        return m_has_value;
  486|   908k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   454k|    {
 1663|   454k|        return std::move(value());
 1664|   454k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   454k|    {
 1627|   454k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   454k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   454k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   454k|        return this->get_value();
 1629|   454k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  450|   454k|    {
  451|   454k|        return m_value;
  452|   454k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   454k|        : base(std::in_place, std::forward<U>(val)),
 1428|   454k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   454k|    {
 1430|   454k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   454k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   454k|    {
  437|   454k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   454k|    {
 1177|   454k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1597|   454k|    {
 1598|   454k|        return has_value();
 1599|   454k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  484|   908k|    {
  485|   908k|        return m_has_value;
  486|   908k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   454k|    {
 1663|   454k|        return std::move(value());
 1664|   454k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   454k|    {
 1627|   454k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   454k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   454k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   454k|        return this->get_value();
 1629|   454k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  450|   454k|    {
  451|   454k|        return m_value;
  452|   454k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISD_OT_EEvE4typeELPv0ETnPNSG_IXsr3stdE16is_convertible_vISI_SD_EEvE4typeELSM_0EEEONS0_10unexpectedISH_EE:
 1473|  3.63k|        : base(unexpect, std::move(e.error())),
 1474|  3.63k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.63k|    {
 1476|  3.63k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  624|  3.63k|        : m_has_value(false)
  625|  3.63k|    {
  626|  3.63k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  3.63k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  688|  3.63k|    {
  689|  3.63k|        scn::detail::construct_at(unexpected_ptr(),
  690|  3.63k|                                  std::forward<Args>(args)...);
  691|  3.63k|        m_has_value = false;
  692|  3.63k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  10.8k|    {
  718|  10.8k|        return reinterpret_cast<unexpected<E>*>(
  719|  10.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  10.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  10.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  66.5k|    {
 1177|  66.5k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1427|  62.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  62.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  62.9k|    {
 1430|  62.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  614|  62.9k|        : m_has_value(true)
  615|  62.9k|    {
  616|  62.9k|        construct(std::forward<Args>(args)...);
  617|  62.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  681|  62.9k|    {
  682|  62.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  62.9k|        m_has_value = true;
  684|  62.9k|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  391|  62.9k|{
  392|  62.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  62.9k|        T(std::forward<Args>(args)...);
  394|  62.9k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   188k|    {
  706|   188k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   188k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   188k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1597|  66.5k|    {
 1598|  66.5k|        return has_value();
 1599|  66.5k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  674|   199k|    {
  675|   199k|        return m_has_value;
  676|   199k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1603|  3.63k|    {
 1604|  3.63k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.63k|        return this->get_unexpected().error();
 1606|  3.63k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  3.63k|    {
  658|  3.63k|        return *unexpected_ptr();
  659|  3.63k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSH_v:
 1662|  62.9k|    {
 1663|  62.9k|        return std::move(value());
 1664|  62.9k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSH_v:
 1626|  62.9k|    {
 1627|  62.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  62.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  62.9k|        return this->get_value();
 1629|  62.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  640|  62.9k|    {
  641|  62.9k|        return *value_ptr();
  642|  62.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  630|  66.5k|    {
  631|  66.5k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 62.9k, False: 3.63k]
  ------------------
  632|  62.9k|            destroy_value();
  633|  62.9k|        }
  634|  3.63k|        else {
  635|  3.63k|            destroy_unexpected();
  636|  3.63k|        }
  637|  66.5k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  62.9k|    {
  696|  62.9k|        scn::detail::destroy_at(value_ptr());
  697|  62.9k|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  397|  62.9k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  62.9k|    else {
  404|  62.9k|        p->~T();
  405|  62.9k|    }
  406|  62.9k|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  3.63k|    {
  700|  3.63k|        scn::detail::destroy_at(unexpected_ptr());
  701|  3.63k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   805k|    {
 2855|   805k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   805k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   805k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   805k|    {
 2836|   805k|        return t.data();
 2837|   805k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   596k|        : base(unexpect, std::move(e.error())),
 1474|   596k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   596k|    {
 1476|   596k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   596k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   596k|          m_has_value(false)
  446|   596k|    {
  447|   596k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.39M|    {
 1177|  1.39M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|   796k|        : base(std::in_place, std::forward<U>(val)),
 1428|   796k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   796k|    {
 1430|   796k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|   796k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   796k|    {
  437|   796k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   304k|    {
 1653|   304k|        return value();
 1654|   304k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   304k|    {
 1653|   304k|        return value();
 1654|   304k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|   340k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   340k|    static_cast<    \
  |  |  929|   340k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   340k|    {
 3644|   340k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   254k|        : base(unexpect, std::move(e.error())),
 1474|   254k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   254k|    {
 1476|   254k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|   688k|    {
 4289|   688k|        return x.is_at_end();
 4290|   688k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  39.7M|    {
 4333|  39.7M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 39.7M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  39.7M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 39.7M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  39.7M|        return !read_at_position();
 4340|  39.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|  79.5G|    {
 4313|  79.5G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  79.5G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  79.5G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  79.5G|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 79.5G]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  79.5G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  79.5G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 79.4G, False: 39.2M]
  |  |  ------------------
  ------------------
 4320|  79.4G|            return true;
 4321|  79.4G|        }
 4322|       |
 4323|  78.3M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 39.2M, False: 39.1M]
  ------------------
 4324|  39.2M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 117k, False: 39.1M]
  ------------------
 4325|   117k|                return false;
 4326|   117k|            }
 4327|  39.2M|        }
 4328|  39.1M|        return true;
 4329|  39.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|  79.6G|    {
 4089|  79.6G|        return m_putback_buffer.size() + m_current_view.size();
 4090|  79.6G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  39.8M|    {
 4248|  39.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  39.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  39.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 39.8M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  39.8M|        auto res = read_at_position();
 4257|  39.8M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  39.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  39.8M|        return parent()->get_character_at(m_position);
 4259|  39.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  39.8M|    {
 4120|  39.8M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  39.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 728k, False: 39.0M]
  |  |  ------------------
  ------------------
 4121|  39.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|   728k|            return m_putback_buffer[pos];
 4123|   728k|        }
 4124|  39.0M|        const auto start = pos - m_putback_buffer.size();
 4125|  39.0M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  39.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  39.0M|        return m_current_view[start];
 4127|  39.0M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   291k|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   291k|    else {
 3810|       |        // utf-32
 3811|   291k|        static_assert(sizeof(U) == 4);
 3812|   291k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   291k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   291k|        return 1;
 3814|   291k|    }
 3815|   291k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   418k|        : base(std::in_place, std::forward<U>(val)),
 1428|   418k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   418k|    {
 1430|   418k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   418k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   418k|    {
  437|   418k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   441k|    {
 1177|   441k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  23.1k|        : base(unexpect, std::move(e.error())),
 1474|  23.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.1k|    {
 1476|  23.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  23.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.1k|          m_has_value(false)
  446|  23.1k|    {
  447|  23.1k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|   181k|    {
 1598|   181k|        return has_value();
 1599|   181k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  2.34k|    {
 1653|  2.34k|        return value();
 1654|  2.34k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  79.4G|    {
 4283|  79.4G|        return !(lhs == rhs);
 4284|  79.4G|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  79.4G|    {
 4278|  79.4G|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 79.4G, False: 0]
  |  Branch (4278:46): [True: 38.9M, False: 79.4G]
  ------------------
 4279|  79.4G|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  79.4G|    {
 4234|  79.4G|        ++m_position;
 4235|  79.4G|        (void)read_at_position();
 4236|  79.4G|        return *this;
 4237|  79.4G|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   291k|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   291k|    else {
 4016|   291k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   291k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   291k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   291k|        auto cp = static_cast<char32_t>(input.front());
 4018|   291k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 120k, False: 170k]
  |  |  ------------------
  ------------------
 4019|   120k|            return invalid_code_point;
 4020|   120k|        }
 4021|   170k|        return cp;
 4022|   291k|    }
 4023|   291k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.59k|        : base(unexpect, std::move(e.error())),
 1474|  1.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.59k|    {
 1476|  1.59k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.59k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.59k|          m_has_value(false)
  446|  1.59k|    {
  447|  1.59k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   118k|    {
 1177|   118k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   116k|        : base(std::in_place, std::forward<U>(val)),
 1428|   116k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   116k|    {
 1430|   116k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   116k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   116k|    {
  437|   116k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   118k|    {
 1598|   118k|        return has_value();
 1599|   118k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   236k|    {
  485|   236k|        return m_has_value;
  486|   236k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.59k|    {
 1604|  1.59k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.59k|        return this->get_unexpected().error();
 1606|  1.59k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.59k|    {
  468|  1.59k|        return m_unexpected;
  469|  1.59k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   116k|    {
 1663|   116k|        return std::move(value());
 1664|   116k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   116k|    {
 1627|   116k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   116k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   116k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   116k|        return this->get_value();
 1629|   116k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   116k|    {
  451|   116k|        return m_value;
  452|   116k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  40.4M|    {
 3330|  40.4M|        return m_sentinel;
 3331|  40.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|     72|    {
 1604|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     72|        return this->get_unexpected().error();
 1606|     72|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  21.1k|        : base(unexpect, std::move(e.error())),
 1474|  21.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.1k|    {
 1476|  21.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  42.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.1k|          m_has_value(false)
  446|  42.1k|    {
  447|  42.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   572k|    {
 1177|   572k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  2.72k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.72k|    {
 1430|  2.72k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.72k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.72k|    {
  437|  2.72k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|   431k|        : base(unexpect, std::move(e.error())),
 1474|   431k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   431k|    {
 1476|   431k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   431k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   431k|          m_has_value(false)
  446|   431k|    {
  447|   431k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|   449k|    {
 1598|   449k|        return has_value();
 1599|   449k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|   955k|    {
  485|   955k|        return m_has_value;
  486|   955k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|   162k|    {
 1604|   162k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   162k|        return this->get_unexpected().error();
 1606|   162k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   282k|    {
  468|   282k|        return m_unexpected;
  469|   282k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   143k|        : base(std::in_place, std::forward<U>(val)),
 1428|   143k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   143k|    {
 1430|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   143k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   143k|    {
  437|   143k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   143k|    {
 1177|   143k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  2.72k|    {
 1653|  2.72k|        return value();
 1654|  2.72k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  99.5k|    {
 1627|  99.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  99.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  99.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  99.5k|        return this->get_value();
 1629|  99.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  99.5k|    {
  451|  99.5k|        return m_value;
  452|  99.5k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   143k|    {
 1598|   143k|        return has_value();
 1599|   143k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|   286k|    {
  485|   286k|        return m_has_value;
  486|   286k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   143k|    {
 1177|   143k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   143k|    {
 1663|   143k|        return std::move(value());
 1664|   143k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   143k|    {
  451|   143k|        return m_value;
  452|   143k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   114k|    {
 1837|   114k|        return detail::transform_error_impl(std::move(*this),
 1838|   114k|                                            std::forward<F>(f));
 1839|   114k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   114k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   114k|    else {
 1333|   114k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   114k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 93.7k, False: 21.0k]
  |  |  ------------------
  ------------------
 1335|   114k|                   ? result(*std::forward<Exp>(exp))
 1336|   114k|                   : result(unexpect,
 1337|  21.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  21.0k|                                           std::forward<Exp>(exp).error()));
 1339|   114k|    }
 1340|   114k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  96.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  96.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  96.8k|    {
 1430|  96.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  96.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  96.8k|    {
  437|  96.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  21.0k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  21.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  21.0k|    {
 1486|  21.0k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  96.8k|    {
 1663|  96.8k|        return std::move(value());
 1664|  96.8k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1427|   143k|        : base(std::in_place, std::forward<U>(val)),
 1428|   143k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   143k|    {
 1430|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   143k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   143k|    {
  437|   143k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   143k|    {
 1837|   143k|        return detail::transform_error_impl(std::move(*this),
 1838|   143k|                                            std::forward<F>(f));
 1839|   143k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESC_EEDaOSH_OT0_:
 1322|   143k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   143k|    else {
 1333|   143k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   143k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   143k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 143k, False: 0]
  |  |  ------------------
  ------------------
 1335|   143k|                   ? result(*std::forward<Exp>(exp))
 1336|   143k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   143k|    }
 1340|   143k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  484|   286k|    {
  485|   286k|        return m_has_value;
  486|   286k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   143k|    {
 1663|   143k|        return std::move(value());
 1664|   143k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  450|   143k|    {
  451|   143k|        return m_value;
  452|   143k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   143k|        : base(std::in_place, std::forward<U>(val)),
 1428|   143k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   143k|    {
 1430|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  435|   143k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   143k|    {
  437|   143k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   143k|    {
 1177|   143k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1597|   143k|    {
 1598|   143k|        return has_value();
 1599|   143k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   286k|    {
  485|   286k|        return m_has_value;
  486|   286k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   143k|    {
 1663|   143k|        return std::move(value());
 1664|   143k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   143k|    {
  451|   143k|        return m_value;
  452|   143k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   123k|    {
 1837|   123k|        return detail::transform_error_impl(std::move(*this),
 1838|   123k|                                            std::forward<F>(f));
 1839|   123k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   123k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   123k|    else {
 1333|   123k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   123k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   123k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.10k, False: 120k]
  |  |  ------------------
  ------------------
 1335|   123k|                   ? result(*std::forward<Exp>(exp))
 1336|   123k|                   : result(unexpect,
 1337|   120k|                            trivial_invoke(std::forward<F>(f),
 1338|   120k|                                           std::forward<Exp>(exp).error()));
 1339|   123k|    }
 1340|   123k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1613|   120k|    {
 1614|   120k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|   120k|        return std::move(this->get_unexpected().error());
 1616|   120k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  18.3k|        : base(unexpect, std::move(e.error())),
 1474|  18.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  18.3k|    {
 1476|  18.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  624|  18.3k|        : m_has_value(false)
  625|  18.3k|    {
  626|  18.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  18.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  688|  18.3k|    {
  689|  18.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  18.3k|                                  std::forward<Args>(args)...);
  691|  18.3k|        m_has_value = false;
  692|  18.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  55.1k|    {
  718|  55.1k|        return reinterpret_cast<unexpected<E>*>(
  719|  55.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  55.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  55.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.0k|    {
 1177|  19.0k|    }
_ZN3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|    626|        : base(std::in_place, std::forward<U>(val)),
 1428|    626|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    626|    {
 1430|    626|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  614|    626|        : m_has_value(true)
  615|    626|    {
  616|    626|        construct(std::forward<Args>(args)...);
  617|    626|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  681|    626|    {
  682|    626|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    626|        m_has_value = true;
  684|    626|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  391|    626|{
  392|    626|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    626|        T(std::forward<Args>(args)...);
  394|    626|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.87k|    {
  706|  1.87k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.87k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.87k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  19.0k|    {
 1598|  19.0k|        return has_value();
 1599|  19.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  57.0k|    {
  675|  57.0k|        return m_has_value;
  676|  57.0k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|  18.3k|    {
 1604|  18.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  18.3k|        return this->get_unexpected().error();
 1606|  18.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  18.3k|    {
  658|  18.3k|        return *unexpected_ptr();
  659|  18.3k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSM_v:
 1662|    626|    {
 1663|    626|        return std::move(value());
 1664|    626|    }
_ZNR3scn2v38expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|    626|    {
 1627|    626|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    626|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    626|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    626|        return this->get_value();
 1629|    626|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|    626|    {
  641|    626|        return *value_ptr();
  642|    626|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|  7.41k|    {
 3326|  7.41k|        return m_iterator;
 3327|  7.41k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|  7.41k|    {
 3330|  7.41k|        return m_sentinel;
 3331|  7.41k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  19.0k|    {
  631|  19.0k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 626, False: 18.3k]
  ------------------
  632|    626|            destroy_value();
  633|    626|        }
  634|  18.3k|        else {
  635|  18.3k|            destroy_unexpected();
  636|  18.3k|        }
  637|  19.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    626|    {
  696|    626|        scn::detail::destroy_at(value_ptr());
  697|    626|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  397|    626|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    626|    else {
  404|    626|        p->~T();
  405|    626|    }
  406|    626|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  18.3k|    {
  700|  18.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  18.3k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   528k|    {
 1598|   528k|        return has_value();
 1599|   528k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.05M|    {
  485|  1.05M|        return m_has_value;
  486|  1.05M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   376k|    {
 1604|   376k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   376k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   376k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   376k|        return this->get_unexpected().error();
 1606|   376k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   376k|    {
  468|   376k|        return m_unexpected;
  469|   376k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   150k|    {
 1663|   150k|        return std::move(value());
 1664|   150k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   152k|    {
 1627|   152k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   152k|        return this->get_value();
 1629|   152k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   152k|    {
  451|   152k|        return m_value;
  452|   152k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|  3.20k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.20k|    static_cast<    \
  |  |  929|  3.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.20k|    static_cast<    \
  |  |  929|  3.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.20k|    {
 3312|  3.20k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  39.0M|    {
 4300|  39.0M|        return !x.is_at_end();
 4301|  39.0M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  23.1k|        : base(unexpect, std::move(e.error())),
 1474|  23.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.1k|    {
 1476|  23.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  23.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.1k|          m_has_value(false)
  446|  23.1k|    {
  447|  23.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   441k|    {
 1177|   441k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   418k|        : base(std::in_place, std::forward<U>(val)),
 1428|   418k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   418k|    {
 1430|   418k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   418k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   418k|    {
  437|   418k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   181k|    {
 1598|   181k|        return has_value();
 1599|   181k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   704k|    {
  485|   704k|        return m_has_value;
  486|   704k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  2.34k|    {
 1653|  2.34k|        return value();
 1654|  2.34k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   239k|    {
 1627|   239k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   239k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   239k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   239k|        return this->get_value();
 1629|   239k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   239k|    {
  451|   239k|        return m_value;
  452|   239k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  1.59k|        : base(unexpect, std::move(e.error())),
 1474|  1.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.59k|    {
 1476|  1.59k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  1.59k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.59k|          m_has_value(false)
  446|  1.59k|    {
  447|  1.59k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   118k|    {
 1177|   118k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   116k|        : base(std::in_place, std::forward<U>(val)),
 1428|   116k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   116k|    {
 1430|   116k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   116k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   116k|    {
  437|   116k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   145k|    {
 1837|   145k|        return detail::transform_error_impl(std::move(*this),
 1838|   145k|                                            std::forward<F>(f));
 1839|   145k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   145k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   145k|    else {
 1333|   145k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   145k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 143k, False: 1.99k]
  |  |  ------------------
  ------------------
 1335|   145k|                   ? result(*std::forward<Exp>(exp))
 1336|   145k|                   : result(unexpect,
 1337|  1.99k|                            trivial_invoke(std::forward<F>(f),
 1338|  1.99k|                                           std::forward<Exp>(exp).error()));
 1339|   145k|    }
 1340|   145k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   237k|    {
 1663|   237k|        return std::move(value());
 1664|   237k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  23.0k|    {
 1614|  23.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  23.0k|        return std::move(this->get_unexpected().error());
 1616|  23.0k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  23.1k|    {
  468|  23.1k|        return m_unexpected;
  469|  23.1k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.99k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.99k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.99k|    {
 1486|  1.99k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   118k|    {
 1598|   118k|        return has_value();
 1599|   118k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|   236k|    {
  485|   236k|        return m_has_value;
  486|   236k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  1.59k|    {
 1604|  1.59k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.59k|        return this->get_unexpected().error();
 1606|  1.59k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.59k|    {
  468|  1.59k|        return m_unexpected;
  469|  1.59k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   116k|    {
 1663|   116k|        return std::move(value());
 1664|   116k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   116k|    {
 1627|   116k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   116k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   116k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   116k|        return this->get_value();
 1629|   116k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   116k|    {
  451|   116k|        return m_value;
  452|   116k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|     72|    {
 1604|     72|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     72|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     72|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|     72|        return this->get_unexpected().error();
 1606|     72|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  21.1k|        : base(unexpect, std::move(e.error())),
 1474|  21.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  21.1k|    {
 1476|  21.1k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  42.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  42.1k|          m_has_value(false)
  446|  42.1k|    {
  447|  42.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   449k|    {
 1177|   449k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  2.72k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.72k|    {
 1430|  2.72k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.72k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.72k|    {
  437|  2.72k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   310k|        : base(unexpect, std::move(e.error())),
 1474|   310k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   310k|    {
 1476|   310k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|   310k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   310k|          m_has_value(false)
  446|   310k|    {
  447|   310k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|   449k|    {
 1598|   449k|        return has_value();
 1599|   449k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|   708k|    {
  485|   708k|        return m_has_value;
  486|   708k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|   162k|    {
 1604|   162k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   162k|        return this->get_unexpected().error();
 1606|   162k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|   162k|    {
  468|   162k|        return m_unexpected;
  469|   162k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   143k|        : base(std::in_place, std::forward<U>(val)),
 1428|   143k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   143k|    {
 1430|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   143k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   143k|    {
  437|   143k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   143k|    {
 1177|   143k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  2.72k|    {
 1653|  2.72k|        return value();
 1654|  2.72k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  96.4k|    {
 1627|  96.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  96.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  96.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  96.4k|        return this->get_value();
 1629|  96.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  96.4k|    {
  451|  96.4k|        return m_value;
  452|  96.4k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|   143k|    {
 1598|   143k|        return has_value();
 1599|   143k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|   286k|    {
  485|   286k|        return m_has_value;
  486|   286k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   143k|    {
 1177|   143k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   143k|    {
 1663|   143k|        return std::move(value());
 1664|   143k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   143k|    {
  451|   143k|        return m_value;
  452|   143k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   114k|    {
 1837|   114k|        return detail::transform_error_impl(std::move(*this),
 1838|   114k|                                            std::forward<F>(f));
 1839|   114k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   114k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   114k|    else {
 1333|   114k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   114k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 93.7k, False: 21.0k]
  |  |  ------------------
  ------------------
 1335|   114k|                   ? result(*std::forward<Exp>(exp))
 1336|   114k|                   : result(unexpect,
 1337|  21.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  21.0k|                                           std::forward<Exp>(exp).error()));
 1339|   114k|    }
 1340|   114k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  93.7k|        : base(std::in_place, std::forward<U>(val)),
 1428|  93.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  93.7k|    {
 1430|  93.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  93.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  93.7k|    {
  437|  93.7k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  21.0k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  21.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  21.0k|    {
 1486|  21.0k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  93.7k|    {
 1663|  93.7k|        return std::move(value());
 1664|  93.7k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1427|   143k|        : base(std::in_place, std::forward<U>(val)),
 1428|   143k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   143k|    {
 1430|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   143k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   143k|    {
  437|   143k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   143k|    {
 1837|   143k|        return detail::transform_error_impl(std::move(*this),
 1838|   143k|                                            std::forward<F>(f));
 1839|   143k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1322|   143k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   143k|    else {
 1333|   143k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   143k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   143k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 143k, False: 0]
  |  |  ------------------
  ------------------
 1335|   143k|                   ? result(*std::forward<Exp>(exp))
 1336|   143k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   143k|    }
 1340|   143k|}
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  484|   286k|    {
  485|   286k|        return m_has_value;
  486|   286k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   143k|    {
 1663|   143k|        return std::move(value());
 1664|   143k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  450|   143k|    {
  451|   143k|        return m_value;
  452|   143k|    }
_ZN3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   143k|        : base(std::in_place, std::forward<U>(val)),
 1428|   143k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   143k|    {
 1430|   143k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  435|   143k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   143k|    {
  437|   143k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   143k|    {
 1177|   143k|    }
_ZNK3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1597|   143k|    {
 1598|   143k|        return has_value();
 1599|   143k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  484|   286k|    {
  485|   286k|        return m_has_value;
  486|   286k|    }
_ZNO3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   143k|    {
 1663|   143k|        return std::move(value());
 1664|   143k|    }
_ZNR3scn2v38expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   143k|    {
 1627|   143k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   143k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   143k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   143k|        return this->get_value();
 1629|   143k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  450|   143k|    {
  451|   143k|        return m_value;
  452|   143k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  18.3k|        : base(unexpect, std::move(e.error())),
 1474|  18.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  18.3k|    {
 1476|  18.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  624|  18.3k|        : m_has_value(false)
  625|  18.3k|    {
  626|  18.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  18.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  688|  18.3k|    {
  689|  18.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  18.3k|                                  std::forward<Args>(args)...);
  691|  18.3k|        m_has_value = false;
  692|  18.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  55.1k|    {
  718|  55.1k|        return reinterpret_cast<unexpected<E>*>(
  719|  55.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  55.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  55.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.0k|    {
 1177|  19.0k|    }
_ZN3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|    626|        : base(std::in_place, std::forward<U>(val)),
 1428|    626|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    626|    {
 1430|    626|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  614|    626|        : m_has_value(true)
  615|    626|    {
  616|    626|        construct(std::forward<Args>(args)...);
  617|    626|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  681|    626|    {
  682|    626|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|    626|        m_has_value = true;
  684|    626|    }
_ZN3scn2v36detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  391|    626|{
  392|    626|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|    626|        T(std::forward<Args>(args)...);
  394|    626|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  1.87k|    {
  706|  1.87k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  1.87k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  1.87k|    }
_ZNK3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  19.0k|    {
 1598|  19.0k|        return has_value();
 1599|  19.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  57.0k|    {
  675|  57.0k|        return m_has_value;
  676|  57.0k|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1603|  18.3k|    {
 1604|  18.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  18.3k|        return this->get_unexpected().error();
 1606|  18.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  657|  18.3k|    {
  658|  18.3k|        return *unexpected_ptr();
  659|  18.3k|    }
_ZNO3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSK_v:
 1662|    626|    {
 1663|    626|        return std::move(value());
 1664|    626|    }
_ZNR3scn2v38expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|    626|    {
 1627|    626|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|    626|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    626|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|    626|        return this->get_value();
 1629|    626|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|    626|    {
  641|    626|        return *value_ptr();
  642|    626|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  19.0k|    {
  631|  19.0k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 626, False: 18.3k]
  ------------------
  632|    626|            destroy_value();
  633|    626|        }
  634|  18.3k|        else {
  635|  18.3k|            destroy_unexpected();
  636|  18.3k|        }
  637|  19.0k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|    626|    {
  696|    626|        scn::detail::destroy_at(value_ptr());
  697|    626|    }
_ZN3scn2v36detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  397|    626|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|    626|    else {
  404|    626|        p->~T();
  405|    626|    }
  406|    626|}
_ZN3scn2v36detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  18.3k|    {
  700|  18.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  18.3k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   123k|    {
 2855|   123k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   123k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   123k|    {
 2836|   123k|        return t.data();
 2837|   123k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  2.67k|    {
 1653|  2.67k|        return value();
 1654|  2.67k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  2.67k|    {
 1653|  2.67k|        return value();
 1654|  2.67k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|   123k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   123k|    static_cast<    \
  |  |  929|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   123k|    {
 3644|   123k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
 3649|  17.2k|{
 3650|  17.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  17.2k|}
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   918k|    {
 5476|   918k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   918k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 918k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   918k|        return static_cast<std::size_t>(m_desc &
 5481|   918k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   918k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|  1.83M|    {
 5501|  1.83M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  1.83M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|   918k|    {
 5444|   918k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   918k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 918k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   918k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   918k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 918k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   918k|        const auto t = type(id);
 5456|   918k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   918k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 918k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   918k|        basic_scan_arg<Context> arg;
 5461|   918k|        arg.m_type = t;
 5462|   918k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 918k, False: 0]
  ------------------
 5463|   918k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   918k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   918k|        return arg;
 5469|   918k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|   918k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   918k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   918k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   918k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   918k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|   918k|    {
 5505|   918k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   918k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|  1.71M|    {
 5257|  1.71M|        return m_type != detail::arg_type::none_type;
 5258|  1.71M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   104k|{
 8428|   104k|#define SCN_VISIT(Type)                                         \
 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   104k|    }                                                           \
 8432|   104k|    else {                                                      \
 8433|   104k|        return vis(monostate_val);                              \
 8434|   104k|    }
 8435|       |
 8436|   104k|    monostate monostate_val{};
 8437|       |
 8438|   104k|    switch (arg.m_type) {
 8439|  17.4k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 17.4k, False: 87.3k]
  ------------------
 8440|  17.4k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  17.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.4k|    }                                                           \
  |  | 8432|  17.4k|    else {                                                      \
  |  | 8433|  17.4k|        return vis(monostate_val);                              \
  |  | 8434|  17.4k|    }
  ------------------
 8441|  17.4k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 104k]
  ------------------
 8442|  17.4k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  17.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.4k|    }                                                           \
  |  | 8432|  17.4k|    else {                                                      \
  |  | 8433|  17.4k|        return vis(monostate_val);                              \
  |  | 8434|  17.4k|    }
  ------------------
 8443|  37.5k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 20.1k, False: 84.6k]
  ------------------
 8444|  37.5k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  37.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  37.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  37.5k|    }                                                           \
  |  | 8432|  37.5k|    else {                                                      \
  |  | 8433|  37.5k|        return vis(monostate_val);                              \
  |  | 8434|  37.5k|    }
  ------------------
 8445|  37.5k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 104k]
  ------------------
 8446|  37.5k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  37.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  37.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  37.5k|    }                                                           \
  |  | 8432|  37.5k|    else {                                                      \
  |  | 8433|  37.5k|        return vis(monostate_val);                              \
  |  | 8434|  37.5k|    }
  ------------------
 8447|  58.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 20.5k, False: 84.2k]
  ------------------
 8448|  58.1k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  58.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  58.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  58.1k|    }                                                           \
  |  | 8432|  58.1k|    else {                                                      \
  |  | 8433|  58.1k|        return vis(monostate_val);                              \
  |  | 8434|  58.1k|    }
  ------------------
 8449|  72.5k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 14.4k, False: 90.3k]
  ------------------
 8450|  72.5k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  72.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  72.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  72.5k|    }                                                           \
  |  | 8432|  72.5k|    else {                                                      \
  |  | 8433|  72.5k|        return vis(monostate_val);                              \
  |  | 8434|  72.5k|    }
  ------------------
 8451|  72.5k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 104k]
  ------------------
 8452|  72.5k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  72.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  72.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  72.5k|    }                                                           \
  |  | 8432|  72.5k|    else {                                                      \
  |  | 8433|  72.5k|        return vis(monostate_val);                              \
  |  | 8434|  72.5k|    }
  ------------------
 8453|  88.5k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 16.0k, False: 88.7k]
  ------------------
 8454|  88.5k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  88.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  88.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  88.5k|    }                                                           \
  |  | 8432|  88.5k|    else {                                                      \
  |  | 8433|  88.5k|        return vis(monostate_val);                              \
  |  | 8434|  88.5k|    }
  ------------------
 8455|  88.5k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 104k]
  ------------------
 8456|  88.5k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  88.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  88.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  88.5k|    }                                                           \
  |  | 8432|  88.5k|    else {                                                      \
  |  | 8433|  88.5k|        return vis(monostate_val);                              \
  |  | 8434|  88.5k|    }
  ------------------
 8457|   104k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 16.2k, False: 88.5k]
  ------------------
 8458|   104k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8459|   104k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 104k]
  ------------------
 8460|   104k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8461|   104k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 104k]
  ------------------
 8462|   104k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8463|   104k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 104k]
  ------------------
 8464|   104k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8465|   104k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 104k]
  ------------------
 8466|   104k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8467|   104k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 104k]
  ------------------
 8468|   104k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8469|   104k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 104k]
  ------------------
 8470|   104k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8471|   104k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 104k]
  ------------------
 8472|   104k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8473|   104k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 104k]
  ------------------
 8474|   104k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8475|   104k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 104k]
  ------------------
 8476|   104k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8477|   104k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 104k]
  ------------------
 8478|   104k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8479|   104k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 104k]
  ------------------
 8480|   104k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8481|   104k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 104k]
  ------------------
 8482|   104k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8483|   104k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 104k]
  ------------------
 8484|   104k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8485|   104k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 104k]
  ------------------
 8486|   104k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8487|       |
 8488|   104k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 104k]
  ------------------
 8489|   104k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   104k|            return vis(
 8491|   104k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 104k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 104k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   104k|            SCN_CLANG_POP
 8506|   104k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   779k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   779k|    {
 5555|   779k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   390k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   390k|    static_cast<    \
  |  |  929|   390k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   390k|    {
 8149|   390k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|   779k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   779k|    static_cast<    \
  |  |  929|   779k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   779k|    static_cast<    \
  |  |  929|   779k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   779k|    {
 8067|   779k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|   493k|{
 4353|   493k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 493k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   493k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   493k|                            ranges::default_sentinel};
 4359|   493k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|   493k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   493k|    {
 4185|   493k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   493k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   493k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   103k|{
 8428|   103k|#define SCN_VISIT(Type)                                         \
 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   103k|    }                                                           \
 8432|   103k|    else {                                                      \
 8433|   103k|        return vis(monostate_val);                              \
 8434|   103k|    }
 8435|       |
 8436|   103k|    monostate monostate_val{};
 8437|       |
 8438|   103k|    switch (arg.m_type) {
 8439|  17.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 17.3k, False: 85.9k]
  ------------------
 8440|  17.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  17.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.3k|    }                                                           \
  |  | 8432|  17.3k|    else {                                                      \
  |  | 8433|  17.3k|        return vis(monostate_val);                              \
  |  | 8434|  17.3k|    }
  ------------------
 8441|  17.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 103k]
  ------------------
 8442|  17.3k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  17.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  17.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  17.3k|    }                                                           \
  |  | 8432|  17.3k|    else {                                                      \
  |  | 8433|  17.3k|        return vis(monostate_val);                              \
  |  | 8434|  17.3k|    }
  ------------------
 8443|  36.9k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 19.5k, False: 83.7k]
  ------------------
 8444|  36.9k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  36.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  36.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  36.9k|    }                                                           \
  |  | 8432|  36.9k|    else {                                                      \
  |  | 8433|  36.9k|        return vis(monostate_val);                              \
  |  | 8434|  36.9k|    }
  ------------------
 8445|  36.9k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 103k]
  ------------------
 8446|  36.9k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  36.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  36.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  36.9k|    }                                                           \
  |  | 8432|  36.9k|    else {                                                      \
  |  | 8433|  36.9k|        return vis(monostate_val);                              \
  |  | 8434|  36.9k|    }
  ------------------
 8447|  56.8k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 19.9k, False: 83.4k]
  ------------------
 8448|  56.8k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  56.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  56.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  56.8k|    }                                                           \
  |  | 8432|  56.8k|    else {                                                      \
  |  | 8433|  56.8k|        return vis(monostate_val);                              \
  |  | 8434|  56.8k|    }
  ------------------
 8449|  71.2k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 14.3k, False: 88.9k]
  ------------------
 8450|  71.2k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  71.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  71.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  71.2k|    }                                                           \
  |  | 8432|  71.2k|    else {                                                      \
  |  | 8433|  71.2k|        return vis(monostate_val);                              \
  |  | 8434|  71.2k|    }
  ------------------
 8451|  71.2k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 103k]
  ------------------
 8452|  71.2k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  71.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  71.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  71.2k|    }                                                           \
  |  | 8432|  71.2k|    else {                                                      \
  |  | 8433|  71.2k|        return vis(monostate_val);                              \
  |  | 8434|  71.2k|    }
  ------------------
 8453|  87.2k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 15.9k, False: 87.3k]
  ------------------
 8454|  87.2k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  87.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  87.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  87.2k|    }                                                           \
  |  | 8432|  87.2k|    else {                                                      \
  |  | 8433|  87.2k|        return vis(monostate_val);                              \
  |  | 8434|  87.2k|    }
  ------------------
 8455|  87.2k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 103k]
  ------------------
 8456|  87.2k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  87.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  87.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  87.2k|    }                                                           \
  |  | 8432|  87.2k|    else {                                                      \
  |  | 8433|  87.2k|        return vis(monostate_val);                              \
  |  | 8434|  87.2k|    }
  ------------------
 8457|   103k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 16.1k, False: 87.2k]
  ------------------
 8458|   103k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8459|   103k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 103k]
  ------------------
 8460|   103k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8461|   103k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 103k]
  ------------------
 8462|   103k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8463|   103k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 103k]
  ------------------
 8464|   103k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8465|   103k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 103k]
  ------------------
 8466|   103k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8467|   103k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 103k]
  ------------------
 8468|   103k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8469|   103k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 103k]
  ------------------
 8470|   103k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8471|   103k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 103k]
  ------------------
 8472|   103k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8473|   103k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 103k]
  ------------------
 8474|   103k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8475|   103k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 103k]
  ------------------
 8476|   103k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8477|   103k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 103k]
  ------------------
 8478|   103k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8479|   103k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 103k]
  ------------------
 8480|   103k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8481|   103k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 103k]
  ------------------
 8482|   103k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8483|   103k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 103k]
  ------------------
 8484|   103k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8485|   103k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 103k]
  ------------------
 8486|   103k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8487|       |
 8488|   103k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 103k]
  ------------------
 8489|   103k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   103k|            return vis(
 8491|   103k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 103k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 103k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   103k|            SCN_CLANG_POP
 8506|   103k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   389k|{
 7055|   389k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   389k|    handler.check_args_exhausted();
 7057|   389k|    return handler.get_error();
 7058|   389k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   389k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   389k|    auto begin = format.data();
 7024|   389k|    auto it = begin;
 7025|   389k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   694k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 389k, False: 304k]
  ------------------
 7028|   389k|        const auto ch = *it++;
 7029|   389k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 389k, False: 0]
  ------------------
 7030|   389k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   389k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   389k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 85.2k, False: 304k]
  ------------------
 7034|  85.2k|                return;
 7035|  85.2k|            }
 7036|   389k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   389k|    }
 7047|       |
 7048|   304k|    handler.on_literal_text(begin, end);
 7049|   304k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|   389k|{
 6953|   389k|    struct id_adapter {
 6954|   389k|        constexpr void operator()()
 6955|   389k|        {
 6956|   389k|            arg_id = handler.on_arg_id();
 6957|   389k|        }
 6958|   389k|        constexpr void operator()(std::size_t id)
 6959|   389k|        {
 6960|   389k|            arg_id = handler.on_arg_id(id);
 6961|   389k|        }
 6962|       |
 6963|   389k|        constexpr void on_error(const char* msg)
 6964|   389k|        {
 6965|   389k|            SCN_UNLIKELY_ATTR
 6966|   389k|            handler.on_error(msg);
 6967|   389k|        }
 6968|       |
 6969|   389k|        Handler& handler;
 6970|   389k|        std::size_t arg_id;
 6971|   389k|    };
 6972|       |
 6973|   389k|    ++begin;
 6974|   389k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 389k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   389k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 389k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   389k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 389k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   389k|    else {
 6986|   389k|        auto adapter = id_adapter{handler, 0};
 6987|   389k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   389k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 389k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   389k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 389k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   389k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 389k, False: 0]
  ------------------
 6998|   389k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 389k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   389k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   389k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   779k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.4k, False: 361k]
  |  |  |  Branch (859:45): [True: 0, False: 389k]
  |  |  |  Branch (859:45): [True: 28.4k, False: 361k]
  |  |  ------------------
  ------------------
 7004|  28.4k|                handler.on_error("Unknown format specifier");
 7005|  28.4k|                return begin;
 7006|  28.4k|            }
 7007|   389k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   389k|    }
 7014|   361k|    return begin + 1;
 7015|   389k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|   779k|    {
 8050|   779k|        return m_args.get(id);
 8051|   779k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|   723k|    {
 8060|   723k|        return m_locale;
 8061|   723k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|   779k|    {
 5576|   779k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   779k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 779k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   779k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   779k|        do_check_arg_id(id);
 5584|   779k|        return id;
 5585|   779k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|   779k|{
 6064|   779k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   779k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   779k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   389k|{
 6454|   389k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   389k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   389k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   389k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 389k, False: 0]
  |  Branch (6455:26): [True: 0, False: 389k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   389k|    handler();
 6460|   389k|    return begin;
 6461|   389k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   389k|        {
 6956|   389k|            arg_id = handler.on_arg_id();
 6957|   389k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|  1.55M|    {
 5262|  1.55M|        return m_type;
 5263|  1.55M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|   723k|    {
 5571|   723k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   723k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|  1.50M|    {
 5560|  1.50M|        return m_format.data();
 5561|  1.50M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   389k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   389k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   389k|    {
 7133|   389k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   389k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   389k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   389k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|   389k|{
 6869|   389k|    auto do_presentation = [&]() -> const CharT* {
 6870|   389k|        if (*begin == CharT{'['}) {
 6871|   389k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   389k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   389k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   389k|                return begin;
 6877|   389k|            }
 6878|   389k|            handler.on_character_set_string(set);
 6879|   389k|            return begin;
 6880|   389k|        }
 6881|   389k|        if (*begin == CharT{'/'}) {
 6882|   389k|            return parse_presentation_regex(begin, end, handler);
 6883|   389k|        }
 6884|   389k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   389k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   389k|            handler.on_error("Invalid type specifier in format string");
 6887|   389k|            return begin;
 6888|   389k|        }
 6889|   389k|        handler.on_type(type);
 6890|   389k|        return begin;
 6891|   389k|    };
 6892|       |
 6893|   389k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 389k, False: 0]
  |  Branch (6893:28): [True: 370k, False: 18.9k]
  ------------------
 6894|   389k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 361k, False: 9.46k]
  |  Branch (6894:36): [True: 291k, False: 70.1k]
  ------------------
 6895|   291k|        return do_presentation();
 6896|   291k|    }
 6897|       |
 6898|  98.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  98.5k|    begin = parse_align(begin, end, handler);
 6904|  98.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  98.5k|    begin = parse_width(begin, end, handler);
 6910|  98.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  98.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 98.5k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  98.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 70.1k, False: 28.4k]
  ------------------
 6929|  70.1k|        handler.on_localized();
 6930|  70.1k|        ++begin;
 6931|  70.1k|    }
 6932|  98.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  98.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 98.5k, False: 0]
  |  Branch (6937:25): [True: 28.4k, False: 70.1k]
  ------------------
 6938|  28.4k|        do_presentation();
 6939|  28.4k|    }
 6940|  98.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  98.5k|    return begin;
 6946|  98.5k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|   741k|{
 6518|   741k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 582k, False: 159k]
  |  Branch (6518:33): [True: 582k, False: 0]
  ------------------
 6519|   741k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 140k, False: 18.9k]
  |  Branch (6519:33): [True: 140k, False: 0]
  ------------------
 6520|   741k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   319k|    auto do_presentation = [&]() -> const CharT* {
 6870|   319k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 319k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   319k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 319k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   319k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   319k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 300k]
  |  |  ------------------
  ------------------
 6886|  18.9k|            handler.on_error("Invalid type specifier in format string");
 6887|  18.9k|            return begin;
 6888|  18.9k|        }
 6889|   300k|        handler.on_type(type);
 6890|   300k|        return begin;
 6891|   319k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|   639k|{
 6466|   639k|    switch (type) {
 6467|  48.6k|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 48.6k, False: 590k]
  ------------------
 6468|  67.5k|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 18.9k, False: 620k]
  ------------------
 6469|  67.5k|            return presentation_type::int_binary;
 6470|   139k|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 139k, False: 499k]
  ------------------
 6471|   139k|            return presentation_type::int_decimal;
 6472|   159k|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 159k, False: 480k]
  ------------------
 6473|   159k|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 639k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|  87.6k|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 87.6k, False: 551k]
  ------------------
 6477|  87.6k|            return presentation_type::int_octal;
 6478|   147k|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 147k, False: 492k]
  ------------------
 6479|   147k|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 639k]
  ------------------
 6480|   147k|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 639k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 639k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 639k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 639k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 639k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 639k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 639k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 639k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 639k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 639k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 639k]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 639k]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 639k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 639k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 639k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 639k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  37.8k|        default:
  ------------------
  |  Branch (6510:9): [True: 37.8k, False: 601k]
  ------------------
 6511|  37.8k|            return presentation_type::none;
 6512|   639k|    }
 6513|   639k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|  98.5k|{
 6543|  98.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  98.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  98.5k|    auto check_align = [](wchar_t ch) {
 6546|  98.5k|        switch (ch) {
 6547|  98.5k|            case L'<':
 6548|  98.5k|                return align_type::left;
 6549|  98.5k|            case L'>':
 6550|  98.5k|                return align_type::right;
 6551|  98.5k|            case L'^':
 6552|  98.5k|                return align_type::center;
 6553|  98.5k|            default:
 6554|  98.5k|                return align_type::none;
 6555|  98.5k|        }
 6556|  98.5k|    };
 6557|       |
 6558|  98.5k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  98.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  |  Branch (859:45): [True: 0, False: 98.5k]
  |  |  |  Branch (859:45): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6560|  98.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  98.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  98.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  98.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  98.5k|    const auto begin_before_fill = begin;
 6570|  98.5k|    begin += potential_fill_len;
 6571|       |
 6572|  98.5k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 98.5k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  98.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  98.5k|    const auto begin_after_fill = begin;
 6578|  98.5k|    ++begin;
 6579|       |
 6580|  98.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 98.5k, False: 0]
  ------------------
 6581|  98.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  98.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 98.5k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  98.5k|    }
 6589|       |
 6590|  98.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 98.5k, False: 0]
  ------------------
 6591|  98.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 98.5k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  98.5k|        return begin_before_fill;
 6596|  98.5k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  98.5k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|   197k|{
 6525|   197k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   197k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   197k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|   197k|    else {
 6530|   197k|        const auto lengths =
 6531|   197k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|   197k|            "\3\4";
 6533|   197k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|   197k|        return len;
 6535|   197k|    }
 6536|   197k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   197k|    auto check_align = [](wchar_t ch) {
 6546|   197k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 197k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 197k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 197k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   197k|            default:
  ------------------
  |  Branch (6553:13): [True: 197k, False: 0]
  ------------------
 6554|   197k|                return align_type::none;
 6555|   197k|        }
 6556|   197k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|  98.5k|{
 6608|  98.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  98.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  98.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 79.6k, False: 18.9k]
  |  Branch (6610:33): [True: 0, False: 79.6k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  98.5k|    return begin;
 6621|  98.5k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|  70.1k|    {
 7138|  70.1k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  70.1k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 31.3k, False: 38.8k]
  ------------------
 7140|  70.1k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 31.3k]
  ------------------
 7141|  70.1k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  70.1k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  70.1k|        Handler::on_localized();
 7150|  70.1k|    }
_ZN3scn2v36detail12specs_setter12on_localizedILb1EEEvv:
 6282|   179k|    {
 6283|   179k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6284|   179k|            m_specs.localized = true;
 6285|       |        }
 6286|       |        else {
 6287|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6288|       |        }
 6289|   179k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   361k|{
 8428|   361k|#define SCN_VISIT(Type)                                         \
 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   361k|    }                                                           \
 8432|   361k|    else {                                                      \
 8433|   361k|        return vis(monostate_val);                              \
 8434|   361k|    }
 8435|       |
 8436|   361k|    monostate monostate_val{};
 8437|       |
 8438|   361k|    switch (arg.m_type) {
 8439|  58.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 58.3k, False: 302k]
  ------------------
 8440|  58.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  58.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  58.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  58.3k|    }                                                           \
  |  | 8432|  58.3k|    else {                                                      \
  |  | 8433|  58.3k|        return vis(monostate_val);                              \
  |  | 8434|  58.3k|    }
  ------------------
 8441|  58.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 361k]
  ------------------
 8442|  58.3k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  58.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  58.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  58.3k|    }                                                           \
  |  | 8432|  58.3k|    else {                                                      \
  |  | 8433|  58.3k|        return vis(monostate_val);                              \
  |  | 8434|  58.3k|    }
  ------------------
 8443|   127k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 69.1k, False: 292k]
  ------------------
 8444|   127k|            SCN_VISIT(int);
  ------------------
  |  | 8429|   127k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   127k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   127k|    }                                                           \
  |  | 8432|   127k|    else {                                                      \
  |  | 8433|   127k|        return vis(monostate_val);                              \
  |  | 8434|   127k|    }
  ------------------
 8445|   127k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 361k]
  ------------------
 8446|   127k|            SCN_VISIT(long);
  ------------------
  |  | 8429|   127k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   127k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   127k|    }                                                           \
  |  | 8432|   127k|    else {                                                      \
  |  | 8433|   127k|        return vis(monostate_val);                              \
  |  | 8434|   127k|    }
  ------------------
 8447|   197k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 70.3k, False: 290k]
  ------------------
 8448|   197k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|   197k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   197k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   197k|    }                                                           \
  |  | 8432|   197k|    else {                                                      \
  |  | 8433|   197k|        return vis(monostate_val);                              \
  |  | 8434|   197k|    }
  ------------------
 8449|   249k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 51.1k, False: 310k]
  ------------------
 8450|   249k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|   249k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   249k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   249k|    }                                                           \
  |  | 8432|   249k|    else {                                                      \
  |  | 8433|   249k|        return vis(monostate_val);                              \
  |  | 8434|   249k|    }
  ------------------
 8451|   249k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 361k]
  ------------------
 8452|   249k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|   249k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   249k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   249k|    }                                                           \
  |  | 8432|   249k|    else {                                                      \
  |  | 8433|   249k|        return vis(monostate_val);                              \
  |  | 8434|   249k|    }
  ------------------
 8453|   304k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 55.8k, False: 305k]
  ------------------
 8454|   304k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|   304k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   304k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   304k|    }                                                           \
  |  | 8432|   304k|    else {                                                      \
  |  | 8433|   304k|        return vis(monostate_val);                              \
  |  | 8434|   304k|    }
  ------------------
 8455|   304k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 361k]
  ------------------
 8456|   304k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|   304k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   304k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   304k|    }                                                           \
  |  | 8432|   304k|    else {                                                      \
  |  | 8433|   304k|        return vis(monostate_val);                              \
  |  | 8434|   304k|    }
  ------------------
 8457|   361k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 56.4k, False: 304k]
  ------------------
 8458|   361k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8459|   361k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 361k]
  ------------------
 8460|   361k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8461|   361k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 361k]
  ------------------
 8462|   361k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8463|   361k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 361k]
  ------------------
 8464|   361k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8465|   361k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 361k]
  ------------------
 8466|   361k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8467|   361k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 361k]
  ------------------
 8468|   361k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8469|   361k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 361k]
  ------------------
 8470|   361k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8471|   361k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 361k]
  ------------------
 8472|   361k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8473|   361k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 361k]
  ------------------
 8474|   361k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8475|   361k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 361k]
  ------------------
 8476|   361k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8477|   361k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 361k]
  ------------------
 8478|   361k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8479|   361k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 361k]
  ------------------
 8480|   361k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8481|   361k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 361k]
  ------------------
 8482|   361k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8483|   361k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 361k]
  ------------------
 8484|   361k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8485|   361k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 361k]
  ------------------
 8486|   361k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8487|       |
 8488|   361k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 361k]
  ------------------
 8489|   361k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   361k|            return vis(
 8491|   361k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 361k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 361k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   361k|            SCN_CLANG_POP
 8506|   361k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   390k|{
 7055|   390k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   390k|    handler.check_args_exhausted();
 7057|   390k|    return handler.get_error();
 7058|   390k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   390k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   390k|    auto begin = format.data();
 7024|   390k|    auto it = begin;
 7025|   390k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   695k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 390k, False: 304k]
  ------------------
 7028|   390k|        const auto ch = *it++;
 7029|   390k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 390k, False: 0]
  ------------------
 7030|   390k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   390k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   390k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 85.2k, False: 304k]
  ------------------
 7034|  85.2k|                return;
 7035|  85.2k|            }
 7036|   390k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   390k|    }
 7047|       |
 7048|   304k|    handler.on_literal_text(begin, end);
 7049|   304k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8185|   304k|    {
 8186|   304k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   304k|    static_cast<    \
  |  |  929|   304k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   304k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6952|   390k|{
 6953|   390k|    struct id_adapter {
 6954|   390k|        constexpr void operator()()
 6955|   390k|        {
 6956|   390k|            arg_id = handler.on_arg_id();
 6957|   390k|        }
 6958|   390k|        constexpr void operator()(std::size_t id)
 6959|   390k|        {
 6960|   390k|            arg_id = handler.on_arg_id(id);
 6961|   390k|        }
 6962|       |
 6963|   390k|        constexpr void on_error(const char* msg)
 6964|   390k|        {
 6965|   390k|            SCN_UNLIKELY_ATTR
 6966|   390k|            handler.on_error(msg);
 6967|   390k|        }
 6968|       |
 6969|   390k|        Handler& handler;
 6970|   390k|        std::size_t arg_id;
 6971|   390k|    };
 6972|       |
 6973|   390k|    ++begin;
 6974|   390k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   390k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 390k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   390k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 390k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   390k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 390k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   390k|    else {
 6986|   390k|        auto adapter = id_adapter{handler, 0};
 6987|   390k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   390k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   390k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 390k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   390k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 390k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   390k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 390k, False: 0]
  ------------------
 6998|   390k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   390k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 390k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   390k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   390k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   780k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.4k, False: 361k]
  |  |  |  Branch (859:45): [True: 0, False: 390k]
  |  |  |  Branch (859:45): [True: 28.4k, False: 361k]
  |  |  ------------------
  ------------------
 7004|  28.4k|                handler.on_error("Unknown format specifier");
 7005|  28.4k|                return begin;
 7006|  28.4k|            }
 7007|   390k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   390k|    }
 7014|   361k|    return begin + 1;
 7015|   390k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   390k|{
 6454|   390k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   390k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   390k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   390k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 390k, False: 0]
  |  Branch (6455:26): [True: 0, False: 390k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   390k|    handler();
 6460|   390k|    return begin;
 6461|   390k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   390k|        {
 6956|   390k|            arg_id = handler.on_arg_id();
 6957|   390k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   390k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   390k|    {
 7133|   390k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   390k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   390k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   390k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6868|   390k|{
 6869|   390k|    auto do_presentation = [&]() -> const CharT* {
 6870|   390k|        if (*begin == CharT{'['}) {
 6871|   390k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   390k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   390k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   390k|                return begin;
 6877|   390k|            }
 6878|   390k|            handler.on_character_set_string(set);
 6879|   390k|            return begin;
 6880|   390k|        }
 6881|   390k|        if (*begin == CharT{'/'}) {
 6882|   390k|            return parse_presentation_regex(begin, end, handler);
 6883|   390k|        }
 6884|   390k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   390k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   390k|            handler.on_error("Invalid type specifier in format string");
 6887|   390k|            return begin;
 6888|   390k|        }
 6889|   390k|        handler.on_type(type);
 6890|   390k|        return begin;
 6891|   390k|    };
 6892|       |
 6893|   390k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 390k, False: 0]
  |  Branch (6893:28): [True: 371k, False: 18.9k]
  ------------------
 6894|   390k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 361k, False: 9.46k]
  |  Branch (6894:36): [True: 291k, False: 70.2k]
  ------------------
 6895|   291k|        return do_presentation();
 6896|   291k|    }
 6897|       |
 6898|  98.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  98.6k|    begin = parse_align(begin, end, handler);
 6904|  98.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  98.6k|    begin = parse_width(begin, end, handler);
 6910|  98.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  98.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 98.6k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  98.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 70.2k, False: 28.4k]
  ------------------
 6929|  70.2k|        handler.on_localized();
 6930|  70.2k|        ++begin;
 6931|  70.2k|    }
 6932|  98.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  98.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 98.6k, False: 0]
  |  Branch (6937:25): [True: 28.4k, False: 70.2k]
  ------------------
 6938|  28.4k|        do_presentation();
 6939|  28.4k|    }
 6940|  98.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  98.6k|    return begin;
 6946|  98.6k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   319k|    auto do_presentation = [&]() -> const CharT* {
 6870|   319k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 319k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   319k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 319k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   319k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   319k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 300k]
  |  |  ------------------
  ------------------
 6886|  18.9k|            handler.on_error("Invalid type specifier in format string");
 6887|  18.9k|            return begin;
 6888|  18.9k|        }
 6889|   300k|        handler.on_type(type);
 6890|   300k|        return begin;
 6891|   319k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6542|  98.6k|{
 6543|  98.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  98.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  98.6k|    auto check_align = [](wchar_t ch) {
 6546|  98.6k|        switch (ch) {
 6547|  98.6k|            case L'<':
 6548|  98.6k|                return align_type::left;
 6549|  98.6k|            case L'>':
 6550|  98.6k|                return align_type::right;
 6551|  98.6k|            case L'^':
 6552|  98.6k|                return align_type::center;
 6553|  98.6k|            default:
 6554|  98.6k|                return align_type::none;
 6555|  98.6k|        }
 6556|  98.6k|    };
 6557|       |
 6558|  98.6k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  98.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  |  Branch (859:45): [True: 0, False: 98.6k]
  |  |  |  Branch (859:45): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6560|  98.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  98.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  98.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  98.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  98.6k|    const auto begin_before_fill = begin;
 6570|  98.6k|    begin += potential_fill_len;
 6571|       |
 6572|  98.6k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 98.6k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  98.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  98.6k|    const auto begin_after_fill = begin;
 6578|  98.6k|    ++begin;
 6579|       |
 6580|  98.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 98.6k, False: 0]
  ------------------
 6581|  98.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  98.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 98.6k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  98.6k|    }
 6589|       |
 6590|  98.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 98.6k, False: 0]
  ------------------
 6591|  98.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 98.6k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  98.6k|        return begin_before_fill;
 6596|  98.6k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  98.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   197k|    auto check_align = [](wchar_t ch) {
 6546|   197k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 197k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 197k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 197k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   197k|            default:
  ------------------
  |  Branch (6553:13): [True: 197k, False: 0]
  ------------------
 6554|   197k|                return align_type::none;
 6555|   197k|        }
 6556|   197k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6607|  98.6k|{
 6608|  98.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  98.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  98.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 79.7k, False: 18.9k]
  |  Branch (6610:33): [True: 0, False: 79.7k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  98.6k|    return begin;
 6621|  98.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7137|  70.2k|    {
 7138|  70.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  70.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 31.3k, False: 38.9k]
  ------------------
 7140|  70.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 31.3k]
  ------------------
 7141|  70.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  70.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  70.2k|        Handler::on_localized();
 7150|  70.2k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   361k|{
 8428|   361k|#define SCN_VISIT(Type)                                         \
 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   361k|    }                                                           \
 8432|   361k|    else {                                                      \
 8433|   361k|        return vis(monostate_val);                              \
 8434|   361k|    }
 8435|       |
 8436|   361k|    monostate monostate_val{};
 8437|       |
 8438|   361k|    switch (arg.m_type) {
 8439|  58.4k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 58.4k, False: 303k]
  ------------------
 8440|  58.4k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  58.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  58.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  58.4k|    }                                                           \
  |  | 8432|  58.4k|    else {                                                      \
  |  | 8433|  58.4k|        return vis(monostate_val);                              \
  |  | 8434|  58.4k|    }
  ------------------
 8441|  58.4k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 361k]
  ------------------
 8442|  58.4k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  58.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  58.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  58.4k|    }                                                           \
  |  | 8432|  58.4k|    else {                                                      \
  |  | 8433|  58.4k|        return vis(monostate_val);                              \
  |  | 8434|  58.4k|    }
  ------------------
 8443|   127k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 69.2k, False: 292k]
  ------------------
 8444|   127k|            SCN_VISIT(int);
  ------------------
  |  | 8429|   127k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   127k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   127k|    }                                                           \
  |  | 8432|   127k|    else {                                                      \
  |  | 8433|   127k|        return vis(monostate_val);                              \
  |  | 8434|   127k|    }
  ------------------
 8445|   127k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 361k]
  ------------------
 8446|   127k|            SCN_VISIT(long);
  ------------------
  |  | 8429|   127k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   127k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   127k|    }                                                           \
  |  | 8432|   127k|    else {                                                      \
  |  | 8433|   127k|        return vis(monostate_val);                              \
  |  | 8434|   127k|    }
  ------------------
 8447|   198k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 70.4k, False: 291k]
  ------------------
 8448|   198k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|   198k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   198k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   198k|    }                                                           \
  |  | 8432|   198k|    else {                                                      \
  |  | 8433|   198k|        return vis(monostate_val);                              \
  |  | 8434|   198k|    }
  ------------------
 8449|   249k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 51.1k, False: 310k]
  ------------------
 8450|   249k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|   249k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   249k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   249k|    }                                                           \
  |  | 8432|   249k|    else {                                                      \
  |  | 8433|   249k|        return vis(monostate_val);                              \
  |  | 8434|   249k|    }
  ------------------
 8451|   249k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 361k]
  ------------------
 8452|   249k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|   249k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   249k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   249k|    }                                                           \
  |  | 8432|   249k|    else {                                                      \
  |  | 8433|   249k|        return vis(monostate_val);                              \
  |  | 8434|   249k|    }
  ------------------
 8453|   305k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 55.9k, False: 305k]
  ------------------
 8454|   305k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|   305k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   305k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   305k|    }                                                           \
  |  | 8432|   305k|    else {                                                      \
  |  | 8433|   305k|        return vis(monostate_val);                              \
  |  | 8434|   305k|    }
  ------------------
 8455|   305k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 361k]
  ------------------
 8456|   305k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|   305k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   305k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   305k|    }                                                           \
  |  | 8432|   305k|    else {                                                      \
  |  | 8433|   305k|        return vis(monostate_val);                              \
  |  | 8434|   305k|    }
  ------------------
 8457|   361k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 56.5k, False: 305k]
  ------------------
 8458|   361k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8459|   361k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 361k]
  ------------------
 8460|   361k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8461|   361k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 361k]
  ------------------
 8462|   361k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8463|   361k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 361k]
  ------------------
 8464|   361k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8465|   361k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 361k]
  ------------------
 8466|   361k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8467|   361k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 361k]
  ------------------
 8468|   361k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8469|   361k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 361k]
  ------------------
 8470|   361k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8471|   361k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 361k]
  ------------------
 8472|   361k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8473|   361k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 361k]
  ------------------
 8474|   361k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8475|   361k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 361k]
  ------------------
 8476|   361k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8477|   361k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 361k]
  ------------------
 8478|   361k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8479|   361k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 361k]
  ------------------
 8480|   361k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8481|   361k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 361k]
  ------------------
 8482|   361k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8483|   361k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 361k]
  ------------------
 8484|   361k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8485|   361k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 361k]
  ------------------
 8486|   361k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8487|       |
 8488|   361k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 361k]
  ------------------
 8489|   361k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   361k|            return vis(
 8491|   361k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 361k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 361k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   361k|            SCN_CLANG_POP
 8506|   361k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  99.4k|    {
 4084|  99.4k|        sync(0);
 4085|  99.4k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|   385k|    {
 5476|   385k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   385k|        return static_cast<std::size_t>(m_desc &
 5481|   385k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   385k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|   770k|    {
 5501|   770k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   770k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|   385k|    {
 5444|   385k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   385k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   385k|        const auto t = type(id);
 5456|   385k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   385k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 385k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   385k|        basic_scan_arg<Context> arg;
 5461|   385k|        arg.m_type = t;
 5462|   385k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 385k, False: 0]
  ------------------
 5463|   385k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   385k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   385k|        return arg;
 5469|   385k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|   385k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   385k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   385k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   385k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   385k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|   385k|    {
 5505|   385k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   385k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|   637k|    {
 5257|   637k|        return m_type != detail::arg_type::none_type;
 5258|   637k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  29.1k|{
 8428|  29.1k|#define SCN_VISIT(Type)                                         \
 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  29.1k|    }                                                           \
 8432|  29.1k|    else {                                                      \
 8433|  29.1k|        return vis(monostate_val);                              \
 8434|  29.1k|    }
 8435|       |
 8436|  29.1k|    monostate monostate_val{};
 8437|       |
 8438|  29.1k|    switch (arg.m_type) {
 8439|  4.85k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 4.85k, False: 24.3k]
  ------------------
 8440|  4.85k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  4.85k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.85k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.85k|    }                                                           \
  |  | 8432|  4.85k|    else {                                                      \
  |  | 8433|  4.85k|        return vis(monostate_val);                              \
  |  | 8434|  4.85k|    }
  ------------------
 8441|  4.85k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 29.1k]
  ------------------
 8442|  4.85k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  4.85k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.85k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.85k|    }                                                           \
  |  | 8432|  4.85k|    else {                                                      \
  |  | 8433|  4.85k|        return vis(monostate_val);                              \
  |  | 8434|  4.85k|    }
  ------------------
 8443|  9.73k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 4.88k, False: 24.3k]
  ------------------
 8444|  9.73k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  9.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  9.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  9.73k|    }                                                           \
  |  | 8432|  9.73k|    else {                                                      \
  |  | 8433|  9.73k|        return vis(monostate_val);                              \
  |  | 8434|  9.73k|    }
  ------------------
 8445|  9.73k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 29.1k]
  ------------------
 8446|  9.73k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  9.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  9.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  9.73k|    }                                                           \
  |  | 8432|  9.73k|    else {                                                      \
  |  | 8433|  9.73k|        return vis(monostate_val);                              \
  |  | 8434|  9.73k|    }
  ------------------
 8447|  14.6k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 4.91k, False: 24.2k]
  ------------------
 8448|  14.6k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  14.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  14.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  14.6k|    }                                                           \
  |  | 8432|  14.6k|    else {                                                      \
  |  | 8433|  14.6k|        return vis(monostate_val);                              \
  |  | 8434|  14.6k|    }
  ------------------
 8449|  19.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 4.82k, False: 24.3k]
  ------------------
 8450|  19.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  19.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  19.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  19.4k|    }                                                           \
  |  | 8432|  19.4k|    else {                                                      \
  |  | 8433|  19.4k|        return vis(monostate_val);                              \
  |  | 8434|  19.4k|    }
  ------------------
 8451|  19.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 29.1k]
  ------------------
 8452|  19.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  19.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  19.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  19.4k|    }                                                           \
  |  | 8432|  19.4k|    else {                                                      \
  |  | 8433|  19.4k|        return vis(monostate_val);                              \
  |  | 8434|  19.4k|    }
  ------------------
 8453|  24.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 4.84k, False: 24.3k]
  ------------------
 8454|  24.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  24.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  24.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  24.3k|    }                                                           \
  |  | 8432|  24.3k|    else {                                                      \
  |  | 8433|  24.3k|        return vis(monostate_val);                              \
  |  | 8434|  24.3k|    }
  ------------------
 8455|  24.3k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 29.1k]
  ------------------
 8456|  24.3k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  24.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  24.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  24.3k|    }                                                           \
  |  | 8432|  24.3k|    else {                                                      \
  |  | 8433|  24.3k|        return vis(monostate_val);                              \
  |  | 8434|  24.3k|    }
  ------------------
 8457|  29.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 4.86k, False: 24.3k]
  ------------------
 8458|  29.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8459|  29.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 29.1k]
  ------------------
 8460|  29.1k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8461|  29.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 29.1k]
  ------------------
 8462|  29.1k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8463|  29.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 29.1k]
  ------------------
 8464|  29.1k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8465|  29.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 29.1k]
  ------------------
 8466|  29.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8467|  29.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 29.1k]
  ------------------
 8468|  29.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8469|  29.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 29.1k]
  ------------------
 8470|  29.1k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8471|  29.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 29.1k]
  ------------------
 8472|  29.1k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8473|  29.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 29.1k]
  ------------------
 8474|  29.1k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8475|  29.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 29.1k]
  ------------------
 8476|  29.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8477|  29.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 29.1k]
  ------------------
 8478|  29.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8479|  29.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 29.1k]
  ------------------
 8480|  29.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8481|  29.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 29.1k]
  ------------------
 8482|  29.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8483|  29.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 29.1k]
  ------------------
 8484|  29.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8485|  29.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 29.1k]
  ------------------
 8486|  29.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8487|       |
 8488|  29.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 29.1k]
  ------------------
 8489|  29.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  29.1k|            return vis(
 8491|  29.1k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 29.1k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 29.1k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  29.1k|            SCN_CLANG_POP
 8506|  29.1k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|   346k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   346k|    {
 5555|   346k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   173k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   173k|    {
 8149|   173k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|   346k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   346k|    static_cast<    \
  |  |  929|   346k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   346k|    static_cast<    \
  |  |  929|   346k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   346k|    {
 8067|   346k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   173k|{
 7055|   173k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   173k|    handler.check_args_exhausted();
 7057|   173k|    return handler.get_error();
 7058|   173k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   173k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   173k|    auto begin = format.data();
 7024|   173k|    auto it = begin;
 7025|   173k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   175k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 173k, False: 2.67k]
  ------------------
 7028|   173k|        const auto ch = *it++;
 7029|   173k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 173k, False: 0]
  ------------------
 7030|   173k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   173k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   173k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 170k, False: 2.67k]
  ------------------
 7034|   170k|                return;
 7035|   170k|            }
 7036|   173k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   173k|    }
 7047|       |
 7048|  2.67k|    handler.on_literal_text(begin, end);
 7049|  2.67k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|   173k|{
 6953|   173k|    struct id_adapter {
 6954|   173k|        constexpr void operator()()
 6955|   173k|        {
 6956|   173k|            arg_id = handler.on_arg_id();
 6957|   173k|        }
 6958|   173k|        constexpr void operator()(std::size_t id)
 6959|   173k|        {
 6960|   173k|            arg_id = handler.on_arg_id(id);
 6961|   173k|        }
 6962|       |
 6963|   173k|        constexpr void on_error(const char* msg)
 6964|   173k|        {
 6965|   173k|            SCN_UNLIKELY_ATTR
 6966|   173k|            handler.on_error(msg);
 6967|   173k|        }
 6968|       |
 6969|   173k|        Handler& handler;
 6970|   173k|        std::size_t arg_id;
 6971|   173k|    };
 6972|       |
 6973|   173k|    ++begin;
 6974|   173k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   173k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 173k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   173k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 173k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   173k|    else {
 6986|   173k|        auto adapter = id_adapter{handler, 0};
 6987|   173k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   173k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   173k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 173k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   173k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 173k, False: 0]
  ------------------
 6998|   173k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   173k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   173k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.8k, False: 116k]
  |  |  |  Branch (859:45): [True: 0, False: 173k]
  |  |  |  Branch (859:45): [True: 56.8k, False: 116k]
  |  |  ------------------
  ------------------
 7004|  56.8k|                handler.on_error("Unknown format specifier");
 7005|  56.8k|                return begin;
 7006|  56.8k|            }
 7007|   173k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   173k|    }
 7014|   116k|    return begin + 1;
 7015|   173k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|   346k|    {
 8050|   346k|        return m_args.get(id);
 8051|   346k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|   232k|    {
 8060|   232k|        return m_locale;
 8061|   232k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|   346k|    {
 5576|   346k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 346k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   346k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   346k|        do_check_arg_id(id);
 5584|   346k|        return id;
 5585|   346k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|   346k|{
 6064|   346k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   346k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   346k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   173k|{
 6454|   173k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   173k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 173k, False: 0]
  |  Branch (6455:26): [True: 0, False: 173k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   173k|    handler();
 6460|   173k|    return begin;
 6461|   173k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   173k|        {
 6956|   173k|            arg_id = handler.on_arg_id();
 6957|   173k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|   692k|    {
 5262|   692k|        return m_type;
 5263|   692k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|   232k|    {
 5571|   232k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   232k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   202k|{
 4353|   202k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 202k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   202k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   202k|                            ranges::default_sentinel};
 4359|   202k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   202k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   202k|    {
 4185|   202k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   202k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   202k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   202k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   202k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|   578k|    {
 5560|   578k|        return m_format.data();
 5561|   578k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   173k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   173k|    {
 7133|   173k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   173k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|   173k|{
 6869|   173k|    auto do_presentation = [&]() -> const CharT* {
 6870|   173k|        if (*begin == CharT{'['}) {
 6871|   173k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   173k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   173k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   173k|                return begin;
 6877|   173k|            }
 6878|   173k|            handler.on_character_set_string(set);
 6879|   173k|            return begin;
 6880|   173k|        }
 6881|   173k|        if (*begin == CharT{'/'}) {
 6882|   173k|            return parse_presentation_regex(begin, end, handler);
 6883|   173k|        }
 6884|   173k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   173k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   173k|            handler.on_error("Invalid type specifier in format string");
 6887|   173k|            return begin;
 6888|   173k|        }
 6889|   173k|        handler.on_type(type);
 6890|   173k|        return begin;
 6891|   173k|    };
 6892|       |
 6893|   173k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 173k, False: 0]
  |  Branch (6893:28): [True: 135k, False: 37.8k]
  ------------------
 6894|   173k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 116k, False: 18.9k]
  |  Branch (6894:36): [True: 96.9k, False: 19.3k]
  ------------------
 6895|  96.9k|        return do_presentation();
 6896|  96.9k|    }
 6897|       |
 6898|  76.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  76.1k|    begin = parse_align(begin, end, handler);
 6904|  76.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  76.1k|    begin = parse_width(begin, end, handler);
 6910|  76.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  76.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 76.1k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  76.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 19.3k, False: 56.8k]
  ------------------
 6929|  19.3k|        handler.on_localized();
 6930|  19.3k|        ++begin;
 6931|  19.3k|    }
 6932|  76.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  76.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 76.1k, False: 0]
  |  Branch (6937:25): [True: 56.8k, False: 19.3k]
  ------------------
 6938|  56.8k|        do_presentation();
 6939|  56.8k|    }
 6940|  76.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  76.1k|    return begin;
 6946|  76.1k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|   270k|{
 6518|   270k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 193k, False: 76.6k]
  |  Branch (6518:33): [True: 193k, False: 0]
  ------------------
 6519|   270k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 38.7k, False: 37.8k]
  |  Branch (6519:33): [True: 38.7k, False: 0]
  ------------------
 6520|   270k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   153k|    auto do_presentation = [&]() -> const CharT* {
 6870|   153k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 153k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   153k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 153k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   153k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   153k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.8k, False: 115k]
  |  |  ------------------
  ------------------
 6886|  37.8k|            handler.on_error("Invalid type specifier in format string");
 6887|  37.8k|            return begin;
 6888|  37.8k|        }
 6889|   115k|        handler.on_type(type);
 6890|   115k|        return begin;
 6891|   153k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|   307k|{
 6466|   307k|    switch (type) {
 6467|  38.3k|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 38.3k, False: 269k]
  ------------------
 6468|  76.2k|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 37.8k, False: 269k]
  ------------------
 6469|  76.2k|            return presentation_type::int_binary;
 6470|  38.9k|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 38.9k, False: 268k]
  ------------------
 6471|  38.9k|            return presentation_type::int_decimal;
 6472|  38.9k|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 38.9k, False: 268k]
  ------------------
 6473|  38.9k|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 307k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|  38.5k|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 38.5k, False: 268k]
  ------------------
 6477|  38.5k|            return presentation_type::int_octal;
 6478|  39.0k|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 39.0k, False: 268k]
  ------------------
 6479|  39.0k|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 307k]
  ------------------
 6480|  39.0k|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 307k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 307k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 307k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 307k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 307k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 307k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 307k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 307k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 307k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 307k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 307k]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 307k]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 307k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 307k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 307k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 307k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  75.7k|        default:
  ------------------
  |  Branch (6510:9): [True: 75.7k, False: 231k]
  ------------------
 6511|  75.7k|            return presentation_type::none;
 6512|   307k|    }
 6513|   307k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|  76.1k|{
 6543|  76.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  76.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  76.1k|    auto check_align = [](wchar_t ch) {
 6546|  76.1k|        switch (ch) {
 6547|  76.1k|            case L'<':
 6548|  76.1k|                return align_type::left;
 6549|  76.1k|            case L'>':
 6550|  76.1k|                return align_type::right;
 6551|  76.1k|            case L'^':
 6552|  76.1k|                return align_type::center;
 6553|  76.1k|            default:
 6554|  76.1k|                return align_type::none;
 6555|  76.1k|        }
 6556|  76.1k|    };
 6557|       |
 6558|  76.1k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  76.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  |  Branch (859:45): [True: 0, False: 76.1k]
  |  |  |  Branch (859:45): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6560|  76.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  76.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  76.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  76.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  76.1k|    const auto begin_before_fill = begin;
 6570|  76.1k|    begin += potential_fill_len;
 6571|       |
 6572|  76.1k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 76.1k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  76.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  76.1k|    const auto begin_after_fill = begin;
 6578|  76.1k|    ++begin;
 6579|       |
 6580|  76.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 76.1k, False: 0]
  ------------------
 6581|  76.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  76.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 76.1k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  76.1k|    }
 6589|       |
 6590|  76.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 76.1k, False: 0]
  ------------------
 6591|  76.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 76.1k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  76.1k|        return begin_before_fill;
 6596|  76.1k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  76.1k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|   152k|{
 6525|   152k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|   152k|    if constexpr (sizeof(CharT) != 1) {
 6527|   152k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|   152k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   152k|    auto check_align = [](wchar_t ch) {
 6546|   152k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 152k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 152k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 152k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   152k|            default:
  ------------------
  |  Branch (6553:13): [True: 152k, False: 0]
  ------------------
 6554|   152k|                return align_type::none;
 6555|   152k|        }
 6556|   152k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|  76.1k|{
 6608|  76.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  76.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  76.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 38.3k, False: 37.8k]
  |  Branch (6610:33): [True: 0, False: 38.3k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  76.1k|    return begin;
 6621|  76.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|  19.3k|    {
 7138|  19.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  19.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 9.65k, False: 9.72k]
  ------------------
 7140|  19.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 9.65k]
  ------------------
 7141|  19.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  19.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  19.3k|        Handler::on_localized();
 7150|  19.3k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   116k|{
 8428|   116k|#define SCN_VISIT(Type)                                         \
 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   116k|    }                                                           \
 8432|   116k|    else {                                                      \
 8433|   116k|        return vis(monostate_val);                              \
 8434|   116k|    }
 8435|       |
 8436|   116k|    monostate monostate_val{};
 8437|       |
 8438|   116k|    switch (arg.m_type) {
 8439|  19.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 19.3k, False: 96.9k]
  ------------------
 8440|  19.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  19.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  19.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  19.3k|    }                                                           \
  |  | 8432|  19.3k|    else {                                                      \
  |  | 8433|  19.3k|        return vis(monostate_val);                              \
  |  | 8434|  19.3k|    }
  ------------------
 8441|  19.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 116k]
  ------------------
 8442|  19.3k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  19.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  19.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  19.3k|    }                                                           \
  |  | 8432|  19.3k|    else {                                                      \
  |  | 8433|  19.3k|        return vis(monostate_val);                              \
  |  | 8434|  19.3k|    }
  ------------------
 8443|  38.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 19.4k, False: 96.8k]
  ------------------
 8444|  38.7k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  38.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  38.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  38.7k|    }                                                           \
  |  | 8432|  38.7k|    else {                                                      \
  |  | 8433|  38.7k|        return vis(monostate_val);                              \
  |  | 8434|  38.7k|    }
  ------------------
 8445|  38.7k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 116k]
  ------------------
 8446|  38.7k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  38.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  38.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  38.7k|    }                                                           \
  |  | 8432|  38.7k|    else {                                                      \
  |  | 8433|  38.7k|        return vis(monostate_val);                              \
  |  | 8434|  38.7k|    }
  ------------------
 8447|  58.2k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 19.5k, False: 96.7k]
  ------------------
 8448|  58.2k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  58.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  58.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  58.2k|    }                                                           \
  |  | 8432|  58.2k|    else {                                                      \
  |  | 8433|  58.2k|        return vis(monostate_val);                              \
  |  | 8434|  58.2k|    }
  ------------------
 8449|  77.5k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 19.2k, False: 97.0k]
  ------------------
 8450|  77.5k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  77.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  77.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  77.5k|    }                                                           \
  |  | 8432|  77.5k|    else {                                                      \
  |  | 8433|  77.5k|        return vis(monostate_val);                              \
  |  | 8434|  77.5k|    }
  ------------------
 8451|  77.5k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 116k]
  ------------------
 8452|  77.5k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  77.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  77.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  77.5k|    }                                                           \
  |  | 8432|  77.5k|    else {                                                      \
  |  | 8433|  77.5k|        return vis(monostate_val);                              \
  |  | 8434|  77.5k|    }
  ------------------
 8453|  96.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 19.3k, False: 96.9k]
  ------------------
 8454|  96.8k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  96.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.8k|    }                                                           \
  |  | 8432|  96.8k|    else {                                                      \
  |  | 8433|  96.8k|        return vis(monostate_val);                              \
  |  | 8434|  96.8k|    }
  ------------------
 8455|  96.8k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 116k]
  ------------------
 8456|  96.8k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  96.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.8k|    }                                                           \
  |  | 8432|  96.8k|    else {                                                      \
  |  | 8433|  96.8k|        return vis(monostate_val);                              \
  |  | 8434|  96.8k|    }
  ------------------
 8457|   116k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 19.3k, False: 96.8k]
  ------------------
 8458|   116k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8459|   116k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 116k]
  ------------------
 8460|   116k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8461|   116k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 116k]
  ------------------
 8462|   116k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8463|   116k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 116k]
  ------------------
 8464|   116k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8465|   116k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 116k]
  ------------------
 8466|   116k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8467|   116k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 116k]
  ------------------
 8468|   116k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8469|   116k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 116k]
  ------------------
 8470|   116k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8471|   116k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 116k]
  ------------------
 8472|   116k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8473|   116k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 116k]
  ------------------
 8474|   116k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8475|   116k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 116k]
  ------------------
 8476|   116k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8477|   116k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 116k]
  ------------------
 8478|   116k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8479|   116k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 116k]
  ------------------
 8480|   116k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8481|   116k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 116k]
  ------------------
 8482|   116k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8483|   116k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 116k]
  ------------------
 8484|   116k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8485|   116k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 116k]
  ------------------
 8486|   116k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8487|       |
 8488|   116k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 116k]
  ------------------
 8489|   116k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   116k|            return vis(
 8491|   116k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 116k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 116k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   116k|            SCN_CLANG_POP
 8506|   116k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  29.1k|{
 8428|  29.1k|#define SCN_VISIT(Type)                                         \
 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  29.1k|    }                                                           \
 8432|  29.1k|    else {                                                      \
 8433|  29.1k|        return vis(monostate_val);                              \
 8434|  29.1k|    }
 8435|       |
 8436|  29.1k|    monostate monostate_val{};
 8437|       |
 8438|  29.1k|    switch (arg.m_type) {
 8439|  4.85k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 4.85k, False: 24.3k]
  ------------------
 8440|  4.85k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  4.85k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.85k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.85k|    }                                                           \
  |  | 8432|  4.85k|    else {                                                      \
  |  | 8433|  4.85k|        return vis(monostate_val);                              \
  |  | 8434|  4.85k|    }
  ------------------
 8441|  4.85k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 29.1k]
  ------------------
 8442|  4.85k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  4.85k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  4.85k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  4.85k|    }                                                           \
  |  | 8432|  4.85k|    else {                                                      \
  |  | 8433|  4.85k|        return vis(monostate_val);                              \
  |  | 8434|  4.85k|    }
  ------------------
 8443|  9.73k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 4.88k, False: 24.3k]
  ------------------
 8444|  9.73k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  9.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  9.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  9.73k|    }                                                           \
  |  | 8432|  9.73k|    else {                                                      \
  |  | 8433|  9.73k|        return vis(monostate_val);                              \
  |  | 8434|  9.73k|    }
  ------------------
 8445|  9.73k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 29.1k]
  ------------------
 8446|  9.73k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  9.73k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  9.73k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  9.73k|    }                                                           \
  |  | 8432|  9.73k|    else {                                                      \
  |  | 8433|  9.73k|        return vis(monostate_val);                              \
  |  | 8434|  9.73k|    }
  ------------------
 8447|  14.6k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 4.91k, False: 24.2k]
  ------------------
 8448|  14.6k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  14.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  14.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  14.6k|    }                                                           \
  |  | 8432|  14.6k|    else {                                                      \
  |  | 8433|  14.6k|        return vis(monostate_val);                              \
  |  | 8434|  14.6k|    }
  ------------------
 8449|  19.4k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 4.82k, False: 24.3k]
  ------------------
 8450|  19.4k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  19.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  19.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  19.4k|    }                                                           \
  |  | 8432|  19.4k|    else {                                                      \
  |  | 8433|  19.4k|        return vis(monostate_val);                              \
  |  | 8434|  19.4k|    }
  ------------------
 8451|  19.4k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 29.1k]
  ------------------
 8452|  19.4k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  19.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  19.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  19.4k|    }                                                           \
  |  | 8432|  19.4k|    else {                                                      \
  |  | 8433|  19.4k|        return vis(monostate_val);                              \
  |  | 8434|  19.4k|    }
  ------------------
 8453|  24.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 4.84k, False: 24.3k]
  ------------------
 8454|  24.3k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  24.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  24.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  24.3k|    }                                                           \
  |  | 8432|  24.3k|    else {                                                      \
  |  | 8433|  24.3k|        return vis(monostate_val);                              \
  |  | 8434|  24.3k|    }
  ------------------
 8455|  24.3k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 29.1k]
  ------------------
 8456|  24.3k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  24.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  24.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  24.3k|    }                                                           \
  |  | 8432|  24.3k|    else {                                                      \
  |  | 8433|  24.3k|        return vis(monostate_val);                              \
  |  | 8434|  24.3k|    }
  ------------------
 8457|  29.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 4.86k, False: 24.3k]
  ------------------
 8458|  29.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8459|  29.1k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 29.1k]
  ------------------
 8460|  29.1k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8461|  29.1k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 29.1k]
  ------------------
 8462|  29.1k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8463|  29.1k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 29.1k]
  ------------------
 8464|  29.1k|            SCN_VISIT(char);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8465|  29.1k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 29.1k]
  ------------------
 8466|  29.1k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8467|  29.1k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 29.1k]
  ------------------
 8468|  29.1k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8469|  29.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 29.1k]
  ------------------
 8470|  29.1k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8471|  29.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 29.1k]
  ------------------
 8472|  29.1k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8473|  29.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 29.1k]
  ------------------
 8474|  29.1k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8475|  29.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 29.1k]
  ------------------
 8476|  29.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8477|  29.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 29.1k]
  ------------------
 8478|  29.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8479|  29.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 29.1k]
  ------------------
 8480|  29.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8481|  29.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 29.1k]
  ------------------
 8482|  29.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8483|  29.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 29.1k]
  ------------------
 8484|  29.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8485|  29.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 29.1k]
  ------------------
 8486|  29.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  29.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  29.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  29.1k|    }                                                           \
  |  | 8432|  29.1k|    else {                                                      \
  |  | 8433|  29.1k|        return vis(monostate_val);                              \
  |  | 8434|  29.1k|    }
  ------------------
 8487|       |
 8488|  29.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 29.1k]
  ------------------
 8489|  29.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  29.1k|            return vis(
 8491|  29.1k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 29.1k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 29.1k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  29.1k|            SCN_CLANG_POP
 8506|  29.1k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   173k|{
 7055|   173k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   173k|    handler.check_args_exhausted();
 7057|   173k|    return handler.get_error();
 7058|   173k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   173k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   173k|    auto begin = format.data();
 7024|   173k|    auto it = begin;
 7025|   173k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   175k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 173k, False: 2.67k]
  ------------------
 7028|   173k|        const auto ch = *it++;
 7029|   173k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 173k, False: 0]
  ------------------
 7030|   173k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   173k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   173k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 170k, False: 2.67k]
  ------------------
 7034|   170k|                return;
 7035|   170k|            }
 7036|   173k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   173k|    }
 7047|       |
 7048|  2.67k|    handler.on_literal_text(begin, end);
 7049|  2.67k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8185|  2.67k|    {
 8186|  2.67k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.67k|    static_cast<    \
  |  |  929|  2.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|  2.67k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6952|   173k|{
 6953|   173k|    struct id_adapter {
 6954|   173k|        constexpr void operator()()
 6955|   173k|        {
 6956|   173k|            arg_id = handler.on_arg_id();
 6957|   173k|        }
 6958|   173k|        constexpr void operator()(std::size_t id)
 6959|   173k|        {
 6960|   173k|            arg_id = handler.on_arg_id(id);
 6961|   173k|        }
 6962|       |
 6963|   173k|        constexpr void on_error(const char* msg)
 6964|   173k|        {
 6965|   173k|            SCN_UNLIKELY_ATTR
 6966|   173k|            handler.on_error(msg);
 6967|   173k|        }
 6968|       |
 6969|   173k|        Handler& handler;
 6970|   173k|        std::size_t arg_id;
 6971|   173k|    };
 6972|       |
 6973|   173k|    ++begin;
 6974|   173k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   173k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 173k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   173k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 173k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   173k|    else {
 6986|   173k|        auto adapter = id_adapter{handler, 0};
 6987|   173k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   173k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   173k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 173k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   173k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 173k, False: 0]
  ------------------
 6998|   173k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   173k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   173k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.8k, False: 116k]
  |  |  |  Branch (859:45): [True: 0, False: 173k]
  |  |  |  Branch (859:45): [True: 56.8k, False: 116k]
  |  |  ------------------
  ------------------
 7004|  56.8k|                handler.on_error("Unknown format specifier");
 7005|  56.8k|                return begin;
 7006|  56.8k|            }
 7007|   173k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   173k|    }
 7014|   116k|    return begin + 1;
 7015|   173k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   173k|{
 6454|   173k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   173k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 173k, False: 0]
  |  Branch (6455:26): [True: 0, False: 173k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   173k|    handler();
 6460|   173k|    return begin;
 6461|   173k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   173k|        {
 6956|   173k|            arg_id = handler.on_arg_id();
 6957|   173k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   173k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   173k|    {
 7133|   173k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   173k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6868|   173k|{
 6869|   173k|    auto do_presentation = [&]() -> const CharT* {
 6870|   173k|        if (*begin == CharT{'['}) {
 6871|   173k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   173k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   173k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   173k|                return begin;
 6877|   173k|            }
 6878|   173k|            handler.on_character_set_string(set);
 6879|   173k|            return begin;
 6880|   173k|        }
 6881|   173k|        if (*begin == CharT{'/'}) {
 6882|   173k|            return parse_presentation_regex(begin, end, handler);
 6883|   173k|        }
 6884|   173k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   173k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   173k|            handler.on_error("Invalid type specifier in format string");
 6887|   173k|            return begin;
 6888|   173k|        }
 6889|   173k|        handler.on_type(type);
 6890|   173k|        return begin;
 6891|   173k|    };
 6892|       |
 6893|   173k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 173k, False: 0]
  |  Branch (6893:28): [True: 135k, False: 37.8k]
  ------------------
 6894|   173k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 116k, False: 18.9k]
  |  Branch (6894:36): [True: 96.9k, False: 19.3k]
  ------------------
 6895|  96.9k|        return do_presentation();
 6896|  96.9k|    }
 6897|       |
 6898|  76.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  76.1k|    begin = parse_align(begin, end, handler);
 6904|  76.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  76.1k|    begin = parse_width(begin, end, handler);
 6910|  76.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  76.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 76.1k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  76.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 19.3k, False: 56.8k]
  ------------------
 6929|  19.3k|        handler.on_localized();
 6930|  19.3k|        ++begin;
 6931|  19.3k|    }
 6932|  76.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  76.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 76.1k, False: 0]
  |  Branch (6937:25): [True: 56.8k, False: 19.3k]
  ------------------
 6938|  56.8k|        do_presentation();
 6939|  56.8k|    }
 6940|  76.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  76.1k|    return begin;
 6946|  76.1k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   153k|    auto do_presentation = [&]() -> const CharT* {
 6870|   153k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 153k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   153k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 153k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   153k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   153k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.8k, False: 115k]
  |  |  ------------------
  ------------------
 6886|  37.8k|            handler.on_error("Invalid type specifier in format string");
 6887|  37.8k|            return begin;
 6888|  37.8k|        }
 6889|   115k|        handler.on_type(type);
 6890|   115k|        return begin;
 6891|   153k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6542|  76.1k|{
 6543|  76.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  76.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  76.1k|    auto check_align = [](wchar_t ch) {
 6546|  76.1k|        switch (ch) {
 6547|  76.1k|            case L'<':
 6548|  76.1k|                return align_type::left;
 6549|  76.1k|            case L'>':
 6550|  76.1k|                return align_type::right;
 6551|  76.1k|            case L'^':
 6552|  76.1k|                return align_type::center;
 6553|  76.1k|            default:
 6554|  76.1k|                return align_type::none;
 6555|  76.1k|        }
 6556|  76.1k|    };
 6557|       |
 6558|  76.1k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  76.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  |  Branch (859:45): [True: 0, False: 76.1k]
  |  |  |  Branch (859:45): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6560|  76.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  76.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  76.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  76.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  76.1k|    const auto begin_before_fill = begin;
 6570|  76.1k|    begin += potential_fill_len;
 6571|       |
 6572|  76.1k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 76.1k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  76.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  76.1k|    const auto begin_after_fill = begin;
 6578|  76.1k|    ++begin;
 6579|       |
 6580|  76.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 76.1k, False: 0]
  ------------------
 6581|  76.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  76.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.1k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  76.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 76.1k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  76.1k|    }
 6589|       |
 6590|  76.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 76.1k, False: 0]
  ------------------
 6591|  76.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 76.1k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  76.1k|        return begin_before_fill;
 6596|  76.1k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  76.1k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   152k|    auto check_align = [](wchar_t ch) {
 6546|   152k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 152k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 152k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 152k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   152k|            default:
  ------------------
  |  Branch (6553:13): [True: 152k, False: 0]
  ------------------
 6554|   152k|                return align_type::none;
 6555|   152k|        }
 6556|   152k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6607|  76.1k|{
 6608|  76.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  76.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  76.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 38.3k, False: 37.8k]
  |  Branch (6610:33): [True: 0, False: 38.3k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  76.1k|    return begin;
 6621|  76.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7137|  19.3k|    {
 7138|  19.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  19.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 9.65k, False: 9.72k]
  ------------------
 7140|  19.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 0, False: 9.65k]
  ------------------
 7141|  19.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 0]
  ------------------
 7142|  19.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  19.3k|        Handler::on_localized();
 7150|  19.3k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   116k|{
 8428|   116k|#define SCN_VISIT(Type)                                         \
 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   116k|    }                                                           \
 8432|   116k|    else {                                                      \
 8433|   116k|        return vis(monostate_val);                              \
 8434|   116k|    }
 8435|       |
 8436|   116k|    monostate monostate_val{};
 8437|       |
 8438|   116k|    switch (arg.m_type) {
 8439|  19.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 19.3k, False: 96.9k]
  ------------------
 8440|  19.3k|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|  19.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  19.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  19.3k|    }                                                           \
  |  | 8432|  19.3k|    else {                                                      \
  |  | 8433|  19.3k|        return vis(monostate_val);                              \
  |  | 8434|  19.3k|    }
  ------------------
 8441|  19.3k|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 116k]
  ------------------
 8442|  19.3k|            SCN_VISIT(short);
  ------------------
  |  | 8429|  19.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  19.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  19.3k|    }                                                           \
  |  | 8432|  19.3k|    else {                                                      \
  |  | 8433|  19.3k|        return vis(monostate_val);                              \
  |  | 8434|  19.3k|    }
  ------------------
 8443|  38.7k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 19.4k, False: 96.8k]
  ------------------
 8444|  38.7k|            SCN_VISIT(int);
  ------------------
  |  | 8429|  38.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  38.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  38.7k|    }                                                           \
  |  | 8432|  38.7k|    else {                                                      \
  |  | 8433|  38.7k|        return vis(monostate_val);                              \
  |  | 8434|  38.7k|    }
  ------------------
 8445|  38.7k|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 116k]
  ------------------
 8446|  38.7k|            SCN_VISIT(long);
  ------------------
  |  | 8429|  38.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  38.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  38.7k|    }                                                           \
  |  | 8432|  38.7k|    else {                                                      \
  |  | 8433|  38.7k|        return vis(monostate_val);                              \
  |  | 8434|  38.7k|    }
  ------------------
 8447|  58.2k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 19.5k, False: 96.7k]
  ------------------
 8448|  58.2k|            SCN_VISIT(long long);
  ------------------
  |  | 8429|  58.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  58.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  58.2k|    }                                                           \
  |  | 8432|  58.2k|    else {                                                      \
  |  | 8433|  58.2k|        return vis(monostate_val);                              \
  |  | 8434|  58.2k|    }
  ------------------
 8449|  77.5k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 19.2k, False: 97.0k]
  ------------------
 8450|  77.5k|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|  77.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  77.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  77.5k|    }                                                           \
  |  | 8432|  77.5k|    else {                                                      \
  |  | 8433|  77.5k|        return vis(monostate_val);                              \
  |  | 8434|  77.5k|    }
  ------------------
 8451|  77.5k|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 116k]
  ------------------
 8452|  77.5k|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|  77.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  77.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  77.5k|    }                                                           \
  |  | 8432|  77.5k|    else {                                                      \
  |  | 8433|  77.5k|        return vis(monostate_val);                              \
  |  | 8434|  77.5k|    }
  ------------------
 8453|  96.8k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 19.3k, False: 96.9k]
  ------------------
 8454|  96.8k|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|  96.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.8k|    }                                                           \
  |  | 8432|  96.8k|    else {                                                      \
  |  | 8433|  96.8k|        return vis(monostate_val);                              \
  |  | 8434|  96.8k|    }
  ------------------
 8455|  96.8k|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 116k]
  ------------------
 8456|  96.8k|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|  96.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.8k|    }                                                           \
  |  | 8432|  96.8k|    else {                                                      \
  |  | 8433|  96.8k|        return vis(monostate_val);                              \
  |  | 8434|  96.8k|    }
  ------------------
 8457|   116k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 19.3k, False: 96.8k]
  ------------------
 8458|   116k|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8459|   116k|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 116k]
  ------------------
 8460|   116k|            SCN_VISIT(void*);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8461|   116k|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 116k]
  ------------------
 8462|   116k|            SCN_VISIT(bool);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8463|   116k|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 116k]
  ------------------
 8464|   116k|            SCN_VISIT(char);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8465|   116k|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 116k]
  ------------------
 8466|   116k|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8467|   116k|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 116k]
  ------------------
 8468|   116k|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8469|   116k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 116k]
  ------------------
 8470|   116k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8471|   116k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 116k]
  ------------------
 8472|   116k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8473|   116k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 116k]
  ------------------
 8474|   116k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8475|   116k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 116k]
  ------------------
 8476|   116k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8477|   116k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 116k]
  ------------------
 8478|   116k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8479|   116k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 116k]
  ------------------
 8480|   116k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8481|   116k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 116k]
  ------------------
 8482|   116k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8483|   116k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 116k]
  ------------------
 8484|   116k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8485|   116k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 116k]
  ------------------
 8486|   116k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   116k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   116k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   116k|    }                                                           \
  |  | 8432|   116k|    else {                                                      \
  |  | 8433|   116k|        return vis(monostate_val);                              \
  |  | 8434|   116k|    }
  ------------------
 8487|       |
 8488|   116k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 116k]
  ------------------
 8489|   116k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   116k|            return vis(
 8491|   116k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 116k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 116k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   116k|            SCN_CLANG_POP
 8506|   116k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|   198k|    {
 4084|   198k|        sync(0);
 4085|   198k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|  69.3k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|  19.4k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  16.0k|{
   89|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.0k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  96.2k|{
   44|  96.2k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  96.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  96.2k|}
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  16.0k|{
  127|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.0k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  96.2k|{
   60|  96.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  96.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  96.2k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.61k|{
  163|  1.61k|    T value;
  164|  1.61k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.61k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 39]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     39|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     39|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     39|    static_cast<    \
  |  |  929|     39|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     39|    static_cast<    \
  |  |  929|     39|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.61k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  9.72k|{
   72|  9.72k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  9.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  9.72k|}
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  15.9k|{
   89|  15.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  15.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  15.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  15.9k|    static_cast<    \
  |  |  929|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  15.9k|    static_cast<    \
  |  |  929|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  15.9k|}
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  15.9k|{
  127|  15.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  15.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  15.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  15.9k|    static_cast<    \
  |  |  929|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  15.9k|    static_cast<    \
  |  |  929|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  15.9k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.60k|{
  163|  1.60k|    T value;
  164|  1.60k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.60k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 31]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|  1.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     31|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     31|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     31|    static_cast<    \
  |  |  929|     31|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     31|    static_cast<    \
  |  |  929|     31|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.60k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  16.0k|{
   89|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.0k|}
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  16.0k|{
  127|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.0k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.62k|{
  163|  1.62k|    T value;
  164|  1.62k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.62k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 49]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|  1.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     49|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     49|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     49|    static_cast<    \
  |  |  929|     49|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     49|    static_cast<    \
  |  |  929|     49|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.62k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  16.0k|{
   89|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.0k|}
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  16.0k|{
  127|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.0k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.61k|{
  163|  1.61k|    T value;
  164|  1.61k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.61k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 37]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     37|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     37|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     37|    static_cast<    \
  |  |  929|     37|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     37|    static_cast<    \
  |  |  929|     37|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.61k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  16.1k|{
   89|  16.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.1k|}
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  16.1k|{
  127|  16.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.1k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.63k|{
  163|  1.63k|    T value;
  164|  1.63k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.63k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 60]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|  1.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     60|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     60|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.63k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  16.0k|{
   89|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.0k|}
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  16.0k|{
  127|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.0k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  1.62k|{
  163|  1.62k|    T value;
  164|  1.62k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.62k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 45]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|  1.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     45|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     45|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     45|    static_cast<    \
  |  |  929|     45|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     45|    static_cast<    \
  |  |  929|     45|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.62k|}
_ZN3scn2v34scanIJaENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  16.0k|{
   89|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.0k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  96.2k|{
   44|  96.2k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  96.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  96.2k|}
_ZN3scn2v34scanIJaENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  16.0k|{
  127|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.0k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  96.2k|{
   60|  96.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  96.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  96.2k|}
_ZN3scn2v310scan_valueIaNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.61k|{
  163|  1.61k|    T value;
  164|  1.61k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.61k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 39]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     39|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     39|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     39|    static_cast<    \
  |  |  929|     39|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     39|    static_cast<    \
  |  |  929|     39|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.61k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  9.72k|{
   72|  9.72k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  9.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  9.72k|}
_ZN3scn2v34scanIJhENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  15.9k|{
   89|  15.9k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  15.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  15.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  15.9k|    static_cast<    \
  |  |  929|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  15.9k|    static_cast<    \
  |  |  929|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  15.9k|}
_ZN3scn2v34scanIJhENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  15.9k|{
  127|  15.9k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  15.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  15.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  15.9k|    static_cast<    \
  |  |  929|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  15.9k|    static_cast<    \
  |  |  929|  15.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  15.9k|}
_ZN3scn2v310scan_valueIhNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.60k|{
  163|  1.60k|    T value;
  164|  1.60k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.60k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.60k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.60k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.60k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 31]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|  1.60k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     31|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     31|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     31|    static_cast<    \
  |  |  929|     31|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     31|    static_cast<    \
  |  |  929|     31|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.60k|}
_ZN3scn2v34scanIJiENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  16.0k|{
   89|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.0k|}
_ZN3scn2v34scanIJiENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  16.0k|{
  127|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.0k|}
_ZN3scn2v310scan_valueIiNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.62k|{
  163|  1.62k|    T value;
  164|  1.62k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.62k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 49]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|  1.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     49|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     49|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     49|    static_cast<    \
  |  |  929|     49|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     49|    static_cast<    \
  |  |  929|     49|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.62k|}
_ZN3scn2v34scanIJjENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  16.0k|{
   89|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.0k|}
_ZN3scn2v34scanIJjENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  16.0k|{
  127|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.0k|}
_ZN3scn2v310scan_valueIjNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.61k|{
  163|  1.61k|    T value;
  164|  1.61k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.61k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 37]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|  1.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     37|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     37|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     37|    static_cast<    \
  |  |  929|     37|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     37|    static_cast<    \
  |  |  929|     37|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.61k|}
_ZN3scn2v34scanIJxENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  16.1k|{
   89|  16.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.1k|}
_ZN3scn2v34scanIJxENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  16.1k|{
  127|  16.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.1k|    static_cast<    \
  |  |  929|  16.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.1k|}
_ZN3scn2v310scan_valueIxNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.63k|{
  163|  1.63k|    T value;
  164|  1.63k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.63k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.63k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.63k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.63k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.63k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 60]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|  1.63k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     60|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     60|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     60|    static_cast<    \
  |  |  929|     60|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.63k|}
_ZN3scn2v34scanIJyENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  16.0k|{
   89|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  16.0k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  16.0k|}
_ZN3scn2v34scanIJyENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  16.0k|{
  127|  16.0k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  16.0k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  16.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  16.0k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  16.0k|    static_cast<    \
  |  |  929|  16.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  16.0k|}
_ZN3scn2v310scan_valueIyNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  1.62k|{
  163|  1.62k|    T value;
  164|  1.62k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  1.62k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  1.62k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.62k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.62k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.57k, False: 45]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.57k|    }                                                  \
  |  |  |  | 3667|  1.62k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     45|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|     45|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     45|    static_cast<    \
  |  |  929|     45|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|     45|    static_cast<    \
  |  |  929|     45|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  1.62k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|   651k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|   651k|{
  653|   651k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   651k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   171k|{
  659|   171k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   171k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 85.5k, False: 85.5k]
  ------------------
  661|   171k|                    : std::locale{};
  662|   171k|}
_ZN3scn2v34impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   128k|{
 1461|   128k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   128k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   128k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   128k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   128k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 5.87k, False: 123k]
  ------------------
 1467|  5.87k|        SCN_UNLIKELY_ATTR
 1468|  5.87k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  5.87k|                                     "Invalid integer value");
 1470|  5.87k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   123k|    auto start = source.data();
 1474|   123k|    const auto end = source.data() + source.size();
 1475|   123k|    {
 1476|   352k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 333k, False: 19.4k]
  ------------------
 1477|   333k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 103k, False: 229k]
  ------------------
 1478|   103k|                break;
 1479|   103k|            }
 1480|   333k|        }
 1481|   123k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.1k, False: 90.9k]
  |  |  |  Branch (859:45): [True: 19.4k, False: 103k]
  |  |  |  Branch (859:45): [True: 12.7k, False: 90.9k]
  |  |  ------------------
  ------------------
 1482|  32.1k|            value = 0;
 1483|  32.1k|            return ranges::next(source.begin(),
 1484|  32.1k|                                ranges::distance(source.data(), start));
 1485|  32.1k|        }
 1486|   123k|    }
 1487|       |
 1488|  90.9k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|  90.9k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 67.8k, False: 23.1k]
  ------------------
 1490|  67.8k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  67.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  67.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  67.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.94k, False: 63.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.94k|    }                                                  \
  |  |  |  | 3667|  67.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  63.8k|                             detail::make_string_view_from_pointers(start, end),
 1492|  63.8k|                             value, sign == sign_type::minus_sign));
 1493|  63.8k|            return ranges::next(source.begin(),
 1494|  63.8k|                                ranges::distance(source.data(), ptr));
 1495|  67.8k|        }
 1496|  90.9k|    }
 1497|       |
 1498|  88.6k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  90.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  90.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  90.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.24k, False: 88.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.24k|    }                                                  \
  |  |  |  | 3667|  90.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  88.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  88.6k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  88.6k|                     base, sign == sign_type::minus_sign));
 1501|  88.6k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  90.9k|}
_ZN3scn2v34impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  21.3k|{
 1461|  21.3k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  21.3k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  21.3k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  21.3k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  21.3k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 20.0k, False: 1.28k]
  ------------------
 1467|  20.0k|        SCN_UNLIKELY_ATTR
 1468|  20.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  20.0k|                                     "Invalid integer value");
 1470|  20.0k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.28k|    auto start = source.data();
 1474|  1.28k|    const auto end = source.data() + source.size();
 1475|  1.28k|    {
 1476|  1.72k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.49k, False: 230]
  ------------------
 1477|  1.49k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.05k, False: 438]
  ------------------
 1478|  1.05k|                break;
 1479|  1.05k|            }
 1480|  1.49k|        }
 1481|  1.28k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 350, False: 936]
  |  |  |  Branch (859:45): [True: 230, False: 1.05k]
  |  |  |  Branch (859:45): [True: 120, False: 936]
  |  |  ------------------
  ------------------
 1482|    350|            value = 0;
 1483|    350|            return ranges::next(source.begin(),
 1484|    350|                                ranges::distance(source.data(), start));
 1485|    350|        }
 1486|  1.28k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    936|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    936|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    936|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    936|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    936|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 332, False: 604]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    332|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    332|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    332|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    332|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    332|    }                                                  \
  |  |  |  | 3667|    936|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    604|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    604|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    604|                     base, sign == sign_type::minus_sign));
 1501|    604|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    936|}
_ZN3scn2v34impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   152k|{
 1461|   152k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   152k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   152k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   152k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   152k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 6.63k, False: 145k]
  ------------------
 1467|  6.63k|        SCN_UNLIKELY_ATTR
 1468|  6.63k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  6.63k|                                     "Invalid integer value");
 1470|  6.63k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   145k|    auto start = source.data();
 1474|   145k|    const auto end = source.data() + source.size();
 1475|   145k|    {
 1476|   390k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 368k, False: 21.6k]
  ------------------
 1477|   368k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 124k, False: 244k]
  ------------------
 1478|   124k|                break;
 1479|   124k|            }
 1480|   368k|        }
 1481|   145k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.9k, False: 109k]
  |  |  |  Branch (859:45): [True: 21.6k, False: 124k]
  |  |  |  Branch (859:45): [True: 14.3k, False: 109k]
  |  |  ------------------
  ------------------
 1482|  35.9k|            value = 0;
 1483|  35.9k|            return ranges::next(source.begin(),
 1484|  35.9k|                                ranges::distance(source.data(), start));
 1485|  35.9k|        }
 1486|   145k|    }
 1487|       |
 1488|   109k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|   109k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 78.8k, False: 31.1k]
  ------------------
 1490|  78.8k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  78.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.95k, False: 76.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.95k|    }                                                  \
  |  |  |  | 3667|  78.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  76.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  76.9k|                             detail::make_string_view_from_pointers(start, end),
 1492|  76.9k|                             value, sign == sign_type::minus_sign));
 1493|  76.9k|            return ranges::next(source.begin(),
 1494|  76.9k|                                ranges::distance(source.data(), ptr));
 1495|  78.8k|        }
 1496|   109k|    }
 1497|       |
 1498|   108k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.05k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.05k|    }                                                  \
  |  |  |  | 3667|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   108k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   108k|                     base, sign == sign_type::minus_sign));
 1501|   108k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   109k|}
_ZN3scn2v34impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  21.4k|{
 1461|  21.4k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  21.4k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  21.4k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  21.4k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  21.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  21.4k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 20.0k, False: 1.33k]
  ------------------
 1467|  20.0k|        SCN_UNLIKELY_ATTR
 1468|  20.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  20.0k|                                     "Invalid integer value");
 1470|  20.0k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.33k|    auto start = source.data();
 1474|  1.33k|    const auto end = source.data() + source.size();
 1475|  1.33k|    {
 1476|  1.78k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.54k, False: 241]
  ------------------
 1477|  1.54k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.08k, False: 456]
  ------------------
 1478|  1.08k|                break;
 1479|  1.08k|            }
 1480|  1.54k|        }
 1481|  1.33k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 368, False: 962]
  |  |  |  Branch (859:45): [True: 241, False: 1.08k]
  |  |  |  Branch (859:45): [True: 127, False: 962]
  |  |  ------------------
  ------------------
 1482|    368|            value = 0;
 1483|    368|            return ranges::next(source.begin(),
 1484|    368|                                ranges::distance(source.data(), start));
 1485|    368|        }
 1486|  1.33k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    962|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    962|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    962|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    962|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 148, False: 814]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    148|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    148|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    148|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    148|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    148|    }                                                  \
  |  |  |  | 3667|    962|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    814|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    814|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    814|                     base, sign == sign_type::minus_sign));
 1501|    814|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    962|}
_ZN3scn2v34impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   154k|{
 1461|   154k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   154k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   154k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   154k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   154k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 6.97k, False: 147k]
  ------------------
 1467|  6.97k|        SCN_UNLIKELY_ATTR
 1468|  6.97k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  6.97k|                                     "Invalid integer value");
 1470|  6.97k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   147k|    auto start = source.data();
 1474|   147k|    const auto end = source.data() + source.size();
 1475|   147k|    {
 1476|   392k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 370k, False: 21.8k]
  ------------------
 1477|   370k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 125k, False: 245k]
  ------------------
 1478|   125k|                break;
 1479|   125k|            }
 1480|   370k|        }
 1481|   147k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.3k, False: 111k]
  |  |  |  Branch (859:45): [True: 21.8k, False: 125k]
  |  |  |  Branch (859:45): [True: 14.4k, False: 111k]
  |  |  ------------------
  ------------------
 1482|  36.3k|            value = 0;
 1483|  36.3k|            return ranges::next(source.begin(),
 1484|  36.3k|                                ranges::distance(source.data(), start));
 1485|  36.3k|        }
 1486|   147k|    }
 1487|       |
 1488|   111k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|   111k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 79.8k, False: 31.4k]
  ------------------
 1490|  79.8k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  79.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  79.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  79.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  79.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.07k, False: 78.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.07k|    }                                                  \
  |  |  |  | 3667|  79.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  78.8k|                             detail::make_string_view_from_pointers(start, end),
 1492|  78.8k|                             value, sign == sign_type::minus_sign));
 1493|  78.8k|            return ranges::next(source.begin(),
 1494|  78.8k|                                ranges::distance(source.data(), ptr));
 1495|  79.8k|        }
 1496|   111k|    }
 1497|       |
 1498|   110k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 546, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    546|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    546|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    546|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    546|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    546|    }                                                  \
  |  |  |  | 3667|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|   110k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|   110k|                     base, sign == sign_type::minus_sign));
 1501|   110k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|   111k|}
_ZN3scn2v34impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  21.5k|{
 1461|  21.5k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  21.5k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  21.5k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  21.5k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  21.5k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 20.1k, False: 1.42k]
  ------------------
 1467|  20.1k|        SCN_UNLIKELY_ATTR
 1468|  20.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  20.1k|                                     "Invalid integer value");
 1470|  20.1k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.42k|    auto start = source.data();
 1474|  1.42k|    const auto end = source.data() + source.size();
 1475|  1.42k|    {
 1476|  1.93k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.66k, False: 274]
  ------------------
 1477|  1.66k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 1.15k, False: 510]
  ------------------
 1478|  1.15k|                break;
 1479|  1.15k|            }
 1480|  1.66k|        }
 1481|  1.42k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  2.57k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 422, False: 1.00k]
  |  |  |  Branch (859:45): [True: 274, False: 1.15k]
  |  |  |  Branch (859:45): [True: 148, False: 1.00k]
  |  |  ------------------
  ------------------
 1482|    422|            value = 0;
 1483|    422|            return ranges::next(source.begin(),
 1484|    422|                                ranges::distance(source.data(), start));
 1485|    422|        }
 1486|  1.42k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|  1.00k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  1.00k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.00k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.00k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 20, False: 982]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     20|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     20|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     20|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     20|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     20|    }                                                  \
  |  |  |  | 3667|  1.00k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    982|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    982|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    982|                     base, sign == sign_type::minus_sign));
 1501|    982|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  1.00k|}
_ZN3scn2v34impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   104k|{
 1461|   104k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   104k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   104k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   104k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   104k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 4.14k, False: 100k]
  ------------------
 1467|  4.14k|        SCN_UNLIKELY_ATTR
 1468|  4.14k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  4.14k|                                     "Invalid integer value");
 1470|  4.14k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   100k|    auto start = source.data();
 1474|   100k|    const auto end = source.data() + source.size();
 1475|   100k|    {
 1476|   321k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 303k, False: 18.2k]
  ------------------
 1477|   303k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 82.3k, False: 220k]
  ------------------
 1478|  82.3k|                break;
 1479|  82.3k|            }
 1480|   303k|        }
 1481|   100k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.3k, False: 70.1k]
  |  |  |  Branch (859:45): [True: 18.2k, False: 82.3k]
  |  |  |  Branch (859:45): [True: 12.1k, False: 70.1k]
  |  |  ------------------
  ------------------
 1482|  30.3k|            value = 0;
 1483|  30.3k|            return ranges::next(source.begin(),
 1484|  30.3k|                                ranges::distance(source.data(), start));
 1485|  30.3k|        }
 1486|   100k|    }
 1487|       |
 1488|  70.1k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|  70.1k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 50.7k, False: 19.4k]
  ------------------
 1490|  50.7k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  50.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.94k, False: 48.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.94k|    }                                                  \
  |  |  |  | 3667|  50.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  48.8k|                             detail::make_string_view_from_pointers(start, end),
 1492|  48.8k|                             value, sign == sign_type::minus_sign));
 1493|  48.8k|            return ranges::next(source.begin(),
 1494|  48.8k|                                ranges::distance(source.data(), ptr));
 1495|  50.7k|        }
 1496|  70.1k|    }
 1497|       |
 1498|  69.0k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  70.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  70.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  70.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.18k, False: 69.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.18k|    }                                                  \
  |  |  |  | 3667|  70.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  69.0k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  69.0k|                     base, sign == sign_type::minus_sign));
 1501|  69.0k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  70.1k|}
_ZN3scn2v34impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  20.9k|{
 1461|  20.9k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  20.9k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  20.9k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  20.9k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  20.9k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 19.8k, False: 1.04k]
  ------------------
 1467|  19.8k|        SCN_UNLIKELY_ATTR
 1468|  19.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  19.8k|                                     "Invalid integer value");
 1470|  19.8k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.04k|    auto start = source.data();
 1474|  1.04k|    const auto end = source.data() + source.size();
 1475|  1.04k|    {
 1476|  1.46k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.24k, False: 219]
  ------------------
 1477|  1.24k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 821, False: 420]
  ------------------
 1478|    821|                break;
 1479|    821|            }
 1480|  1.24k|        }
 1481|  1.04k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 708]
  |  |  |  Branch (859:45): [True: 219, False: 821]
  |  |  |  Branch (859:45): [True: 113, False: 708]
  |  |  ------------------
  ------------------
 1482|    332|            value = 0;
 1483|    332|            return ranges::next(source.begin(),
 1484|    332|                                ranges::distance(source.data(), start));
 1485|    332|        }
 1486|  1.04k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    708|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    708|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    708|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    708|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 250, False: 458]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    250|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    250|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    250|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    250|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    250|    }                                                  \
  |  |  |  | 3667|    708|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    458|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    458|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    458|                     base, sign == sign_type::minus_sign));
 1501|    458|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    708|}
_ZN3scn2v34impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   115k|{
 1461|   115k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   115k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   115k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   115k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   115k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 4.43k, False: 111k]
  ------------------
 1467|  4.43k|        SCN_UNLIKELY_ATTR
 1468|  4.43k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  4.43k|                                     "Invalid integer value");
 1470|  4.43k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   111k|    auto start = source.data();
 1474|   111k|    const auto end = source.data() + source.size();
 1475|   111k|    {
 1476|   338k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 318k, False: 19.4k]
  ------------------
 1477|   318k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 91.6k, False: 227k]
  ------------------
 1478|  91.6k|                break;
 1479|  91.6k|            }
 1480|   318k|        }
 1481|   111k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.5k, False: 78.6k]
  |  |  |  Branch (859:45): [True: 19.4k, False: 91.6k]
  |  |  |  Branch (859:45): [True: 13.0k, False: 78.6k]
  |  |  ------------------
  ------------------
 1482|  32.5k|            value = 0;
 1483|  32.5k|            return ranges::next(source.begin(),
 1484|  32.5k|                                ranges::distance(source.data(), start));
 1485|  32.5k|        }
 1486|   111k|    }
 1487|       |
 1488|  78.6k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|  78.6k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 56.9k, False: 21.7k]
  ------------------
 1490|  56.9k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  56.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  56.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  56.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 55.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.01k|    }                                                  \
  |  |  |  | 3667|  56.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  55.9k|                             detail::make_string_view_from_pointers(start, end),
 1492|  55.9k|                             value, sign == sign_type::minus_sign));
 1493|  55.9k|            return ranges::next(source.begin(),
 1494|  55.9k|                                ranges::distance(source.data(), ptr));
 1495|  56.9k|        }
 1496|  78.6k|    }
 1497|       |
 1498|  78.0k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  78.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  78.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  78.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  78.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 558, False: 78.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    558|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    558|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    558|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    558|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    558|    }                                                  \
  |  |  |  | 3667|  78.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  78.0k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  78.0k|                     base, sign == sign_type::minus_sign));
 1501|  78.0k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  78.6k|}
_ZN3scn2v34impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  20.9k|{
 1461|  20.9k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  20.9k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  20.9k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  20.9k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  20.9k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 19.9k, False: 1.06k]
  ------------------
 1467|  19.9k|        SCN_UNLIKELY_ATTR
 1468|  19.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  19.9k|                                     "Invalid integer value");
 1470|  19.9k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.06k|    auto start = source.data();
 1474|  1.06k|    const auto end = source.data() + source.size();
 1475|  1.06k|    {
 1476|  1.48k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.26k, False: 219]
  ------------------
 1477|  1.26k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 843, False: 420]
  ------------------
 1478|    843|                break;
 1479|    843|            }
 1480|  1.26k|        }
 1481|  1.06k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.90k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 730]
  |  |  |  Branch (859:45): [True: 219, False: 843]
  |  |  |  Branch (859:45): [True: 113, False: 730]
  |  |  ------------------
  ------------------
 1482|    332|            value = 0;
 1483|    332|            return ranges::next(source.begin(),
 1484|    332|                                ranges::distance(source.data(), start));
 1485|    332|        }
 1486|  1.06k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    730|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    730|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    730|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    730|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    730|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 144, False: 586]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    144|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    144|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    144|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    144|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    144|    }                                                  \
  |  |  |  | 3667|    730|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    586|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    586|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    586|                     base, sign == sign_type::minus_sign));
 1501|    586|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    730|}
_ZN3scn2v34impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|   116k|{
 1461|   116k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|   116k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   116k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|   116k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|   116k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   116k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|   116k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|   116k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   116k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|   116k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|   116k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   116k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|   116k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 4.52k, False: 112k]
  ------------------
 1467|  4.52k|        SCN_UNLIKELY_ATTR
 1468|  4.52k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  4.52k|                                     "Invalid integer value");
 1470|  4.52k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|   112k|    auto start = source.data();
 1474|   112k|    const auto end = source.data() + source.size();
 1475|   112k|    {
 1476|   339k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 319k, False: 19.5k]
  ------------------
 1477|   319k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 92.5k, False: 227k]
  ------------------
 1478|  92.5k|                break;
 1479|  92.5k|            }
 1480|   319k|        }
 1481|   112k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.5k, False: 79.4k]
  |  |  |  Branch (859:45): [True: 19.5k, False: 92.5k]
  |  |  |  Branch (859:45): [True: 13.0k, False: 79.4k]
  |  |  ------------------
  ------------------
 1482|  32.5k|            value = 0;
 1483|  32.5k|            return ranges::next(source.begin(),
 1484|  32.5k|                                ranges::distance(source.data(), start));
 1485|  32.5k|        }
 1486|   112k|    }
 1487|       |
 1488|  79.4k|    if constexpr (std::is_same_v<CharT, char>) {
 1489|  79.4k|        if (base == 10) {
  ------------------
  |  Branch (1489:13): [True: 57.5k, False: 21.8k]
  ------------------
 1490|  57.5k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3668|  57.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  57.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  57.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 530, False: 57.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    530|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    530|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    530|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    530|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    530|    }                                                  \
  |  |  |  | 3667|  57.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  57.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  57.0k|                             detail::make_string_view_from_pointers(start, end),
 1492|  57.0k|                             value, sign == sign_type::minus_sign));
 1493|  57.0k|            return ranges::next(source.begin(),
 1494|  57.0k|                                ranges::distance(source.data(), ptr));
 1495|  57.5k|        }
 1496|  79.4k|    }
 1497|       |
 1498|  79.1k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|  79.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  79.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  79.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  79.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 306, False: 79.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    306|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    306|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    306|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    306|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    306|    }                                                  \
  |  |  |  | 3667|  79.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  79.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|  79.1k|                     detail::make_string_view_from_pointers(start, end), value,
 1500|  79.1k|                     base, sign == sign_type::minus_sign));
 1501|  79.1k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|  79.4k|}
_ZN3scn2v34impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 1460|  21.0k|{
 1461|  21.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  924|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1462|  21.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  924|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1463|  21.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  924|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1464|  21.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  924|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1465|       |
 1466|  21.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (1466:9): [True: 19.9k, False: 1.10k]
  ------------------
 1467|  19.9k|        SCN_UNLIKELY_ATTR
 1468|  19.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1469|  19.9k|                                     "Invalid integer value");
 1470|  19.9k|    }
 1471|       |
 1472|       |    // Skip leading zeroes
 1473|  1.10k|    auto start = source.data();
 1474|  1.10k|    const auto end = source.data() + source.size();
 1475|  1.10k|    {
 1476|  1.52k|        for (; start != end; ++start) {
  ------------------
  |  Branch (1476:16): [True: 1.30k, False: 219]
  ------------------
 1477|  1.30k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (1477:17): [True: 887, False: 420]
  ------------------
 1478|    887|                break;
 1479|    887|            }
 1480|  1.30k|        }
 1481|  1.10k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  859|  1.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 774]
  |  |  |  Branch (859:45): [True: 219, False: 887]
  |  |  |  Branch (859:45): [True: 113, False: 774]
  |  |  ------------------
  ------------------
 1482|    332|            value = 0;
 1483|    332|            return ranges::next(source.begin(),
 1484|    332|                                ranges::distance(source.data(), start));
 1485|    332|        }
 1486|  1.10k|    }
 1487|       |
 1488|       |    if constexpr (std::is_same_v<CharT, char>) {
 1489|       |        if (base == 10) {
 1490|       |            SCN_TRY(ptr, parse_decimal_integer_fast(
 1491|       |                             detail::make_string_view_from_pointers(start, end),
 1492|       |                             value, sign == sign_type::minus_sign));
 1493|       |            return ranges::next(source.begin(),
 1494|       |                                ranges::distance(source.data(), ptr));
 1495|       |        }
 1496|       |    }
 1497|       |
 1498|    774|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3668|    774|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    774|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    774|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    774|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8, False: 766]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      8|    }                                                  \
  |  |  |  | 3667|    774|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    766|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1499|    766|                     detail::make_string_view_from_pointers(start, end), value,
 1500|    766|                     base, sign == sign_type::minus_sign));
 1501|    766|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 1502|    774|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   229k|{
 2184|   229k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   229k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   229k|{
 2192|   229k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   229k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   229k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 182k, False: 47.3k]
  |  |  ------------------
  ------------------
 2194|   182k|        source.sync(*n);
 2195|   182k|    }
 2196|  47.3k|    else {
 2197|  47.3k|        source.sync_all();
 2198|  47.3k|    }
 2199|   229k|    return n;
 2200|   229k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  96.2k|{
 2208|  96.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  96.2k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|  96.2k|{
 2216|  96.2k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|  96.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  96.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.59k, False: 94.6k]
  |  |  ------------------
  ------------------
 2218|  1.59k|        source.sync(*n);
 2219|  1.59k|    }
 2220|  94.6k|    else {
 2221|  94.6k|        source.sync_all();
 2222|  94.6k|    }
 2223|  96.2k|    return n;
 2224|  96.2k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   927k|{
  202|   927k|    return find_classic_impl(
  203|   927k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   927k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|   927k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   229k|{
 2141|   229k|    return vscan_internal(source, format, args);
 2142|   229k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   229k|{
 2147|   229k|    auto n = vscan_internal(source, format, args);
 2148|   229k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   229k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 182k, False: 47.3k]
  |  |  ------------------
  ------------------
 2149|   182k|        source.sync(*n);
 2150|   182k|    }
 2151|  47.3k|    else {
 2152|  47.3k|        source.sync_all();
 2153|  47.3k|    }
 2154|   229k|    return n;
 2155|   229k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  96.2k|{
 2161|  96.2k|    return vscan_internal(source, format, args);
 2162|  96.2k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|  96.2k|{
 2167|  96.2k|    auto n = vscan_internal(source, format, args);
 2168|  96.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  96.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.59k, False: 94.6k]
  |  |  ------------------
  ------------------
 2169|  1.59k|        source.sync(*n);
 2170|  1.59k|    }
 2171|  94.6k|    else {
 2172|  94.6k|        source.sync_all();
 2173|  94.6k|    }
 2174|  96.2k|    return n;
 2175|  96.2k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  34.9k|{
 2251|  34.9k|    return vscan_value_internal(source, arg);
 2252|  34.9k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  34.4k|{
 2256|  34.4k|    auto n = vscan_value_internal(source, arg);
 2257|  34.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  34.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 29.7k, False: 4.73k]
  |  |  ------------------
  ------------------
 2258|  29.7k|        source.sync(*n);
 2259|  29.7k|    }
 2260|  4.73k|    else {
 2261|  4.73k|        source.sync_all();
 2262|  4.73k|    }
 2263|  34.4k|    return n;
 2264|  34.4k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  9.72k|{
 2270|  9.72k|    return vscan_value_internal(source, arg);
 2271|  9.72k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  9.72k|{
 2276|  9.72k|    auto n = vscan_value_internal(source, arg);
 2277|  9.72k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  9.72k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 261, False: 9.46k]
  |  |  ------------------
  ------------------
 2278|    261|        source.sync(*n);
 2279|    261|    }
 2280|  9.46k|    else {
 2281|  9.46k|        source.sync_all();
 2282|  9.46k|    }
 2283|  9.72k|    return n;
 2284|  9.72k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
 1368|  91.8k|{
 1369|  91.8k|    auto max_digits = maxdigits_u64(base);
 1370|  91.8k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 1.15k, False: 90.7k]
  ------------------
 1371|  1.15k|        return true;
 1372|  1.15k|    }
 1373|  90.7k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 322, False: 90.3k]
  |  Branch (1373:39): [True: 106, False: 216]
  ------------------
 1374|    106|        return true;
 1375|    106|    }
 1376|  90.6k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|  90.6k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 5.26k, False: 85.3k]
  ------------------
 1378|  90.6k|                      static_cast<uint64_t>(is_negative)) {
 1379|  5.26k|            SCN_UNLIKELY_ATTR
 1380|  5.26k|            return true;
 1381|  5.26k|        }
 1382|  90.6k|    }
 1383|       |
 1384|  85.3k|    return false;
 1385|  90.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113maxdigits_u64Ei:
 1314|   545k|{
 1315|   545k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  924|   545k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   545k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1316|   545k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1317|   545k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112min_safe_u64Ei:
 1358|  1.80k|{
 1359|  1.80k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  924|  1.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1360|  1.80k|    return min_safe_u64_table[static_cast<size_t>(base)];
 1361|  1.80k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIaEET_mb:
 1389|  85.3k|{
 1390|  85.3k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 17.0k, False: 68.3k]
  ------------------
 1391|  17.0k|        SCN_MSVC_PUSH
 1392|  17.0k|        SCN_MSVC_IGNORE(4146)
 1393|  17.0k|        return static_cast<T>(
 1394|  17.0k|            -std::numeric_limits<T>::max() -
 1395|  17.0k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|  17.0k|        SCN_MSVC_POP
 1397|  17.0k|    }
 1398|       |
 1399|  68.3k|    return static_cast<T>(u64val);
 1400|  85.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
 1368|   110k|{
 1369|   110k|    auto max_digits = maxdigits_u64(base);
 1370|   110k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 1.22k, False: 109k]
  ------------------
 1371|  1.22k|        return true;
 1372|  1.22k|    }
 1373|   109k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 330, False: 109k]
  |  Branch (1373:39): [True: 106, False: 224]
  ------------------
 1374|    106|        return true;
 1375|    106|    }
 1376|   109k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|   109k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 1.81k, False: 107k]
  ------------------
 1378|   109k|                      static_cast<uint64_t>(is_negative)) {
 1379|  1.81k|            SCN_UNLIKELY_ATTR
 1380|  1.81k|            return true;
 1381|  1.81k|        }
 1382|   109k|    }
 1383|       |
 1384|   107k|    return false;
 1385|   109k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIiEET_mb:
 1389|   107k|{
 1390|   107k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 18.5k, False: 89.2k]
  ------------------
 1391|  18.5k|        SCN_MSVC_PUSH
 1392|  18.5k|        SCN_MSVC_IGNORE(4146)
 1393|  18.5k|        return static_cast<T>(
 1394|  18.5k|            -std::numeric_limits<T>::max() -
 1395|  18.5k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|  18.5k|        SCN_MSVC_POP
 1397|  18.5k|    }
 1398|       |
 1399|  89.2k|    return static_cast<T>(u64val);
 1400|   107k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
 1368|   112k|{
 1369|   112k|    auto max_digits = maxdigits_u64(base);
 1370|   112k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 1.33k, False: 111k]
  ------------------
 1371|  1.33k|        return true;
 1372|  1.33k|    }
 1373|   111k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 366, False: 110k]
  |  Branch (1373:39): [True: 106, False: 260]
  ------------------
 1374|    106|        return true;
 1375|    106|    }
 1376|   110k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|   110k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 198, False: 110k]
  ------------------
 1378|   110k|                      static_cast<uint64_t>(is_negative)) {
 1379|    198|            SCN_UNLIKELY_ATTR
 1380|    198|            return true;
 1381|    198|        }
 1382|   110k|    }
 1383|       |
 1384|   110k|    return false;
 1385|   111k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIxEET_mb:
 1389|   110k|{
 1390|   110k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 19.4k, False: 91.3k]
  ------------------
 1391|  19.4k|        SCN_MSVC_PUSH
 1392|  19.4k|        SCN_MSVC_IGNORE(4146)
 1393|  19.4k|        return static_cast<T>(
 1394|  19.4k|            -std::numeric_limits<T>::max() -
 1395|  19.4k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|  19.4k|        SCN_MSVC_POP
 1397|  19.4k|    }
 1398|       |
 1399|  91.3k|    return static_cast<T>(u64val);
 1400|   110k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
 1368|  70.8k|{
 1369|  70.8k|    auto max_digits = maxdigits_u64(base);
 1370|  70.8k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 768, False: 70.1k]
  ------------------
 1371|    768|        return true;
 1372|    768|    }
 1373|  70.1k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 224, False: 69.9k]
  |  Branch (1373:39): [True: 58, False: 166]
  ------------------
 1374|     58|        return true;
 1375|     58|    }
 1376|  70.0k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|  70.0k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 2.55k, False: 67.5k]
  ------------------
 1378|  70.0k|                      static_cast<uint64_t>(is_negative)) {
 1379|  2.55k|            SCN_UNLIKELY_ATTR
 1380|  2.55k|            return true;
 1381|  2.55k|        }
 1382|  70.0k|    }
 1383|       |
 1384|  67.5k|    return false;
 1385|  70.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIhEET_mb:
 1389|  67.5k|{
 1390|  67.5k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 0, False: 67.5k]
  ------------------
 1391|      0|        SCN_MSVC_PUSH
 1392|      0|        SCN_MSVC_IGNORE(4146)
 1393|      0|        return static_cast<T>(
 1394|      0|            -std::numeric_limits<T>::max() -
 1395|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|      0|        SCN_MSVC_POP
 1397|      0|    }
 1398|       |
 1399|  67.5k|    return static_cast<T>(u64val);
 1400|  67.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
 1368|  79.3k|{
 1369|  79.3k|    auto max_digits = maxdigits_u64(base);
 1370|  79.3k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 772, False: 78.5k]
  ------------------
 1371|    772|        return true;
 1372|    772|    }
 1373|  78.5k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 228, False: 78.3k]
  |  Branch (1373:39): [True: 58, False: 170]
  ------------------
 1374|     58|        return true;
 1375|     58|    }
 1376|  78.5k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|  78.5k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 882, False: 77.6k]
  ------------------
 1378|  78.5k|                      static_cast<uint64_t>(is_negative)) {
 1379|    882|            SCN_UNLIKELY_ATTR
 1380|    882|            return true;
 1381|    882|        }
 1382|  78.5k|    }
 1383|       |
 1384|  77.6k|    return false;
 1385|  78.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIjEET_mb:
 1389|  77.6k|{
 1390|  77.6k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 0, False: 77.6k]
  ------------------
 1391|      0|        SCN_MSVC_PUSH
 1392|      0|        SCN_MSVC_IGNORE(4146)
 1393|      0|        return static_cast<T>(
 1394|      0|            -std::numeric_limits<T>::max() -
 1395|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|      0|        SCN_MSVC_POP
 1397|      0|    }
 1398|       |
 1399|  77.6k|    return static_cast<T>(u64val);
 1400|  77.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
 1368|  80.2k|{
 1369|  80.2k|    auto max_digits = maxdigits_u64(base);
 1370|  80.2k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (1370:9): [True: 786, False: 79.4k]
  ------------------
 1371|    786|        return true;
 1372|    786|    }
 1373|  79.4k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (1373:9): [True: 336, False: 79.0k]
  |  Branch (1373:39): [True: 58, False: 278]
  ------------------
 1374|     58|        return true;
 1375|     58|    }
 1376|  79.3k|    if constexpr (!std::is_same_v<T, uint64_t>) {
 1377|  79.3k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (1377:13): [True: 0, False: 79.3k]
  ------------------
 1378|  79.3k|                      static_cast<uint64_t>(is_negative)) {
 1379|      0|            SCN_UNLIKELY_ATTR
 1380|      0|            return true;
 1381|      0|        }
 1382|  79.3k|    }
 1383|       |
 1384|  79.3k|    return false;
 1385|  79.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_112store_resultIyEET_mb:
 1389|  79.3k|{
 1390|  79.3k|    if (is_negative) {
  ------------------
  |  Branch (1390:9): [True: 0, False: 79.3k]
  ------------------
 1391|      0|        SCN_MSVC_PUSH
 1392|      0|        SCN_MSVC_IGNORE(4146)
 1393|      0|        return static_cast<T>(
 1394|      0|            -std::numeric_limits<T>::max() -
 1395|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
 1396|      0|        SCN_MSVC_POP
 1397|      0|    }
 1398|       |
 1399|  79.3k|    return static_cast<T>(u64val);
 1400|  79.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1252|   209k|{
 1253|   209k|    uint64_t val{};
 1254|   209k|    std::memcpy(&val, input, sizeof(uint64_t));
 1255|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1256|       |        val = byteswap(val);
 1257|       |    }
 1258|   209k|    return val;
 1259|   209k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1262|  38.4k|{
 1263|  38.4k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1264|  38.4k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1265|  38.4k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1266|  38.4k|    word -= 0x3030303030303030;
 1267|  38.4k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1268|  38.4k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1269|  38.4k|    return static_cast<uint32_t>(word);
 1270|  38.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1273|   171k|{
 1274|   171k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1275|   171k|              0x8080808080808080));
 1276|   171k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|   565k|{
  105|   565k|    static_assert(sizeof(*source.data()) == 1);
  106|   565k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   565k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   565k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|   565k|    uint64_t word{};
  108|   565k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|   565k|    return has_byte_greater(word, 127) != 0;
  111|   565k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   927k|{
  118|   927k|    auto it = source.begin();
  119|       |
  120|  1.01M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 565k, False: 446k]
  ------------------
  121|   565k|        auto sv =
  122|   565k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   565k|                .substr(0, 8);
  124|       |
  125|   565k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 536k, False: 29.1k]
  ------------------
  126|   536k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   536k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   536k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 453k, False: 82.9k]
  ------------------
  129|   453k|                break;
  130|   453k|            }
  131|  82.9k|            continue;
  132|   536k|        }
  133|       |
  134|  40.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 38.5k, False: 2.25k]
  ------------------
  135|  38.5k|            auto tmp =
  136|  38.5k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  38.5k|            auto res = get_next_code_point(tmp);
  138|  38.5k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 26.9k, False: 11.6k]
  ------------------
  139|  26.9k|                return it;
  140|  26.9k|            }
  141|  11.6k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  11.6k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  11.6k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  11.6k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  11.6k|        }
  145|  29.1k|    }
  146|       |
  147|   900k|    return detail::make_string_view_iterator(source, it);
  148|   927k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|   929k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  38.5k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|  67.8k|{
 1407|  67.8k|    uint64_t u64val{};
 1408|  67.8k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|  67.8k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|  67.8k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|  67.8k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.94k, False: 63.8k]
  |  |  ------------------
  ------------------
 1413|  67.8k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  3.94k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  3.94k|                                     "Integer overflow");
 1416|  3.94k|    }
 1417|       |
 1418|  63.8k|    val = store_result<T>(u64val, is_negative);
 1419|  63.8k|    return ptr;
 1420|  67.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1294|   391k|{
 1295|   391k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1296|       |
 1297|   884k|    while (begin != end) {
  ------------------
  |  Branch (1297:12): [True: 641k, False: 243k]
  ------------------
 1298|   641k|        const auto digit = char_to_int(*begin);
 1299|   641k|        if (digit >= 10) {
  ------------------
  |  Branch (1299:13): [True: 148k, False: 492k]
  ------------------
 1300|   148k|            break;
 1301|   148k|        }
 1302|   492k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1303|   492k|        ++begin;
 1304|   492k|    }
 1305|       |
 1306|   391k|    return begin;
 1307|   391k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1281|   391k|{
 1282|   391k|    while (
 1283|   430k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1283:9): [True: 171k, False: 258k]
  ------------------
 1284|   430k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1284:9): [True: 38.4k, False: 133k]
  ------------------
 1285|  38.4k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1286|  38.4k|                                      get_eight_digits_word(p));
 1287|  38.4k|        p += 8;
 1288|  38.4k|    }
 1289|   391k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  23.1k|{
 1428|  23.1k|    uint64_t u64val{};
 1429|  23.1k|    const CharT* begin = input.data();
 1430|  23.1k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  83.7k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 71.6k, False: 12.0k]
  ------------------
 1433|  71.6k|        const auto digit = char_to_int(*begin);
 1434|  71.6k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 11.0k, False: 60.6k]
  ------------------
 1435|  11.0k|            break;
 1436|  11.0k|        }
 1437|  60.6k|        u64val =
 1438|  60.6k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  60.6k|        ++begin;
 1440|  60.6k|    }
 1441|       |
 1442|  23.1k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  23.1k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.24k, False: 20.8k]
  |  |  ------------------
  ------------------
 1444|  23.1k|                                               is_negative))) {
 1445|  2.24k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  2.24k|                                     "Integer overflow");
 1447|  2.24k|    }
 1448|       |
 1449|  20.8k|    val = store_result<T>(u64val, is_negative);
 1450|  20.8k|    return begin;
 1451|  23.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    936|{
 1428|    936|    uint64_t u64val{};
 1429|    936|    const CharT* begin = input.data();
 1430|    936|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  4.70k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 4.05k, False: 648]
  ------------------
 1433|  4.05k|        const auto digit = char_to_int(*begin);
 1434|  4.05k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 288, False: 3.76k]
  ------------------
 1435|    288|            break;
 1436|    288|        }
 1437|  3.76k|        u64val =
 1438|  3.76k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  3.76k|        ++begin;
 1440|  3.76k|    }
 1441|       |
 1442|    936|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    936|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    936|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 332, False: 604]
  |  |  ------------------
  ------------------
 1444|    936|                                               is_negative))) {
 1445|    332|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    332|                                     "Integer overflow");
 1447|    332|    }
 1448|       |
 1449|    604|    val = store_result<T>(u64val, is_negative);
 1450|    604|    return begin;
 1451|    936|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|  78.8k|{
 1407|  78.8k|    uint64_t u64val{};
 1408|  78.8k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|  78.8k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|  78.8k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|  78.8k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  78.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.95k, False: 76.9k]
  |  |  ------------------
  ------------------
 1413|  78.8k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  1.95k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  1.95k|                                     "Integer overflow");
 1416|  1.95k|    }
 1417|       |
 1418|  76.9k|    val = store_result<T>(u64val, is_negative);
 1419|  76.9k|    return ptr;
 1420|  78.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  31.1k|{
 1428|  31.1k|    uint64_t u64val{};
 1429|  31.1k|    const CharT* begin = input.data();
 1430|  31.1k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   104k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 88.0k, False: 16.1k]
  ------------------
 1433|  88.0k|        const auto digit = char_to_int(*begin);
 1434|  88.0k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 14.9k, False: 73.0k]
  ------------------
 1435|  14.9k|            break;
 1436|  14.9k|        }
 1437|  73.0k|        u64val =
 1438|  73.0k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  73.0k|        ++begin;
 1440|  73.0k|    }
 1441|       |
 1442|  31.1k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  31.1k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.05k, False: 30.0k]
  |  |  ------------------
  ------------------
 1444|  31.1k|                                               is_negative))) {
 1445|  1.05k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  1.05k|                                     "Integer overflow");
 1447|  1.05k|    }
 1448|       |
 1449|  30.0k|    val = store_result<T>(u64val, is_negative);
 1450|  30.0k|    return begin;
 1451|  31.1k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    962|{
 1428|    962|    uint64_t u64val{};
 1429|    962|    const CharT* begin = input.data();
 1430|    962|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  4.75k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 4.08k, False: 663]
  ------------------
 1433|  4.08k|        const auto digit = char_to_int(*begin);
 1434|  4.08k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 299, False: 3.79k]
  ------------------
 1435|    299|            break;
 1436|    299|        }
 1437|  3.79k|        u64val =
 1438|  3.79k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  3.79k|        ++begin;
 1440|  3.79k|    }
 1441|       |
 1442|    962|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    962|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    962|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 148, False: 814]
  |  |  ------------------
  ------------------
 1444|    962|                                               is_negative))) {
 1445|    148|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    148|                                     "Integer overflow");
 1447|    148|    }
 1448|       |
 1449|    814|    val = store_result<T>(u64val, is_negative);
 1450|    814|    return begin;
 1451|    962|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|  79.8k|{
 1407|  79.8k|    uint64_t u64val{};
 1408|  79.8k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|  79.8k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|  79.8k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|  79.8k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  79.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.07k, False: 78.8k]
  |  |  ------------------
  ------------------
 1413|  79.8k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  1.07k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  1.07k|                                     "Integer overflow");
 1416|  1.07k|    }
 1417|       |
 1418|  78.8k|    val = store_result<T>(u64val, is_negative);
 1419|  78.8k|    return ptr;
 1420|  79.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  31.4k|{
 1428|  31.4k|    uint64_t u64val{};
 1429|  31.4k|    const CharT* begin = input.data();
 1430|  31.4k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|   107k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 90.9k, False: 16.3k]
  ------------------
 1433|  90.9k|        const auto digit = char_to_int(*begin);
 1434|  90.9k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 15.1k, False: 75.7k]
  ------------------
 1435|  15.1k|            break;
 1436|  15.1k|        }
 1437|  75.7k|        u64val =
 1438|  75.7k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  75.7k|        ++begin;
 1440|  75.7k|    }
 1441|       |
 1442|  31.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  31.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  31.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 546, False: 30.9k]
  |  |  ------------------
  ------------------
 1444|  31.4k|                                               is_negative))) {
 1445|    546|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    546|                                     "Integer overflow");
 1447|    546|    }
 1448|       |
 1449|  30.9k|    val = store_result<T>(u64val, is_negative);
 1450|  30.9k|    return begin;
 1451|  31.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  1.00k|{
 1428|  1.00k|    uint64_t u64val{};
 1429|  1.00k|    const CharT* begin = input.data();
 1430|  1.00k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  4.83k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 4.14k, False: 687]
  ------------------
 1433|  4.14k|        const auto digit = char_to_int(*begin);
 1434|  4.14k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 315, False: 3.83k]
  ------------------
 1435|    315|            break;
 1436|    315|        }
 1437|  3.83k|        u64val =
 1438|  3.83k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  3.83k|        ++begin;
 1440|  3.83k|    }
 1441|       |
 1442|  1.00k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  1.00k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  1.00k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20, False: 982]
  |  |  ------------------
  ------------------
 1444|  1.00k|                                               is_negative))) {
 1445|     20|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|     20|                                     "Integer overflow");
 1447|     20|    }
 1448|       |
 1449|    982|    val = store_result<T>(u64val, is_negative);
 1450|    982|    return begin;
 1451|  1.00k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|  50.7k|{
 1407|  50.7k|    uint64_t u64val{};
 1408|  50.7k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|  50.7k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|  50.7k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|  50.7k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  50.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.94k, False: 48.8k]
  |  |  ------------------
  ------------------
 1413|  50.7k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  1.94k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  1.94k|                                     "Integer overflow");
 1416|  1.94k|    }
 1417|       |
 1418|  48.8k|    val = store_result<T>(u64val, is_negative);
 1419|  48.8k|    return ptr;
 1420|  50.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  19.4k|{
 1428|  19.4k|    uint64_t u64val{};
 1429|  19.4k|    const CharT* begin = input.data();
 1430|  19.4k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  62.5k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 52.5k, False: 10.0k]
  ------------------
 1433|  52.5k|        const auto digit = char_to_int(*begin);
 1434|  52.5k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 9.33k, False: 43.1k]
  ------------------
 1435|  9.33k|            break;
 1436|  9.33k|        }
 1437|  43.1k|        u64val =
 1438|  43.1k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  43.1k|        ++begin;
 1440|  43.1k|    }
 1441|       |
 1442|  19.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  19.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  19.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.18k, False: 18.2k]
  |  |  ------------------
  ------------------
 1444|  19.4k|                                               is_negative))) {
 1445|  1.18k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|  1.18k|                                     "Integer overflow");
 1447|  1.18k|    }
 1448|       |
 1449|  18.2k|    val = store_result<T>(u64val, is_negative);
 1450|  18.2k|    return begin;
 1451|  19.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    708|{
 1428|    708|    uint64_t u64val{};
 1429|    708|    const CharT* begin = input.data();
 1430|    708|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  4.08k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 3.61k, False: 465]
  ------------------
 1433|  3.61k|        const auto digit = char_to_int(*begin);
 1434|  3.61k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 243, False: 3.37k]
  ------------------
 1435|    243|            break;
 1436|    243|        }
 1437|  3.37k|        u64val =
 1438|  3.37k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  3.37k|        ++begin;
 1440|  3.37k|    }
 1441|       |
 1442|    708|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    708|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250, False: 458]
  |  |  ------------------
  ------------------
 1444|    708|                                               is_negative))) {
 1445|    250|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    250|                                     "Integer overflow");
 1447|    250|    }
 1448|       |
 1449|    458|    val = store_result<T>(u64val, is_negative);
 1450|    458|    return begin;
 1451|    708|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|  56.9k|{
 1407|  56.9k|    uint64_t u64val{};
 1408|  56.9k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|  56.9k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|  56.9k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|  56.9k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.01k, False: 55.9k]
  |  |  ------------------
  ------------------
 1413|  56.9k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|  1.01k|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|  1.01k|                                     "Integer overflow");
 1416|  1.01k|    }
 1417|       |
 1418|  55.9k|    val = store_result<T>(u64val, is_negative);
 1419|  55.9k|    return ptr;
 1420|  56.9k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  21.7k|{
 1428|  21.7k|    uint64_t u64val{};
 1429|  21.7k|    const CharT* begin = input.data();
 1430|  21.7k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  68.7k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 57.4k, False: 11.2k]
  ------------------
 1433|  57.4k|        const auto digit = char_to_int(*begin);
 1434|  57.4k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 10.4k, False: 46.9k]
  ------------------
 1435|  10.4k|            break;
 1436|  10.4k|        }
 1437|  46.9k|        u64val =
 1438|  46.9k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  46.9k|        ++begin;
 1440|  46.9k|    }
 1441|       |
 1442|  21.7k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  21.7k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  21.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 558, False: 21.1k]
  |  |  ------------------
  ------------------
 1444|  21.7k|                                               is_negative))) {
 1445|    558|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    558|                                     "Integer overflow");
 1447|    558|    }
 1448|       |
 1449|  21.1k|    val = store_result<T>(u64val, is_negative);
 1450|  21.1k|    return begin;
 1451|  21.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    730|{
 1428|    730|    uint64_t u64val{};
 1429|    730|    const CharT* begin = input.data();
 1430|    730|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  4.12k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 3.64k, False: 478]
  ------------------
 1433|  3.64k|        const auto digit = char_to_int(*begin);
 1434|  3.64k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 252, False: 3.39k]
  ------------------
 1435|    252|            break;
 1436|    252|        }
 1437|  3.39k|        u64val =
 1438|  3.39k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  3.39k|        ++begin;
 1440|  3.39k|    }
 1441|       |
 1442|    730|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    730|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    730|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 144, False: 586]
  |  |  ------------------
  ------------------
 1444|    730|                                               is_negative))) {
 1445|    144|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    144|                                     "Integer overflow");
 1447|    144|    }
 1448|       |
 1449|    586|    val = store_result<T>(u64val, is_negative);
 1450|    586|    return begin;
 1451|    730|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 1406|  57.5k|{
 1407|  57.5k|    uint64_t u64val{};
 1408|  57.5k|    auto ptr = parse_decimal_integer_fast_impl(
 1409|  57.5k|        input.data(), input.data() + input.size(), u64val);
 1410|       |
 1411|  57.5k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 1412|  57.5k|    if (SCN_UNLIKELY(
  ------------------
  |  |  859|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 530, False: 57.0k]
  |  |  ------------------
  ------------------
 1413|  57.5k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 1414|    530|        return unexpected_scan_error(scan_error::value_out_of_range,
 1415|    530|                                     "Integer overflow");
 1416|    530|    }
 1417|       |
 1418|  57.0k|    val = store_result<T>(u64val, is_negative);
 1419|  57.0k|    return ptr;
 1420|  57.5k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|  21.8k|{
 1428|  21.8k|    uint64_t u64val{};
 1429|  21.8k|    const CharT* begin = input.data();
 1430|  21.8k|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  70.1k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 58.7k, False: 11.3k]
  ------------------
 1433|  58.7k|        const auto digit = char_to_int(*begin);
 1434|  58.7k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 10.5k, False: 48.2k]
  ------------------
 1435|  10.5k|            break;
 1436|  10.5k|        }
 1437|  48.2k|        u64val =
 1438|  48.2k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  48.2k|        ++begin;
 1440|  48.2k|    }
 1441|       |
 1442|  21.8k|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|  21.8k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|  21.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 306, False: 21.5k]
  |  |  ------------------
  ------------------
 1444|  21.8k|                                               is_negative))) {
 1445|    306|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|    306|                                     "Integer overflow");
 1447|    306|    }
 1448|       |
 1449|  21.5k|    val = store_result<T>(u64val, is_negative);
 1450|  21.5k|    return begin;
 1451|  21.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
 1427|    774|{
 1428|    774|    uint64_t u64val{};
 1429|    774|    const CharT* begin = input.data();
 1430|    774|    const CharT* const end = input.data() + input.size();
 1431|       |
 1432|  4.21k|    while (begin != end) {
  ------------------
  |  Branch (1432:12): [True: 3.71k, False: 504]
  ------------------
 1433|  3.71k|        const auto digit = char_to_int(*begin);
 1434|  3.71k|        if (digit >= base) {
  ------------------
  |  Branch (1434:13): [True: 270, False: 3.44k]
  ------------------
 1435|    270|            break;
 1436|    270|        }
 1437|  3.44k|        u64val =
 1438|  3.44k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
 1439|  3.44k|        ++begin;
 1440|  3.44k|    }
 1441|       |
 1442|    774|    auto digits_count = static_cast<size_t>(begin - input.data());
 1443|    774|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  859|    774|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8, False: 766]
  |  |  ------------------
  ------------------
 1444|    774|                                               is_negative))) {
 1445|      8|        return unexpected_scan_error(scan_error::value_out_of_range,
 1446|      8|                                     "Integer overflow");
 1447|      8|    }
 1448|       |
 1449|    766|    val = store_result<T>(u64val, is_negative);
 1450|    766|    return begin;
 1451|    774|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   459k|{
 2073|   459k|    const auto argcount = args.size();
 2074|   459k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 68.8k, False: 390k]
  |  Branch (2074:60): [True: 68.8k, False: 0]
  ------------------
 2075|  68.8k|        auto arg = args.get(0);
 2076|  68.8k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  68.8k|    static_cast<    \
  |  |  929|  68.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  68.8k|    }
 2078|       |
 2079|   390k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 390k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   390k|    SCN_UNLIKELY_ATTR
 2087|   390k|    {
 2088|   390k|        auto handler = format_handler<false, CharT>{
 2089|   390k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   390k|    static_cast<    \
  |  |  929|   390k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   390k|    static_cast<    \
  |  |  929|   390k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   390k|        return vscan_parse_format_string(format, handler);
 2091|   390k|    }
 2092|   390k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   918k|{
 1625|   918k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 779k, False: 138k]
  ------------------
 1626|   779k|        return false;
 1627|   779k|    }
 1628|   138k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 138k, False: 0]
  |  Branch (1628:39): [True: 138k, False: 0]
  ------------------
 1629|   918k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   103k|{
 1658|   103k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   103k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   103k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 103k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   103k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   103k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   103k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.2k, False: 89.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.2k|    }                                                  \
  |  |  |  | 3667|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  89.1k|    return it.position();
 1675|   103k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   389k|        : format_handler_base{argcount},
 1900|   389k|          parse_ctx{format},
 1901|   389k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   389k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   389k|    static_cast<    \
  |  |  929|   389k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   389k|    static_cast<    \
  |  |  929|   389k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   389k|    {
 1903|   389k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  1.12M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  1.12M|    {
 1722|  1.12M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  1.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   389k|        : contiguous_ctx(source, args, loc)
 1852|   389k|    {
 1853|   389k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   389k|{
 2038|   389k|    const auto beg = handler.get_ctx().begin();
 2039|   389k|    detail::parse_format_string<false>(format, handler);
 2040|   389k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.2k, False: 304k]
  |  |  ------------------
  ------------------
 2041|  85.2k|        return unexpected(handler.error);
 2042|  85.2k|    }
 2043|   304k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   389k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  2.50M|    {
 2022|  2.50M|        return ctx.get();
 2023|  2.50M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  2.50M|    {
 1857|  2.50M|        return contiguous_ctx;
 1858|  2.50M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   694k|    {
 1907|   694k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 694k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   694k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   389k|{
 1681|   389k|    auto arg = ctx.arg(id);
 1682|   389k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 389k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   389k|    return arg;
 1686|   389k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  1.12M|    {
 1797|  1.12M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  1.12M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  1.12M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.12M, False: 0]
  |  |  ------------------
  ------------------
 1807|  1.12M|            visited_args_lower64 |= (1ull << id);
 1808|  1.12M|            return;
 1809|  1.12M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  1.12M|    {
 1782|  1.12M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  1.12M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.12M, False: 0]
  |  |  ------------------
  ------------------
 1788|  1.12M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  1.12M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  1.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   340k|    {
 1766|   340k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 340k, False: 0]
  |  |  ------------------
  ------------------
 1767|   340k|            error = err;
 1768|   340k|        }
 1769|   340k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   389k|    {
 1944|   389k|        return parse_ctx.next_arg_id();
 1945|   389k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   389k|    {
 1985|   389k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   389k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   389k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 389k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   389k|        auto specs = detail::format_specs{};
 1998|   389k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   389k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   389k|            arg.type()};
 2001|       |
 2002|   389k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   389k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 389k]
  |  Branch (2003:29): [True: 18.9k, False: 370k]
  ------------------
 2004|  18.9k|            SCN_UNLIKELY_ATTR
 2005|  18.9k|            on_error("Missing '}' in format string");
 2006|  18.9k|            return parse_ctx.begin();
 2007|  18.9k|        }
 2008|   370k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.46k, False: 361k]
  |  |  ------------------
  ------------------
 2009|  9.46k|            return parse_ctx.begin();
 2010|  9.46k|        }
 2011|   361k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   361k|        on_visit_scan_arg(
 2014|   361k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   361k|                                           get_ctx().locale()},
 2016|   361k|            arg);
 2017|   361k|        return parse_ctx.begin();
 2018|   370k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|   389k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   389k|    {
 1701|   389k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   361k|    {
 1956|   361k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 361k]
  |  Branch (1956:23): [True: 0, False: 361k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   361k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   361k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.8k, False: 304k]
  |  |  ------------------
  ------------------
 1963|  56.8k|            on_error(r.error());
 1964|  56.8k|        }
 1965|   304k|        else {
 1966|   304k|            get_ctx().advance_to(*r);
 1967|   304k|        }
 1968|   361k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|   284k|    {
 1761|   284k|        SCN_UNLIKELY_ATTR
 1762|   284k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|   284k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  1.12M|    {
 1729|  1.12M|        {
 1730|  1.12M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 1.12M]
  ------------------
 1731|  1.12M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 1.12M]
  ------------------
 1732|  1.12M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  1.12M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  1.12M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 1.12M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  1.12M|        }
 1739|       |
 1740|  1.12M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 1.12M, False: 0]
  ------------------
 1741|  1.12M|            return;
 1742|  1.12M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  1.12M|    {
 1777|  1.12M|        return error;
 1778|  1.12M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  3.20M|    {
 1773|  3.20M|        return static_cast<bool>(error);
 1774|  3.20M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|   390k|        : format_handler_base{argcount},
 1900|   390k|          parse_ctx{format},
 1901|   390k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   390k|    static_cast<    \
  |  |  929|   390k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   390k|    static_cast<    \
  |  |  929|   390k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   390k|    {
 1903|   390k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|   390k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   390k|    static_cast<    \
  |  |  929|   390k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   390k|    {
 1830|   390k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   390k|{
 2038|   390k|    const auto beg = handler.get_ctx().begin();
 2039|   390k|    detail::parse_format_string<false>(format, handler);
 2040|   390k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   390k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 85.2k, False: 304k]
  |  |  ------------------
  ------------------
 2041|  85.2k|        return unexpected(handler.error);
 2042|  85.2k|    }
 2043|   304k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   390k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  2.50M|    {
 2022|  2.50M|        return ctx.get();
 2023|  2.50M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  2.50M|    {
 1834|  2.50M|        return ctx;
 1835|  2.50M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   695k|    {
 1907|   695k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 695k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   695k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   390k|{
 1681|   390k|    auto arg = ctx.arg(id);
 1682|   390k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   390k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 390k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   390k|    return arg;
 1686|   390k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   390k|    {
 1944|   390k|        return parse_ctx.next_arg_id();
 1945|   390k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   390k|    {
 1985|   390k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   390k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   390k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 390k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   390k|        auto specs = detail::format_specs{};
 1998|   390k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   390k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   390k|            arg.type()};
 2001|       |
 2002|   390k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   390k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 390k]
  |  Branch (2003:29): [True: 18.9k, False: 371k]
  ------------------
 2004|  18.9k|            SCN_UNLIKELY_ATTR
 2005|  18.9k|            on_error("Missing '}' in format string");
 2006|  18.9k|            return parse_ctx.begin();
 2007|  18.9k|        }
 2008|   371k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.46k, False: 361k]
  |  |  ------------------
  ------------------
 2009|  9.46k|            return parse_ctx.begin();
 2010|  9.46k|        }
 2011|   361k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   361k|        on_visit_scan_arg(
 2014|   361k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   361k|                                           get_ctx().locale()},
 2016|   361k|            arg);
 2017|   361k|        return parse_ctx.begin();
 2018|   371k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|   390k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   390k|    {
 1701|   390k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   361k|    {
 1956|   361k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 361k]
  |  Branch (1956:23): [True: 0, False: 361k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   361k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   361k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.8k, False: 304k]
  |  |  ------------------
  ------------------
 1963|  56.8k|            on_error(r.error());
 1964|  56.8k|        }
 1965|   304k|        else {
 1966|   304k|            get_ctx().advance_to(*r);
 1967|   304k|        }
 1968|   361k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   459k|{
 2053|   459k|    const auto argcount = args.size();
 2054|   459k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 69.8k, False: 389k]
  |  Branch (2054:60): [True: 69.8k, False: 0]
  ------------------
 2055|  69.8k|        auto arg = args.get(0);
 2056|  69.8k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  69.8k|    static_cast<    \
  |  |  929|  69.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  69.8k|    }
 2058|       |
 2059|   389k|    auto handler = format_handler<true, CharT>{
 2060|   389k|        ranges::subrange<const CharT*>{source.data(),
 2061|   389k|                                       source.data() + source.size()},
 2062|   389k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   389k|    static_cast<    \
  |  |  929|   389k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   389k|    static_cast<    \
  |  |  929|   389k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   389k|    return vscan_parse_format_string(format, handler);
 2064|   459k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   104k|{
 1638|   104k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 104k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   104k|    auto reader =
 1644|   104k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   104k|            ranges::subrange<const CharT*>{source.data(),
 1646|   104k|                                           source.data() + source.size()},
 1647|   104k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   104k|    static_cast<    \
  |  |  929|   104k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   104k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.2k, False: 90.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.2k|    }                                                  \
  |  |  |  | 3667|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  90.6k|    return ranges::distance(source.data(), it);
 1650|   104k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   192k|{
 2053|   192k|    const auto argcount = args.size();
 2054|   192k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 19.4k, False: 173k]
  |  Branch (2054:60): [True: 19.4k, False: 0]
  ------------------
 2055|  19.4k|        auto arg = args.get(0);
 2056|  19.4k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  19.4k|    static_cast<    \
  |  |  929|  19.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  19.4k|    }
 2058|       |
 2059|   173k|    auto handler = format_handler<true, CharT>{
 2060|   173k|        ranges::subrange<const CharT*>{source.data(),
 2061|   173k|                                       source.data() + source.size()},
 2062|   173k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   173k|    return vscan_parse_format_string(format, handler);
 2064|   192k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   385k|{
 1625|   385k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 346k, False: 38.9k]
  ------------------
 1626|   346k|        return false;
 1627|   346k|    }
 1628|  38.9k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 38.9k, False: 0]
  |  Branch (1628:39): [True: 38.9k, False: 0]
  ------------------
 1629|   385k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  29.1k|{
 1638|  29.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.1k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  29.1k|    auto reader =
 1644|  29.1k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  29.1k|            ranges::subrange<const CharT*>{source.data(),
 1646|  29.1k|                                           source.data() + source.size()},
 1647|  29.1k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  29.1k|    static_cast<    \
  |  |  929|  29.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  29.1k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.4k, False: 783]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  28.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  28.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  28.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  28.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  28.4k|    }                                                  \
  |  |  |  | 3667|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    783|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|    783|    return ranges::distance(source.data(), it);
 1650|  29.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   173k|        : format_handler_base{argcount},
 1900|   173k|          parse_ctx{format},
 1901|   173k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   173k|    {
 1903|   173k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   173k|        : contiguous_ctx(source, args, loc)
 1852|   173k|    {
 1853|   173k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   173k|{
 2038|   173k|    const auto beg = handler.get_ctx().begin();
 2039|   173k|    detail::parse_format_string<false>(format, handler);
 2040|   173k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 170k, False: 2.67k]
  |  |  ------------------
  ------------------
 2041|   170k|        return unexpected(handler.error);
 2042|   170k|    }
 2043|  2.67k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   173k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|   757k|    {
 2022|   757k|        return ctx.get();
 2023|   757k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   757k|    {
 1857|   757k|        return contiguous_ctx;
 1858|   757k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   175k|    {
 1907|   175k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 175k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   175k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   173k|{
 1681|   173k|    auto arg = ctx.arg(id);
 1682|   173k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   173k|    return arg;
 1686|   173k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   173k|    {
 1944|   173k|        return parse_ctx.next_arg_id();
 1945|   173k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   173k|    {
 1985|   173k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   173k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   173k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 173k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   173k|        auto specs = detail::format_specs{};
 1998|   173k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   173k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   173k|            arg.type()};
 2001|       |
 2002|   173k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   173k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 173k]
  |  Branch (2003:29): [True: 37.8k, False: 135k]
  ------------------
 2004|  37.8k|            SCN_UNLIKELY_ATTR
 2005|  37.8k|            on_error("Missing '}' in format string");
 2006|  37.8k|            return parse_ctx.begin();
 2007|  37.8k|        }
 2008|   135k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 116k]
  |  |  ------------------
  ------------------
 2009|  18.9k|            return parse_ctx.begin();
 2010|  18.9k|        }
 2011|   116k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   116k|        on_visit_scan_arg(
 2014|   116k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   116k|                                           get_ctx().locale()},
 2016|   116k|            arg);
 2017|   116k|        return parse_ctx.begin();
 2018|   135k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   173k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   173k|    {
 1701|   173k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   116k|    {
 1956|   116k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 116k]
  |  Branch (1956:23): [True: 0, False: 116k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   116k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   116k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 113k, False: 2.67k]
  |  |  ------------------
  ------------------
 1963|   113k|            on_error(r.error());
 1964|   113k|        }
 1965|  2.67k|        else {
 1966|  2.67k|            get_ctx().advance_to(*r);
 1967|  2.67k|        }
 1968|   116k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   192k|{
 2073|   192k|    const auto argcount = args.size();
 2074|   192k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 19.4k, False: 173k]
  |  Branch (2074:60): [True: 19.4k, False: 0]
  ------------------
 2075|  19.4k|        auto arg = args.get(0);
 2076|  19.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  19.4k|    static_cast<    \
  |  |  929|  19.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  19.4k|    }
 2078|       |
 2079|   173k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 173k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   173k|    SCN_UNLIKELY_ATTR
 2087|   173k|    {
 2088|   173k|        auto handler = format_handler<false, CharT>{
 2089|   173k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   173k|        return vscan_parse_format_string(format, handler);
 2091|   173k|    }
 2092|   173k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  29.1k|{
 1658|  29.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.1k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  29.1k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  29.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 29.1k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  29.1k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  29.1k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  29.1k|    static_cast<    \
  |  |  929|  29.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  29.1k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  29.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  29.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  29.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.4k, False: 783]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  28.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  28.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  28.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  28.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  28.4k|    }                                                  \
  |  |  |  | 3667|  29.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    783|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|    783|    return it.position();
 1675|  29.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   173k|        : format_handler_base{argcount},
 1900|   173k|          parse_ctx{format},
 1901|   173k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   173k|    {
 1903|   173k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   173k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   173k|    {
 1830|   173k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   173k|{
 2038|   173k|    const auto beg = handler.get_ctx().begin();
 2039|   173k|    detail::parse_format_string<false>(format, handler);
 2040|   173k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 170k, False: 2.67k]
  |  |  ------------------
  ------------------
 2041|   170k|        return unexpected(handler.error);
 2042|   170k|    }
 2043|  2.67k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   173k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|   757k|    {
 2022|   757k|        return ctx.get();
 2023|   757k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|   757k|    {
 1834|   757k|        return ctx;
 1835|   757k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   175k|    {
 1907|   175k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 175k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   175k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   173k|{
 1681|   173k|    auto arg = ctx.arg(id);
 1682|   173k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   173k|    return arg;
 1686|   173k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   173k|    {
 1944|   173k|        return parse_ctx.next_arg_id();
 1945|   173k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   173k|    {
 1985|   173k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   173k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   173k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 173k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   173k|        auto specs = detail::format_specs{};
 1998|   173k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   173k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   173k|            arg.type()};
 2001|       |
 2002|   173k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   173k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 173k]
  |  Branch (2003:29): [True: 37.8k, False: 135k]
  ------------------
 2004|  37.8k|            SCN_UNLIKELY_ATTR
 2005|  37.8k|            on_error("Missing '}' in format string");
 2006|  37.8k|            return parse_ctx.begin();
 2007|  37.8k|        }
 2008|   135k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 116k]
  |  |  ------------------
  ------------------
 2009|  18.9k|            return parse_ctx.begin();
 2010|  18.9k|        }
 2011|   116k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   116k|        on_visit_scan_arg(
 2014|   116k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   116k|                                           get_ctx().locale()},
 2016|   116k|            arg);
 2017|   116k|        return parse_ctx.begin();
 2018|   135k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   173k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   173k|    {
 1701|   173k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   116k|    {
 1956|   116k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 116k]
  |  Branch (1956:23): [True: 0, False: 116k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   116k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   116k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 113k, False: 2.67k]
  |  |  ------------------
  ------------------
 1963|   113k|            on_error(r.error());
 1964|   113k|        }
 1965|  2.67k|        else {
 1966|  2.67k|            get_ctx().advance_to(*r);
 1967|  2.67k|        }
 1968|   116k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  34.9k|{
 2099|  34.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  34.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  34.4k|{
 2099|  34.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  34.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  34.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  9.72k|{
 2099|  9.72k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  9.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  9.72k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  9.72k|{
 2099|  9.72k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  9.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  9.72k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|    789|{
 1351|    789|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|    789|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|    789|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|    789|            return transcode_to_string_impl_to32(src, dest);
 1362|    789|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|    789|    SCN_EXPECT(false);
  ------------------
  |  |  924|    789|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    789|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|    789|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|    789|{
 1244|    789|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|    789|    auto it = src.begin();
 1247|  60.9k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 60.1k, False: 789]
  ------------------
 1248|  60.1k|        auto res = get_next_code_point(
 1249|  60.1k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|  60.1k|                                                                 src.end()));
 1251|  60.1k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|  60.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 515, False: 59.6k]
  |  |  ------------------
  ------------------
 1252|    515|            dest.push_back(DestCharT{0xfffd});
 1253|    515|        }
 1254|  59.6k|        else {
 1255|  59.6k|            dest.push_back(res.value);
 1256|  59.6k|        }
 1257|  60.1k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|  60.1k|    }
 1259|    789|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  98.6k|{
 1169|  98.6k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  98.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  98.6k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  98.6k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.74k, False: 95.9k]
  |  |  ------------------
  ------------------
 1173|  2.74k|        return {get_start_for_next_code_point(input),
 1174|  2.74k|                detail::invalid_code_point};
 1175|  2.74k|    }
 1176|  95.9k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  95.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.58k, False: 93.3k]
  |  |  ------------------
  ------------------
 1177|  2.58k|        return {input.end(), detail::invalid_code_point};
 1178|  2.58k|    }
 1179|       |
 1180|  93.3k|    return {input.begin() + len,
 1181|  93.3k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  95.9k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  2.74k|{
 1155|  2.74k|    auto it = input.begin();
 1156|  10.8k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 9.66k, False: 1.22k]
  ------------------
 1157|  9.66k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.51k, False: 8.14k]
  ------------------
 1158|  1.51k|            break;
 1159|  1.51k|        }
 1160|  9.66k|    }
 1161|  2.74k|    return it;
 1162|  2.74k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  4.00M|    constexpr parse_error(code c) : m_code(c)
  808|  4.00M|    {
  809|  4.00M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  4.00M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  4.00M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  1.37M|    {
  823|  1.37M|        return a.m_code == b.m_code;
  824|  1.37M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|   955k|    {
 2925|   955k|        return m_msg == nullptr;
 2926|   955k|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|   929k|{
  458|   929k|    return is_ascii_space_lookup[static_cast<size_t>(
  459|   929k|        static_cast<unsigned char>(ch))];
  460|   929k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   565k|{
  539|   565k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   565k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  3.45M|{
  784|  3.45M|    return e != eof_error::good;
  785|  3.45M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  28.3k|{
  798|  28.3k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  28.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  28.3k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  28.3k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|  68.0k|{
  845|  68.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  68.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|  68.0k|    return parse_error::eof;
  847|  68.0k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   153k|{
  854|   153k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 153k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   153k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 0, False: 153k]
  ------------------
  859|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  860|      0|    }
  861|       |
  862|   153k|    return scan_error{code, msg};
  863|   153k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|   463k|{
  868|   463k|    return [code, msg](parse_error err) {
  869|   463k|        return make_scan_error_from_parse_error(err, code, msg);
  870|   463k|    };
  871|   463k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|   357k|{
 2209|   357k|    unsigned char running_diff{0};
 2210|  1.07M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 714k, False: 357k]
  ------------------
 2211|   714k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|   714k|    }
 2213|   357k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 2.18k, False: 354k]
  |  Branch (2213:33): [True: 498, False: 354k]
  ------------------
 2214|   357k|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  5.76M|{
 3112|  5.76M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  5.76M|}
_ZN3scn2v34impl11char_to_intEw:
 3115|   616k|{
 3116|   616k|#if WCHAR_MIN < 0
 3117|   616k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 588k, False: 28.7k]
  |  Branch (3117:20): [True: 355k, False: 232k]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|   355k|        return char_to_int(static_cast<char>(ch));
 3122|   355k|    }
 3123|   261k|    return 255;
 3124|   616k|}
_ZN3scn2v34impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
 3147|  4.65k|{
 3148|  98.0k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (3148:44): [True: 93.4k, False: 4.65k]
  ------------------
 3149|  93.4k|         ++thsep_it) {
 3150|  93.4k|        const auto tmp = *thsep_it;
 3151|  93.4k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
 3152|  93.4k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
 3153|  93.4k|    }
 3154|  4.65k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
 3155|  4.65k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|   614k|{
 5997|   614k|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 614k]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|   614k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 614k]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|   614k|    return {};
 6012|   614k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.55M|    {
  304|  1.55M|        ranges::advance(x, n);
  305|  1.55M|        return x;
  306|  1.55M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.55M|    {
  268|  1.55M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.55M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.55M|    {
  151|  1.55M|        i += n;
  152|  1.55M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.39M|    {
  108|  2.39M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.39M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.39M|    {
   87|  2.39M|        return s - i;
   88|  2.39M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   103k|    {
  304|   103k|        ranges::advance(x, n);
  305|   103k|        return x;
  306|   103k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   103k|    {
  268|   103k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   103k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   103k|    {
  151|   103k|        i += n;
  152|   103k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  38.7M|    {
  108|  38.7M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  38.7M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  38.7M|    {
   87|  38.7M|        return s - i;
   88|  38.7M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   465k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   465k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   465k|        auto beg = r.begin();
  990|   465k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 465k, False: 0]
  ------------------
  991|   465k|            return false;
  992|   465k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   465k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  2.58M|    {
  763|  2.58M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.58M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|   369k|{
 1845|   369k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|   369k|    else {
 1856|   369k|        auto it = range.begin();
 1857|   369k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 329k, False: 39.6k]
  ------------------
 1858|   329k|            return ranges::next(it, count);
 1859|   329k|        }
 1860|       |
 1861|   105k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 78.1k, False: 27.2k]
  ------------------
 1862|  78.1k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 12.4k, False: 65.7k]
  ------------------
 1863|  12.4k|                return unexpected(eof_error::eof);
 1864|  12.4k|            }
 1865|  78.1k|        }
 1866|       |
 1867|  27.2k|        return it;
 1868|  39.6k|    }
 1869|   369k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   369k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|   369k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|   369k|        else {
 1106|   369k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 369k, False: 0]
  ------------------
 1107|   369k|                return static_cast<size_t>(
 1108|   369k|                    r.begin().parent()->chars_available() -
 1109|   369k|                    r.begin().position());
 1110|   369k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   369k|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|   369k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   340k|        : m_fptr([](storage fn,
  743|   340k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   340k|              cvref<T> obj = *get<T>(fn);
  745|   340k|              if constexpr (std::is_void_v<R>) {
  746|   340k|                  obj(static_cast<decltype(args)>(args)...);
  747|   340k|              }
  748|   340k|              else {
  749|   340k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   340k|              }
  751|   340k|          }),
  752|   340k|          m_storage(std::addressof(f))
  753|   340k|    {
  754|   340k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  1.29M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.29M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.29M|              else {
  749|  1.29M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.29M|              }
  751|  1.29M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  1.29M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.29M|        else if constexpr (std::is_object_v<T>) {
  688|  1.29M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.29M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   340k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   340k|        {
  662|   340k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  2.25M|    {
  763|  2.25M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.25M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   727k|        : m_fptr([](storage fn,
  743|   727k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   727k|              cvref<T> obj = *get<T>(fn);
  745|   727k|              if constexpr (std::is_void_v<R>) {
  746|   727k|                  obj(static_cast<decltype(args)>(args)...);
  747|   727k|              }
  748|   727k|              else {
  749|   727k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   727k|              }
  751|   727k|          }),
  752|   727k|          m_storage(std::addressof(f))
  753|   727k|    {
  754|   727k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  1.12M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.12M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.12M|              else {
  749|  1.12M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.12M|              }
  751|  1.12M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  1.12M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.12M|        else if constexpr (std::is_object_v<T>) {
  688|  1.12M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.12M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   727k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   727k|        {
  662|   727k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   361k|    {
 6026|   361k|        const bool need_skipped_width =
 6027|   361k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 361k]
  |  Branch (6027:33): [True: 0, False: 361k]
  ------------------
 6028|   361k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   361k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 361k]
  ------------------
 6032|   361k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 361k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   361k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 361k, False: 0]
  |  Branch (6036:56): [True: 361k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   361k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 361k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   713k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   361k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   361k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   361k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.1k, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  10.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  10.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  10.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  10.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  10.1k|    }                                                  \
  |  |  |  | 3667|   361k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   713k|                            make_eof_scan_error));
 6047|       |
 6048|   713k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 351k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   351k|            return result_type{it, 0};
 6056|   713k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   361k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|   340k|{
 1964|   340k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   340k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|   340k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|   340k|    else {
 1949|   340k|        auto first = range.begin();
 1950|  1.30M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.29M, False: 9.70k]
  ------------------
 1951|  1.29M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 330k, False: 961k]
  ------------------
 1952|   330k|                return first;
 1953|   330k|            }
 1954|  1.29M|        }
 1955|  9.70k|        return first;
 1956|   340k|    }
 1957|   340k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   354k|    {
  108|   354k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   354k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   354k|    {
   94|   354k|        iter_difference_t<I> counter{0};
   95|  6.54M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 6.18M, False: 354k]
  ------------------
   96|  6.18M|            ++i;
   97|  6.18M|            ++counter;
   98|  6.18M|        }
   99|   354k|        return counter;
  100|   354k|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   153k|    return [code, msg](parse_error err) {
  869|   153k|        return make_scan_error_from_parse_error(err, code, msg);
  870|   153k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|   133k|    {
 1768|   133k|        auto stdloc = loc.get<std::locale>();
 1769|   133k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   133k|        grouping = numpunct.grouping();
 1771|   133k|        thousands_sep =
 1772|   133k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 133k]
  ------------------
 1773|   133k|        decimal_point = numpunct.decimal_point();
 1774|   133k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|   133k|{
 1705|   133k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 133k, False: 0]
  ------------------
 1706|   133k|        return std::use_facet<Facet>(stdloc);
 1707|   133k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   133k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|   571k|{
 1834|   571k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   571k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 570k]
  |  |  ------------------
  ------------------
 1835|    360|        return unexpected(e);
 1836|    360|    }
 1837|       |
 1838|   570k|    return ranges::next(range.begin());
 1839|   571k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.13M|{
  950|  1.13M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.9k, False: 1.12M]
  |  |  ------------------
  ------------------
  951|  12.9k|        return eof_error::eof;
  952|  12.9k|    }
  953|  1.12M|    return eof_error::good;
  954|  1.13M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.97M|{
  944|  1.97M|    return is_range_eof(r.begin(), r.end());
  945|  1.97M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.97M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.97M|    {
  937|  1.97M|        return begin == end;
  938|  1.97M|    }
  939|  1.97M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   570k|    {
  296|   570k|        ++x;
  297|   570k|        return x;
  298|   570k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  56.8k|    {
 3528|  56.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  56.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  56.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  56.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 56.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  56.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  56.8k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  56.8k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.69k, False: 48.1k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.69k|            else {
 3539|  8.69k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.69k]
  ------------------
 3540|  8.69k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.69k|            }
 3546|  8.69k|        }
 3547|       |
 3548|  56.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.49k, False: 51.3k]
  ------------------
 3549|  5.49k|            value = T{0};
 3550|  5.49k|            return std::next(prefix_result.iterator);
 3551|  5.49k|        }
 3552|       |
 3553|  51.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  51.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 39.9k, False: 11.3k]
  |  |  ------------------
  ------------------
 3554|  39.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  39.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  39.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  39.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.67k, False: 35.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.67k|    }                                                  \
  |  |  |  | 3667|  39.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  35.3k|                    parse_integer_digits_without_thsep(
 3556|  35.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  35.3k|                        prefix_result.parsed_base));
 3558|       |
 3559|  35.3k|            auto buf = make_contiguous_buffer(
 3560|  35.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  35.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  35.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  35.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  35.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.97k, False: 33.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.97k|    }                                                  \
  |  |  |  | 3667|  35.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  33.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  33.3k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  33.3k|            return ranges::next(
 3566|  33.3k|                prefix_result.iterator,
 3567|  33.3k|                ranges::distance(buf.view().begin(), result_it));
 3568|  35.3k|        }
 3569|       |
 3570|  11.3k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  11.3k|            localized_number_formatting_options<CharT>{loc};
 3575|  11.3k|#endif
 3576|       |
 3577|  11.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 616, False: 10.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    616|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    616|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    616|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    616|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    616|    }                                                  \
  |  |  |  | 3667|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  10.7k|                parse_integer_digits_with_thsep(
 3579|  10.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  10.7k|                    prefix_result.parsed_base, locale_options));
 3581|  10.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  10.7k|            parse_digits_result;
 3583|       |
 3584|  10.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 404, False: 10.3k]
  ------------------
 3585|    404|            if (auto e = check_thsep_grouping(
 3586|    404|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    404|                    thsep_indices, locale_options.grouping);
 3588|    404|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 208, False: 196]
  |  |  ------------------
  ------------------
 3589|    208|                return unexpected(e);
 3590|    208|            }
 3591|    404|        }
 3592|       |
 3593|  10.5k|        auto nothsep_source_view =
 3594|  10.5k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  10.5k|        SCN_TRY(
  ------------------
  |  | 3668|  10.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 438, False: 10.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    438|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    438|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    438|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    438|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    438|    }                                                  \
  |  |  |  | 3667|  10.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  10.0k|            nothsep_source_it,
 3597|  10.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  10.0k|                                prefix_result.parsed_base));
 3599|       |
 3600|  10.0k|        return ranges::next(
 3601|  10.0k|            prefix_result.iterator,
 3602|  10.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  10.0k|                ranges::ssize(thsep_indices));
 3604|  10.5k|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3314|   452k|{
 3315|   452k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   452k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   452k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   452k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 452k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   452k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   452k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   452k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   452k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   452k|        parse_integer_base_prefix(
 3320|   452k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   452k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 45.1k, False: 407k]
  ------------------
 3323|  45.1k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 514, False: 44.5k]
  ------------------
 3324|  45.1k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 32.3k, False: 12.2k]
  ------------------
 3325|  32.8k|            digits_begin_it = base_prefix_begin_it;
 3326|  32.8k|        }
 3327|  12.2k|        else {
 3328|  12.2k|            parsed_zero = false;
 3329|  12.2k|        }
 3330|  45.1k|    }
 3331|   407k|    else {
 3332|   407k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 2.13k, False: 405k]
  ------------------
 3333|   407k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 38.9k, False: 366k]
  ------------------
 3334|  41.1k|            digits_begin_it = base_prefix_begin_it;
 3335|  41.1k|        }
 3336|   407k|    }
 3337|       |
 3338|   452k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 392k, False: 60.4k]
  ------------------
 3339|   392k|        sign = sign_type::plus_sign;
 3340|   392k|    }
 3341|   452k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   452k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   452k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   452k|{
 3130|   452k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   452k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 392k, False: 60.4k]
  ------------------
 3132|   392k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 392k, False: 0]
  ------------------
 3133|   392k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   392k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   392k|    }
 3137|       |
 3138|  60.4k|    auto& it = *r;
 3139|  60.4k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 47.7k, False: 12.7k]
  ------------------
 3140|  47.7k|        return std::pair{it, sign_type::minus_sign};
 3141|  47.7k|    }
 3142|  12.7k|    return std::pair{it, sign_type::plus_sign};
 3143|  60.4k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|   452k|{
 2261|   452k|    auto it = read_code_unit(range);
 2262|   452k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 452k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   892k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 892k, False: 392k]
  ------------------
 2267|   892k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 60.4k, False: 831k]
  ------------------
 2268|  60.4k|            return *it;
 2269|  60.4k|        }
 2270|   892k|    }
 2271|       |
 2272|   392k|    return unexpected(parse_error::error);
 2273|   452k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3281|   452k|{
 3282|   452k|    switch (base) {
 3283|  23.6k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 23.6k, False: 428k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  23.6k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  23.6k|                    false};
 3287|       |
 3288|  42.7k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 42.7k, False: 409k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  42.7k|            bool zero_parsed = false;
 3291|  42.7k|            auto it = apply_opt(
 3292|  42.7k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  42.7k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  71.2k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 71.2k, False: 381k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  71.2k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  71.2k|                    false};
 3300|       |
 3301|  77.6k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 77.6k, False: 374k]
  ------------------
 3302|       |            // detect base
 3303|  77.6k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|   237k|        default:
  ------------------
  |  Branch (3305:9): [True: 237k, False: 215k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|   237k|            return {range.begin(), base, false};
 3308|   452k|    }
 3309|   452k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2279|   137k|{
 2280|   137k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 119k, False: 18.6k]
  ------------------
 2281|   119k|        return range.begin();
 2282|   119k|    }
 2283|  18.6k|    return *result;
 2284|   137k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3232|   100k|{
 3233|   100k|    return read_matching_string_classic_nocase(range, "0b");
 3234|   100k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|   369k|{
 2220|   369k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|   369k|    else {
 2233|   369k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   369k|            if (ch < 'A' || ch > 'Z') {
 2235|   369k|                return ch;
 2236|   369k|            }
 2237|   369k|            return static_cast<char_type>(ch +
 2238|   369k|                                          static_cast<char_type>('a' - 'A'));
 2239|   369k|        };
 2240|       |
 2241|   369k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   369k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   369k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   369k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.4k, False: 356k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  12.4k|    }                                                  \
  |  |  |  | 3667|   369k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|   356k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|   356k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|   356k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 354k, False: 2.68k]
  |  |  ------------------
  ------------------
 2246|   356k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|   356k|                    return ascii_tolower(a) ==
 2248|   356k|                           static_cast<detail::char_t<Range>>(b);
 2249|   356k|                }))) {
 2250|   354k|            return unexpected(parse_error::error);
 2251|   354k|        }
 2252|       |
 2253|  2.68k|        return it;
 2254|   356k|    }
 2255|   369k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2233|   502k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   502k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 487k, False: 14.9k]
  |  Branch (2234:29): [True: 8.41k, False: 6.53k]
  ------------------
 2235|   496k|                return ch;
 2236|   496k|            }
 2237|  6.53k|            return static_cast<char_type>(ch +
 2238|  6.53k|                                          static_cast<char_type>('a' - 'A'));
 2239|   502k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3246|   119k|{
 3247|   119k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 952, False: 118k]
  ------------------
 3248|    952|        return *r;
 3249|    952|    }
 3250|       |
 3251|   118k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 45.1k, False: 73.5k]
  ------------------
 3252|  45.1k|        zero_parsed = true;
 3253|  45.1k|        return *r;
 3254|  45.1k|    }
 3255|       |
 3256|  73.5k|    return unexpected(parse_error::error);
 3257|   118k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|   118k|{
 2135|   118k|    auto it = read_code_unit(range);
 2136|   118k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 118k]
  |  |  ------------------
  ------------------
 2137|    360|        return unexpected(make_eof_parse_error(it.error()));
 2138|    360|    }
 2139|       |
 2140|   118k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.1k, False: 45.1k]
  |  |  ------------------
  ------------------
 2141|   118k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  73.1k|        return unexpected(parse_error::error);
 2143|  73.1k|    }
 2144|       |
 2145|  45.1k|    return *it;
 2146|   118k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3239|   148k|{
 3240|   148k|    return read_matching_string_classic_nocase(range, "0x");
 3241|   148k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3262|  77.6k|{
 3263|  77.6k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 550, False: 77.1k]
  ------------------
 3264|    550|        return {*r, 16, false};
 3265|    550|    }
 3266|  77.1k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 342, False: 76.7k]
  ------------------
 3267|    342|        return {*r, 2, false};
 3268|    342|    }
 3269|  76.7k|    {
 3270|  76.7k|        bool zero_parsed{false};
 3271|  76.7k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 28.2k, False: 48.5k]
  ------------------
 3272|  28.2k|            return {*r, 8, zero_parsed};
 3273|  28.2k|        }
 3274|  76.7k|    }
 3275|  48.5k|    return {range.begin(), 10, false};
 3276|  76.7k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3348|   340k|{
 3349|   340k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|   340k|    else {
 3360|   340k|        return read_while1_code_unit(range,
 3361|   340k|                                     [&](char_type ch) noexcept {
 3362|   340k|                                         return char_to_int(ch) < base;
 3363|   340k|                                     })
 3364|   340k|            .transform_error(map_parse_error_to_scan_error(
 3365|   340k|                scan_error::invalid_scanned_value,
 3366|   340k|                "Failed to parse integer: No digits found"));
 3367|   340k|    }
 3368|   340k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|   340k|{
 1984|   340k|    auto it = read_while_code_unit(range, pred);
 1985|   340k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 32.8k, False: 307k]
  ------------------
 1986|  32.8k|        return unexpected(parse_error::error);
 1987|  32.8k|    }
 1988|   307k|    return it;
 1989|   340k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   340k|        : m_fptr([](storage fn,
  743|   340k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   340k|              cvref<T> obj = *get<T>(fn);
  745|   340k|              if constexpr (std::is_void_v<R>) {
  746|   340k|                  obj(static_cast<decltype(args)>(args)...);
  747|   340k|              }
  748|   340k|              else {
  749|   340k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   340k|              }
  751|   340k|          }),
  752|   340k|          m_storage(std::addressof(f))
  753|   340k|    {
  754|   340k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clES11_c:
  743|  1.29M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.29M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.29M|              else {
  749|  1.29M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.29M|              }
  751|  1.29M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  683|  1.29M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.29M|        else if constexpr (std::is_object_v<T>) {
  688|  1.29M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.29M|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlcE_clEc:
 3361|  1.29M|                                     [&](char_type ch) noexcept {
 3362|  1.29M|                                         return char_to_int(ch) < base;
 3363|  1.29M|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlcE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   340k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   340k|        {
  662|   340k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3378|  66.4k|{
 3379|  66.4k|    std::basic_string<CharT> output;
 3380|  66.4k|    std::string thsep_indices;
 3381|  66.4k|    auto it = range.begin();
 3382|  66.4k|    bool digit_matched = false;
 3383|   431k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 429k, False: 2.40k]
  ------------------
 3384|   429k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 47.5k, False: 381k]
  ------------------
 3385|  47.5k|            thsep_indices.push_back(
 3386|  47.5k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  47.5k|        }
 3388|   381k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 64.0k, False: 317k]
  ------------------
 3389|  64.0k|            break;
 3390|  64.0k|        }
 3391|   317k|        else {
 3392|   317k|            output.push_back(*it);
 3393|   317k|            digit_matched = true;
 3394|   317k|        }
 3395|   429k|    }
 3396|  66.4k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 63.0k]
  |  |  ------------------
  ------------------
 3397|  3.44k|        return unexpected_scan_error(
 3398|  3.44k|            scan_error::invalid_scanned_value,
 3399|  3.44k|            "Failed to parse integer: No digits found");
 3400|  3.44k|    }
 3401|  63.0k|    return std::tuple{it, output, thsep_indices};
 3402|  66.4k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSE_17basic_string_viewIcSH_EE:
 3199|  2.23k|{
 3200|  2.23k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  2.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|  2.23k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 1.06k, False: 1.16k]
  ------------------
 3203|  1.06k|        SCN_UNLIKELY_ATTR
 3204|  1.06k|        return {scan_error::invalid_scanned_value,
 3205|  1.06k|                "Invalid thousands separator grouping"};
 3206|  1.06k|    }
 3207|       |
 3208|  1.16k|    return {};
 3209|  2.23k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEbT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
 3161|  2.23k|{
 3162|  2.23k|    transform_thsep_indices(thsep_indices,
 3163|  2.23k|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|  2.23k|    auto thsep_it = thsep_indices.rbegin();
 3166|  2.23k|    for (auto grouping_it = grouping.begin();
 3167|  2.23k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 2.23k]
  |  Branch (3167:10): [True: 0, False: 2.23k]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|  2.23k|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|  2.23k|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|  2.23k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|  38.2k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 36.5k, False: 1.70k]
  ------------------
 3179|  36.5k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 528, False: 35.9k]
  ------------------
 3180|    528|            return false;
 3181|    528|        }
 3182|  36.5k|    }
 3183|       |
 3184|  1.70k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 1.70k, False: 0]
  ------------------
 3185|  1.70k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 538, False: 1.16k]
  ------------------
 3186|    538|            return false;
 3187|    538|        }
 3188|  1.70k|    }
 3189|       |
 3190|  1.16k|    SCN_CLANG_POP
 3191|       |
 3192|  1.16k|    return true;
 3193|  1.70k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1670|   307k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   307k|    else {
 1677|   307k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   307k|    }
 1679|   307k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   307k|    {
 1525|   307k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   307k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|   307k|    {
 1609|   307k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   307k|                           ranges::common_range<Range>) {
 1626|   307k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   307k|            auto end_seg = range.end().contiguous_segment();
 1628|   307k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 195k, False: 111k]
  |  |  ------------------
  ------------------
 1629|   307k|                             detail::to_address(end_seg.end()))) {
 1630|   195k|                auto& str = m_storage.emplace();
 1631|   195k|                str.reserve(range.end().position() - range.begin().position());
 1632|   195k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|   195k|                m_view = string_view_type{str};
 1634|   195k|                return;
 1635|   195k|            }
 1636|       |
 1637|   111k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   111k|                                                            end_seg.data());
 1639|   111k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   307k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|   608k|    {
 1570|   608k|        return m_view;
 1571|   608k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|   307k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   298k|    {
 6068|   298k|        const bool need_skipped_width =
 6069|   298k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 298k]
  |  Branch (6069:33): [True: 0, False: 298k]
  ------------------
 6070|   298k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   298k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 298k]
  ------------------
 6073|   298k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 298k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   298k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 298k, False: 0]
  ------------------
 6082|   298k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 298k]
  ------------------
 6083|   298k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   298k|        return result_type{rng.begin(), 0};
 6107|   298k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|   573k|{
 1834|   573k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   573k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 572k]
  |  |  ------------------
  ------------------
 1835|    360|        return unexpected(e);
 1836|    360|    }
 1837|       |
 1838|   572k|    return ranges::next(range.begin());
 1839|   573k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  1.48M|{
  950|  1.48M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.0k, False: 1.47M]
  |  |  ------------------
  ------------------
  951|  13.0k|        return eof_error::eof;
  952|  13.0k|    }
  953|  1.47M|    return eof_error::good;
  954|  1.48M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  1.48M|{
  944|  1.48M|    return is_range_eof(r.begin(), r.end());
  945|  1.48M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  1.48M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.48M|    {
  937|  1.48M|        return begin == end;
  938|  1.48M|    }
  939|  1.48M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   572k|    {
  296|   572k|        ++x;
  297|   572k|        return x;
  298|   572k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  56.9k|    {
 3528|  56.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  56.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  56.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  56.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 56.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  56.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  56.9k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  56.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 8.68k, False: 48.2k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  8.68k|            else {
 3539|  8.68k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 8.68k]
  ------------------
 3540|  8.68k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  8.68k|            }
 3546|  8.68k|        }
 3547|       |
 3548|  56.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.49k, False: 51.4k]
  ------------------
 3549|  5.49k|            value = T{0};
 3550|  5.49k|            return std::next(prefix_result.iterator);
 3551|  5.49k|        }
 3552|       |
 3553|  51.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  51.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 40.0k, False: 11.3k]
  |  |  ------------------
  ------------------
 3554|  40.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  40.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  40.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  40.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  40.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 128, False: 39.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    128|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    128|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    128|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    128|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    128|    }                                                  \
  |  |  |  | 3667|  40.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  39.9k|                    parse_integer_digits_without_thsep(
 3556|  39.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  39.9k|                        prefix_result.parsed_base));
 3558|       |
 3559|  39.9k|            auto buf = make_contiguous_buffer(
 3560|  39.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  39.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  39.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  39.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  39.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.64k, False: 33.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.64k|    }                                                  \
  |  |  |  | 3667|  39.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  33.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  33.3k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  33.3k|            return ranges::next(
 3566|  33.3k|                prefix_result.iterator,
 3567|  33.3k|                ranges::distance(buf.view().begin(), result_it));
 3568|  39.9k|        }
 3569|       |
 3570|  11.3k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  11.3k|            localized_number_formatting_options<CharT>{loc};
 3575|  11.3k|#endif
 3576|       |
 3577|  11.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  11.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 648, False: 10.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    648|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    648|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    648|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    648|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    648|    }                                                  \
  |  |  |  | 3667|  11.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  10.7k|                parse_integer_digits_with_thsep(
 3579|  10.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  10.7k|                    prefix_result.parsed_base, locale_options));
 3581|  10.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  10.7k|            parse_digits_result;
 3583|       |
 3584|  10.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 404, False: 10.3k]
  ------------------
 3585|    404|            if (auto e = check_thsep_grouping(
 3586|    404|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    404|                    thsep_indices, locale_options.grouping);
 3588|    404|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 208, False: 196]
  |  |  ------------------
  ------------------
 3589|    208|                return unexpected(e);
 3590|    208|            }
 3591|    404|        }
 3592|       |
 3593|  10.5k|        auto nothsep_source_view =
 3594|  10.5k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  10.5k|        SCN_TRY(
  ------------------
  |  | 3668|  10.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  10.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  10.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 434, False: 10.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    434|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    434|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    434|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    434|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    434|    }                                                  \
  |  |  |  | 3667|  10.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  10.0k|            nothsep_source_it,
 3597|  10.0k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  10.0k|                                prefix_result.parsed_base));
 3599|       |
 3600|  10.0k|        return ranges::next(
 3601|  10.0k|            prefix_result.iterator,
 3602|  10.0k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  10.0k|                ranges::ssize(thsep_indices));
 3604|  10.5k|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|   454k|{
 3315|   454k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   454k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   454k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   454k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 454k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   454k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   454k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   454k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   454k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   454k|        parse_integer_base_prefix(
 3320|   454k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   454k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 45.0k, False: 409k]
  ------------------
 3323|  45.0k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 514, False: 44.5k]
  ------------------
 3324|  45.0k|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 32.3k, False: 12.2k]
  ------------------
 3325|  32.8k|            digits_begin_it = base_prefix_begin_it;
 3326|  32.8k|        }
 3327|  12.2k|        else {
 3328|  12.2k|            parsed_zero = false;
 3329|  12.2k|        }
 3330|  45.0k|    }
 3331|   409k|    else {
 3332|   409k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 2.13k, False: 407k]
  ------------------
 3333|   409k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 39.7k, False: 367k]
  ------------------
 3334|  41.9k|            digits_begin_it = base_prefix_begin_it;
 3335|  41.9k|        }
 3336|   409k|    }
 3337|       |
 3338|   454k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 393k, False: 60.5k]
  ------------------
 3339|   393k|        sign = sign_type::plus_sign;
 3340|   393k|    }
 3341|   454k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   454k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   454k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   454k|{
 3130|   454k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   454k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 393k, False: 60.5k]
  ------------------
 3132|   393k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 393k, False: 0]
  ------------------
 3133|   393k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   393k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   393k|    }
 3137|       |
 3138|  60.5k|    auto& it = *r;
 3139|  60.5k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 47.7k, False: 12.7k]
  ------------------
 3140|  47.7k|        return std::pair{it, sign_type::minus_sign};
 3141|  47.7k|    }
 3142|  12.7k|    return std::pair{it, sign_type::plus_sign};
 3143|  60.5k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|   454k|{
 2261|   454k|    auto it = read_code_unit(range);
 2262|   454k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 454k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   895k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 895k, False: 393k]
  ------------------
 2267|   895k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 60.5k, False: 835k]
  ------------------
 2268|  60.5k|            return *it;
 2269|  60.5k|        }
 2270|   895k|    }
 2271|       |
 2272|   393k|    return unexpected(parse_error::error);
 2273|   454k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|   454k|{
 3282|   454k|    switch (base) {
 3283|  23.7k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 23.7k, False: 430k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  23.7k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  23.7k|                    false};
 3287|       |
 3288|  42.8k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 42.8k, False: 411k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  42.8k|            bool zero_parsed = false;
 3291|  42.8k|            auto it = apply_opt(
 3292|  42.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  42.8k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  71.2k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 71.2k, False: 383k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  71.2k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  71.2k|                    false};
 3300|       |
 3301|  77.7k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 77.7k, False: 376k]
  ------------------
 3302|       |            // detect base
 3303|  77.7k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|   238k|        default:
  ------------------
  |  Branch (3305:9): [True: 238k, False: 215k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|   238k|            return {range.begin(), base, false};
 3308|   454k|    }
 3309|   454k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|   137k|{
 2280|   137k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 119k, False: 18.6k]
  ------------------
 2281|   119k|        return range.begin();
 2282|   119k|    }
 2283|  18.6k|    return *result;
 2284|   137k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|   100k|{
 3233|   100k|    return read_matching_string_classic_nocase(range, "0b");
 3234|   100k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|   369k|{
 2220|   369k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|   369k|                  std::is_same_v<char_type, char>) {
 2224|   369k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 12.6k, False: 357k]
  ------------------
 2225|  12.6k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|  12.6k|        }
 2227|   357k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 354k, False: 2.68k]
  ------------------
 2228|   354k|            return unexpected(parse_error::error);
 2229|   354k|        }
 2230|  2.68k|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|   369k|}
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|   119k|{
 3247|   119k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 952, False: 118k]
  ------------------
 3248|    952|        return *r;
 3249|    952|    }
 3250|       |
 3251|   118k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 45.0k, False: 73.7k]
  ------------------
 3252|  45.0k|        zero_parsed = true;
 3253|  45.0k|        return *r;
 3254|  45.0k|    }
 3255|       |
 3256|  73.7k|    return unexpected(parse_error::error);
 3257|   118k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   118k|{
 2135|   118k|    auto it = read_code_unit(range);
 2136|   118k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 360, False: 118k]
  |  |  ------------------
  ------------------
 2137|    360|        return unexpected(make_eof_parse_error(it.error()));
 2138|    360|    }
 2139|       |
 2140|   118k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 73.3k, False: 45.0k]
  |  |  ------------------
  ------------------
 2141|   118k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  73.3k|        return unexpected(parse_error::error);
 2143|  73.3k|    }
 2144|       |
 2145|  45.0k|    return *it;
 2146|   118k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|   148k|{
 3240|   148k|    return read_matching_string_classic_nocase(range, "0x");
 3241|   148k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|  77.7k|{
 3263|  77.7k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 550, False: 77.2k]
  ------------------
 3264|    550|        return {*r, 16, false};
 3265|    550|    }
 3266|  77.2k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 342, False: 76.8k]
  ------------------
 3267|    342|        return {*r, 2, false};
 3268|    342|    }
 3269|  76.8k|    {
 3270|  76.8k|        bool zero_parsed{false};
 3271|  76.8k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 28.2k, False: 48.6k]
  ------------------
 3272|  28.2k|            return {*r, 8, zero_parsed};
 3273|  28.2k|        }
 3274|  76.8k|    }
 3275|  48.6k|    return {range.begin(), 10, false};
 3276|  76.8k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|   342k|{
 3349|   342k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|   342k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|   342k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 891, False: 341k]
  |  |  ------------------
  ------------------
 3353|    891|            return unexpected_scan_error(
 3354|    891|                scan_error::invalid_scanned_value,
 3355|    891|                "Failed to parse integer: No digits found");
 3356|    891|        }
 3357|   341k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|   342k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|  66.5k|{
 3379|  66.5k|    std::basic_string<CharT> output;
 3380|  66.5k|    std::string thsep_indices;
 3381|  66.5k|    auto it = range.begin();
 3382|  66.5k|    bool digit_matched = false;
 3383|   431k|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 428k, False: 2.38k]
  ------------------
 3384|   428k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 47.4k, False: 381k]
  ------------------
 3385|  47.4k|            thsep_indices.push_back(
 3386|  47.4k|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  47.4k|        }
 3388|   381k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 64.2k, False: 317k]
  ------------------
 3389|  64.2k|            break;
 3390|  64.2k|        }
 3391|   317k|        else {
 3392|   317k|            output.push_back(*it);
 3393|   317k|            digit_matched = true;
 3394|   317k|        }
 3395|   428k|    }
 3396|  66.5k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  66.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.63k, False: 62.9k]
  |  |  ------------------
  ------------------
 3397|  3.63k|        return unexpected_scan_error(
 3398|  3.63k|            scan_error::invalid_scanned_value,
 3399|  3.63k|            "Failed to parse integer: No digits found");
 3400|  3.63k|    }
 3401|  62.9k|    return std::tuple{it, output, thsep_indices};
 3402|  66.5k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEENSC_17basic_string_viewIcSF_EE:
 3199|  2.22k|{
 3200|  2.22k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|  2.22k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.22k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|  2.22k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 1.05k, False: 1.16k]
  ------------------
 3203|  1.05k|        SCN_UNLIKELY_ATTR
 3204|  1.05k|        return {scan_error::invalid_scanned_value,
 3205|  1.05k|                "Invalid thousands separator grouping"};
 3206|  1.05k|    }
 3207|       |
 3208|  1.16k|    return {};
 3209|  2.22k|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_RNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENSB_17basic_string_viewIcSE_EE:
 3161|  2.22k|{
 3162|  2.22k|    transform_thsep_indices(thsep_indices,
 3163|  2.22k|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|  2.22k|    auto thsep_it = thsep_indices.rbegin();
 3166|  2.22k|    for (auto grouping_it = grouping.begin();
 3167|  2.22k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 2.22k]
  |  Branch (3167:10): [True: 0, False: 2.22k]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|  2.22k|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|  2.22k|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|  2.22k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|  38.2k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 36.5k, False: 1.70k]
  ------------------
 3179|  36.5k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 520, False: 35.9k]
  ------------------
 3180|    520|            return false;
 3181|    520|        }
 3182|  36.5k|    }
 3183|       |
 3184|  1.70k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 1.70k, False: 0]
  ------------------
 3185|  1.70k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 538, False: 1.16k]
  ------------------
 3186|    538|            return false;
 3187|    538|        }
 3188|  1.70k|    }
 3189|       |
 3190|  1.16k|    SCN_CLANG_POP
 3191|       |
 3192|  1.16k|    return true;
 3193|  1.70k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   341k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   341k|                  ranges::sized_range<Range>) {
 1674|   341k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   341k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   341k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   341k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   341k|    {
 1478|   341k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  1.57M|    {
 1491|  1.57M|        return sv;
 1492|  1.57M|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   464k|{
 2940|   464k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 464k, False: 0]
  ------------------
 2941|   464k|        auto it = read_while_classic_space(range);
 2942|   464k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   464k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   464k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.79k, False: 454k]
  |  |  ------------------
  ------------------
 2944|  9.79k|            return unexpected(e);
 2945|  9.79k|        }
 2946|       |
 2947|   454k|        return it;
 2948|   464k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   464k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   464k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|   464k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|   464k|        auto buf = make_contiguous_buffer(range);
 2109|   464k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|   464k|        return ranges::next(range.begin(),
 2111|   464k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|   464k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   464k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   464k|                  ranges::sized_range<Range>) {
 1674|   464k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   464k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   464k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|   464k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   464k|    {
 1478|   464k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   717k|    {
  304|   717k|        ranges::advance(x, n);
  305|   717k|        return x;
  306|   717k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.15M|    {
  268|  1.15M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.15M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.15M|    {
  181|  2.90M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 1.75M, False: 1.15M]
  ------------------
  182|  1.75M|            ++i;
  183|  1.75M|        }
  184|  1.15M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  58.4k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  58.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  58.4k|            auto rd = make_reader<T, char_type>();
 6195|  58.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  58.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 58.4k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  58.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 58.4k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  58.4k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  58.4k|                return impl(rd, range, value);
 6202|  58.4k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  58.4k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|   723k|    {
 3029|   723k|        reader_error_handler eh{};
 3030|   723k|        get_derived().check_specs_impl(specs, eh);
 3031|   723k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 723k]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|   723k|        return {};
 3035|   723k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
 3039|   723k|    {
 3040|   723k|        return static_cast<Derived&>(*this);
 3041|   723k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|   723k|    {
 3474|   723k|        detail::check_int_type_specs(specs, eh);
 3475|   723k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  58.4k|    {
 6113|  58.4k|        const bool need_skipped_width =
 6114|  58.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 58.4k]
  |  Branch (6114:33): [True: 0, False: 58.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  58.4k|        auto it = rng.begin();
 6118|  58.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  58.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 58.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  58.4k|        else {
 6127|  58.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  58.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  58.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  58.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 56.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.56k|    }                                                  \
  |  |  |  | 3667|  58.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  56.8k|            std::tie(it, prefix_width) = prefix_result;
 6129|  56.8k|        }
 6130|  56.8k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  56.8k|        std::ptrdiff_t value_width = 0;
 6134|  56.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 56.8k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  56.8k|        else {
 6150|  56.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  56.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  56.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  56.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.90k, False: 48.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.90k|    }                                                  \
  |  | 3667|  56.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  56.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  48.9k|                                             specs, value, loc));
 6152|       |
 6153|  48.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 48.9k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  48.9k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  48.9k|        std::ptrdiff_t postfix_width = 0;
 6162|  48.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 47.9k, False: 1.03k]
  ------------------
 6163|  47.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  47.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 47.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  47.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  47.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  47.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  47.9k|                                 value_width));
 6167|  47.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  47.9k|        }
 6169|       |
 6170|  48.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  48.9k|                                                 value_width, postfix_width);
 6172|  48.9k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 48.9k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  48.9k|        return it;
 6177|  48.9k|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
 3023|  1.52M|    {
 3024|  1.52M|        return true;
 3025|  1.52M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  69.2k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  69.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  69.2k|            auto rd = make_reader<T, char_type>();
 6195|  69.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  69.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.2k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  69.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 69.2k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  69.2k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  69.2k|                return impl(rd, range, value);
 6202|  69.2k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  69.2k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  69.2k|    {
 6113|  69.2k|        const bool need_skipped_width =
 6114|  69.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 69.2k]
  |  Branch (6114:33): [True: 0, False: 69.2k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  69.2k|        auto it = rng.begin();
 6118|  69.2k|        std::ptrdiff_t prefix_width = 0;
 6119|  69.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 69.2k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  69.2k|        else {
 6127|  69.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  69.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  69.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  69.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.07k, False: 67.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.07k|    }                                                  \
  |  |  |  | 3667|  69.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  67.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  67.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  67.1k|        }
 6130|  67.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  67.1k|        std::ptrdiff_t value_width = 0;
 6134|  67.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 67.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  67.1k|        else {
 6150|  67.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  67.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  67.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.39k, False: 59.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.39k|    }                                                  \
  |  | 3667|  67.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  67.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  59.7k|                                             specs, value, loc));
 6152|       |
 6153|  59.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 59.7k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  59.7k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  59.7k|        std::ptrdiff_t postfix_width = 0;
 6162|  59.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 58.3k, False: 1.42k]
  ------------------
 6163|  58.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  58.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  58.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  58.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 58.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  58.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  58.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  58.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  58.3k|                                 value_width));
 6167|  58.3k|            std::tie(it, postfix_width) = postfix_result;
 6168|  58.3k|        }
 6169|       |
 6170|  59.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  59.7k|                                                 value_width, postfix_width);
 6172|  59.7k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 59.7k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  59.7k|        return it;
 6177|  59.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  67.1k|    {
 3528|  67.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  67.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  67.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  67.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 67.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  67.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  67.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  67.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  67.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 9.06k, False: 58.1k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  9.06k|            else {
 3539|  9.06k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 9.06k]
  ------------------
 3540|  9.06k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  9.06k|            }
 3546|  9.06k|        }
 3547|       |
 3548|  67.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.77k, False: 61.3k]
  ------------------
 3549|  5.77k|            value = T{0};
 3550|  5.77k|            return std::next(prefix_result.iterator);
 3551|  5.77k|        }
 3552|       |
 3553|  61.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  61.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 48.2k, False: 13.0k]
  |  |  ------------------
  ------------------
 3554|  48.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  48.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  48.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  48.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.28k, False: 43.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.28k|    }                                                  \
  |  |  |  | 3667|  48.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  43.0k|                    parse_integer_digits_without_thsep(
 3556|  43.0k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  43.0k|                        prefix_result.parsed_base));
 3558|       |
 3559|  43.0k|            auto buf = make_contiguous_buffer(
 3560|  43.0k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  43.0k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  43.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  43.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  43.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 938, False: 42.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    938|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    938|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    938|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    938|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    938|    }                                                  \
  |  |  |  | 3667|  43.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  42.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  42.0k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  42.0k|            return ranges::next(
 3566|  42.0k|                prefix_result.iterator,
 3567|  42.0k|                ranges::distance(buf.view().begin(), result_it));
 3568|  43.0k|        }
 3569|       |
 3570|  13.0k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  13.0k|            localized_number_formatting_options<CharT>{loc};
 3575|  13.0k|#endif
 3576|       |
 3577|  13.0k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  13.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 736, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    736|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    736|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    736|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    736|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    736|    }                                                  \
  |  |  |  | 3667|  13.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  12.3k|                parse_integer_digits_with_thsep(
 3579|  12.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  12.3k|                    prefix_result.parsed_base, locale_options));
 3581|  12.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  12.3k|            parse_digits_result;
 3583|       |
 3584|  12.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 414, False: 11.9k]
  ------------------
 3585|    414|            if (auto e = check_thsep_grouping(
 3586|    414|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    414|                    thsep_indices, locale_options.grouping);
 3588|    414|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    414|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 218, False: 196]
  |  |  ------------------
  ------------------
 3589|    218|                return unexpected(e);
 3590|    218|            }
 3591|    414|        }
 3592|       |
 3593|  12.1k|        auto nothsep_source_view =
 3594|  12.1k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  12.1k|        SCN_TRY(
  ------------------
  |  | 3668|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 218, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    218|    }                                                  \
  |  |  |  | 3667|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.9k|            nothsep_source_it,
 3597|  11.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.9k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.9k|        return ranges::next(
 3601|  11.9k|            prefix_result.iterator,
 3602|  11.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.9k|                ranges::ssize(thsep_indices));
 3604|  12.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  67.2k|    {
 3528|  67.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  67.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  67.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  67.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 67.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  67.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  67.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  67.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 9.05k, False: 58.1k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  9.05k|            else {
 3539|  9.05k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 9.05k]
  ------------------
 3540|  9.05k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  9.05k|            }
 3546|  9.05k|        }
 3547|       |
 3548|  67.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.77k, False: 61.4k]
  ------------------
 3549|  5.77k|            value = T{0};
 3550|  5.77k|            return std::next(prefix_result.iterator);
 3551|  5.77k|        }
 3552|       |
 3553|  61.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  61.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 48.3k, False: 13.1k]
  |  |  ------------------
  ------------------
 3554|  48.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  48.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  48.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  48.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 192, False: 48.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    192|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    192|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    192|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    192|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    192|    }                                                  \
  |  |  |  | 3667|  48.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  48.1k|                    parse_integer_digits_without_thsep(
 3556|  48.1k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  48.1k|                        prefix_result.parsed_base));
 3558|       |
 3559|  48.1k|            auto buf = make_contiguous_buffer(
 3560|  48.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  48.1k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  48.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  48.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  48.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.18k, False: 41.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.18k|    }                                                  \
  |  |  |  | 3667|  48.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  41.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  41.9k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  41.9k|            return ranges::next(
 3566|  41.9k|                prefix_result.iterator,
 3567|  41.9k|                ranges::distance(buf.view().begin(), result_it));
 3568|  48.1k|        }
 3569|       |
 3570|  13.1k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  13.1k|            localized_number_formatting_options<CharT>{loc};
 3575|  13.1k|#endif
 3576|       |
 3577|  13.1k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  13.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 770, False: 12.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    770|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    770|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    770|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    770|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    770|    }                                                  \
  |  |  |  | 3667|  13.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  12.3k|                parse_integer_digits_with_thsep(
 3579|  12.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  12.3k|                    prefix_result.parsed_base, locale_options));
 3581|  12.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  12.3k|            parse_digits_result;
 3583|       |
 3584|  12.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 412, False: 11.9k]
  ------------------
 3585|    412|            if (auto e = check_thsep_grouping(
 3586|    412|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    412|                    thsep_indices, locale_options.grouping);
 3588|    412|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    412|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 216, False: 196]
  |  |  ------------------
  ------------------
 3589|    216|                return unexpected(e);
 3590|    216|            }
 3591|    412|        }
 3592|       |
 3593|  12.1k|        auto nothsep_source_view =
 3594|  12.1k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  12.1k|        SCN_TRY(
  ------------------
  |  | 3668|  12.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 216, False: 11.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    216|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    216|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    216|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    216|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    216|    }                                                  \
  |  |  |  | 3667|  12.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.9k|            nothsep_source_it,
 3597|  11.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.9k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.9k|        return ranges::next(
 3601|  11.9k|            prefix_result.iterator,
 3602|  11.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.9k|                ranges::ssize(thsep_indices));
 3604|  12.1k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  70.4k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  70.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  70.4k|            auto rd = make_reader<T, char_type>();
 6195|  70.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.4k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  70.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 70.4k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  70.4k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  70.4k|                return impl(rd, range, value);
 6202|  70.4k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  70.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  70.4k|    {
 6113|  70.4k|        const bool need_skipped_width =
 6114|  70.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 70.4k]
  |  Branch (6114:33): [True: 0, False: 70.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  70.4k|        auto it = rng.begin();
 6118|  70.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  70.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 70.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  70.4k|        else {
 6127|  70.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  70.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  70.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  70.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.28k, False: 68.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.28k|    }                                                  \
  |  |  |  | 3667|  70.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  68.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  68.2k|        }
 6130|  68.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  68.2k|        std::ptrdiff_t value_width = 0;
 6134|  68.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 68.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  68.2k|        else {
 6150|  68.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  68.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  68.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.18k, False: 61.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.18k|    }                                                  \
  |  | 3667|  68.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  61.0k|                                             specs, value, loc));
 6152|       |
 6153|  61.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 61.0k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  61.0k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  61.0k|        std::ptrdiff_t postfix_width = 0;
 6162|  61.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 59.4k, False: 1.58k]
  ------------------
 6163|  59.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  59.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  59.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  59.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 59.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  59.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  59.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  59.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  59.4k|                                 value_width));
 6167|  59.4k|            std::tie(it, postfix_width) = postfix_result;
 6168|  59.4k|        }
 6169|       |
 6170|  61.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  61.0k|                                                 value_width, postfix_width);
 6172|  61.0k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 61.0k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  61.0k|        return it;
 6177|  61.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  68.2k|    {
 3528|  68.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  68.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  68.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  68.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  68.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  68.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  68.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 9.27k, False: 58.9k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  9.27k|            else {
 3539|  9.27k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 9.27k]
  ------------------
 3540|  9.27k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  9.27k|            }
 3546|  9.27k|        }
 3547|       |
 3548|  68.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.81k, False: 62.3k]
  ------------------
 3549|  5.81k|            value = T{0};
 3550|  5.81k|            return std::next(prefix_result.iterator);
 3551|  5.81k|        }
 3552|       |
 3553|  62.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  62.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 49.0k, False: 13.2k]
  |  |  ------------------
  ------------------
 3554|  49.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  49.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  49.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  49.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.56k, False: 43.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.56k|    }                                                  \
  |  |  |  | 3667|  49.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  43.5k|                    parse_integer_digits_without_thsep(
 3556|  43.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  43.5k|                        prefix_result.parsed_base));
 3558|       |
 3559|  43.5k|            auto buf = make_contiguous_buffer(
 3560|  43.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  43.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  43.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  43.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  43.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 486, False: 43.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    486|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    486|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    486|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    486|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    486|    }                                                  \
  |  |  |  | 3667|  43.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  43.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  43.0k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  43.0k|            return ranges::next(
 3566|  43.0k|                prefix_result.iterator,
 3567|  43.0k|                ranges::distance(buf.view().begin(), result_it));
 3568|  43.5k|        }
 3569|       |
 3570|  13.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  13.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  13.2k|#endif
 3576|       |
 3577|  13.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 780, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    780|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    780|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    780|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    780|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    780|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  12.5k|                parse_integer_digits_with_thsep(
 3579|  12.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  12.5k|                    prefix_result.parsed_base, locale_options));
 3581|  12.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  12.5k|            parse_digits_result;
 3583|       |
 3584|  12.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 430, False: 12.0k]
  ------------------
 3585|    430|            if (auto e = check_thsep_grouping(
 3586|    430|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    430|                    thsep_indices, locale_options.grouping);
 3588|    430|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    430|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 234, False: 196]
  |  |  ------------------
  ------------------
 3589|    234|                return unexpected(e);
 3590|    234|            }
 3591|    430|        }
 3592|       |
 3593|  12.2k|        auto nothsep_source_view =
 3594|  12.2k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  12.2k|        SCN_TRY(
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 124, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    124|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  12.1k|            nothsep_source_it,
 3597|  12.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  12.1k|                                prefix_result.parsed_base));
 3599|       |
 3600|  12.1k|        return ranges::next(
 3601|  12.1k|            prefix_result.iterator,
 3602|  12.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  12.1k|                ranges::ssize(thsep_indices));
 3604|  12.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  68.2k|    {
 3528|  68.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  68.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  68.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  68.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 68.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  68.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  68.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  68.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 9.26k, False: 59.0k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|  9.26k|            else {
 3539|  9.26k|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 9.26k]
  ------------------
 3540|  9.26k|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|  9.26k|            }
 3546|  9.26k|        }
 3547|       |
 3548|  68.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.81k, False: 62.4k]
  ------------------
 3549|  5.81k|            value = T{0};
 3550|  5.81k|            return std::next(prefix_result.iterator);
 3551|  5.81k|        }
 3552|       |
 3553|  62.4k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  62.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 49.1k, False: 13.3k]
  |  |  ------------------
  ------------------
 3554|  49.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  49.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  49.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  49.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 222, False: 48.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    222|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    222|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    222|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    222|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    222|    }                                                  \
  |  |  |  | 3667|  49.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  48.9k|                    parse_integer_digits_without_thsep(
 3556|  48.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  48.9k|                        prefix_result.parsed_base));
 3558|       |
 3559|  48.9k|            auto buf = make_contiguous_buffer(
 3560|  48.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  48.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  48.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  48.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  48.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.98k, False: 42.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.98k|    }                                                  \
  |  |  |  | 3667|  48.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  42.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  42.9k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  42.9k|            return ranges::next(
 3566|  42.9k|                prefix_result.iterator,
 3567|  42.9k|                ranges::distance(buf.view().begin(), result_it));
 3568|  48.9k|        }
 3569|       |
 3570|  13.3k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  13.3k|            localized_number_formatting_options<CharT>{loc};
 3575|  13.3k|#endif
 3576|       |
 3577|  13.3k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  13.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 814, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    814|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    814|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    814|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    814|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    814|    }                                                  \
  |  |  |  | 3667|  13.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  12.5k|                parse_integer_digits_with_thsep(
 3579|  12.5k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  12.5k|                    prefix_result.parsed_base, locale_options));
 3581|  12.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  12.5k|            parse_digits_result;
 3583|       |
 3584|  12.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 428, False: 12.0k]
  ------------------
 3585|    428|            if (auto e = check_thsep_grouping(
 3586|    428|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    428|                    thsep_indices, locale_options.grouping);
 3588|    428|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    428|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 232, False: 196]
  |  |  ------------------
  ------------------
 3589|    232|                return unexpected(e);
 3590|    232|            }
 3591|    428|        }
 3592|       |
 3593|  12.2k|        auto nothsep_source_view =
 3594|  12.2k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  12.2k|        SCN_TRY(
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 122, False: 12.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    122|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    122|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    122|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    122|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    122|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  12.1k|            nothsep_source_it,
 3597|  12.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  12.1k|                                prefix_result.parsed_base));
 3599|       |
 3600|  12.1k|        return ranges::next(
 3601|  12.1k|            prefix_result.iterator,
 3602|  12.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  12.1k|                ranges::ssize(thsep_indices));
 3604|  12.2k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  51.1k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  51.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  51.1k|            auto rd = make_reader<T, char_type>();
 6195|  51.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 51.1k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  51.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 51.1k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  51.1k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  51.1k|                return impl(rd, range, value);
 6202|  51.1k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  51.1k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  51.1k|    {
 6113|  51.1k|        const bool need_skipped_width =
 6114|  51.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 51.1k]
  |  Branch (6114:33): [True: 0, False: 51.1k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  51.1k|        auto it = rng.begin();
 6118|  51.1k|        std::ptrdiff_t prefix_width = 0;
 6119|  51.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 51.1k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  51.1k|        else {
 6127|  51.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  51.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.16k, False: 50.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.16k|    }                                                  \
  |  |  |  | 3667|  51.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  50.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  50.0k|        }
 6130|  50.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  50.0k|        std::ptrdiff_t value_width = 0;
 6134|  50.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 50.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  50.0k|        else {
 6150|  50.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  50.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  50.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.30k, False: 41.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  8.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  8.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  8.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  8.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  8.30k|    }                                                  \
  |  | 3667|  50.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  41.7k|                                             specs, value, loc));
 6152|       |
 6153|  41.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 41.7k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  41.7k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  41.7k|        std::ptrdiff_t postfix_width = 0;
 6162|  41.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 40.9k, False: 758]
  ------------------
 6163|  40.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  40.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  40.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  40.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  40.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 40.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  40.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  40.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  40.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  40.9k|                                 value_width));
 6167|  40.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  40.9k|        }
 6169|       |
 6170|  41.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  41.7k|                                                 value_width, postfix_width);
 6172|  41.7k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 41.7k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  41.7k|        return it;
 6177|  41.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  50.0k|    {
 3528|  50.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  50.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  50.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  50.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  50.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.30k, False: 46.6k]
  ------------------
 3532|  3.30k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.30k|                return unexpected_scan_error(
 3534|  3.30k|                    scan_error::invalid_scanned_value,
 3535|  3.30k|                    "Unexpected '-' sign when parsing an "
 3536|  3.30k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.30k|        }
 3547|       |
 3548|  50.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.03k, False: 44.9k]
  ------------------
 3549|  5.03k|            value = T{0};
 3550|  5.03k|            return std::next(prefix_result.iterator);
 3551|  5.03k|        }
 3552|       |
 3553|  44.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  44.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32.7k, False: 12.2k]
  |  |  ------------------
  ------------------
 3554|  32.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.21k, False: 29.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.21k|    }                                                  \
  |  |  |  | 3667|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  29.5k|                    parse_integer_digits_without_thsep(
 3556|  29.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  29.5k|                        prefix_result.parsed_base));
 3558|       |
 3559|  29.5k|            auto buf = make_contiguous_buffer(
 3560|  29.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  29.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  29.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  29.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  29.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.01k, False: 28.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.01k|    }                                                  \
  |  |  |  | 3667|  29.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  28.5k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  28.5k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  28.5k|            return ranges::next(
 3566|  28.5k|                prefix_result.iterator,
 3567|  28.5k|                ranges::distance(buf.view().begin(), result_it));
 3568|  29.5k|        }
 3569|       |
 3570|  12.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.2k|#endif
 3576|       |
 3577|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 416, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    416|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    416|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    416|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    416|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    416|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.7k|                parse_integer_digits_with_thsep(
 3579|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.7k|                    prefix_result.parsed_base, locale_options));
 3581|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.7k|            parse_digits_result;
 3583|       |
 3584|  11.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 322, False: 11.4k]
  ------------------
 3585|    322|            if (auto e = check_thsep_grouping(
 3586|    322|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    322|                    thsep_indices, locale_options.grouping);
 3588|    322|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 130, False: 192]
  |  |  ------------------
  ------------------
 3589|    130|                return unexpected(e);
 3590|    130|            }
 3591|    322|        }
 3592|       |
 3593|  11.6k|        auto nothsep_source_view =
 3594|  11.6k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.6k|        SCN_TRY(
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 224, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    224|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    224|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    224|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    224|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    224|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.4k|            nothsep_source_it,
 3597|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.4k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.4k|        return ranges::next(
 3601|  11.4k|            prefix_result.iterator,
 3602|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.4k|                ranges::ssize(thsep_indices));
 3604|  11.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  50.0k|    {
 3528|  50.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  50.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  50.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  50.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  50.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 50.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  50.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  50.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  50.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.29k, False: 46.7k]
  ------------------
 3532|  3.29k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.29k|                return unexpected_scan_error(
 3534|  3.29k|                    scan_error::invalid_scanned_value,
 3535|  3.29k|                    "Unexpected '-' sign when parsing an "
 3536|  3.29k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.29k|        }
 3547|       |
 3548|  50.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.03k, False: 45.0k]
  ------------------
 3549|  5.03k|            value = T{0};
 3550|  5.03k|            return std::next(prefix_result.iterator);
 3551|  5.03k|        }
 3552|       |
 3553|  45.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  45.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 32.8k, False: 12.2k]
  |  |  ------------------
  ------------------
 3554|  32.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  32.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  32.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  32.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38, False: 32.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     38|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     38|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     38|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     38|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     38|    }                                                  \
  |  |  |  | 3667|  32.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  32.8k|                    parse_integer_digits_without_thsep(
 3556|  32.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  32.8k|                        prefix_result.parsed_base));
 3558|       |
 3559|  32.8k|            auto buf = make_contiguous_buffer(
 3560|  32.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  32.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  32.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  32.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  32.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.29k, False: 28.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.29k|    }                                                  \
  |  |  |  | 3667|  32.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  28.5k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  28.5k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  28.5k|            return ranges::next(
 3566|  28.5k|                prefix_result.iterator,
 3567|  28.5k|                ranges::distance(buf.view().begin(), result_it));
 3568|  32.8k|        }
 3569|       |
 3570|  12.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  12.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  12.2k|#endif
 3576|       |
 3577|  12.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  12.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 446, False: 11.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    446|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    446|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    446|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    446|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    446|    }                                                  \
  |  |  |  | 3667|  12.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  11.7k|                parse_integer_digits_with_thsep(
 3579|  11.7k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  11.7k|                    prefix_result.parsed_base, locale_options));
 3581|  11.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  11.7k|            parse_digits_result;
 3583|       |
 3584|  11.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 322, False: 11.4k]
  ------------------
 3585|    322|            if (auto e = check_thsep_grouping(
 3586|    322|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    322|                    thsep_indices, locale_options.grouping);
 3588|    322|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 130, False: 192]
  |  |  ------------------
  ------------------
 3589|    130|                return unexpected(e);
 3590|    130|            }
 3591|    322|        }
 3592|       |
 3593|  11.6k|        auto nothsep_source_view =
 3594|  11.6k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  11.6k|        SCN_TRY(
  ------------------
  |  | 3668|  11.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  11.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  11.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 218, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    218|    }                                                  \
  |  |  |  | 3667|  11.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  11.4k|            nothsep_source_it,
 3597|  11.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  11.4k|                                prefix_result.parsed_base));
 3599|       |
 3600|  11.4k|        return ranges::next(
 3601|  11.4k|            prefix_result.iterator,
 3602|  11.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  11.4k|                ranges::ssize(thsep_indices));
 3604|  11.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  55.9k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  55.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  55.9k|            auto rd = make_reader<T, char_type>();
 6195|  55.9k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  55.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 55.9k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  55.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 55.9k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  55.9k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  55.9k|                return impl(rd, range, value);
 6202|  55.9k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  55.9k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  55.9k|    {
 6113|  55.9k|        const bool need_skipped_width =
 6114|  55.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 55.9k]
  |  Branch (6114:33): [True: 0, False: 55.9k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  55.9k|        auto it = rng.begin();
 6118|  55.9k|        std::ptrdiff_t prefix_width = 0;
 6119|  55.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 55.9k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  55.9k|        else {
 6127|  55.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  55.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  55.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  55.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.44k, False: 54.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.44k|    }                                                  \
  |  |  |  | 3667|  55.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  54.4k|            std::tie(it, prefix_width) = prefix_result;
 6129|  54.4k|        }
 6130|  54.4k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  54.4k|        std::ptrdiff_t value_width = 0;
 6134|  54.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 54.4k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  54.4k|        else {
 6150|  54.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  54.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  54.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  54.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.02k, False: 46.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  8.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  8.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  8.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  8.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  8.02k|    }                                                  \
  |  | 3667|  54.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  54.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  46.4k|                                             specs, value, loc));
 6152|       |
 6153|  46.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 46.4k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  46.4k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  46.4k|        std::ptrdiff_t postfix_width = 0;
 6162|  46.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 45.4k, False: 962]
  ------------------
 6163|  45.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  45.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 45.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  45.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  45.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  45.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  45.4k|                                 value_width));
 6167|  45.4k|            std::tie(it, postfix_width) = postfix_result;
 6168|  45.4k|        }
 6169|       |
 6170|  46.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  46.4k|                                                 value_width, postfix_width);
 6172|  46.4k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 46.4k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  46.4k|        return it;
 6177|  46.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  54.4k|    {
 3528|  54.4k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  54.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 54.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  54.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  54.4k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  54.4k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.40k, False: 51.0k]
  ------------------
 3532|  3.40k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.40k|                return unexpected_scan_error(
 3534|  3.40k|                    scan_error::invalid_scanned_value,
 3535|  3.40k|                    "Unexpected '-' sign when parsing an "
 3536|  3.40k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.40k|        }
 3547|       |
 3548|  54.4k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.21k, False: 49.2k]
  ------------------
 3549|  5.21k|            value = T{0};
 3550|  5.21k|            return std::next(prefix_result.iterator);
 3551|  5.21k|        }
 3552|       |
 3553|  49.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  49.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 35.9k, False: 13.2k]
  |  |  ------------------
  ------------------
 3554|  35.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  35.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  35.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  35.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.43k, False: 32.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.43k|    }                                                  \
  |  |  |  | 3667|  35.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  32.5k|                    parse_integer_digits_without_thsep(
 3556|  32.5k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  32.5k|                        prefix_result.parsed_base));
 3558|       |
 3559|  32.5k|            auto buf = make_contiguous_buffer(
 3560|  32.5k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  32.5k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  32.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  32.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  32.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 488, False: 32.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    488|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    488|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    488|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    488|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    488|    }                                                  \
  |  |  |  | 3667|  32.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  32.0k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  32.0k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  32.0k|            return ranges::next(
 3566|  32.0k|                prefix_result.iterator,
 3567|  32.0k|                ranges::distance(buf.view().begin(), result_it));
 3568|  32.5k|        }
 3569|       |
 3570|  13.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  13.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  13.2k|#endif
 3576|       |
 3577|  13.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 440, False: 12.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    440|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    440|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    440|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    440|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    440|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  12.8k|                parse_integer_digits_with_thsep(
 3579|  12.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  12.8k|                    prefix_result.parsed_base, locale_options));
 3581|  12.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  12.8k|            parse_digits_result;
 3583|       |
 3584|  12.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 330, False: 12.5k]
  ------------------
 3585|    330|            if (auto e = check_thsep_grouping(
 3586|    330|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    330|                    thsep_indices, locale_options.grouping);
 3588|    330|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 192]
  |  |  ------------------
  ------------------
 3589|    138|                return unexpected(e);
 3590|    138|            }
 3591|    330|        }
 3592|       |
 3593|  12.6k|        auto nothsep_source_view =
 3594|  12.6k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  12.6k|        SCN_TRY(
  ------------------
  |  | 3668|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 120, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    120|    }                                                  \
  |  |  |  | 3667|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  12.5k|            nothsep_source_it,
 3597|  12.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  12.5k|                                prefix_result.parsed_base));
 3599|       |
 3600|  12.5k|        return ranges::next(
 3601|  12.5k|            prefix_result.iterator,
 3602|  12.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  12.5k|                ranges::ssize(thsep_indices));
 3604|  12.6k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  54.5k|    {
 3528|  54.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  54.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 54.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  54.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  54.5k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  54.5k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.39k, False: 51.1k]
  ------------------
 3532|  3.39k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.39k|                return unexpected_scan_error(
 3534|  3.39k|                    scan_error::invalid_scanned_value,
 3535|  3.39k|                    "Unexpected '-' sign when parsing an "
 3536|  3.39k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.39k|        }
 3547|       |
 3548|  54.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.21k, False: 49.3k]
  ------------------
 3549|  5.21k|            value = T{0};
 3550|  5.21k|            return std::next(prefix_result.iterator);
 3551|  5.21k|        }
 3552|       |
 3553|  49.3k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  49.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 36.0k, False: 13.2k]
  |  |  ------------------
  ------------------
 3554|  36.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  36.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  36.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  36.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 35.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     40|    }                                                  \
  |  |  |  | 3667|  36.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  35.9k|                    parse_integer_digits_without_thsep(
 3556|  35.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  35.9k|                        prefix_result.parsed_base));
 3558|       |
 3559|  35.9k|            auto buf = make_contiguous_buffer(
 3560|  35.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  35.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  35.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  35.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  35.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.01k, False: 31.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.01k|    }                                                  \
  |  |  |  | 3667|  35.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  31.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  31.9k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  31.9k|            return ranges::next(
 3566|  31.9k|                prefix_result.iterator,
 3567|  31.9k|                ranges::distance(buf.view().begin(), result_it));
 3568|  35.9k|        }
 3569|       |
 3570|  13.2k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  13.2k|            localized_number_formatting_options<CharT>{loc};
 3575|  13.2k|#endif
 3576|       |
 3577|  13.2k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 470, False: 12.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    470|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    470|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    470|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    470|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    470|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  12.8k|                parse_integer_digits_with_thsep(
 3579|  12.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  12.8k|                    prefix_result.parsed_base, locale_options));
 3581|  12.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  12.8k|            parse_digits_result;
 3583|       |
 3584|  12.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 328, False: 12.4k]
  ------------------
 3585|    328|            if (auto e = check_thsep_grouping(
 3586|    328|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    328|                    thsep_indices, locale_options.grouping);
 3588|    328|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 136, False: 192]
  |  |  ------------------
  ------------------
 3589|    136|                return unexpected(e);
 3590|    136|            }
 3591|    328|        }
 3592|       |
 3593|  12.6k|        auto nothsep_source_view =
 3594|  12.6k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  12.6k|        SCN_TRY(
  ------------------
  |  | 3668|  12.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 118, False: 12.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    118|    }                                                  \
  |  |  |  | 3667|  12.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  12.5k|            nothsep_source_it,
 3597|  12.5k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  12.5k|                                prefix_result.parsed_base));
 3599|       |
 3600|  12.5k|        return ranges::next(
 3601|  12.5k|            prefix_result.iterator,
 3602|  12.5k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  12.5k|                ranges::ssize(thsep_indices));
 3604|  12.6k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  56.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  56.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  56.5k|            auto rd = make_reader<T, char_type>();
 6195|  56.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 56.5k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  56.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 56.5k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  56.5k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  56.5k|                return impl(rd, range, value);
 6202|  56.5k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  56.5k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  56.5k|    {
 6113|  56.5k|        const bool need_skipped_width =
 6114|  56.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 56.5k]
  |  Branch (6114:33): [True: 0, False: 56.5k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  56.5k|        auto it = rng.begin();
 6118|  56.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  56.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 56.5k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  56.5k|        else {
 6127|  56.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  56.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  56.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  56.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 54.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.56k|    }                                                  \
  |  |  |  | 3667|  56.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  54.9k|            std::tie(it, prefix_width) = prefix_result;
 6129|  54.9k|        }
 6130|  54.9k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  54.9k|        std::ptrdiff_t value_width = 0;
 6134|  54.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 54.9k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  54.9k|        else {
 6150|  54.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  54.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  54.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.90k, False: 47.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.90k|    }                                                  \
  |  | 3667|  54.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  47.0k|                                             specs, value, loc));
 6152|       |
 6153|  47.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 47.0k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  47.0k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  47.0k|        std::ptrdiff_t postfix_width = 0;
 6162|  47.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 45.9k, False: 1.07k]
  ------------------
 6163|  45.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  45.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 45.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  45.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  45.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  45.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  45.9k|                                 value_width));
 6167|  45.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  45.9k|        }
 6169|       |
 6170|  47.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  47.0k|                                                 value_width, postfix_width);
 6172|  47.0k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 47.0k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  47.0k|        return it;
 6177|  47.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  54.9k|    {
 3528|  54.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  54.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 54.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  54.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  54.9k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  54.9k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.49k, False: 51.4k]
  ------------------
 3532|  3.49k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.49k|                return unexpected_scan_error(
 3534|  3.49k|                    scan_error::invalid_scanned_value,
 3535|  3.49k|                    "Unexpected '-' sign when parsing an "
 3536|  3.49k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.49k|        }
 3547|       |
 3548|  54.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.22k, False: 49.7k]
  ------------------
 3549|  5.22k|            value = T{0};
 3550|  5.22k|            return std::next(prefix_result.iterator);
 3551|  5.22k|        }
 3552|       |
 3553|  49.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  49.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 36.2k, False: 13.4k]
  |  |  ------------------
  ------------------
 3554|  36.2k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  36.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  36.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  36.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.49k, False: 32.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.49k|    }                                                  \
  |  |  |  | 3667|  36.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  32.7k|                    parse_integer_digits_without_thsep(
 3556|  32.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  32.7k|                        prefix_result.parsed_base));
 3558|       |
 3559|  32.7k|            auto buf = make_contiguous_buffer(
 3560|  32.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  32.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  32.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  32.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  32.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 254, False: 32.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    254|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    254|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    254|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    254|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    254|    }                                                  \
  |  |  |  | 3667|  32.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  32.5k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  32.5k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  32.5k|            return ranges::next(
 3566|  32.5k|                prefix_result.iterator,
 3567|  32.5k|                ranges::distance(buf.view().begin(), result_it));
 3568|  32.7k|        }
 3569|       |
 3570|  13.4k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  13.4k|            localized_number_formatting_options<CharT>{loc};
 3575|  13.4k|#endif
 3576|       |
 3577|  13.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  13.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 452, False: 13.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    452|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    452|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    452|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    452|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    452|    }                                                  \
  |  |  |  | 3667|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  13.0k|                parse_integer_digits_with_thsep(
 3579|  13.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  13.0k|                    prefix_result.parsed_base, locale_options));
 3581|  13.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  13.0k|            parse_digits_result;
 3583|       |
 3584|  13.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 330, False: 12.6k]
  ------------------
 3585|    330|            if (auto e = check_thsep_grouping(
 3586|    330|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    330|                    thsep_indices, locale_options.grouping);
 3588|    330|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    330|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 138, False: 192]
  |  |  ------------------
  ------------------
 3589|    138|                return unexpected(e);
 3590|    138|            }
 3591|    330|        }
 3592|       |
 3593|  12.8k|        auto nothsep_source_view =
 3594|  12.8k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  12.8k|        SCN_TRY(
  ------------------
  |  | 3668|  12.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 66, False: 12.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     66|    }                                                  \
  |  |  |  | 3667|  12.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  12.7k|            nothsep_source_it,
 3597|  12.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  12.7k|                                prefix_result.parsed_base));
 3599|       |
 3600|  12.7k|        return ranges::next(
 3601|  12.7k|            prefix_result.iterator,
 3602|  12.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  12.7k|                ranges::ssize(thsep_indices));
 3604|  12.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  55.0k|    {
 3528|  55.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  55.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  55.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  55.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 55.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  55.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  55.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  55.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 3.48k, False: 51.5k]
  ------------------
 3532|  3.48k|            if constexpr (!std::is_signed_v<T>) {
 3533|  3.48k|                return unexpected_scan_error(
 3534|  3.48k|                    scan_error::invalid_scanned_value,
 3535|  3.48k|                    "Unexpected '-' sign when parsing an "
 3536|  3.48k|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|  3.48k|        }
 3547|       |
 3548|  55.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 5.22k, False: 49.8k]
  ------------------
 3549|  5.22k|            value = T{0};
 3550|  5.22k|            return std::next(prefix_result.iterator);
 3551|  5.22k|        }
 3552|       |
 3553|  49.8k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  49.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 36.3k, False: 13.4k]
  |  |  ------------------
  ------------------
 3554|  36.3k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  36.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  36.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  36.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 36.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     40|    }                                                  \
  |  |  |  | 3667|  36.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  36.3k|                    parse_integer_digits_without_thsep(
 3556|  36.3k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  36.3k|                        prefix_result.parsed_base));
 3558|       |
 3559|  36.3k|            auto buf = make_contiguous_buffer(
 3560|  36.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  36.3k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  36.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  36.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  36.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.84k, False: 32.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.84k|    }                                                  \
  |  |  |  | 3667|  36.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|  32.4k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|  32.4k|                                        prefix_result.parsed_base));
 3564|       |
 3565|  32.4k|            return ranges::next(
 3566|  32.4k|                prefix_result.iterator,
 3567|  32.4k|                ranges::distance(buf.view().begin(), result_it));
 3568|  36.3k|        }
 3569|       |
 3570|  13.4k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  13.4k|            localized_number_formatting_options<CharT>{loc};
 3575|  13.4k|#endif
 3576|       |
 3577|  13.4k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  13.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 482, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    482|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    482|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    482|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    482|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    482|    }                                                  \
  |  |  |  | 3667|  13.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|  12.9k|                parse_integer_digits_with_thsep(
 3579|  12.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|  12.9k|                    prefix_result.parsed_base, locale_options));
 3581|  12.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|  12.9k|            parse_digits_result;
 3583|       |
 3584|  12.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 328, False: 12.6k]
  ------------------
 3585|    328|            if (auto e = check_thsep_grouping(
 3586|    328|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|    328|                    thsep_indices, locale_options.grouping);
 3588|    328|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 136, False: 192]
  |  |  ------------------
  ------------------
 3589|    136|                return unexpected(e);
 3590|    136|            }
 3591|    328|        }
 3592|       |
 3593|  12.8k|        auto nothsep_source_view =
 3594|  12.8k|            std::basic_string_view<CharT>{nothsep_source};
 3595|  12.8k|        SCN_TRY(
  ------------------
  |  | 3668|  12.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  12.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  12.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64, False: 12.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     64|    }                                                  \
  |  |  |  | 3667|  12.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|  12.7k|            nothsep_source_it,
 3597|  12.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|  12.7k|                                prefix_result.parsed_base));
 3599|       |
 3600|  12.7k|        return ranges::next(
 3601|  12.7k|            prefix_result.iterator,
 3602|  12.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|  12.7k|                ranges::ssize(thsep_indices));
 3604|  12.8k|    }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   463k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|   463k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|   463k|        else {
 1054|   463k|            return r.begin().contiguous_segment();
 1055|   463k|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|   463k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   436k|{
 2049|   436k|    auto it = range.begin();
 2050|   849k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 839k, False: 10.6k]
  ------------------
 2051|   839k|        const auto val =
 2052|   839k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   839k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   839k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 837k, False: 1.83k]
  |  |  ------------------
  ------------------
 2054|   837k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   837k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   837k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 426k, False: 411k]
  ------------------
 2057|   426k|                return it;
 2058|   426k|            }
 2059|   837k|        }
 2060|   412k|        it = val.iterator;
 2061|   412k|    }
 2062|       |
 2063|  10.6k|    return it;
 2064|   436k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|   839k|{
 1887|   839k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   839k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   839k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   839k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   839k|    auto it = range.begin();
 1891|   839k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   839k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   839k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.83k, False: 837k]
  |  |  ------------------
  ------------------
 1894|  1.83k|        ++it;
 1895|  1.83k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  1.83k|        return {it, {}};
 1897|  1.83k|    }
 1898|       |
 1899|   837k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 831k, False: 6.15k]
  ------------------
 1900|   831k|        ++it;
 1901|   831k|        return {it, string_type(1, *range.begin())};
 1902|   831k|    }
 1903|       |
 1904|  6.15k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  6.15k|    return {it, string_type{range.begin(), it}};
 1906|   837k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  1.83k|{
 1155|  1.83k|    auto it = input.begin();
 1156|  3.05k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 2.28k, False: 767]
  ------------------
 1157|  2.28k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 1.06k, False: 1.22k]
  ------------------
 1158|  1.06k|            break;
 1159|  1.06k|        }
 1160|  2.28k|    }
 1161|  1.83k|    return it;
 1162|  1.83k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  6.15k|    {
  283|  6.15k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  6.15k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  6.15k|    {
  252|  6.15k|        constexpr iter_difference_t<I> zero{0};
  253|  6.15k|        iter_difference_t<I> counter{0};
  254|       |
  255|  20.2k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 15.3k, False: 4.85k]
  |  Branch (255:30): [True: 14.0k, False: 1.30k]
  ------------------
  256|  14.0k|            ++i;
  257|  14.0k|            ++counter;
  258|  14.0k|        }
  259|       |
  260|  6.15k|        return counter;
  261|  6.15k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|   839k|    {
 1878|   839k|        return !codepoint.empty();
 1879|   839k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   436k|{
 2070|   436k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   436k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   463k|{
 2940|   463k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 463k, False: 0]
  ------------------
 2941|   463k|        auto it = read_while_classic_space(range);
 2942|   463k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   463k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.6k, False: 452k]
  |  |  ------------------
  ------------------
 2944|  10.6k|            return unexpected(e);
 2945|  10.6k|        }
 2946|       |
 2947|   452k|        return it;
 2948|   463k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   463k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   463k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   463k|    else {
 2114|   463k|        auto it = range.begin();
 2115|       |
 2116|   463k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|   463k|            auto seg = get_contiguous_beginning(range);
 2118|   463k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|   463k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 26.3k, False: 436k]
  ------------------
 2120|  26.3k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|  26.3k|            }
 2122|   436k|            ranges::advance(it, seg.size());
 2123|   436k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   463k|            return detail::is_cp_space(cp);
 2127|   463k|        });
 2128|   463k|    }
 2129|   463k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   436k|        : m_fptr([](storage fn,
  743|   436k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   436k|              cvref<T> obj = *get<T>(fn);
  745|   436k|              if constexpr (std::is_void_v<R>) {
  746|   436k|                  obj(static_cast<decltype(args)>(args)...);
  747|   436k|              }
  748|   436k|              else {
  749|   436k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   436k|              }
  751|   436k|          }),
  752|   436k|          m_storage(std::addressof(f))
  753|   436k|    {
  754|   436k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   837k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   837k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   837k|              else {
  749|   837k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   837k|              }
  751|   837k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   837k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   837k|        else if constexpr (std::is_object_v<T>) {
  688|   837k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   837k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   837k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   837k|            return detail::is_cp_space(cp);
 2127|   837k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   436k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   436k|        {
  662|   436k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   145k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   145k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   145k|        auto beg = r.begin();
  990|   145k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 145k, False: 0]
  ------------------
  991|   145k|            return false;
  992|   145k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   145k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|   265k|    {
  763|   265k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   265k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   265k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|   114k|{
 1845|   114k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   114k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   114k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|   114k|    else {
 1856|   114k|        auto it = range.begin();
 1857|   114k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 93.0k, False: 21.7k]
  ------------------
 1858|  93.0k|            return ranges::next(it, count);
 1859|  93.0k|        }
 1860|       |
 1861|  44.0k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 43.3k, False: 708]
  ------------------
 1862|  43.3k|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 21.0k, False: 22.2k]
  ------------------
 1863|  21.0k|                return unexpected(eof_error::eof);
 1864|  21.0k|            }
 1865|  43.3k|        }
 1866|       |
 1867|    708|        return it;
 1868|  21.7k|    }
 1869|   114k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   114k|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|   114k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|   114k|        else {
 1106|   114k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 114k, False: 0]
  ------------------
 1107|   114k|                return static_cast<size_t>(
 1108|   114k|                    r.begin().parent()->chars_available() -
 1109|   114k|                    r.begin().position());
 1110|   114k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   114k|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|   114k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|   123k|        : m_fptr([](storage fn,
  743|   123k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   123k|              cvref<T> obj = *get<T>(fn);
  745|   123k|              if constexpr (std::is_void_v<R>) {
  746|   123k|                  obj(static_cast<decltype(args)>(args)...);
  747|   123k|              }
  748|   123k|              else {
  749|   123k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   123k|              }
  751|   123k|          }),
  752|   123k|          m_storage(std::addressof(f))
  753|   123k|    {
  754|   123k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|   132k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   132k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   132k|              else {
  749|   132k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   132k|              }
  751|   132k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|   132k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   132k|        else if constexpr (std::is_object_v<T>) {
  688|   132k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   132k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|   123k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   123k|        {
  662|   123k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   116k|    {
 6026|   116k|        const bool need_skipped_width =
 6027|   116k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 116k]
  |  Branch (6027:33): [True: 0, False: 116k]
  ------------------
 6028|   116k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   116k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 116k]
  ------------------
 6032|   116k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 116k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   116k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 116k, False: 0]
  |  Branch (6036:56): [True: 116k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   116k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 116k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   230k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.59k, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.59k|    }                                                  \
  |  |  |  | 3667|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   230k|                            make_eof_scan_error));
 6047|       |
 6048|   230k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 114k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   114k|            return result_type{it, 0};
 6056|   230k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   116k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|   123k|{
 1964|   123k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   123k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|   123k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|   123k|    else {
 1949|   123k|        auto first = range.begin();
 1950|   133k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 132k, False: 855]
  ------------------
 1951|   132k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 122k, False: 10.0k]
  ------------------
 1952|   122k|                return first;
 1953|   122k|            }
 1954|   132k|        }
 1955|    855|        return first;
 1956|   123k|    }
 1957|   123k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  38.7M|    {
  108|  38.7M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  38.7M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  38.7M|    {
   94|  38.7M|        iter_difference_t<I> counter{0};
   95|  79.4G|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 79.4G, False: 38.7M]
  ------------------
   96|  79.4G|            ++i;
   97|  79.4G|            ++counter;
   98|  79.4G|        }
   99|  38.7M|        return counter;
  100|  38.7M|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|  38.0k|    {
 1768|  38.0k|        auto stdloc = loc.get<std::locale>();
 1769|  38.0k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|  38.0k|        grouping = numpunct.grouping();
 1771|  38.0k|        thousands_sep =
 1772|  38.0k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 38.0k]
  ------------------
 1773|  38.0k|        decimal_point = numpunct.decimal_point();
 1774|  38.0k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|  38.0k|{
 1705|  38.0k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 38.0k, False: 0]
  ------------------
 1706|  38.0k|        return std::use_facet<Facet>(stdloc);
 1707|  38.0k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|  38.0k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|   181k|{
 1834|   181k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 181k]
  |  |  ------------------
  ------------------
 1835|     72|        return unexpected(e);
 1836|     72|    }
 1837|       |
 1838|   181k|    return ranges::next(range.begin());
 1839|   181k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   356k|{
  950|   356k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.07k, False: 354k]
  |  |  ------------------
  ------------------
  951|  2.07k|        return eof_error::eof;
  952|  2.07k|    }
  953|   354k|    return eof_error::good;
  954|   356k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   502k|{
  944|   502k|    return is_range_eof(r.begin(), r.end());
  945|   502k|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   502k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   502k|    {
  937|   502k|        return begin == end;
  938|   502k|    }
  939|   502k|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   181k|    {
  296|   181k|        ++x;
  297|   181k|        return x;
  298|   181k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  19.1k|    {
 3528|  19.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  19.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  19.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  19.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 240, False: 18.8k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    240|            else {
 3539|    240|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 240]
  ------------------
 3540|    240|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    240|            }
 3546|    240|        }
 3547|       |
 3548|  19.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 48, False: 19.0k]
  ------------------
 3549|     48|            value = T{0};
 3550|     48|            return std::next(prefix_result.iterator);
 3551|     48|        }
 3552|       |
 3553|  19.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  19.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.8k, False: 3.19k]
  |  |  ------------------
  ------------------
 3554|  15.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.4k, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.4k|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    402|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    402|                    parse_integer_digits_without_thsep(
 3556|    402|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    402|                        prefix_result.parsed_base));
 3558|       |
 3559|    402|            auto buf = make_contiguous_buffer(
 3560|    402|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    402|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    402|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    402|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    402|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    402|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 44, False: 358]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     44|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     44|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     44|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     44|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     44|    }                                                  \
  |  |  |  | 3667|    402|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    358|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    358|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    358|                                        prefix_result.parsed_base));
 3564|       |
 3565|    358|            return ranges::next(
 3566|    358|                prefix_result.iterator,
 3567|    358|                ranges::distance(buf.view().begin(), result_it));
 3568|    402|        }
 3569|       |
 3570|  3.19k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.19k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.19k|#endif
 3576|       |
 3577|  3.19k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.07k, False: 116]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.07k|    }                                                  \
  |  |  |  | 3667|  3.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    116|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    116|                parse_integer_digits_with_thsep(
 3579|    116|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    116|                    prefix_result.parsed_base, locale_options));
 3581|    116|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    116|            parse_digits_result;
 3583|       |
 3584|    116|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 18, False: 98]
  ------------------
 3585|     18|            if (auto e = check_thsep_grouping(
 3586|     18|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     18|                    thsep_indices, locale_options.grouping);
 3588|     18|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 3589|     18|                return unexpected(e);
 3590|     18|            }
 3591|     18|        }
 3592|       |
 3593|     98|        auto nothsep_source_view =
 3594|     98|            std::basic_string_view<CharT>{nothsep_source};
 3595|     98|        SCN_TRY(
  ------------------
  |  | 3668|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 86]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     86|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     86|            nothsep_source_it,
 3597|     86|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     86|                                prefix_result.parsed_base));
 3599|       |
 3600|     86|        return ranges::next(
 3601|     86|            prefix_result.iterator,
 3602|     86|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     86|                ranges::ssize(thsep_indices));
 3604|     98|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESH_i:
 3314|   143k|{
 3315|   143k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 143k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   143k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   143k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   143k|        parse_integer_base_prefix(
 3320|   143k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   143k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 380, False: 143k]
  ------------------
 3323|    380|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 72, False: 308]
  ------------------
 3324|    380|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 212, False: 96]
  ------------------
 3325|    284|            digits_begin_it = base_prefix_begin_it;
 3326|    284|        }
 3327|     96|        else {
 3328|     96|            parsed_zero = false;
 3329|     96|        }
 3330|    380|    }
 3331|   143k|    else {
 3332|   143k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 270, False: 142k]
  ------------------
 3333|   143k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 138k, False: 3.96k]
  ------------------
 3334|   139k|            digits_begin_it = base_prefix_begin_it;
 3335|   139k|        }
 3336|   143k|    }
 3337|       |
 3338|   143k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 141k, False: 1.96k]
  ------------------
 3339|   141k|        sign = sign_type::plus_sign;
 3340|   141k|    }
 3341|   143k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   143k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   143k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   143k|{
 3130|   143k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   143k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 141k, False: 1.96k]
  ------------------
 3132|   141k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 141k, False: 0]
  ------------------
 3133|   141k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   141k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   141k|    }
 3137|       |
 3138|  1.96k|    auto& it = *r;
 3139|  1.96k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 1.78k, False: 179]
  ------------------
 3140|  1.78k|        return std::pair{it, sign_type::minus_sign};
 3141|  1.78k|    }
 3142|    179|    return std::pair{it, sign_type::plus_sign};
 3143|  1.96k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|   143k|{
 2261|   143k|    auto it = read_code_unit(range);
 2262|   143k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 143k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   286k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 286k, False: 141k]
  ------------------
 2267|   286k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 1.96k, False: 284k]
  ------------------
 2268|  1.96k|            return *it;
 2269|  1.96k|        }
 2270|   286k|    }
 2271|       |
 2272|   141k|    return unexpected(parse_error::error);
 2273|   143k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_i:
 3281|   143k|{
 3282|   143k|    switch (base) {
 3283|  18.9k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 18.9k, False: 124k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  18.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  18.9k|                    false};
 3287|       |
 3288|  19.0k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 19.0k, False: 124k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  19.0k|            bool zero_parsed = false;
 3291|  19.0k|            auto it = apply_opt(
 3292|  19.0k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  19.0k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  19.1k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 19.1k, False: 124k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  19.1k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  19.1k|                    false};
 3300|       |
 3301|  19.1k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 19.1k, False: 124k]
  ------------------
 3302|       |            // detect base
 3303|  19.1k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  67.0k|        default:
  ------------------
  |  Branch (3305:9): [True: 67.0k, False: 76.3k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  67.0k|            return {range.begin(), base, false};
 3308|   143k|    }
 3309|   143k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEEE4typeEOSI_SK_:
 2279|  57.1k|{
 2280|  57.1k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 57.0k, False: 180]
  ------------------
 2281|  57.0k|        return range.begin();
 2282|  57.0k|    }
 2283|    180|    return *result;
 2284|  57.1k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3232|  38.1k|{
 3233|  38.1k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  38.1k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|   114k|{
 2220|   114k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|   114k|    else {
 2233|   114k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   114k|            if (ch < 'A' || ch > 'Z') {
 2235|   114k|                return ch;
 2236|   114k|            }
 2237|   114k|            return static_cast<char_type>(ch +
 2238|   114k|                                          static_cast<char_type>('a' - 'A'));
 2239|   114k|        };
 2240|       |
 2241|   114k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 21.0k, False: 93.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  21.0k|    }                                                  \
  |  |  |  | 3667|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  93.7k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  93.7k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  93.7k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.7k, False: 0]
  |  |  ------------------
  ------------------
 2246|  93.7k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  93.7k|                    return ascii_tolower(a) ==
 2248|  93.7k|                           static_cast<detail::char_t<Range>>(b);
 2249|  93.7k|                }))) {
 2250|  93.7k|            return unexpected(parse_error::error);
 2251|  93.7k|        }
 2252|       |
 2253|      0|        return it;
 2254|  93.7k|    }
 2255|   114k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  94.6k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  94.6k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 62.7k, False: 31.9k]
  |  Branch (2234:29): [True: 31.5k, False: 360]
  ------------------
 2235|  94.3k|                return ch;
 2236|  94.3k|            }
 2237|    360|            return static_cast<char_type>(ch +
 2238|    360|                                          static_cast<char_type>('a' - 'A'));
 2239|  94.6k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_Rb:
 3246|  38.2k|{
 3247|  38.2k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 38.2k]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|  38.2k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 380, False: 37.8k]
  ------------------
 3252|    380|        zero_parsed = true;
 3253|    380|        return *r;
 3254|    380|    }
 3255|       |
 3256|  37.8k|    return unexpected(parse_error::error);
 3257|  38.2k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|  38.2k|{
 2135|  38.2k|    auto it = read_code_unit(range);
 2136|  38.2k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 38.1k]
  |  |  ------------------
  ------------------
 2137|     72|        return unexpected(make_eof_parse_error(it.error()));
 2138|     72|    }
 2139|       |
 2140|  38.1k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.7k, False: 380]
  |  |  ------------------
  ------------------
 2141|  38.1k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  37.7k|        return unexpected(parse_error::error);
 2143|  37.7k|    }
 2144|       |
 2145|    380|    return *it;
 2146|  38.1k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 3239|  38.3k|{
 3240|  38.3k|    return read_matching_string_classic_nocase(range, "0x");
 3241|  38.3k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSD_9add_constIT_E4typeEEEEEibEEESG_:
 3262|  19.1k|{
 3263|  19.1k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 19.1k]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|  19.1k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 19.1k]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|  19.1k|    {
 3270|  19.1k|        bool zero_parsed{false};
 3271|  19.1k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 200, False: 18.9k]
  ------------------
 3272|    200|            return {*r, 8, zero_parsed};
 3273|    200|        }
 3274|  19.1k|    }
 3275|  18.9k|    return {range.begin(), 10, false};
 3276|  19.1k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_i:
 3348|   123k|{
 3349|   123k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|       |    if constexpr (ranges::contiguous_range<Range>) {
 3352|       |        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
 3353|       |            return unexpected_scan_error(
 3354|       |                scan_error::invalid_scanned_value,
 3355|       |                "Failed to parse integer: No digits found");
 3356|       |        }
 3357|       |        return range.end();
 3358|       |    }
 3359|   123k|    else {
 3360|   123k|        return read_while1_code_unit(range,
 3361|   123k|                                     [&](char_type ch) noexcept {
 3362|   123k|                                         return char_to_int(ch) < base;
 3363|   123k|                                     })
 3364|   123k|            .transform_error(map_parse_error_to_scan_error(
 3365|   123k|                scan_error::invalid_scanned_value,
 3366|   123k|                "Failed to parse integer: No digits found"));
 3367|   123k|    }
 3368|   123k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|   123k|{
 1984|   123k|    auto it = read_while_code_unit(range, pred);
 1985|   123k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 120k, False: 3.10k]
  ------------------
 1986|   120k|        return unexpected(parse_error::error);
 1987|   120k|    }
 1988|  3.10k|    return it;
 1989|   123k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_:
  742|   123k|        : m_fptr([](storage fn,
  743|   123k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   123k|              cvref<T> obj = *get<T>(fn);
  745|   123k|              if constexpr (std::is_void_v<R>) {
  746|   123k|                  obj(static_cast<decltype(args)>(args)...);
  747|   123k|              }
  748|   123k|              else {
  749|   123k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   123k|              }
  751|   123k|          }),
  752|   123k|          m_storage(std::addressof(f))
  753|   123k|    {
  754|   123k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_SQ_TnPNSI_9enable_ifIXaaaasr6detailE11is_not_selfISK_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSS_EEvE4typeELPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clES11_w:
  743|   132k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   132k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   132k|              else {
  749|   132k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   132k|              }
  751|   132k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  683|   132k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   132k|        else if constexpr (std::is_object_v<T>) {
  688|   132k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   132k|    }
_ZZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_iENKUlwE_clEw:
 3361|   132k|                                     [&](char_type ch) noexcept {
 3362|   132k|                                         return char_to_int(ch) < base;
 3363|   132k|                                     })
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESK_iEUlwE_TnPNSI_9enable_ifIXsr3stdE11is_object_vISK_EEvE4typeELPv0EEEPSK_:
  660|   123k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   123k|        {
  662|   123k|        }
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENSE_12basic_stringIT0_NSE_11char_traitsISN_EENSE_9allocatorISN_EEEENSM_IcNSO_IcEENSQ_IcEEEEEEEEESH_iRKNS1_35localized_number_formatting_optionsISN_EE:
 3378|  19.0k|{
 3379|  19.0k|    std::basic_string<CharT> output;
 3380|  19.0k|    std::string thsep_indices;
 3381|  19.0k|    auto it = range.begin();
 3382|  19.0k|    bool digit_matched = false;
 3383|  38.8M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 38.8M, False: 342]
  ------------------
 3384|  38.8M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 38.7M, False: 20.8k]
  ------------------
 3385|  38.7M|            thsep_indices.push_back(
 3386|  38.7M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  38.7M|        }
 3388|  20.8k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 18.6k, False: 2.14k]
  ------------------
 3389|  18.6k|            break;
 3390|  18.6k|        }
 3391|  2.14k|        else {
 3392|  2.14k|            output.push_back(*it);
 3393|  2.14k|            digit_matched = true;
 3394|  2.14k|        }
 3395|  38.8M|    }
 3396|  19.0k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.3k, False: 626]
  |  |  ------------------
  ------------------
 3397|  18.3k|        return unexpected_scan_error(
 3398|  18.3k|            scan_error::invalid_scanned_value,
 3399|  18.3k|            "Failed to parse integer: No digits found");
 3400|  18.3k|    }
 3401|    626|    return std::tuple{it, output, thsep_indices};
 3402|  19.0k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEENSE_17basic_string_viewIcSH_EE:
 3199|    102|{
 3200|    102|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|    102|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 102, False: 0]
  ------------------
 3203|    102|        SCN_UNLIKELY_ATTR
 3204|    102|        return {scan_error::invalid_scanned_value,
 3205|    102|                "Invalid thousands separator grouping"};
 3206|    102|    }
 3207|       |
 3208|      0|    return {};
 3209|    102|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEbT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
 3161|    102|{
 3162|    102|    transform_thsep_indices(thsep_indices,
 3163|    102|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|    102|    auto thsep_it = thsep_indices.rbegin();
 3166|    102|    for (auto grouping_it = grouping.begin();
 3167|    102|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 102]
  |  Branch (3167:10): [True: 0, False: 102]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|    102|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|    102|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|    102|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|    576|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 504, False: 72]
  ------------------
 3179|    504|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 30, False: 474]
  ------------------
 3180|     30|            return false;
 3181|     30|        }
 3182|    504|    }
 3183|       |
 3184|     72|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 72, False: 0]
  ------------------
 3185|     72|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 72, False: 0]
  ------------------
 3186|     72|            return false;
 3187|     72|        }
 3188|     72|    }
 3189|       |
 3190|      0|    SCN_CLANG_POP
 3191|       |
 3192|      0|    return true;
 3193|     72|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1670|  3.10k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|  3.10k|    else {
 1677|  3.10k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  3.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|  3.10k|    }
 1679|  3.10k|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|  3.10k|    {
 1525|  3.10k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  3.10k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|  3.10k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|  3.10k|    {
 1609|  3.10k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|  3.10k|                           ranges::common_range<Range>) {
 1626|  3.10k|            auto beg_seg = range.begin().contiguous_segment();
 1627|  3.10k|            auto end_seg = range.end().contiguous_segment();
 1628|  3.10k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  3.10k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 992]
  |  |  ------------------
  ------------------
 1629|  3.10k|                             detail::to_address(end_seg.end()))) {
 1630|  2.10k|                auto& str = m_storage.emplace();
 1631|  2.10k|                str.reserve(range.end().position() - range.begin().position());
 1632|  2.10k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  2.10k|                m_view = string_view_type{str};
 1634|  2.10k|                return;
 1635|  2.10k|            }
 1636|       |
 1637|    992|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|    992|                                                            end_seg.data());
 1639|    992|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  3.10k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  5.82k|    {
 1570|  5.82k|        return m_view;
 1571|  5.82k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  3.10k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|  1.97k|    {
 6068|  1.97k|        const bool need_skipped_width =
 6069|  1.97k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.97k]
  |  Branch (6069:33): [True: 0, False: 1.97k]
  ------------------
 6070|  1.97k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.97k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.97k]
  ------------------
 6073|  1.97k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.97k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.97k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.97k, False: 0]
  ------------------
 6082|  1.97k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 1.97k]
  ------------------
 6083|  1.97k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.97k|        return result_type{rng.begin(), 0};
 6107|  1.97k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|   114k|{
 1845|   114k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   114k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   114k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|   114k|    if constexpr (ranges::sized_range<Range>) {
 1848|   114k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|   114k|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 21.0k, False: 93.7k]
  ------------------
 1850|  21.0k|            return unexpected(eof_error::eof);
 1851|  21.0k|        }
 1852|       |
 1853|  93.7k|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|   114k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|   145k|{
 1887|   145k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   145k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   145k|    auto it = range.begin();
 1891|   145k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   145k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 145k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   145k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 145k, False: 0]
  ------------------
 1900|   145k|        ++it;
 1901|   145k|        return {it, string_type(1, *range.begin())};
 1902|   145k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   145k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   625k|{
  944|   625k|    return is_range_eof(r.begin(), r.end());
  945|   625k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   625k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   625k|    {
  937|   625k|        return begin == end;
  938|   625k|    }
  939|   625k|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|   145k|    {
 1878|   145k|        return !codepoint.empty();
 1879|   145k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|   479k|{
  950|   479k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   479k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.22k, False: 477k]
  |  |  ------------------
  ------------------
  951|  2.22k|        return eof_error::eof;
  952|  2.22k|    }
  953|   477k|    return eof_error::good;
  954|   479k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|   181k|{
 1834|   181k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 181k]
  |  |  ------------------
  ------------------
 1835|     72|        return unexpected(e);
 1836|     72|    }
 1837|       |
 1838|   181k|    return ranges::next(range.begin());
 1839|   181k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   181k|    {
  296|   181k|        ++x;
  297|   181k|        return x;
  298|   181k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  19.1k|    {
 3528|  19.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  19.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  19.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  19.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 240, False: 18.8k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    240|            else {
 3539|    240|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 240]
  ------------------
 3540|    240|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    240|            }
 3546|    240|        }
 3547|       |
 3548|  19.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 48, False: 19.0k]
  ------------------
 3549|     48|            value = T{0};
 3550|     48|            return std::next(prefix_result.iterator);
 3551|     48|        }
 3552|       |
 3553|  19.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  19.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.8k, False: 3.19k]
  |  |  ------------------
  ------------------
 3554|  15.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  15.8k|                    parse_integer_digits_without_thsep(
 3556|  15.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  15.8k|                        prefix_result.parsed_base));
 3558|       |
 3559|  15.8k|            auto buf = make_contiguous_buffer(
 3560|  15.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  15.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.5k, False: 358]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.5k|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    358|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    358|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    358|                                        prefix_result.parsed_base));
 3564|       |
 3565|    358|            return ranges::next(
 3566|    358|                prefix_result.iterator,
 3567|    358|                ranges::distance(buf.view().begin(), result_it));
 3568|  15.8k|        }
 3569|       |
 3570|  3.19k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.19k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.19k|#endif
 3576|       |
 3577|  3.19k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.19k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.19k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.19k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.19k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.07k, False: 116]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.07k|    }                                                  \
  |  |  |  | 3667|  3.19k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    116|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    116|                parse_integer_digits_with_thsep(
 3579|    116|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    116|                    prefix_result.parsed_base, locale_options));
 3581|    116|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    116|            parse_digits_result;
 3583|       |
 3584|    116|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 18, False: 98]
  ------------------
 3585|     18|            if (auto e = check_thsep_grouping(
 3586|     18|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     18|                    thsep_indices, locale_options.grouping);
 3588|     18|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 3589|     18|                return unexpected(e);
 3590|     18|            }
 3591|     18|        }
 3592|       |
 3593|     98|        auto nothsep_source_view =
 3594|     98|            std::basic_string_view<CharT>{nothsep_source};
 3595|     98|        SCN_TRY(
  ------------------
  |  | 3668|     98|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     98|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     98|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 86]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|     98|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     86|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     86|            nothsep_source_it,
 3597|     86|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     86|                                prefix_result.parsed_base));
 3599|       |
 3600|     86|        return ranges::next(
 3601|     86|            prefix_result.iterator,
 3602|     86|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     86|                ranges::ssize(thsep_indices));
 3604|     98|    }
_ZN3scn2v34impl20parse_integer_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEEEESE_i:
 3314|   143k|{
 3315|   143k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3668|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 143k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3316|   143k|    auto [base_prefix_begin_it, sign] = sign_result;
 3317|       |
 3318|   143k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3319|   143k|        parse_integer_base_prefix(
 3320|   143k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3321|       |
 3322|   143k|    if (parsed_zero) {
  ------------------
  |  Branch (3322:9): [True: 380, False: 143k]
  ------------------
 3323|    380|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3323:13): [True: 72, False: 308]
  ------------------
 3324|    380|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3324:13): [True: 212, False: 96]
  ------------------
 3325|    284|            digits_begin_it = base_prefix_begin_it;
 3326|    284|        }
 3327|     96|        else {
 3328|     96|            parsed_zero = false;
 3329|     96|        }
 3330|    380|    }
 3331|   143k|    else {
 3332|   143k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3332:13): [True: 270, False: 142k]
  ------------------
 3333|   143k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3333:13): [True: 138k, False: 3.96k]
  ------------------
 3334|   139k|            digits_begin_it = base_prefix_begin_it;
 3335|   139k|        }
 3336|   143k|    }
 3337|       |
 3338|   143k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3338:9): [True: 141k, False: 1.96k]
  ------------------
 3339|   141k|        sign = sign_type::plus_sign;
 3340|   141k|    }
 3341|   143k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3342|   143k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3343|   143k|}
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   143k|{
 3130|   143k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   143k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 141k, False: 1.96k]
  ------------------
 3132|   141k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 141k, False: 0]
  ------------------
 3133|   141k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   141k|        }
 3135|      0|        return unexpected(eof_error::eof);
 3136|   141k|    }
 3137|       |
 3138|  1.96k|    auto& it = *r;
 3139|  1.96k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 1.78k, False: 179]
  ------------------
 3140|  1.78k|        return std::pair{it, sign_type::minus_sign};
 3141|  1.78k|    }
 3142|    179|    return std::pair{it, sign_type::plus_sign};
 3143|  1.96k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|   143k|{
 2261|   143k|    auto it = read_code_unit(range);
 2262|   143k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 143k]
  |  |  ------------------
  ------------------
 2263|      0|        return unexpected(make_eof_parse_error(it.error()));
 2264|      0|    }
 2265|       |
 2266|   286k|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 286k, False: 141k]
  ------------------
 2267|   286k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 1.96k, False: 284k]
  ------------------
 2268|  1.96k|            return *it;
 2269|  1.96k|        }
 2270|   286k|    }
 2271|       |
 2272|   141k|    return unexpected(parse_error::error);
 2273|   143k|}
_ZN3scn2v34impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3281|   143k|{
 3282|   143k|    switch (base) {
 3283|  18.9k|        case 2:
  ------------------
  |  Branch (3283:9): [True: 18.9k, False: 124k]
  ------------------
 3284|       |            // allow 0b/0B
 3285|  18.9k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3286|  18.9k|                    false};
 3287|       |
 3288|  19.0k|        case 8: {
  ------------------
  |  Branch (3288:9): [True: 19.0k, False: 124k]
  ------------------
 3289|       |            // allow 0o/0O/0
 3290|  19.0k|            bool zero_parsed = false;
 3291|  19.0k|            auto it = apply_opt(
 3292|  19.0k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3293|  19.0k|            return {it, 8, zero_parsed};
 3294|      0|        }
 3295|       |
 3296|  19.1k|        case 16:
  ------------------
  |  Branch (3296:9): [True: 19.1k, False: 124k]
  ------------------
 3297|       |            // allow 0x/0X
 3298|  19.1k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3299|  19.1k|                    false};
 3300|       |
 3301|  19.1k|        case 0:
  ------------------
  |  Branch (3301:9): [True: 19.1k, False: 124k]
  ------------------
 3302|       |            // detect base
 3303|  19.1k|            return parse_integer_base_prefix_for_detection(range);
 3304|       |
 3305|  67.0k|        default:
  ------------------
  |  Branch (3305:9): [True: 67.0k, False: 76.3k]
  ------------------
 3306|       |            // no base prefix allowed
 3307|  67.0k|            return {range.begin(), base, false};
 3308|   143k|    }
 3309|   143k|}
_ZN3scn2v34impl9apply_optINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEEE4typeEOSF_SH_:
 2279|  57.1k|{
 2280|  57.1k|    if (!result) {
  ------------------
  |  Branch (2280:9): [True: 57.0k, False: 180]
  ------------------
 2281|  57.0k|        return range.begin();
 2282|  57.0k|    }
 2283|    180|    return *result;
 2284|  57.1k|}
_ZN3scn2v34impl29parse_integer_bin_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3232|  38.1k|{
 3233|  38.1k|    return read_matching_string_classic_nocase(range, "0b");
 3234|  38.1k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|   114k|{
 2220|   114k|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|   114k|    else {
 2233|   114k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|   114k|            if (ch < 'A' || ch > 'Z') {
 2235|   114k|                return ch;
 2236|   114k|            }
 2237|   114k|            return static_cast<char_type>(ch +
 2238|   114k|                                          static_cast<char_type>('a' - 'A'));
 2239|   114k|        };
 2240|       |
 2241|   114k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 21.0k, False: 93.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  21.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  21.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  21.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  21.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  21.0k|    }                                                  \
  |  |  |  | 3667|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  93.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  93.7k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  93.7k|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  93.7k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  93.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 93.7k, False: 0]
  |  |  ------------------
  ------------------
 2246|  93.7k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  93.7k|                    return ascii_tolower(a) ==
 2248|  93.7k|                           static_cast<detail::char_t<Range>>(b);
 2249|  93.7k|                }))) {
 2250|  93.7k|            return unexpected(parse_error::error);
 2251|  93.7k|        }
 2252|       |
 2253|      0|        return it;
 2254|  93.7k|    }
 2255|   114k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  94.6k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  94.6k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 62.7k, False: 31.9k]
  |  Branch (2234:29): [True: 31.5k, False: 360]
  ------------------
 2235|  94.3k|                return ch;
 2236|  94.3k|            }
 2237|    360|            return static_cast<char_type>(ch +
 2238|    360|                                          static_cast<char_type>('a' - 'A'));
 2239|  94.6k|        };
_ZN3scn2v34impl29parse_integer_oct_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_Rb:
 3246|  38.2k|{
 3247|  38.2k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (3247:14): [True: 0, False: 38.2k]
  ------------------
 3248|      0|        return *r;
 3249|      0|    }
 3250|       |
 3251|  38.2k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (3251:14): [True: 380, False: 37.8k]
  ------------------
 3252|    380|        zero_parsed = true;
 3253|    380|        return *r;
 3254|    380|    }
 3255|       |
 3256|  37.8k|    return unexpected(parse_error::error);
 3257|  38.2k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|  38.2k|{
 2135|  38.2k|    auto it = read_code_unit(range);
 2136|  38.2k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 72, False: 38.1k]
  |  |  ------------------
  ------------------
 2137|     72|        return unexpected(make_eof_parse_error(it.error()));
 2138|     72|    }
 2139|       |
 2140|  38.1k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 37.7k, False: 380]
  |  |  ------------------
  ------------------
 2141|  38.1k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|  37.7k|        return unexpected(parse_error::error);
 2143|  37.7k|    }
 2144|       |
 2145|    380|    return *it;
 2146|  38.1k|}
_ZN3scn2v34impl29parse_integer_hex_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 3239|  38.3k|{
 3240|  38.3k|    return read_matching_string_classic_nocase(range, "0x");
 3241|  38.3k|}
_ZN3scn2v34impl39parse_integer_base_prefix_for_detectionINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_:
 3262|  19.1k|{
 3263|  19.1k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (3263:14): [True: 0, False: 19.1k]
  ------------------
 3264|      0|        return {*r, 16, false};
 3265|      0|    }
 3266|  19.1k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (3266:14): [True: 0, False: 19.1k]
  ------------------
 3267|      0|        return {*r, 2, false};
 3268|      0|    }
 3269|  19.1k|    {
 3270|  19.1k|        bool zero_parsed{false};
 3271|  19.1k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (3271:18): [True: 200, False: 18.9k]
  ------------------
 3272|    200|            return {*r, 8, zero_parsed};
 3273|    200|        }
 3274|  19.1k|    }
 3275|  18.9k|    return {range.begin(), 10, false};
 3276|  19.1k|}
_ZN3scn2v34impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3348|   123k|{
 3349|   123k|    using char_type = detail::char_t<Range>;
 3350|       |
 3351|   123k|    if constexpr (ranges::contiguous_range<Range>) {
 3352|   123k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 156, False: 123k]
  |  |  ------------------
  ------------------
 3353|    156|            return unexpected_scan_error(
 3354|    156|                scan_error::invalid_scanned_value,
 3355|    156|                "Failed to parse integer: No digits found");
 3356|    156|        }
 3357|   123k|        return range.end();
 3358|       |    }
 3359|       |    else {
 3360|       |        return read_while1_code_unit(range,
 3361|       |                                     [&](char_type ch) noexcept {
 3362|       |                                         return char_to_int(ch) < base;
 3363|       |                                     })
 3364|       |            .transform_error(map_parse_error_to_scan_error(
 3365|       |                scan_error::invalid_scanned_value,
 3366|       |                "Failed to parse integer: No digits found"));
 3367|       |    }
 3368|   123k|}
_ZN3scn2v34impl31parse_integer_digits_with_thsepINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENSB_12basic_stringIT0_NSB_11char_traitsISK_EENSB_9allocatorISK_EEEENSJ_IcNSL_IcEENSN_IcEEEEEEEEESE_iRKNS1_35localized_number_formatting_optionsISK_EE:
 3378|  19.0k|{
 3379|  19.0k|    std::basic_string<CharT> output;
 3380|  19.0k|    std::string thsep_indices;
 3381|  19.0k|    auto it = range.begin();
 3382|  19.0k|    bool digit_matched = false;
 3383|  38.8M|    for (; it != range.end(); ++it) {
  ------------------
  |  Branch (3383:12): [True: 38.8M, False: 342]
  ------------------
 3384|  38.8M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (3384:13): [True: 38.7M, False: 20.8k]
  ------------------
 3385|  38.7M|            thsep_indices.push_back(
 3386|  38.7M|                static_cast<char>(ranges::distance(range.begin(), it)));
 3387|  38.7M|        }
 3388|  20.8k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (3388:18): [True: 18.6k, False: 2.14k]
  ------------------
 3389|  18.6k|            break;
 3390|  18.6k|        }
 3391|  2.14k|        else {
 3392|  2.14k|            output.push_back(*it);
 3393|  2.14k|            digit_matched = true;
 3394|  2.14k|        }
 3395|  38.8M|    }
 3396|  19.0k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.3k, False: 626]
  |  |  ------------------
  ------------------
 3397|  18.3k|        return unexpected_scan_error(
 3398|  18.3k|            scan_error::invalid_scanned_value,
 3399|  18.3k|            "Failed to parse integer: No digits found");
 3400|  18.3k|    }
 3401|    626|    return std::tuple{it, output, thsep_indices};
 3402|  19.0k|}
_ZN3scn2v34impl20check_thsep_groupingINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS0_10scan_errorET_NSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEENSC_17basic_string_viewIcSF_EE:
 3199|    102|{
 3200|    102|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  924|    102|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    102|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3201|       |
 3202|    102|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (3202:9): [True: 102, False: 0]
  ------------------
 3203|    102|        SCN_UNLIKELY_ATTR
 3204|    102|        return {scan_error::invalid_scanned_value,
 3205|    102|                "Invalid thousands separator grouping"};
 3206|    102|    }
 3207|       |
 3208|      0|    return {};
 3209|    102|}
_ZN3scn2v34impl25check_thsep_grouping_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_RNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEENSB_17basic_string_viewIcSE_EE:
 3161|    102|{
 3162|    102|    transform_thsep_indices(thsep_indices,
 3163|    102|                            ranges::distance(range.begin(), range.end()));
 3164|       |
 3165|    102|    auto thsep_it = thsep_indices.rbegin();
 3166|    102|    for (auto grouping_it = grouping.begin();
 3167|    102|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (3167:10): [True: 0, False: 102]
  |  Branch (3167:10): [True: 0, False: 102]
  |  Branch (3167:43): [True: 0, False: 0]
  ------------------
 3168|    102|         ++grouping_it, (void)++thsep_it) {
 3169|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (3169:13): [True: 0, False: 0]
  ------------------
 3170|      0|            return false;
 3171|      0|        }
 3172|      0|    }
 3173|       |
 3174|    102|    SCN_CLANG_PUSH
 3175|       |    // false positive
 3176|    102|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
 3177|       |
 3178|    576|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (3178:12): [True: 504, False: 72]
  ------------------
 3179|    504|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (3179:13): [True: 30, False: 474]
  ------------------
 3180|     30|            return false;
 3181|     30|        }
 3182|    504|    }
 3183|       |
 3184|     72|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (3184:9): [True: 72, False: 0]
  ------------------
 3185|     72|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (3185:13): [True: 72, False: 0]
  ------------------
 3186|     72|            return false;
 3187|     72|        }
 3188|     72|    }
 3189|       |
 3190|      0|    SCN_CLANG_POP
 3191|       |
 3192|      0|    return true;
 3193|     72|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|   123k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   123k|                  ranges::sized_range<Range>) {
 1674|   123k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   123k|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   123k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   123k|    {
 1478|   123k|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|   125k|    {
 1491|   125k|        return sv;
 1492|   125k|    }
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   145k|{
 2940|   145k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 145k, False: 0]
  ------------------
 2941|   145k|        auto it = read_while_classic_space(range);
 2942|   145k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   145k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.81k, False: 143k]
  |  |  ------------------
  ------------------
 2944|  1.81k|            return unexpected(e);
 2945|  1.81k|        }
 2946|       |
 2947|   143k|        return it;
 2948|   145k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   145k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   145k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   145k|    else {
 2114|   145k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   145k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   145k|            return detail::is_cp_space(cp);
 2127|   145k|        });
 2128|   145k|    }
 2129|   145k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|   145k|{
 2070|   145k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   145k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|   145k|{
 2049|   145k|    auto it = range.begin();
 2050|   147k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 145k, False: 1.81k]
  ------------------
 2051|   145k|        const auto val =
 2052|   145k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   145k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 145k, False: 0]
  |  |  ------------------
  ------------------
 2054|   145k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   145k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   145k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 143k, False: 2.41k]
  ------------------
 2057|   143k|                return it;
 2058|   143k|            }
 2059|   145k|        }
 2060|  2.41k|        it = val.iterator;
 2061|  2.41k|    }
 2062|       |
 2063|  1.81k|    return it;
 2064|   145k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   145k|        : m_fptr([](storage fn,
  743|   145k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   145k|              cvref<T> obj = *get<T>(fn);
  745|   145k|              if constexpr (std::is_void_v<R>) {
  746|   145k|                  obj(static_cast<decltype(args)>(args)...);
  747|   145k|              }
  748|   145k|              else {
  749|   145k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   145k|              }
  751|   145k|          }),
  752|   145k|          m_storage(std::addressof(f))
  753|   145k|    {
  754|   145k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   145k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   145k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   145k|              else {
  749|   145k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   145k|              }
  751|   145k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   145k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   145k|        else if constexpr (std::is_object_v<T>) {
  688|   145k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   145k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|   145k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   145k|            return detail::is_cp_space(cp);
 2127|   145k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   145k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   145k|        {
  662|   145k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  96.1k|    {
  304|  96.1k|        ranges::advance(x, n);
  305|  96.1k|        return x;
  306|  96.1k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  96.1k|    {
  268|  96.1k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  96.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  96.1k|    {
  181|   289k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 192k, False: 96.1k]
  ------------------
  182|   192k|            ++i;
  183|   192k|        }
  184|  96.1k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  19.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  19.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  19.3k|            auto rd = make_reader<T, char_type>();
 6195|  19.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  19.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 19.3k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  19.3k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  19.3k|                return impl(rd, range, value);
 6202|  19.3k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  19.3k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|   232k|    {
 3029|   232k|        reader_error_handler eh{};
 3030|   232k|        get_derived().check_specs_impl(specs, eh);
 3031|   232k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 232k]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|   232k|        return {};
 3035|   232k|    }
_ZN3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
 3039|   232k|    {
 3040|   232k|        return static_cast<Derived&>(*this);
 3041|   232k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 3473|   232k|    {
 3474|   232k|        detail::check_int_type_specs(specs, eh);
 3475|   232k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  19.3k|    {
 6113|  19.3k|        const bool need_skipped_width =
 6114|  19.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 19.3k]
  |  Branch (6114:33): [True: 0, False: 19.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  19.3k|        auto it = rng.begin();
 6118|  19.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  19.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 19.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  19.3k|        else {
 6127|  19.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  19.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 278, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    278|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    278|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    278|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    278|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    278|    }                                                  \
  |  |  |  | 3667|  19.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  19.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  19.0k|        }
 6130|  19.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  19.0k|        std::ptrdiff_t value_width = 0;
 6134|  19.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 19.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  19.0k|        else {
 6150|  19.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 406]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.6k|    }                                                  \
  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    406|                                             specs, value, loc));
 6152|       |
 6153|    406|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 406]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    406|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    406|        std::ptrdiff_t postfix_width = 0;
 6162|    406|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 278, False: 128]
  ------------------
 6163|    278|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    278|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    278|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    278|                                 value_width));
 6167|    278|            std::tie(it, postfix_width) = postfix_result;
 6168|    278|        }
 6169|       |
 6170|    406|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    406|                                                 value_width, postfix_width);
 6172|    406|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 406]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    406|        return it;
 6177|    406|    }
_ZNK3scn2v34impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
 3023|   294k|    {
 3024|   294k|        return true;
 3025|   294k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  19.0k|    {
 3528|  19.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  19.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  19.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  19.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 230, False: 18.8k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    230|            else {
 3539|    230|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 230]
  ------------------
 3540|    230|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    230|            }
 3546|    230|        }
 3547|       |
 3548|  19.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 46, False: 19.0k]
  ------------------
 3549|     46|            value = T{0};
 3550|     46|            return std::next(prefix_result.iterator);
 3551|     46|        }
 3552|       |
 3553|  19.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  19.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.8k, False: 3.17k]
  |  |  ------------------
  ------------------
 3554|  15.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.4k, False: 390]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.4k|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    390|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    390|                    parse_integer_digits_without_thsep(
 3556|    390|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    390|                        prefix_result.parsed_base));
 3558|       |
 3559|    390|            auto buf = make_contiguous_buffer(
 3560|    390|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    390|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    390|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    390|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    390|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    390|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 96, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     96|    }                                                  \
  |  |  |  | 3667|    390|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    294|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    294|                                        prefix_result.parsed_base));
 3564|       |
 3565|    294|            return ranges::next(
 3566|    294|                prefix_result.iterator,
 3567|    294|                ranges::distance(buf.view().begin(), result_it));
 3568|    390|        }
 3569|       |
 3570|  3.17k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.17k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.17k|#endif
 3576|       |
 3577|  3.17k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.06k, False: 112]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.06k|    }                                                  \
  |  |  |  | 3667|  3.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    112|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    112|                parse_integer_digits_with_thsep(
 3579|    112|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    112|                    prefix_result.parsed_base, locale_options));
 3581|    112|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    112|            parse_digits_result;
 3583|       |
 3584|    112|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 18, False: 94]
  ------------------
 3585|     18|            if (auto e = check_thsep_grouping(
 3586|     18|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     18|                    thsep_indices, locale_options.grouping);
 3588|     18|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 3589|     18|                return unexpected(e);
 3590|     18|            }
 3591|     18|        }
 3592|       |
 3593|     94|        auto nothsep_source_view =
 3594|     94|            std::basic_string_view<CharT>{nothsep_source};
 3595|     94|        SCN_TRY(
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 66]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     66|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     66|            nothsep_source_it,
 3597|     66|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     66|                                prefix_result.parsed_base));
 3599|       |
 3600|     66|        return ranges::next(
 3601|     66|            prefix_result.iterator,
 3602|     66|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     66|                ranges::ssize(thsep_indices));
 3604|     94|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  19.0k|    {
 3528|  19.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  19.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  19.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  19.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 230, False: 18.8k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    230|            else {
 3539|    230|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 230]
  ------------------
 3540|    230|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    230|            }
 3546|    230|        }
 3547|       |
 3548|  19.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 46, False: 19.0k]
  ------------------
 3549|     46|            value = T{0};
 3550|     46|            return std::next(prefix_result.iterator);
 3551|     46|        }
 3552|       |
 3553|  19.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  19.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.8k, False: 3.17k]
  |  |  ------------------
  ------------------
 3554|  15.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  15.8k|                    parse_integer_digits_without_thsep(
 3556|  15.8k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  15.8k|                        prefix_result.parsed_base));
 3558|       |
 3559|  15.8k|            auto buf = make_contiguous_buffer(
 3560|  15.8k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  15.8k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.5k, False: 294]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.5k|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    294|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    294|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    294|                                        prefix_result.parsed_base));
 3564|       |
 3565|    294|            return ranges::next(
 3566|    294|                prefix_result.iterator,
 3567|    294|                ranges::distance(buf.view().begin(), result_it));
 3568|  15.8k|        }
 3569|       |
 3570|  3.17k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.17k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.17k|#endif
 3576|       |
 3577|  3.17k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.17k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.17k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.17k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.17k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.06k, False: 112]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.06k|    }                                                  \
  |  |  |  | 3667|  3.17k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    112|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    112|                parse_integer_digits_with_thsep(
 3579|    112|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    112|                    prefix_result.parsed_base, locale_options));
 3581|    112|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    112|            parse_digits_result;
 3583|       |
 3584|    112|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 18, False: 94]
  ------------------
 3585|     18|            if (auto e = check_thsep_grouping(
 3586|     18|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     18|                    thsep_indices, locale_options.grouping);
 3588|     18|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 3589|     18|                return unexpected(e);
 3590|     18|            }
 3591|     18|        }
 3592|       |
 3593|     94|        auto nothsep_source_view =
 3594|     94|            std::basic_string_view<CharT>{nothsep_source};
 3595|     94|        SCN_TRY(
  ------------------
  |  | 3668|     94|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|     94|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|     94|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     94|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28, False: 66]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     28|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     28|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     28|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     28|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     28|    }                                                  \
  |  |  |  | 3667|     94|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|     66|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|     66|            nothsep_source_it,
 3597|     66|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|     66|                                prefix_result.parsed_base));
 3599|       |
 3600|     66|        return ranges::next(
 3601|     66|            prefix_result.iterator,
 3602|     66|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|     66|                ranges::ssize(thsep_indices));
 3604|     94|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  19.4k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  19.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  19.4k|            auto rd = make_reader<T, char_type>();
 6195|  19.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.4k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  19.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 19.4k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  19.4k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  19.4k|                return impl(rd, range, value);
 6202|  19.4k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  19.4k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  19.4k|    {
 6113|  19.4k|        const bool need_skipped_width =
 6114|  19.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 19.4k]
  |  Branch (6114:33): [True: 0, False: 19.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  19.4k|        auto it = rng.begin();
 6118|  19.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  19.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 19.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  19.4k|        else {
 6127|  19.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  19.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 290, False: 19.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    290|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    290|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    290|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    290|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    290|    }                                                  \
  |  |  |  | 3667|  19.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  19.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  19.1k|        }
 6130|  19.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  19.1k|        std::ptrdiff_t value_width = 0;
 6134|  19.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 19.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  19.1k|        else {
 6150|  19.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 492]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.6k|    }                                                  \
  |  | 3667|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    492|                                             specs, value, loc));
 6152|       |
 6153|    492|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 492]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    492|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    492|        std::ptrdiff_t postfix_width = 0;
 6162|    492|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 352, False: 140]
  ------------------
 6163|    352|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    352|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    352|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    352|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    352|                                 value_width));
 6167|    352|            std::tie(it, postfix_width) = postfix_result;
 6168|    352|        }
 6169|       |
 6170|    492|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    492|                                                 value_width, postfix_width);
 6172|    492|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 492]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    492|        return it;
 6177|    492|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  19.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  19.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  19.5k|            auto rd = make_reader<T, char_type>();
 6195|  19.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  19.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 19.5k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  19.5k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  19.5k|                return impl(rd, range, value);
 6202|  19.5k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  19.5k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  19.5k|    {
 6113|  19.5k|        const bool need_skipped_width =
 6114|  19.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 19.5k]
  |  Branch (6114:33): [True: 0, False: 19.5k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  19.5k|        auto it = rng.begin();
 6118|  19.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  19.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 19.5k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  19.5k|        else {
 6127|  19.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 290, False: 19.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    290|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    290|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    290|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    290|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    290|    }                                                  \
  |  |  |  | 3667|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  19.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  19.2k|        }
 6130|  19.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  19.2k|        std::ptrdiff_t value_width = 0;
 6134|  19.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 19.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  19.2k|        else {
 6150|  19.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  19.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  19.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 576]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.6k|    }                                                  \
  |  | 3667|  19.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    576|                                             specs, value, loc));
 6152|       |
 6153|    576|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 576]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    576|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    576|        std::ptrdiff_t postfix_width = 0;
 6162|    576|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 436, False: 140]
  ------------------
 6163|    436|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    436|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    436|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    436|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    436|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 436]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    436|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    436|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    436|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    436|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    436|                                 value_width));
 6167|    436|            std::tie(it, postfix_width) = postfix_result;
 6168|    436|        }
 6169|       |
 6170|    576|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    576|                                                 value_width, postfix_width);
 6172|    576|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 576]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    576|        return it;
 6177|    576|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  19.2k|    {
 3528|  19.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  19.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  19.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  19.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 256, False: 18.9k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    256|            else {
 3539|    256|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 256]
  ------------------
 3540|    256|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    256|            }
 3546|    256|        }
 3547|       |
 3548|  19.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 54, False: 19.1k]
  ------------------
 3549|     54|            value = T{0};
 3550|     54|            return std::next(prefix_result.iterator);
 3551|     54|        }
 3552|       |
 3553|  19.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  19.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.9k, False: 3.21k]
  |  |  ------------------
  ------------------
 3554|  15.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.5k, False: 424]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.5k|    }                                                  \
  |  |  |  | 3667|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    424|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    424|                    parse_integer_digits_without_thsep(
 3556|    424|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    424|                        prefix_result.parsed_base));
 3558|       |
 3559|    424|            auto buf = make_contiguous_buffer(
 3560|    424|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    424|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    424|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    424|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    424|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    424|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 414]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|    424|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    414|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    414|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    414|                                        prefix_result.parsed_base));
 3564|       |
 3565|    414|            return ranges::next(
 3566|    414|                prefix_result.iterator,
 3567|    414|                ranges::distance(buf.view().begin(), result_it));
 3568|    424|        }
 3569|       |
 3570|  3.21k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.21k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.21k|#endif
 3576|       |
 3577|  3.21k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.08k, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.08k|    }                                                  \
  |  |  |  | 3667|  3.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    126|                parse_integer_digits_with_thsep(
 3579|    126|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    126|                    prefix_result.parsed_base, locale_options));
 3581|    126|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    126|            parse_digits_result;
 3583|       |
 3584|    126|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 18, False: 108]
  ------------------
 3585|     18|            if (auto e = check_thsep_grouping(
 3586|     18|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     18|                    thsep_indices, locale_options.grouping);
 3588|     18|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 3589|     18|                return unexpected(e);
 3590|     18|            }
 3591|     18|        }
 3592|       |
 3593|    108|        auto nothsep_source_view =
 3594|    108|            std::basic_string_view<CharT>{nothsep_source};
 3595|    108|        SCN_TRY(
  ------------------
  |  | 3668|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    108|            nothsep_source_it,
 3597|    108|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    108|                                prefix_result.parsed_base));
 3599|       |
 3600|    108|        return ranges::next(
 3601|    108|            prefix_result.iterator,
 3602|    108|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    108|                ranges::ssize(thsep_indices));
 3604|    108|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  19.2k|    {
 3528|  19.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  19.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  19.2k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  19.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 256, False: 18.9k]
  ------------------
 3532|       |            if constexpr (!std::is_signed_v<T>) {
 3533|       |                return unexpected_scan_error(
 3534|       |                    scan_error::invalid_scanned_value,
 3535|       |                    "Unexpected '-' sign when parsing an "
 3536|       |                    "unsigned value");
 3537|       |            }
 3538|    256|            else {
 3539|    256|                if (specs.type ==
  ------------------
  |  Branch (3539:21): [True: 0, False: 256]
  ------------------
 3540|    256|                    detail::presentation_type::int_unsigned_decimal) {
 3541|      0|                    return unexpected_scan_error(
 3542|      0|                        scan_error::invalid_scanned_value,
 3543|      0|                        "'u'-option disallows negative values");
 3544|      0|                }
 3545|    256|            }
 3546|    256|        }
 3547|       |
 3548|  19.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 54, False: 19.1k]
  ------------------
 3549|     54|            value = T{0};
 3550|     54|            return std::next(prefix_result.iterator);
 3551|     54|        }
 3552|       |
 3553|  19.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  19.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.9k, False: 3.21k]
  |  |  ------------------
  ------------------
 3554|  15.9k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     30|    }                                                  \
  |  |  |  | 3667|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  15.9k|                    parse_integer_digits_without_thsep(
 3556|  15.9k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  15.9k|                        prefix_result.parsed_base));
 3558|       |
 3559|  15.9k|            auto buf = make_contiguous_buffer(
 3560|  15.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  15.9k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.5k, False: 414]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.5k|    }                                                  \
  |  |  |  | 3667|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    414|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    414|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    414|                                        prefix_result.parsed_base));
 3564|       |
 3565|    414|            return ranges::next(
 3566|    414|                prefix_result.iterator,
 3567|    414|                ranges::distance(buf.view().begin(), result_it));
 3568|  15.9k|        }
 3569|       |
 3570|  3.21k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.21k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.21k|#endif
 3576|       |
 3577|  3.21k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.21k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.21k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.21k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.21k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.08k, False: 126]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.08k|    }                                                  \
  |  |  |  | 3667|  3.21k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    126|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    126|                parse_integer_digits_with_thsep(
 3579|    126|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    126|                    prefix_result.parsed_base, locale_options));
 3581|    126|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    126|            parse_digits_result;
 3583|       |
 3584|    126|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 18, False: 108]
  ------------------
 3585|     18|            if (auto e = check_thsep_grouping(
 3586|     18|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     18|                    thsep_indices, locale_options.grouping);
 3588|     18|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     18|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18, False: 0]
  |  |  ------------------
  ------------------
 3589|     18|                return unexpected(e);
 3590|     18|            }
 3591|     18|        }
 3592|       |
 3593|    108|        auto nothsep_source_view =
 3594|    108|            std::basic_string_view<CharT>{nothsep_source};
 3595|    108|        SCN_TRY(
  ------------------
  |  | 3668|    108|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    108|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    108|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    108|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 108]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    108|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    108|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    108|            nothsep_source_it,
 3597|    108|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    108|                                prefix_result.parsed_base));
 3599|       |
 3600|    108|        return ranges::next(
 3601|    108|            prefix_result.iterator,
 3602|    108|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    108|                ranges::ssize(thsep_indices));
 3604|    108|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  19.2k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  19.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  19.2k|            auto rd = make_reader<T, char_type>();
 6195|  19.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.2k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  19.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 19.2k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  19.2k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  19.2k|                return impl(rd, range, value);
 6202|  19.2k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  19.2k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  19.2k|    {
 6113|  19.2k|        const bool need_skipped_width =
 6114|  19.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 19.2k]
  |  Branch (6114:33): [True: 0, False: 19.2k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  19.2k|        auto it = rng.begin();
 6118|  19.2k|        std::ptrdiff_t prefix_width = 0;
 6119|  19.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 19.2k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  19.2k|        else {
 6127|  19.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  19.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 246, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    246|    }                                                  \
  |  |  |  | 3667|  19.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  19.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  19.0k|        }
 6130|  19.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  19.0k|        std::ptrdiff_t value_width = 0;
 6134|  19.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 19.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  19.0k|        else {
 6150|  19.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 346]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.6k|    }                                                  \
  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    346|                                             specs, value, loc));
 6152|       |
 6153|    346|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 346]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    346|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    346|        std::ptrdiff_t postfix_width = 0;
 6162|    346|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 250, False: 96]
  ------------------
 6163|    250|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    250|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    250|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    250|                                 value_width));
 6167|    250|            std::tie(it, postfix_width) = postfix_result;
 6168|    250|        }
 6169|       |
 6170|    346|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    346|                                                 value_width, postfix_width);
 6172|    346|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 346]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    346|        return it;
 6177|    346|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  19.0k|    {
 3528|  19.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  19.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  19.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  19.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 224, False: 18.8k]
  ------------------
 3532|    224|            if constexpr (!std::is_signed_v<T>) {
 3533|    224|                return unexpected_scan_error(
 3534|    224|                    scan_error::invalid_scanned_value,
 3535|    224|                    "Unexpected '-' sign when parsing an "
 3536|    224|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    224|        }
 3547|       |
 3548|  19.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 44, False: 18.9k]
  ------------------
 3549|     44|            value = T{0};
 3550|     44|            return std::next(prefix_result.iterator);
 3551|     44|        }
 3552|       |
 3553|  18.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  18.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.6k, False: 3.35k]
  |  |  ------------------
  ------------------
 3554|  15.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.3k, False: 322]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.3k|    }                                                  \
  |  |  |  | 3667|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    322|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    322|                    parse_integer_digits_without_thsep(
 3556|    322|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    322|                        prefix_result.parsed_base));
 3558|       |
 3559|    322|            auto buf = make_contiguous_buffer(
 3560|    322|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    322|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    322|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    322|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    322|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    322|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 70, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     70|    }                                                  \
  |  |  |  | 3667|    322|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    252|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    252|                                        prefix_result.parsed_base));
 3564|       |
 3565|    252|            return ranges::next(
 3566|    252|                prefix_result.iterator,
 3567|    252|                ranges::distance(buf.view().begin(), result_it));
 3568|    322|        }
 3569|       |
 3570|  3.35k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.35k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.35k|#endif
 3576|       |
 3577|  3.35k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.04k, False: 312]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.04k|    }                                                  \
  |  |  |  | 3667|  3.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    312|                parse_integer_digits_with_thsep(
 3579|    312|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    312|                    prefix_result.parsed_base, locale_options));
 3581|    312|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    312|            parse_digits_result;
 3583|       |
 3584|    312|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 16, False: 296]
  ------------------
 3585|     16|            if (auto e = check_thsep_grouping(
 3586|     16|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     16|                    thsep_indices, locale_options.grouping);
 3588|     16|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3589|     16|                return unexpected(e);
 3590|     16|            }
 3591|     16|        }
 3592|       |
 3593|    296|        auto nothsep_source_view =
 3594|    296|            std::basic_string_view<CharT>{nothsep_source};
 3595|    296|        SCN_TRY(
  ------------------
  |  | 3668|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    274|            nothsep_source_it,
 3597|    274|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    274|                                prefix_result.parsed_base));
 3599|       |
 3600|    274|        return ranges::next(
 3601|    274|            prefix_result.iterator,
 3602|    274|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    274|                ranges::ssize(thsep_indices));
 3604|    296|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  19.0k|    {
 3528|  19.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  19.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  19.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  19.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 224, False: 18.8k]
  ------------------
 3532|    224|            if constexpr (!std::is_signed_v<T>) {
 3533|    224|                return unexpected_scan_error(
 3534|    224|                    scan_error::invalid_scanned_value,
 3535|    224|                    "Unexpected '-' sign when parsing an "
 3536|    224|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    224|        }
 3547|       |
 3548|  19.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 44, False: 18.9k]
  ------------------
 3549|     44|            value = T{0};
 3550|     44|            return std::next(prefix_result.iterator);
 3551|     44|        }
 3552|       |
 3553|  18.9k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  18.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.6k, False: 3.35k]
  |  |  ------------------
  ------------------
 3554|  15.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  15.6k|                    parse_integer_digits_without_thsep(
 3556|  15.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  15.6k|                        prefix_result.parsed_base));
 3558|       |
 3559|  15.6k|            auto buf = make_contiguous_buffer(
 3560|  15.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  15.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.3k, False: 252]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.3k|    }                                                  \
  |  |  |  | 3667|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    252|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    252|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    252|                                        prefix_result.parsed_base));
 3564|       |
 3565|    252|            return ranges::next(
 3566|    252|                prefix_result.iterator,
 3567|    252|                ranges::distance(buf.view().begin(), result_it));
 3568|  15.6k|        }
 3569|       |
 3570|  3.35k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.35k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.35k|#endif
 3576|       |
 3577|  3.35k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.35k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.35k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.35k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.35k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.04k, False: 312]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.04k|    }                                                  \
  |  |  |  | 3667|  3.35k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    312|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    312|                parse_integer_digits_with_thsep(
 3579|    312|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    312|                    prefix_result.parsed_base, locale_options));
 3581|    312|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    312|            parse_digits_result;
 3583|       |
 3584|    312|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 16, False: 296]
  ------------------
 3585|     16|            if (auto e = check_thsep_grouping(
 3586|     16|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     16|                    thsep_indices, locale_options.grouping);
 3588|     16|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3589|     16|                return unexpected(e);
 3590|     16|            }
 3591|     16|        }
 3592|       |
 3593|    296|        auto nothsep_source_view =
 3594|    296|            std::basic_string_view<CharT>{nothsep_source};
 3595|    296|        SCN_TRY(
  ------------------
  |  | 3668|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 22, False: 274]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     22|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     22|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     22|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     22|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     22|    }                                                  \
  |  |  |  | 3667|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    274|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    274|            nothsep_source_it,
 3597|    274|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    274|                                prefix_result.parsed_base));
 3599|       |
 3600|    274|        return ranges::next(
 3601|    274|            prefix_result.iterator,
 3602|    274|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    274|                ranges::ssize(thsep_indices));
 3604|    296|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  19.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  19.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  19.3k|            auto rd = make_reader<T, char_type>();
 6195|  19.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  19.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 19.3k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  19.3k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  19.3k|                return impl(rd, range, value);
 6202|  19.3k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  19.3k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  19.3k|    {
 6113|  19.3k|        const bool need_skipped_width =
 6114|  19.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 19.3k]
  |  Branch (6114:33): [True: 0, False: 19.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  19.3k|        auto it = rng.begin();
 6118|  19.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  19.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 19.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  19.3k|        else {
 6127|  19.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  19.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 246, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    246|    }                                                  \
  |  |  |  | 3667|  19.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  19.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  19.0k|        }
 6130|  19.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  19.0k|        std::ptrdiff_t value_width = 0;
 6134|  19.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 19.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  19.0k|        else {
 6150|  19.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 392]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.6k|    }                                                  \
  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    392|                                             specs, value, loc));
 6152|       |
 6153|    392|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 392]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    392|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    392|        std::ptrdiff_t postfix_width = 0;
 6162|    392|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 296, False: 96]
  ------------------
 6163|    296|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    296|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    296|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    296|                                 value_width));
 6167|    296|            std::tie(it, postfix_width) = postfix_result;
 6168|    296|        }
 6169|       |
 6170|    392|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    392|                                                 value_width, postfix_width);
 6172|    392|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 392]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    392|        return it;
 6177|    392|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  19.0k|    {
 3528|  19.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  19.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  19.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  19.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 224, False: 18.8k]
  ------------------
 3532|    224|            if constexpr (!std::is_signed_v<T>) {
 3533|    224|                return unexpected_scan_error(
 3534|    224|                    scan_error::invalid_scanned_value,
 3535|    224|                    "Unexpected '-' sign when parsing an "
 3536|    224|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    224|        }
 3547|       |
 3548|  19.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 44, False: 19.0k]
  ------------------
 3549|     44|            value = T{0};
 3550|     44|            return std::next(prefix_result.iterator);
 3551|     44|        }
 3552|       |
 3553|  19.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  19.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.6k, False: 3.36k]
  |  |  ------------------
  ------------------
 3554|  15.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.3k, False: 328]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.3k|    }                                                  \
  |  |  |  | 3667|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    328|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    328|                    parse_integer_digits_without_thsep(
 3556|    328|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    328|                        prefix_result.parsed_base));
 3558|       |
 3559|    328|            auto buf = make_contiguous_buffer(
 3560|    328|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    328|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    328|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    328|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    328|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    328|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     42|    }                                                  \
  |  |  |  | 3667|    328|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    286|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    286|                                        prefix_result.parsed_base));
 3564|       |
 3565|    286|            return ranges::next(
 3566|    286|                prefix_result.iterator,
 3567|    286|                ranges::distance(buf.view().begin(), result_it));
 3568|    328|        }
 3569|       |
 3570|  3.36k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.36k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.36k|#endif
 3576|       |
 3577|  3.36k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.05k, False: 314]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.05k|    }                                                  \
  |  |  |  | 3667|  3.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    314|                parse_integer_digits_with_thsep(
 3579|    314|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    314|                    prefix_result.parsed_base, locale_options));
 3581|    314|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    314|            parse_digits_result;
 3583|       |
 3584|    314|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 16, False: 298]
  ------------------
 3585|     16|            if (auto e = check_thsep_grouping(
 3586|     16|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     16|                    thsep_indices, locale_options.grouping);
 3588|     16|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3589|     16|                return unexpected(e);
 3590|     16|            }
 3591|     16|        }
 3592|       |
 3593|    298|        auto nothsep_source_view =
 3594|    298|            std::basic_string_view<CharT>{nothsep_source};
 3595|    298|        SCN_TRY(
  ------------------
  |  | 3668|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    286|            nothsep_source_it,
 3597|    286|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    286|                                prefix_result.parsed_base));
 3599|       |
 3600|    286|        return ranges::next(
 3601|    286|            prefix_result.iterator,
 3602|    286|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    286|                ranges::ssize(thsep_indices));
 3604|    298|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  19.0k|    {
 3528|  19.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  19.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  19.0k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  19.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 224, False: 18.8k]
  ------------------
 3532|    224|            if constexpr (!std::is_signed_v<T>) {
 3533|    224|                return unexpected_scan_error(
 3534|    224|                    scan_error::invalid_scanned_value,
 3535|    224|                    "Unexpected '-' sign when parsing an "
 3536|    224|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    224|        }
 3547|       |
 3548|  19.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 44, False: 19.0k]
  ------------------
 3549|     44|            value = T{0};
 3550|     44|            return std::next(prefix_result.iterator);
 3551|     44|        }
 3552|       |
 3553|  19.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  19.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.6k, False: 3.36k]
  |  |  ------------------
  ------------------
 3554|  15.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  15.6k|                    parse_integer_digits_without_thsep(
 3556|  15.6k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  15.6k|                        prefix_result.parsed_base));
 3558|       |
 3559|  15.6k|            auto buf = make_contiguous_buffer(
 3560|  15.6k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  15.6k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.3k, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.3k|    }                                                  \
  |  |  |  | 3667|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    286|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    286|                                        prefix_result.parsed_base));
 3564|       |
 3565|    286|            return ranges::next(
 3566|    286|                prefix_result.iterator,
 3567|    286|                ranges::distance(buf.view().begin(), result_it));
 3568|  15.6k|        }
 3569|       |
 3570|  3.36k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.36k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.36k|#endif
 3576|       |
 3577|  3.36k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.36k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.36k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.36k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.05k, False: 314]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.05k|    }                                                  \
  |  |  |  | 3667|  3.36k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    314|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    314|                parse_integer_digits_with_thsep(
 3579|    314|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    314|                    prefix_result.parsed_base, locale_options));
 3581|    314|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    314|            parse_digits_result;
 3583|       |
 3584|    314|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 16, False: 298]
  ------------------
 3585|     16|            if (auto e = check_thsep_grouping(
 3586|     16|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     16|                    thsep_indices, locale_options.grouping);
 3588|     16|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3589|     16|                return unexpected(e);
 3590|     16|            }
 3591|     16|        }
 3592|       |
 3593|    298|        auto nothsep_source_view =
 3594|    298|            std::basic_string_view<CharT>{nothsep_source};
 3595|    298|        SCN_TRY(
  ------------------
  |  | 3668|    298|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    298|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    298|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    298|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 286]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|    298|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    286|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    286|            nothsep_source_it,
 3597|    286|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    286|                                prefix_result.parsed_base));
 3599|       |
 3600|    286|        return ranges::next(
 3601|    286|            prefix_result.iterator,
 3602|    286|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    286|                ranges::ssize(thsep_indices));
 3604|    298|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  19.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  19.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  19.3k|            auto rd = make_reader<T, char_type>();
 6195|  19.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|  19.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 19.3k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  19.3k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  19.3k|                return impl(rd, range, value);
 6202|  19.3k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  19.3k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|  19.3k|    {
 6113|  19.3k|        const bool need_skipped_width =
 6114|  19.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 19.3k]
  |  Branch (6114:33): [True: 0, False: 19.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  19.3k|        auto it = rng.begin();
 6118|  19.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  19.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 19.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  19.3k|        else {
 6127|  19.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  19.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 246, False: 19.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    246|    }                                                  \
  |  |  |  | 3667|  19.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  19.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  19.1k|        }
 6130|  19.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  19.1k|        std::ptrdiff_t value_width = 0;
 6134|  19.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 19.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  19.1k|        else {
 6150|  19.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 458]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.6k|    }                                                  \
  |  | 3667|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    458|                                             specs, value, loc));
 6152|       |
 6153|    458|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 458]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    458|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    458|        std::ptrdiff_t postfix_width = 0;
 6162|    458|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 362, False: 96]
  ------------------
 6163|    362|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 362]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    362|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    362|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    362|                                 value_width));
 6167|    362|            std::tie(it, postfix_width) = postfix_result;
 6168|    362|        }
 6169|       |
 6170|    458|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    458|                                                 value_width, postfix_width);
 6172|    458|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 458]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    458|        return it;
 6177|    458|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 3527|  19.1k|    {
 3528|  19.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  19.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  19.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  19.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 240, False: 18.9k]
  ------------------
 3532|    240|            if constexpr (!std::is_signed_v<T>) {
 3533|    240|                return unexpected_scan_error(
 3534|    240|                    scan_error::invalid_scanned_value,
 3535|    240|                    "Unexpected '-' sign when parsing an "
 3536|    240|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    240|        }
 3547|       |
 3548|  19.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 44, False: 19.1k]
  ------------------
 3549|     44|            value = T{0};
 3550|     44|            return std::next(prefix_result.iterator);
 3551|     44|        }
 3552|       |
 3553|  19.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  19.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.7k, False: 3.39k]
  |  |  ------------------
  ------------------
 3554|  15.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.3k, False: 340]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.3k|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    340|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|    340|                    parse_integer_digits_without_thsep(
 3556|    340|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|    340|                        prefix_result.parsed_base));
 3558|       |
 3559|    340|            auto buf = make_contiguous_buffer(
 3560|    340|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|    340|            SCN_TRY(result_it,
  ------------------
  |  | 3668|    340|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    340|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    340|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    340|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      4|    }                                                  \
  |  |  |  | 3667|    340|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    336|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    336|                                        prefix_result.parsed_base));
 3564|       |
 3565|    336|            return ranges::next(
 3566|    336|                prefix_result.iterator,
 3567|    336|                ranges::distance(buf.view().begin(), result_it));
 3568|    340|        }
 3569|       |
 3570|  3.39k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.39k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.39k|#endif
 3576|       |
 3577|  3.39k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.05k, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.05k|    }                                                  \
  |  |  |  | 3667|  3.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    334|                parse_integer_digits_with_thsep(
 3579|    334|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    334|                    prefix_result.parsed_base, locale_options));
 3581|    334|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    334|            parse_digits_result;
 3583|       |
 3584|    334|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 16, False: 318]
  ------------------
 3585|     16|            if (auto e = check_thsep_grouping(
 3586|     16|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     16|                    thsep_indices, locale_options.grouping);
 3588|     16|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3589|     16|                return unexpected(e);
 3590|     16|            }
 3591|     16|        }
 3592|       |
 3593|    318|        auto nothsep_source_view =
 3594|    318|            std::basic_string_view<CharT>{nothsep_source};
 3595|    318|        SCN_TRY(
  ------------------
  |  | 3668|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    318|            nothsep_source_it,
 3597|    318|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    318|                                prefix_result.parsed_base));
 3599|       |
 3600|    318|        return ranges::next(
 3601|    318|            prefix_result.iterator,
 3602|    318|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    318|                ranges::ssize(thsep_indices));
 3604|    318|    }
_ZN3scn2v34impl19reader_impl_for_intIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 3527|  19.1k|    {
 3528|  19.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base())
  ------------------
  |  | 3668|  19.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3529|  19.1k|                                   .transform_error(make_eof_scan_error));
 3530|       |
 3531|  19.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3531:13): [True: 240, False: 18.9k]
  ------------------
 3532|    240|            if constexpr (!std::is_signed_v<T>) {
 3533|    240|                return unexpected_scan_error(
 3534|    240|                    scan_error::invalid_scanned_value,
 3535|    240|                    "Unexpected '-' sign when parsing an "
 3536|    240|                    "unsigned value");
 3537|       |            }
 3538|       |            else {
 3539|       |                if (specs.type ==
 3540|       |                    detail::presentation_type::int_unsigned_decimal) {
 3541|       |                    return unexpected_scan_error(
 3542|       |                        scan_error::invalid_scanned_value,
 3543|       |                        "'u'-option disallows negative values");
 3544|       |                }
 3545|       |            }
 3546|    240|        }
 3547|       |
 3548|  19.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3548:13): [True: 44, False: 19.1k]
  ------------------
 3549|     44|            value = T{0};
 3550|     44|            return std::next(prefix_result.iterator);
 3551|     44|        }
 3552|       |
 3553|  19.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  858|  19.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 15.7k, False: 3.39k]
  |  |  ------------------
  ------------------
 3554|  15.7k|            SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     10|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     10|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     10|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     10|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     10|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3555|  15.7k|                    parse_integer_digits_without_thsep(
 3556|  15.7k|                        ranges::subrange{prefix_result.iterator, range.end()},
 3557|  15.7k|                        prefix_result.parsed_base));
 3558|       |
 3559|  15.7k|            auto buf = make_contiguous_buffer(
 3560|  15.7k|                ranges::subrange{prefix_result.iterator, after_digits_it});
 3561|  15.7k|            SCN_TRY(result_it,
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.3k, False: 336]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.3k|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    336|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3562|    336|                    parse_integer_value(buf.view(), value, prefix_result.sign,
 3563|    336|                                        prefix_result.parsed_base));
 3564|       |
 3565|    336|            return ranges::next(
 3566|    336|                prefix_result.iterator,
 3567|    336|                ranges::distance(buf.view().begin(), result_it));
 3568|  15.7k|        }
 3569|       |
 3570|  3.39k|        auto locale_options =
 3571|       |#if SCN_DISABLE_LOCALE
 3572|       |            localized_number_formatting_options<CharT>{};
 3573|       |#else
 3574|  3.39k|            localized_number_formatting_options<CharT>{loc};
 3575|  3.39k|#endif
 3576|       |
 3577|  3.39k|        SCN_TRY(parse_digits_result,
  ------------------
  |  | 3668|  3.39k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.39k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.39k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.39k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.05k, False: 334]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.05k|    }                                                  \
  |  |  |  | 3667|  3.39k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    334|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3578|    334|                parse_integer_digits_with_thsep(
 3579|    334|                    ranges::subrange{prefix_result.iterator, range.end()},
 3580|    334|                    prefix_result.parsed_base, locale_options));
 3581|    334|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
 3582|    334|            parse_digits_result;
 3583|       |
 3584|    334|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (3584:13): [True: 16, False: 318]
  ------------------
 3585|     16|            if (auto e = check_thsep_grouping(
 3586|     16|                    ranges::subrange{prefix_result.iterator, after_digits_it},
 3587|     16|                    thsep_indices, locale_options.grouping);
 3588|     16|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     16|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 3589|     16|                return unexpected(e);
 3590|     16|            }
 3591|     16|        }
 3592|       |
 3593|    318|        auto nothsep_source_view =
 3594|    318|            std::basic_string_view<CharT>{nothsep_source};
 3595|    318|        SCN_TRY(
  ------------------
  |  | 3668|    318|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    318|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    318|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    318|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 318]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    318|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    318|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3596|    318|            nothsep_source_it,
 3597|    318|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
 3598|    318|                                prefix_result.parsed_base));
 3599|       |
 3600|    318|        return ranges::next(
 3601|    318|            prefix_result.iterator,
 3602|    318|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
 3603|    318|                ranges::ssize(thsep_indices));
 3604|    318|    }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   145k|{
 2049|   145k|    auto it = range.begin();
 2050|   147k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 145k, False: 1.81k]
  ------------------
 2051|   145k|        const auto val =
 2052|   145k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   145k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 145k, False: 0]
  |  |  ------------------
  ------------------
 2054|   145k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   145k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   145k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 143k, False: 2.41k]
  ------------------
 2057|   143k|                return it;
 2058|   143k|            }
 2059|   145k|        }
 2060|  2.41k|        it = val.iterator;
 2061|  2.41k|    }
 2062|       |
 2063|  1.81k|    return it;
 2064|   145k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|   145k|{
 1887|   145k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   145k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   145k|    auto it = range.begin();
 1891|   145k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   145k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 145k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   145k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 145k, False: 0]
  ------------------
 1900|   145k|        ++it;
 1901|   145k|        return {it, string_type(1, *range.begin())};
 1902|   145k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   145k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|   145k|    {
 1878|   145k|        return !codepoint.empty();
 1879|   145k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   145k|{
 2070|   145k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   145k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   145k|{
 2940|   145k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 145k, False: 0]
  ------------------
 2941|   145k|        auto it = read_while_classic_space(range);
 2942|   145k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   145k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.81k, False: 143k]
  |  |  ------------------
  ------------------
 2944|  1.81k|            return unexpected(e);
 2945|  1.81k|        }
 2946|       |
 2947|   143k|        return it;
 2948|   145k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   145k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   145k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   145k|    else {
 2114|   145k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   145k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   145k|            return detail::is_cp_space(cp);
 2127|   145k|        });
 2128|   145k|    }
 2129|   145k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   145k|        : m_fptr([](storage fn,
  743|   145k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   145k|              cvref<T> obj = *get<T>(fn);
  745|   145k|              if constexpr (std::is_void_v<R>) {
  746|   145k|                  obj(static_cast<decltype(args)>(args)...);
  747|   145k|              }
  748|   145k|              else {
  749|   145k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   145k|              }
  751|   145k|          }),
  752|   145k|          m_storage(std::addressof(f))
  753|   145k|    {
  754|   145k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   145k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   145k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   145k|              else {
  749|   145k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   145k|              }
  751|   145k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   145k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   145k|        else if constexpr (std::is_object_v<T>) {
  688|   145k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   145k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   145k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   145k|            return detail::is_cp_space(cp);
 2127|   145k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   145k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   145k|        {
  662|   145k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
 5859|  17.4k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  17.4k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  17.4k|            auto rd = make_reader<T, char_type>();
 5865|  17.4k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  17.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  17.4k|    {
 5852|  17.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  17.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 426, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    426|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    426|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    426|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    426|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    426|    }                                                  \
  |  |  |  | 3667|  17.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  16.9k|                        .transform_error(make_eof_scan_error));
 5854|  16.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  17.4k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   104k|{
 5784|   104k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 102k]
  |  |  ------------------
  ------------------
 5785|  2.00k|        return unexpected(e);
 5786|  2.00k|    }
 5787|       |
 5788|   102k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 102k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   102k|    return skip_classic_whitespace(range);
 5793|   102k|}
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  16.9k|    {
 3517|  16.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  16.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  16.9k|        return read_default_with_base(range, value, 10);
 3519|  16.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 5859|  20.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  20.1k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  20.1k|            auto rd = make_reader<T, char_type>();
 5865|  20.1k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  20.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  20.1k|    {
 5852|  20.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  20.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  20.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  20.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 558, False: 19.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    558|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    558|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    558|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    558|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    558|    }                                                  \
  |  |  |  | 3667|  20.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  19.6k|                        .transform_error(make_eof_scan_error));
 5854|  19.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  20.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  19.6k|    {
 3517|  19.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  19.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  19.6k|        return read_default_with_base(range, value, 10);
 3519|  19.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
 5859|  20.5k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  20.5k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  20.5k|            auto rd = make_reader<T, char_type>();
 5865|  20.5k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  20.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  20.5k|    {
 5852|  20.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  20.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  20.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  20.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 609, False: 19.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    609|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    609|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    609|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    609|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    609|    }                                                  \
  |  |  |  | 3667|  20.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  19.9k|                        .transform_error(make_eof_scan_error));
 5854|  19.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  20.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  19.9k|    {
 3517|  19.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  19.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  19.9k|        return read_default_with_base(range, value, 10);
 3519|  19.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
 5859|  14.4k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  14.4k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  14.4k|            auto rd = make_reader<T, char_type>();
 5865|  14.4k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  14.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  14.4k|    {
 5852|  14.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 291, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    291|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    291|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    291|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    291|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    291|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.1k|                        .transform_error(make_eof_scan_error));
 5854|  14.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  14.4k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  14.1k|    {
 3517|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.1k|        return read_default_with_base(range, value, 10);
 3519|  14.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 5859|  16.0k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  16.0k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  16.0k|            auto rd = make_reader<T, char_type>();
 5865|  16.0k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  16.0k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  16.0k|    {
 5852|  16.0k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  16.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 369, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    369|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    369|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    369|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    369|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    369|    }                                                  \
  |  |  |  | 3667|  16.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  15.6k|                        .transform_error(make_eof_scan_error));
 5854|  15.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  16.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  15.6k|    {
 3517|  15.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  15.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  15.6k|        return read_default_with_base(range, value, 10);
 3519|  15.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
 5859|  16.2k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  16.2k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  16.2k|            auto rd = make_reader<T, char_type>();
 5865|  16.2k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  16.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  16.2k|    {
 5852|  16.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  16.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 399, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    399|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    399|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    399|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    399|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    399|    }                                                  \
  |  |  |  | 3667|  16.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  15.8k|                        .transform_error(make_eof_scan_error));
 5854|  15.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  16.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  15.8k|    {
 3517|  15.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  15.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  15.8k|        return read_default_with_base(range, value, 10);
 3519|  15.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  17.3k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  17.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  17.3k|            auto rd = make_reader<T, char_type>();
 5869|  17.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 17.3k, False: 0]
  ------------------
 5870|  17.3k|                return impl(rd, range, value);
 5871|  17.3k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  17.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  17.3k|    {
 5852|  17.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  17.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 402, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    402|    }                                                  \
  |  |  |  | 3667|  17.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  16.9k|                        .transform_error(make_eof_scan_error));
 5854|  16.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  17.3k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   103k|{
 5784|   103k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.99k, False: 101k]
  |  |  ------------------
  ------------------
 5785|  1.99k|        return unexpected(e);
 5786|  1.99k|    }
 5787|       |
 5788|   101k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 101k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   101k|    return skip_classic_whitespace(range);
 5793|   101k|}
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  16.9k|    {
 3517|  16.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  16.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  16.9k|        return read_default_with_base(range, value, 10);
 3519|  16.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  16.9k|    {
 3481|  16.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  16.9k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  16.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 16.9k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  32.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.28k, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.28k|    }                                                  \
  |  |  |  | 3667|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  32.6k|                parse_integer_digits_without_thsep(
 3500|  32.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  32.6k|                    prefix_result.parsed_base));
 3502|       |
 3503|  32.6k|        auto buf = make_contiguous_buffer(
 3504|  32.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  32.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 684, False: 15.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    684|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    684|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    684|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    684|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    684|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  15.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  15.0k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  15.0k|        return ranges::next(prefix_result.iterator,
 3510|  15.0k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  32.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  19.5k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  19.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  19.5k|            auto rd = make_reader<T, char_type>();
 5869|  19.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 19.5k, False: 0]
  ------------------
 5870|  19.5k|                return impl(rd, range, value);
 5871|  19.5k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  19.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  19.5k|    {
 5852|  19.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 525, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    525|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    525|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    525|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    525|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    525|    }                                                  \
  |  |  |  | 3667|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  19.0k|                        .transform_error(make_eof_scan_error));
 5854|  19.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  19.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  19.0k|    {
 3517|  19.0k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  19.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  19.0k|        return read_default_with_base(range, value, 10);
 3519|  19.0k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  19.0k|    {
 3481|  19.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  19.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  19.0k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  19.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 19.0k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  36.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  19.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.50k|    }                                                  \
  |  |  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  36.6k|                parse_integer_digits_without_thsep(
 3500|  36.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  36.6k|                    prefix_result.parsed_base));
 3502|       |
 3503|  36.6k|        auto buf = make_contiguous_buffer(
 3504|  36.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  36.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  17.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 339, False: 17.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    339|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    339|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    339|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    339|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    339|    }                                                  \
  |  |  |  | 3667|  17.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  17.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  17.2k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  17.2k|        return ranges::next(prefix_result.iterator,
 3510|  17.2k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  36.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  19.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  19.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  19.9k|            auto rd = make_reader<T, char_type>();
 5869|  19.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 19.9k, False: 0]
  ------------------
 5870|  19.9k|                return impl(rd, range, value);
 5871|  19.9k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  19.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  19.9k|    {
 5852|  19.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  19.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 573, False: 19.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    573|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    573|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    573|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    573|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    573|    }                                                  \
  |  |  |  | 3667|  19.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  19.3k|                        .transform_error(make_eof_scan_error));
 5854|  19.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  19.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  19.3k|    {
 3517|  19.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  19.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  19.3k|        return read_default_with_base(range, value, 10);
 3519|  19.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  19.3k|    {
 3481|  19.3k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  19.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  19.3k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  19.3k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 19.3k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  37.0k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  19.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.59k, False: 17.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.59k|    }                                                  \
  |  |  |  | 3667|  19.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  37.0k|                parse_integer_digits_without_thsep(
 3500|  37.0k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  37.0k|                    prefix_result.parsed_base));
 3502|       |
 3503|  37.0k|        auto buf = make_contiguous_buffer(
 3504|  37.0k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  37.0k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  17.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 204, False: 17.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    204|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    204|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    204|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    204|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    204|    }                                                  \
  |  |  |  | 3667|  17.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  17.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  17.5k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  17.5k|        return ranges::next(prefix_result.iterator,
 3510|  17.5k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  37.0k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  14.3k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  14.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  14.3k|            auto rd = make_reader<T, char_type>();
 5869|  14.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 14.3k, False: 0]
  ------------------
 5870|  14.3k|                return impl(rd, range, value);
 5871|  14.3k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  14.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  14.3k|    {
 5852|  14.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  14.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 276, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    276|    }                                                  \
  |  |  |  | 3667|  14.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  14.1k|                        .transform_error(make_eof_scan_error));
 5854|  14.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  14.3k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  14.1k|    {
 3517|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  14.1k|        return read_default_with_base(range, value, 10);
 3519|  14.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  14.1k|    {
 3481|  14.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.1k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.1k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 867, False: 13.2k]
  ------------------
 3486|    867|                return unexpected_scan_error(
 3487|    867|                    scan_error::invalid_scanned_value,
 3488|    867|                    "Unexpected '-' sign when parsing an "
 3489|    867|                    "unsigned value");
 3490|    867|            }
 3491|  14.1k|        }
 3492|       |
 3493|  14.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.1k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  27.3k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 891, False: 13.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    891|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    891|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    891|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    891|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    891|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  27.3k|                parse_integer_digits_without_thsep(
 3500|  27.3k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  27.3k|                    prefix_result.parsed_base));
 3502|       |
 3503|  27.3k|        auto buf = make_contiguous_buffer(
 3504|  27.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  27.3k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  13.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  13.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  13.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 333, False: 12.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    333|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    333|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    333|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    333|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    333|    }                                                  \
  |  |  |  | 3667|  13.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  12.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  12.8k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  12.8k|        return ranges::next(prefix_result.iterator,
 3510|  12.8k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  27.3k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  15.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  15.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  15.9k|            auto rd = make_reader<T, char_type>();
 5869|  15.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 15.9k, False: 0]
  ------------------
 5870|  15.9k|                return impl(rd, range, value);
 5871|  15.9k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  15.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  15.9k|    {
 5852|  15.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  15.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 348, False: 15.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    348|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    348|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    348|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    348|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    348|    }                                                  \
  |  |  |  | 3667|  15.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  15.5k|                        .transform_error(make_eof_scan_error));
 5854|  15.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  15.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  15.5k|    {
 3517|  15.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  15.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  15.5k|        return read_default_with_base(range, value, 10);
 3519|  15.5k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  15.5k|    {
 3481|  15.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  15.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  15.5k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  15.5k|        if constexpr (!std::is_signed_v<T>) {
 3485|  15.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 885, False: 14.6k]
  ------------------
 3486|    885|                return unexpected_scan_error(
 3487|    885|                    scan_error::invalid_scanned_value,
 3488|    885|                    "Unexpected '-' sign when parsing an "
 3489|    885|                    "unsigned value");
 3490|    885|            }
 3491|  15.5k|        }
 3492|       |
 3493|  15.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 15.5k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  30.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 960, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    960|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    960|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    960|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    960|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    960|    }                                                  \
  |  |  |  | 3667|  15.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  30.1k|                parse_integer_digits_without_thsep(
 3500|  30.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  30.1k|                    prefix_result.parsed_base));
 3502|       |
 3503|  30.1k|        auto buf = make_contiguous_buffer(
 3504|  30.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  30.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 174, False: 14.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    174|    }                                                  \
  |  |  |  | 3667|  14.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  14.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  14.4k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  14.4k|        return ranges::next(prefix_result.iterator,
 3510|  14.4k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  30.1k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  16.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  16.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  16.1k|            auto rd = make_reader<T, char_type>();
 5869|  16.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 16.1k, False: 0]
  ------------------
 5870|  16.1k|                return impl(rd, range, value);
 5871|  16.1k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  16.1k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  16.1k|    {
 5852|  16.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  16.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 378, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    378|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    378|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    378|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    378|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    378|    }                                                  \
  |  |  |  | 3667|  16.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  15.7k|                        .transform_error(make_eof_scan_error));
 5854|  15.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  16.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  15.7k|    {
 3517|  15.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  15.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  15.7k|        return read_default_with_base(range, value, 10);
 3519|  15.7k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  15.7k|    {
 3481|  15.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  15.7k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  15.7k|        if constexpr (!std::is_signed_v<T>) {
 3485|  15.7k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 909, False: 14.8k]
  ------------------
 3486|    909|                return unexpected_scan_error(
 3487|    909|                    scan_error::invalid_scanned_value,
 3488|    909|                    "Unexpected '-' sign when parsing an "
 3489|    909|                    "unsigned value");
 3490|    909|            }
 3491|  15.7k|        }
 3492|       |
 3493|  15.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 15.7k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  30.4k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 978, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    978|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    978|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    978|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    978|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    978|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  30.4k|                parse_integer_digits_without_thsep(
 3500|  30.4k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  30.4k|                    prefix_result.parsed_base));
 3502|       |
 3503|  30.4k|        auto buf = make_contiguous_buffer(
 3504|  30.4k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  30.4k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 102, False: 14.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    102|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    102|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    102|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    102|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    102|    }                                                  \
  |  |  |  | 3667|  14.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  14.6k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  14.6k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  14.6k|        return ranges::next(prefix_result.iterator,
 3510|  14.6k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  30.4k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   389k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   389k|    static_cast<    \
  |  |  929|   389k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   389k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   389k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   389k|          m_current(m_range.begin())
 2867|   389k|    {
 2868|   389k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|  1.05M|    {
 2872|  1.05M|        return m_current;
 2873|  1.05M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   665k|    {
 2877|   665k|        return m_range.end();
 2878|   665k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|   304k|    {
 2892|   304k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   304k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   304k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   304k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   304k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 304k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   304k|        }
 2898|   304k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   304k|    static_cast<    \
  |  |  929|   304k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   304k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   361k|    {
 2882|   361k|        return ranges::subrange{begin(), end()};
 2883|   361k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
 6181|  58.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  58.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  58.3k|            auto rd = make_reader<T, char_type>();
 6187|  58.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 58.3k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  58.3k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  58.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  58.3k|    {
 6113|  58.3k|        const bool need_skipped_width =
 6114|  58.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 58.3k]
  |  Branch (6114:33): [True: 0, False: 58.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  58.3k|        auto it = rng.begin();
 6118|  58.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  58.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 58.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  58.3k|        else {
 6127|  58.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  58.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  58.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  58.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 56.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  58.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  56.9k|            std::tie(it, prefix_width) = prefix_result;
 6129|  56.9k|        }
 6130|  56.9k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  56.9k|        std::ptrdiff_t value_width = 0;
 6134|  56.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 56.9k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  56.9k|        else {
 6150|  56.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  56.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  56.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.05k, False: 48.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  8.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  8.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  8.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  8.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  8.05k|    }                                                  \
  |  | 3667|  56.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  48.9k|                                             specs, value, loc));
 6152|       |
 6153|  48.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 48.9k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  48.9k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  48.9k|        std::ptrdiff_t postfix_width = 0;
 6162|  48.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 47.8k, False: 1.02k]
  ------------------
 6163|  47.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  47.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  47.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  47.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  47.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 47.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  47.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  47.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  47.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  47.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  47.8k|                                 value_width));
 6167|  47.8k|            std::tie(it, postfix_width) = postfix_result;
 6168|  47.8k|        }
 6169|       |
 6170|  48.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  48.9k|                                                 value_width, postfix_width);
 6172|  48.9k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 48.9k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  48.9k|        return it;
 6177|  48.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   361k|    {
 6026|   361k|        const bool need_skipped_width =
 6027|   361k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 361k]
  |  Branch (6027:33): [True: 0, False: 361k]
  ------------------
 6028|   361k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   361k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 361k]
  ------------------
 6032|   361k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 361k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   361k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 361k, False: 0]
  |  Branch (6036:56): [True: 361k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   361k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 361k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   713k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   361k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   361k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   361k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9.14k, False: 352k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  9.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  9.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  9.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  9.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  9.14k|    }                                                  \
  |  |  |  | 3667|   361k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   713k|                            make_eof_scan_error));
 6047|       |
 6048|   713k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 352k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   352k|            return result_type{it, 0};
 6056|   713k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   361k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   297k|    {
 6068|   297k|        const bool need_skipped_width =
 6069|   297k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 297k]
  |  Branch (6069:33): [True: 0, False: 297k]
  ------------------
 6070|   297k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   297k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 297k]
  ------------------
 6073|   297k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 297k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   297k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 297k, False: 0]
  ------------------
 6082|   297k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 297k]
  ------------------
 6083|   297k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   297k|        return result_type{rng.begin(), 0};
 6107|   297k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
 6181|  69.1k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  69.1k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  69.1k|            auto rd = make_reader<T, char_type>();
 6187|  69.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 69.1k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  69.1k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  69.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  69.1k|    {
 6113|  69.1k|        const bool need_skipped_width =
 6114|  69.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 69.1k]
  |  Branch (6114:33): [True: 0, False: 69.1k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  69.1k|        auto it = rng.begin();
 6118|  69.1k|        std::ptrdiff_t prefix_width = 0;
 6119|  69.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 69.1k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  69.1k|        else {
 6127|  69.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  69.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  69.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  69.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.89k, False: 67.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.89k|    }                                                  \
  |  |  |  | 3667|  69.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  67.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  67.2k|        }
 6130|  67.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  67.2k|        std::ptrdiff_t value_width = 0;
 6134|  67.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 67.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  67.2k|        else {
 6150|  67.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  67.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  67.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.57k, False: 59.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.57k|    }                                                  \
  |  | 3667|  67.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  59.6k|                                             specs, value, loc));
 6152|       |
 6153|  59.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 59.6k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  59.6k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  59.6k|        std::ptrdiff_t postfix_width = 0;
 6162|  59.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 58.2k, False: 1.40k]
  ------------------
 6163|  58.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  58.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  58.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  58.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 58.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  58.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  58.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  58.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  58.2k|                                 value_width));
 6167|  58.2k|            std::tie(it, postfix_width) = postfix_result;
 6168|  58.2k|        }
 6169|       |
 6170|  59.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  59.6k|                                                 value_width, postfix_width);
 6172|  59.6k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 59.6k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  59.6k|        return it;
 6177|  59.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
 6181|  70.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  70.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  70.3k|            auto rd = make_reader<T, char_type>();
 6187|  70.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  70.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.3k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  70.3k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  70.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  70.3k|    {
 6113|  70.3k|        const bool need_skipped_width =
 6114|  70.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 70.3k]
  |  Branch (6114:33): [True: 0, False: 70.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  70.3k|        auto it = rng.begin();
 6118|  70.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  70.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 70.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  70.3k|        else {
 6127|  70.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  70.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  70.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  70.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 68.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.09k|    }                                                  \
  |  |  |  | 3667|  70.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  68.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  68.2k|        }
 6130|  68.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  68.2k|        std::ptrdiff_t value_width = 0;
 6134|  68.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 68.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  68.2k|        else {
 6150|  68.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  68.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  68.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.37k, False: 60.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.37k|    }                                                  \
  |  | 3667|  68.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  68.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  60.9k|                                             specs, value, loc));
 6152|       |
 6153|  60.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 60.9k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  60.9k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  60.9k|        std::ptrdiff_t postfix_width = 0;
 6162|  60.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 59.3k, False: 1.56k]
  ------------------
 6163|  59.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  59.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  59.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  59.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 59.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  59.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  59.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  59.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  59.3k|                                 value_width));
 6167|  59.3k|            std::tie(it, postfix_width) = postfix_result;
 6168|  59.3k|        }
 6169|       |
 6170|  60.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  60.9k|                                                 value_width, postfix_width);
 6172|  60.9k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 60.9k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  60.9k|        return it;
 6177|  60.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
 6181|  51.1k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  51.1k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  51.1k|            auto rd = make_reader<T, char_type>();
 6187|  51.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 51.1k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  51.1k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  51.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  51.1k|    {
 6113|  51.1k|        const bool need_skipped_width =
 6114|  51.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 51.1k]
  |  Branch (6114:33): [True: 0, False: 51.1k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  51.1k|        auto it = rng.begin();
 6118|  51.1k|        std::ptrdiff_t prefix_width = 0;
 6119|  51.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 51.1k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  51.1k|        else {
 6127|  51.1k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  51.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.04k, False: 50.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.04k|    }                                                  \
  |  |  |  | 3667|  51.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  50.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  50.0k|        }
 6130|  50.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  50.0k|        std::ptrdiff_t value_width = 0;
 6134|  50.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 50.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  50.0k|        else {
 6150|  50.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  50.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  50.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  50.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.42k, False: 41.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  8.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  8.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  8.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  8.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  8.42k|    }                                                  \
  |  | 3667|  50.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  50.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  41.6k|                                             specs, value, loc));
 6152|       |
 6153|  41.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 41.6k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  41.6k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  41.6k|        std::ptrdiff_t postfix_width = 0;
 6162|  41.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 40.9k, False: 748]
  ------------------
 6163|  40.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  40.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  40.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  40.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  40.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 40.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  40.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  40.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  40.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  40.9k|                                 value_width));
 6167|  40.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  40.9k|        }
 6169|       |
 6170|  41.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  41.6k|                                                 value_width, postfix_width);
 6172|  41.6k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 41.6k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  41.6k|        return it;
 6177|  41.6k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
 6181|  55.8k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  55.8k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  55.8k|            auto rd = make_reader<T, char_type>();
 6187|  55.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  55.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 55.8k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  55.8k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  55.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  55.8k|    {
 6113|  55.8k|        const bool need_skipped_width =
 6114|  55.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 55.8k]
  |  Branch (6114:33): [True: 0, False: 55.8k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  55.8k|        auto it = rng.begin();
 6118|  55.8k|        std::ptrdiff_t prefix_width = 0;
 6119|  55.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 55.8k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  55.8k|        else {
 6127|  55.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  55.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  55.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  55.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.29k, False: 54.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.29k|    }                                                  \
  |  |  |  | 3667|  55.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  54.5k|            std::tie(it, prefix_width) = prefix_result;
 6129|  54.5k|        }
 6130|  54.5k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  54.5k|        std::ptrdiff_t value_width = 0;
 6134|  54.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 54.5k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  54.5k|        else {
 6150|  54.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  54.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  54.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  54.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.17k, False: 46.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  8.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  8.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  8.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  8.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  8.17k|    }                                                  \
  |  | 3667|  54.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  54.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  46.3k|                                             specs, value, loc));
 6152|       |
 6153|  46.3k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 46.3k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  46.3k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  46.3k|        std::ptrdiff_t postfix_width = 0;
 6162|  46.3k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 45.4k, False: 946]
  ------------------
 6163|  45.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  45.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 45.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  45.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  45.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  45.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  45.4k|                                 value_width));
 6167|  45.4k|            std::tie(it, postfix_width) = postfix_result;
 6168|  45.4k|        }
 6169|       |
 6170|  46.3k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  46.3k|                                                 value_width, postfix_width);
 6172|  46.3k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 46.3k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  46.3k|        return it;
 6177|  46.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
 6181|  56.4k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  56.4k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  56.4k|            auto rd = make_reader<T, char_type>();
 6187|  56.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 56.4k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  56.4k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  56.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  56.4k|    {
 6113|  56.4k|        const bool need_skipped_width =
 6114|  56.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 56.4k]
  |  Branch (6114:33): [True: 0, False: 56.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  56.4k|        auto it = rng.begin();
 6118|  56.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  56.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 56.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  56.4k|        else {
 6127|  56.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  56.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  56.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  56.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.41k, False: 55.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.41k|    }                                                  \
  |  |  |  | 3667|  56.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  55.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  55.0k|        }
 6130|  55.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  55.0k|        std::ptrdiff_t value_width = 0;
 6134|  55.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 55.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  55.0k|        else {
 6150|  55.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  55.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  55.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  55.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.05k, False: 46.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  8.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  8.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  8.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  8.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  8.05k|    }                                                  \
  |  | 3667|  55.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  55.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  46.9k|                                             specs, value, loc));
 6152|       |
 6153|  46.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 46.9k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  46.9k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  46.9k|        std::ptrdiff_t postfix_width = 0;
 6162|  46.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 45.9k, False: 1.06k]
  ------------------
 6163|  45.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  45.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  45.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  45.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 45.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  45.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  45.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  45.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  45.9k|                                 value_width));
 6167|  45.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  45.9k|        }
 6169|       |
 6170|  46.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  46.9k|                                                 value_width, postfix_width);
 6172|  46.9k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 46.9k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  46.9k|        return it;
 6177|  46.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
 5859|  4.85k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.85k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.85k|            auto rd = make_reader<T, char_type>();
 5865|  4.85k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.85k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.85k|    {
 5852|  4.85k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 4.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     72|    }                                                  \
  |  |  |  | 3667|  4.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.77k|                        .transform_error(make_eof_scan_error));
 5854|  4.77k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.85k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  29.1k|{
 5784|  29.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 186, False: 29.0k]
  |  |  ------------------
  ------------------
 5785|    186|        return unexpected(e);
 5786|    186|    }
 5787|       |
 5788|  29.0k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 29.0k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  29.0k|    return skip_classic_whitespace(range);
 5793|  29.0k|}
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.77k|    {
 3517|  4.77k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.77k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.77k|        return read_default_with_base(range, value, 10);
 3519|  4.77k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.77k|    {
 3481|  4.77k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.77k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.77k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.77k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  9.54k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 4.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      9|    }                                                  \
  |  |  |  | 3667|  4.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  9.54k|                parse_integer_digits_without_thsep(
 3500|  9.54k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  9.54k|                    prefix_result.parsed_base));
 3502|       |
 3503|  9.54k|        auto buf = make_contiguous_buffer(
 3504|  9.54k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  9.54k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.65k, False: 117]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.65k|    }                                                  \
  |  |  |  | 3667|  4.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    117|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    117|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    117|                                    prefix_result.parsed_base));
 3508|       |
 3509|    117|        return ranges::next(prefix_result.iterator,
 3510|    117|                            ranges::distance(buf.view().begin(), result_it));
 3511|  9.54k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 5859|  4.88k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.88k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.88k|            auto rd = make_reader<T, char_type>();
 5865|  4.88k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.88k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.88k|    {
 5852|  4.88k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 75, False: 4.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     75|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     75|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     75|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     75|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     75|    }                                                  \
  |  |  |  | 3667|  4.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.80k|                        .transform_error(make_eof_scan_error));
 5854|  4.80k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.88k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.80k|    {
 3517|  4.80k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.80k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.80k|        return read_default_with_base(range, value, 10);
 3519|  4.80k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.80k|    {
 3481|  4.80k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.80k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.80k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.80k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  9.60k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 4.79k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      9|    }                                                  \
  |  |  |  | 3667|  4.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.79k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  9.60k|                parse_integer_digits_without_thsep(
 3500|  9.60k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  9.60k|                    prefix_result.parsed_base));
 3502|       |
 3503|  9.60k|        auto buf = make_contiguous_buffer(
 3504|  9.60k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  9.60k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.79k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.79k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.79k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.65k, False: 147]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.65k|    }                                                  \
  |  |  |  | 3667|  4.79k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    147|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    147|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    147|                                    prefix_result.parsed_base));
 3508|       |
 3509|    147|        return ranges::next(prefix_result.iterator,
 3510|    147|                            ranges::distance(buf.view().begin(), result_it));
 3511|  9.60k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
 5859|  4.91k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.91k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.91k|            auto rd = make_reader<T, char_type>();
 5865|  4.91k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.91k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.91k|    {
 5852|  4.91k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 75, False: 4.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     75|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     75|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     75|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     75|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     75|    }                                                  \
  |  |  |  | 3667|  4.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.83k|                        .transform_error(make_eof_scan_error));
 5854|  4.83k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.91k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.83k|    {
 3517|  4.83k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.83k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.83k|        return read_default_with_base(range, value, 10);
 3519|  4.83k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.83k|    {
 3481|  4.83k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.83k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.83k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.83k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  9.66k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 4.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      9|    }                                                  \
  |  |  |  | 3667|  4.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  9.66k|                parse_integer_digits_without_thsep(
 3500|  9.66k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  9.66k|                    prefix_result.parsed_base));
 3502|       |
 3503|  9.66k|        auto buf = make_contiguous_buffer(
 3504|  9.66k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  9.66k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.65k, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.65k|    }                                                  \
  |  |  |  | 3667|  4.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    180|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    180|                                    prefix_result.parsed_base));
 3508|       |
 3509|    180|        return ranges::next(prefix_result.iterator,
 3510|    180|                            ranges::distance(buf.view().begin(), result_it));
 3511|  9.66k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
 5859|  4.82k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.82k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.82k|            auto rd = make_reader<T, char_type>();
 5865|  4.82k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.82k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.82k|    {
 5852|  4.82k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.82k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.82k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.82k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60, False: 4.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     60|    }                                                  \
  |  |  |  | 3667|  4.82k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.76k|                        .transform_error(make_eof_scan_error));
 5854|  4.76k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.82k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.76k|    {
 3517|  4.76k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.76k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.76k|        return read_default_with_base(range, value, 10);
 3519|  4.76k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.76k|    {
 3481|  4.76k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.76k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.76k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.76k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 57, False: 4.71k]
  ------------------
 3486|     57|                return unexpected_scan_error(
 3487|     57|                    scan_error::invalid_scanned_value,
 3488|     57|                    "Unexpected '-' sign when parsing an "
 3489|     57|                    "unsigned value");
 3490|     57|            }
 3491|  4.76k|        }
 3492|       |
 3493|  4.76k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.76k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  9.53k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 4.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  4.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  9.53k|                parse_integer_digits_without_thsep(
 3500|  9.53k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  9.53k|                    prefix_result.parsed_base));
 3502|       |
 3503|  9.53k|        auto buf = make_contiguous_buffer(
 3504|  9.53k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  9.53k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.61k, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.61k|    }                                                  \
  |  |  |  | 3667|  4.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    150|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    150|                                    prefix_result.parsed_base));
 3508|       |
 3509|    150|        return ranges::next(prefix_result.iterator,
 3510|    150|                            ranges::distance(buf.view().begin(), result_it));
 3511|  9.53k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 5859|  4.84k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.84k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.84k|            auto rd = make_reader<T, char_type>();
 5865|  4.84k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.84k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.84k|    {
 5852|  4.84k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60, False: 4.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     60|    }                                                  \
  |  |  |  | 3667|  4.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.78k|                        .transform_error(make_eof_scan_error));
 5854|  4.78k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.84k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.78k|    {
 3517|  4.78k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.78k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.78k|        return read_default_with_base(range, value, 10);
 3519|  4.78k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.78k|    {
 3481|  4.78k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.78k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.78k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.78k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 57, False: 4.72k]
  ------------------
 3486|     57|                return unexpected_scan_error(
 3487|     57|                    scan_error::invalid_scanned_value,
 3488|     57|                    "Unexpected '-' sign when parsing an "
 3489|     57|                    "unsigned value");
 3490|     57|            }
 3491|  4.78k|        }
 3492|       |
 3493|  4.78k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.78k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  9.56k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 4.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  4.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  9.56k|                parse_integer_digits_without_thsep(
 3500|  9.56k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  9.56k|                    prefix_result.parsed_base));
 3502|       |
 3503|  9.56k|        auto buf = make_contiguous_buffer(
 3504|  9.56k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  9.56k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.61k, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.61k|    }                                                  \
  |  |  |  | 3667|  4.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    168|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    168|                                    prefix_result.parsed_base));
 3508|       |
 3509|    168|        return ranges::next(prefix_result.iterator,
 3510|    168|                            ranges::distance(buf.view().begin(), result_it));
 3511|  9.56k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
 5859|  4.86k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  4.86k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  4.86k|            auto rd = make_reader<T, char_type>();
 5865|  4.86k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.86k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  4.86k|    {
 5852|  4.86k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60, False: 4.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     60|    }                                                  \
  |  |  |  | 3667|  4.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.80k|                        .transform_error(make_eof_scan_error));
 5854|  4.80k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.86k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 3516|  4.80k|    {
 3517|  4.80k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.80k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.80k|        return read_default_with_base(range, value, 10);
 3519|  4.80k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  4.80k|    {
 3481|  4.80k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.80k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.80k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.80k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 63, False: 4.74k]
  ------------------
 3486|     63|                return unexpected_scan_error(
 3487|     63|                    scan_error::invalid_scanned_value,
 3488|     63|                    "Unexpected '-' sign when parsing an "
 3489|     63|                    "unsigned value");
 3490|     63|            }
 3491|  4.80k|        }
 3492|       |
 3493|  4.80k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.80k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  9.61k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3, False: 4.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      3|    }                                                  \
  |  |  |  | 3667|  4.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  9.61k|                parse_integer_digits_without_thsep(
 3500|  9.61k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  9.61k|                    prefix_result.parsed_base));
 3502|       |
 3503|  9.61k|        auto buf = make_contiguous_buffer(
 3504|  9.61k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  9.61k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  4.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.60k, False: 198]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.60k|    }                                                  \
  |  |  |  | 3667|  4.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    198|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    198|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    198|                                    prefix_result.parsed_base));
 3508|       |
 3509|    198|        return ranges::next(prefix_result.iterator,
 3510|    198|                            ranges::distance(buf.view().begin(), result_it));
 3511|  9.61k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   173k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   173k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   173k|          m_current(m_range.begin())
 2867|   173k|    {
 2868|   173k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|   292k|    {
 2872|   292k|        return m_current;
 2873|   292k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|   118k|    {
 2877|   118k|        return m_range.end();
 2878|   118k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|  2.67k|    {
 2892|  2.67k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  2.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  2.67k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  2.67k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 2.67k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  2.67k|        }
 2898|  2.67k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.67k|    static_cast<    \
  |  |  929|  2.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  2.67k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   116k|    {
 2882|   116k|        return ranges::subrange{begin(), end()};
 2883|   116k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
 6181|  19.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  19.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  19.3k|            auto rd = make_reader<T, char_type>();
 6187|  19.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  19.3k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  19.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  19.3k|    {
 6113|  19.3k|        const bool need_skipped_width =
 6114|  19.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 19.3k]
  |  Branch (6114:33): [True: 0, False: 19.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  19.3k|        auto it = rng.begin();
 6118|  19.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  19.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 19.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  19.3k|        else {
 6127|  19.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  19.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 278, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    278|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    278|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    278|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    278|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    278|    }                                                  \
  |  |  |  | 3667|  19.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  19.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  19.0k|        }
 6130|  19.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  19.0k|        std::ptrdiff_t value_width = 0;
 6134|  19.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 19.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  19.0k|        else {
 6150|  19.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 406]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.6k|    }                                                  \
  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    406|                                             specs, value, loc));
 6152|       |
 6153|    406|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 406]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    406|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    406|        std::ptrdiff_t postfix_width = 0;
 6162|    406|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 278, False: 128]
  ------------------
 6163|    278|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    278|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    278|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    278|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    278|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 278]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    278|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    278|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    278|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    278|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    278|                                 value_width));
 6167|    278|            std::tie(it, postfix_width) = postfix_result;
 6168|    278|        }
 6169|       |
 6170|    406|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    406|                                                 value_width, postfix_width);
 6172|    406|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 406]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    406|        return it;
 6177|    406|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   116k|    {
 6026|   116k|        const bool need_skipped_width =
 6027|   116k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 116k]
  |  Branch (6027:33): [True: 0, False: 116k]
  ------------------
 6028|   116k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   116k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 116k]
  ------------------
 6032|   116k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 116k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   116k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 116k, False: 0]
  |  Branch (6036:56): [True: 116k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   116k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 116k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   230k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.59k, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.59k|    }                                                  \
  |  |  |  | 3667|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   230k|                            make_eof_scan_error));
 6047|       |
 6048|   230k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 114k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   114k|            return result_type{it, 0};
 6056|   230k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   116k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  1.97k|    {
 6068|  1.97k|        const bool need_skipped_width =
 6069|  1.97k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.97k]
  |  Branch (6069:33): [True: 0, False: 1.97k]
  ------------------
 6070|  1.97k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.97k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.97k]
  ------------------
 6073|  1.97k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.97k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.97k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.97k, False: 0]
  ------------------
 6082|  1.97k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 1.97k]
  ------------------
 6083|  1.97k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.97k|        return result_type{rng.begin(), 0};
 6107|  1.97k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
 6181|  19.4k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  19.4k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  19.4k|            auto rd = make_reader<T, char_type>();
 6187|  19.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.4k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  19.4k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  19.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  19.4k|    {
 6113|  19.4k|        const bool need_skipped_width =
 6114|  19.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 19.4k]
  |  Branch (6114:33): [True: 0, False: 19.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  19.4k|        auto it = rng.begin();
 6118|  19.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  19.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 19.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  19.4k|        else {
 6127|  19.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  19.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 290, False: 19.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    290|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    290|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    290|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    290|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    290|    }                                                  \
  |  |  |  | 3667|  19.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  19.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  19.1k|        }
 6130|  19.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  19.1k|        std::ptrdiff_t value_width = 0;
 6134|  19.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 19.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  19.1k|        else {
 6150|  19.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 492]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.6k|    }                                                  \
  |  | 3667|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    492|                                             specs, value, loc));
 6152|       |
 6153|    492|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 492]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    492|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    492|        std::ptrdiff_t postfix_width = 0;
 6162|    492|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 352, False: 140]
  ------------------
 6163|    352|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    352|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    352|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    352|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 352]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    352|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    352|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    352|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    352|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    352|                                 value_width));
 6167|    352|            std::tie(it, postfix_width) = postfix_result;
 6168|    352|        }
 6169|       |
 6170|    492|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    492|                                                 value_width, postfix_width);
 6172|    492|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 492]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    492|        return it;
 6177|    492|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
 6181|  19.5k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  19.5k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  19.5k|            auto rd = make_reader<T, char_type>();
 6187|  19.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  19.5k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  19.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  19.5k|    {
 6113|  19.5k|        const bool need_skipped_width =
 6114|  19.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 19.5k]
  |  Branch (6114:33): [True: 0, False: 19.5k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  19.5k|        auto it = rng.begin();
 6118|  19.5k|        std::ptrdiff_t prefix_width = 0;
 6119|  19.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 19.5k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  19.5k|        else {
 6127|  19.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 290, False: 19.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    290|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    290|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    290|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    290|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    290|    }                                                  \
  |  |  |  | 3667|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  19.2k|            std::tie(it, prefix_width) = prefix_result;
 6129|  19.2k|        }
 6130|  19.2k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  19.2k|        std::ptrdiff_t value_width = 0;
 6134|  19.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 19.2k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  19.2k|        else {
 6150|  19.2k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  19.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  19.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 576]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.6k|    }                                                  \
  |  | 3667|  19.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    576|                                             specs, value, loc));
 6152|       |
 6153|    576|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 576]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    576|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    576|        std::ptrdiff_t postfix_width = 0;
 6162|    576|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 436, False: 140]
  ------------------
 6163|    436|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    436|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    436|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    436|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    436|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 436]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    436|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    436|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    436|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    436|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    436|                                 value_width));
 6167|    436|            std::tie(it, postfix_width) = postfix_result;
 6168|    436|        }
 6169|       |
 6170|    576|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    576|                                                 value_width, postfix_width);
 6172|    576|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 576]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    576|        return it;
 6177|    576|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
 6181|  19.2k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  19.2k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  19.2k|            auto rd = make_reader<T, char_type>();
 6187|  19.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.2k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  19.2k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  19.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  19.2k|    {
 6113|  19.2k|        const bool need_skipped_width =
 6114|  19.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 19.2k]
  |  Branch (6114:33): [True: 0, False: 19.2k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  19.2k|        auto it = rng.begin();
 6118|  19.2k|        std::ptrdiff_t prefix_width = 0;
 6119|  19.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 19.2k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  19.2k|        else {
 6127|  19.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  19.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 246, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    246|    }                                                  \
  |  |  |  | 3667|  19.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  19.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  19.0k|        }
 6130|  19.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  19.0k|        std::ptrdiff_t value_width = 0;
 6134|  19.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 19.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  19.0k|        else {
 6150|  19.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 346]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.6k|    }                                                  \
  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    346|                                             specs, value, loc));
 6152|       |
 6153|    346|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 346]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    346|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    346|        std::ptrdiff_t postfix_width = 0;
 6162|    346|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 250, False: 96]
  ------------------
 6163|    250|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    250|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    250|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    250|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 250]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    250|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    250|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    250|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    250|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    250|                                 value_width));
 6167|    250|            std::tie(it, postfix_width) = postfix_result;
 6168|    250|        }
 6169|       |
 6170|    346|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    346|                                                 value_width, postfix_width);
 6172|    346|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 346]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    346|        return it;
 6177|    346|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
 6181|  19.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  19.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  19.3k|            auto rd = make_reader<T, char_type>();
 6187|  19.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  19.3k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  19.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  19.3k|    {
 6113|  19.3k|        const bool need_skipped_width =
 6114|  19.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 19.3k]
  |  Branch (6114:33): [True: 0, False: 19.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  19.3k|        auto it = rng.begin();
 6118|  19.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  19.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 19.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  19.3k|        else {
 6127|  19.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  19.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 246, False: 19.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    246|    }                                                  \
  |  |  |  | 3667|  19.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  19.0k|            std::tie(it, prefix_width) = prefix_result;
 6129|  19.0k|        }
 6130|  19.0k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  19.0k|        std::ptrdiff_t value_width = 0;
 6134|  19.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 19.0k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  19.0k|        else {
 6150|  19.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  19.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  19.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 392]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.6k|    }                                                  \
  |  | 3667|  19.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    392|                                             specs, value, loc));
 6152|       |
 6153|    392|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 392]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    392|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    392|        std::ptrdiff_t postfix_width = 0;
 6162|    392|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 296, False: 96]
  ------------------
 6163|    296|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    296|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    296|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    296|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 296]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    296|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    296|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    296|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    296|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    296|                                 value_width));
 6167|    296|            std::tie(it, postfix_width) = postfix_result;
 6168|    296|        }
 6169|       |
 6170|    392|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    392|                                                 value_width, postfix_width);
 6172|    392|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 392]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    392|        return it;
 6177|    392|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
 6181|  19.3k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  19.3k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  19.3k|            auto rd = make_reader<T, char_type>();
 6187|  19.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|  19.3k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  19.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|  19.3k|    {
 6113|  19.3k|        const bool need_skipped_width =
 6114|  19.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 19.3k]
  |  Branch (6114:33): [True: 0, False: 19.3k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  19.3k|        auto it = rng.begin();
 6118|  19.3k|        std::ptrdiff_t prefix_width = 0;
 6119|  19.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 19.3k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  19.3k|        else {
 6127|  19.3k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  19.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 246, False: 19.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    246|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    246|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    246|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    246|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    246|    }                                                  \
  |  |  |  | 3667|  19.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  19.1k|            std::tie(it, prefix_width) = prefix_result;
 6129|  19.1k|        }
 6130|  19.1k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  19.1k|        std::ptrdiff_t value_width = 0;
 6134|  19.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 19.1k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  19.1k|        else {
 6150|  19.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  19.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  19.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  19.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.6k, False: 458]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.6k|    }                                                  \
  |  | 3667|  19.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  19.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|    458|                                             specs, value, loc));
 6152|       |
 6153|    458|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 458]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|    458|        }
 6159|       |
 6160|       |        // Read postfix
 6161|    458|        std::ptrdiff_t postfix_width = 0;
 6162|    458|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 362, False: 96]
  ------------------
 6163|    362|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|    362|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    362|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    362|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    362|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 362]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    362|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    362|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|    362|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|    362|                                 rd.skip_ws_before_read(), prefix_width,
 6166|    362|                                 value_width));
 6167|    362|            std::tie(it, postfix_width) = postfix_result;
 6168|    362|        }
 6169|       |
 6170|    458|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|    458|                                                 value_width, postfix_width);
 6172|    458|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 458]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|    458|        return it;
 6177|    458|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.85k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.85k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.85k|            auto rd = make_reader<T, char_type>();
 5869|  4.85k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.85k, False: 0]
  ------------------
 5870|  4.85k|                return impl(rd, range, value);
 5871|  4.85k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.85k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.85k|    {
 5852|  4.85k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.85k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.85k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.85k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 72, False: 4.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     72|    }                                                  \
  |  |  |  | 3667|  4.85k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.77k|                        .transform_error(make_eof_scan_error));
 5854|  4.77k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.85k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  29.1k|{
 5784|  29.1k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  29.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 186, False: 29.0k]
  |  |  ------------------
  ------------------
 5785|    186|        return unexpected(e);
 5786|    186|    }
 5787|       |
 5788|  29.0k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 29.0k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  29.0k|    return skip_classic_whitespace(range);
 5793|  29.0k|}
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.77k|    {
 3517|  4.77k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.77k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.77k|        return read_default_with_base(range, value, 10);
 3519|  4.77k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.77k|    {
 3481|  4.77k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.77k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.77k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.77k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.77k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.77k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.93k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.77k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.77k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.77k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.77k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.62k, False: 159]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.62k|    }                                                  \
  |  |  |  | 3667|  4.77k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    159|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.93k|                parse_integer_digits_without_thsep(
 3500|  4.93k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.93k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.93k|        auto buf = make_contiguous_buffer(
 3504|  4.93k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.93k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    159|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    159|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    159|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    159|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 42, False: 117]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     42|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     42|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     42|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     42|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     42|    }                                                  \
  |  |  |  | 3667|    159|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    117|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    117|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    117|                                    prefix_result.parsed_base));
 3508|       |
 3509|    117|        return ranges::next(prefix_result.iterator,
 3510|    117|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.93k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.88k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.88k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.88k|            auto rd = make_reader<T, char_type>();
 5869|  4.88k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.88k, False: 0]
  ------------------
 5870|  4.88k|                return impl(rd, range, value);
 5871|  4.88k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.88k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.88k|    {
 5852|  4.88k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.88k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.88k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.88k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 75, False: 4.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     75|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     75|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     75|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     75|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     75|    }                                                  \
  |  |  |  | 3667|  4.88k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.80k|                        .transform_error(make_eof_scan_error));
 5854|  4.80k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.88k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.80k|    {
 3517|  4.80k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.80k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.80k|        return read_default_with_base(range, value, 10);
 3519|  4.80k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.80k|    {
 3481|  4.80k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.80k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.80k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.80k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.97k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.64k, False: 165]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.64k|    }                                                  \
  |  |  |  | 3667|  4.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    165|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.97k|                parse_integer_digits_without_thsep(
 3500|  4.97k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.97k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.97k|        auto buf = make_contiguous_buffer(
 3504|  4.97k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.97k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    165|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    165|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    165|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    165|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 147]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|    165|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    147|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    147|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    147|                                    prefix_result.parsed_base));
 3508|       |
 3509|    147|        return ranges::next(prefix_result.iterator,
 3510|    147|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.97k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.91k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.91k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.91k|            auto rd = make_reader<T, char_type>();
 5869|  4.91k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.91k, False: 0]
  ------------------
 5870|  4.91k|                return impl(rd, range, value);
 5871|  4.91k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.91k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.91k|    {
 5852|  4.91k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.91k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.91k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.91k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 75, False: 4.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     75|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     75|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     75|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     75|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     75|    }                                                  \
  |  |  |  | 3667|  4.91k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.83k|                        .transform_error(make_eof_scan_error));
 5854|  4.83k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.91k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.83k|    {
 3517|  4.83k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.83k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.83k|        return read_default_with_base(range, value, 10);
 3519|  4.83k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.83k|    {
 3481|  4.83k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.83k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.83k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.83k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  4.83k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.83k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  5.01k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.83k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.83k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.83k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.65k, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.65k|    }                                                  \
  |  |  |  | 3667|  4.83k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  5.01k|                parse_integer_digits_without_thsep(
 3500|  5.01k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  5.01k|                    prefix_result.parsed_base));
 3502|       |
 3503|  5.01k|        auto buf = make_contiguous_buffer(
 3504|  5.01k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  5.01k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    180|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    180|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    180|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    180|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 180]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    180|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    180|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    180|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    180|                                    prefix_result.parsed_base));
 3508|       |
 3509|    180|        return ranges::next(prefix_result.iterator,
 3510|    180|                            ranges::distance(buf.view().begin(), result_it));
 3511|  5.01k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.82k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.82k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.82k|            auto rd = make_reader<T, char_type>();
 5869|  4.82k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.82k, False: 0]
  ------------------
 5870|  4.82k|                return impl(rd, range, value);
 5871|  4.82k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.82k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.82k|    {
 5852|  4.82k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.82k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.82k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.82k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60, False: 4.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     60|    }                                                  \
  |  |  |  | 3667|  4.82k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.76k|                        .transform_error(make_eof_scan_error));
 5854|  4.76k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.82k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.76k|    {
 3517|  4.76k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.76k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.76k|        return read_default_with_base(range, value, 10);
 3519|  4.76k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.76k|    {
 3481|  4.76k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.76k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.76k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.76k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.76k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.76k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 57, False: 4.71k]
  ------------------
 3486|     57|                return unexpected_scan_error(
 3487|     57|                    scan_error::invalid_scanned_value,
 3488|     57|                    "Unexpected '-' sign when parsing an "
 3489|     57|                    "unsigned value");
 3490|     57|            }
 3491|  4.76k|        }
 3492|       |
 3493|  4.76k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.76k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.95k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.76k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.76k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.76k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.58k, False: 183]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.58k|    }                                                  \
  |  |  |  | 3667|  4.76k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    183|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.95k|                parse_integer_digits_without_thsep(
 3500|  4.95k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.95k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.95k|        auto buf = make_contiguous_buffer(
 3504|  4.95k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.95k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    183|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    183|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    183|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    183|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 33, False: 150]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     33|    }                                                  \
  |  |  |  | 3667|    183|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    150|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    150|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    150|                                    prefix_result.parsed_base));
 3508|       |
 3509|    150|        return ranges::next(prefix_result.iterator,
 3510|    150|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.95k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.84k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.84k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.84k|            auto rd = make_reader<T, char_type>();
 5869|  4.84k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.84k, False: 0]
  ------------------
 5870|  4.84k|                return impl(rd, range, value);
 5871|  4.84k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.84k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.84k|    {
 5852|  4.84k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.84k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.84k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.84k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60, False: 4.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     60|    }                                                  \
  |  |  |  | 3667|  4.84k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.78k|                        .transform_error(make_eof_scan_error));
 5854|  4.78k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.84k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.78k|    {
 3517|  4.78k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.78k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.78k|        return read_default_with_base(range, value, 10);
 3519|  4.78k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.78k|    {
 3481|  4.78k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.78k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.78k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.78k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.78k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 57, False: 4.72k]
  ------------------
 3486|     57|                return unexpected_scan_error(
 3487|     57|                    scan_error::invalid_scanned_value,
 3488|     57|                    "Unexpected '-' sign when parsing an "
 3489|     57|                    "unsigned value");
 3490|     57|            }
 3491|  4.78k|        }
 3492|       |
 3493|  4.78k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.78k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  4.97k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.78k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.78k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.78k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.59k, False: 186]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.59k|    }                                                  \
  |  |  |  | 3667|  4.78k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    186|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  4.97k|                parse_integer_digits_without_thsep(
 3500|  4.97k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  4.97k|                    prefix_result.parsed_base));
 3502|       |
 3503|  4.97k|        auto buf = make_contiguous_buffer(
 3504|  4.97k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  4.97k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    186|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    186|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    186|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    186|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 168]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     18|    }                                                  \
  |  |  |  | 3667|    186|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    168|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    168|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    168|                                    prefix_result.parsed_base));
 3508|       |
 3509|    168|        return ranges::next(prefix_result.iterator,
 3510|    168|                            ranges::distance(buf.view().begin(), result_it));
 3511|  4.97k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  4.86k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  4.86k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  4.86k|            auto rd = make_reader<T, char_type>();
 5869|  4.86k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 4.86k, False: 0]
  ------------------
 5870|  4.86k|                return impl(rd, range, value);
 5871|  4.86k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  4.86k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  4.86k|    {
 5852|  4.86k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  4.86k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.86k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.86k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.86k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 60, False: 4.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     60|    }                                                  \
  |  |  |  | 3667|  4.86k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  4.80k|                        .transform_error(make_eof_scan_error));
 5854|  4.80k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  4.86k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 3516|  4.80k|    {
 3517|  4.80k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  4.80k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3518|  4.80k|        return read_default_with_base(range, value, 10);
 3519|  4.80k|    }
_ZN3scn2v34impl19reader_impl_for_intIwE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_i:
 3480|  4.80k|    {
 3481|  4.80k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  4.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 4.80k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  4.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.80k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  4.80k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  4.80k|        if constexpr (!std::is_signed_v<T>) {
 3485|  4.80k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 63, False: 4.74k]
  ------------------
 3486|     63|                return unexpected_scan_error(
 3487|     63|                    scan_error::invalid_scanned_value,
 3488|     63|                    "Unexpected '-' sign when parsing an "
 3489|     63|                    "unsigned value");
 3490|     63|            }
 3491|  4.80k|        }
 3492|       |
 3493|  4.80k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 4.80k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  5.00k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  4.80k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  4.80k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  4.80k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.80k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.61k, False: 198]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.61k|    }                                                  \
  |  |  |  | 3667|  4.80k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    198|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  5.00k|                parse_integer_digits_without_thsep(
 3500|  5.00k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  5.00k|                    prefix_result.parsed_base));
 3502|       |
 3503|  5.00k|        auto buf = make_contiguous_buffer(
 3504|  5.00k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  5.00k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|    198|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|    198|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|    198|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    198|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 198]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|    198|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    198|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|    198|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|    198|                                    prefix_result.parsed_base));
 3508|       |
 3509|    198|        return ranges::next(prefix_result.iterator,
 3510|    198|                            ranges::distance(buf.view().begin(), result_it));
 3511|  5.00k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEaEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  16.9k|    {
 3481|  16.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  16.9k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  16.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 16.9k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  33.9k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 45, False: 16.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     45|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     45|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     45|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     45|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     45|    }                                                  \
  |  |  |  | 3667|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  16.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  33.9k|                parse_integer_digits_without_thsep(
 3500|  33.9k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  33.9k|                    prefix_result.parsed_base));
 3502|       |
 3503|  33.9k|        auto buf = make_contiguous_buffer(
 3504|  33.9k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  33.9k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  16.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  16.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  16.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.89k, False: 15.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.89k|    }                                                  \
  |  |  |  | 3667|  16.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  15.0k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  15.0k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  15.0k|        return ranges::next(prefix_result.iterator,
 3510|  15.0k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  33.9k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEiEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  19.6k|    {
 3481|  19.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  19.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  19.6k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  19.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 19.6k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  39.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  19.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 69, False: 19.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     69|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     69|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     69|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     69|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     69|    }                                                  \
  |  |  |  | 3667|  19.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  39.1k|                parse_integer_digits_without_thsep(
 3500|  39.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  39.1k|                    prefix_result.parsed_base));
 3502|       |
 3503|  39.1k|        auto buf = make_contiguous_buffer(
 3504|  39.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  39.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  19.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.74k, False: 17.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.74k|    }                                                  \
  |  |  |  | 3667|  19.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  17.8k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  17.8k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  17.8k|        return ranges::next(prefix_result.iterator,
 3510|  17.8k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  39.1k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EExEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  19.9k|    {
 3481|  19.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  19.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 19.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  19.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  19.9k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|       |        if constexpr (!std::is_signed_v<T>) {
 3485|       |            if (prefix_result.sign == sign_type::minus_sign) {
 3486|       |                return unexpected_scan_error(
 3487|       |                    scan_error::invalid_scanned_value,
 3488|       |                    "Unexpected '-' sign when parsing an "
 3489|       |                    "unsigned value");
 3490|       |            }
 3491|       |        }
 3492|       |
 3493|  19.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 19.9k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  39.8k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  19.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 81, False: 19.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     81|    }                                                  \
  |  |  |  | 3667|  19.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  39.8k|                parse_integer_digits_without_thsep(
 3500|  39.8k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  39.8k|                    prefix_result.parsed_base));
 3502|       |
 3503|  39.8k|        auto buf = make_contiguous_buffer(
 3504|  39.8k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  39.8k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  19.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  19.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  19.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.67k, False: 18.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.67k|    }                                                  \
  |  |  |  | 3667|  19.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  18.1k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  18.1k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  18.1k|        return ranges::next(prefix_result.iterator,
 3510|  18.1k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  39.8k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEhEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  14.1k|    {
 3481|  14.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  14.1k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  14.1k|        if constexpr (!std::is_signed_v<T>) {
 3485|  14.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 870, False: 13.2k]
  ------------------
 3486|    870|                return unexpected_scan_error(
 3487|    870|                    scan_error::invalid_scanned_value,
 3488|    870|                    "Unexpected '-' sign when parsing an "
 3489|    870|                    "unsigned value");
 3490|    870|            }
 3491|  14.1k|        }
 3492|       |
 3493|  14.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 14.1k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  28.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  28.2k|                parse_integer_digits_without_thsep(
 3500|  28.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  28.2k|                    prefix_result.parsed_base));
 3502|       |
 3503|  28.2k|        auto buf = make_contiguous_buffer(
 3504|  28.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  28.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.19k, False: 12.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.19k|    }                                                  \
  |  |  |  | 3667|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  12.9k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  12.9k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  12.9k|        return ranges::next(prefix_result.iterator,
 3510|  12.9k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  28.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEjEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  15.6k|    {
 3481|  15.6k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  15.6k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  15.6k|        if constexpr (!std::is_signed_v<T>) {
 3485|  15.6k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 897, False: 14.7k]
  ------------------
 3486|    897|                return unexpected_scan_error(
 3487|    897|                    scan_error::invalid_scanned_value,
 3488|    897|                    "Unexpected '-' sign when parsing an "
 3489|    897|                    "unsigned value");
 3490|    897|            }
 3491|  15.6k|        }
 3492|       |
 3493|  15.6k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 15.6k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  31.2k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 15.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  31.2k|                parse_integer_digits_without_thsep(
 3500|  31.2k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  31.2k|                    prefix_result.parsed_base));
 3502|       |
 3503|  31.2k|        auto buf = make_contiguous_buffer(
 3504|  31.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  31.2k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.08k, False: 14.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.08k|    }                                                  \
  |  |  |  | 3667|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  14.5k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  14.5k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  14.5k|        return ranges::next(prefix_result.iterator,
 3510|  14.5k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  31.2k|    }
_ZN3scn2v34impl19reader_impl_for_intIcE22read_default_with_baseINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEyEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_i:
 3480|  15.8k|    {
 3481|  15.8k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 15.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3482|  15.8k|                                   .transform_error(make_eof_scan_error));
 3483|       |
 3484|  15.8k|        if constexpr (!std::is_signed_v<T>) {
 3485|  15.8k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3485:17): [True: 930, False: 14.8k]
  ------------------
 3486|    930|                return unexpected_scan_error(
 3487|    930|                    scan_error::invalid_scanned_value,
 3488|    930|                    "Unexpected '-' sign when parsing an "
 3489|    930|                    "unsigned value");
 3490|    930|            }
 3491|  15.8k|        }
 3492|       |
 3493|  15.8k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3493:13): [True: 0, False: 15.8k]
  ------------------
 3494|      0|            value = T{0};
 3495|      0|            return std::next(prefix_result.iterator);
 3496|      0|        }
 3497|       |
 3498|  31.6k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3668|  15.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 15.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|     12|    }                                                  \
  |  |  |  | 3667|  15.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3499|  31.6k|                parse_integer_digits_without_thsep(
 3500|  31.6k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3501|  31.6k|                    prefix_result.parsed_base));
 3502|       |
 3503|  31.6k|        auto buf = make_contiguous_buffer(
 3504|  31.6k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3505|  31.6k|        SCN_TRY(result_it,
  ------------------
  |  | 3668|  15.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  15.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  15.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.02k, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.02k|    }                                                  \
  |  |  |  | 3667|  15.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3506|  14.7k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3507|  14.7k|                                    prefix_result.parsed_base));
 3508|       |
 3509|  14.7k|        return ranges::next(prefix_result.iterator,
 3510|  14.7k|                            ranges::distance(buf.view().begin(), result_it));
 3511|  31.6k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    789|{
   52|    789|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|    789|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    789|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    789|    string_buffer.resize(size);
   56|    789|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    789|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    789|    const auto wsv_reinterpret_size =
   61|    789|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 117, False: 672]
  ------------------
   62|    789|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    789|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    789|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    789|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    789|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    789|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    789|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    789|{
  122|    789|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    789|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    789|    buf.resize(sizeof...(Args));
  125|    789|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    789|    return buf;
  127|    789|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    789|{
  108|    789|    if constexpr (std::is_same_v<CharT, char>) {
  109|    789|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|    789|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|    789|{
  185|    789|    do_basic_run_for_source<CharT>(data, format_strings);
  186|    789|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|    789|                                   format_strings);
  188|    789|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    789|{
  133|       |    // Regular scan
  134|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.89k, False: 789]
  ------------------
  135|  7.89k|        auto it = scn::ranges::begin(source);
  136|  37.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  37.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  37.3k|            auto result = scn::scan<T>(
  139|  37.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  37.3k|                scn::runtime_format(f));
  141|  37.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.89k, False: 29.4k]
  ------------------
  142|  7.89k|                break;
  143|  7.89k|            }
  144|  29.4k|            it = result->begin();
  145|  29.4k|        }
  146|  7.89k|    }
  147|       |
  148|       |    // scan localized
  149|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.89k, False: 789]
  ------------------
  150|  7.89k|        auto it = scn::ranges::begin(source);
  151|  37.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  37.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  37.3k|            auto result = scn::scan<T>(
  154|  37.3k|                global_locale,
  155|  37.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  37.3k|                scn::runtime_format(f));
  157|  37.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.89k, False: 29.4k]
  ------------------
  158|  7.89k|                break;
  159|  7.89k|            }
  160|  29.4k|            it = result->begin();
  161|  29.4k|        }
  162|  7.89k|    }
  163|       |
  164|       |    // scan_value
  165|    789|    {
  166|    789|        auto it = scn::ranges::begin(source);
  167|  5.80k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.80k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.80k|            auto result = scn::scan_value<T>(
  170|  5.80k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.80k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 789, False: 5.01k]
  ------------------
  172|    789|                break;
  173|    789|            }
  174|  5.01k|            it = result->begin();
  175|  5.01k|        }
  176|    789|    }
  177|    789|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    789|{
  133|       |    // Regular scan
  134|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.89k, False: 789]
  ------------------
  135|  7.89k|        auto it = scn::ranges::begin(source);
  136|  32.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  32.7k|            auto result = scn::scan<T>(
  139|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  32.7k|                scn::runtime_format(f));
  141|  32.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.89k, False: 24.8k]
  ------------------
  142|  7.89k|                break;
  143|  7.89k|            }
  144|  24.8k|            it = result->begin();
  145|  24.8k|        }
  146|  7.89k|    }
  147|       |
  148|       |    // scan localized
  149|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.89k, False: 789]
  ------------------
  150|  7.89k|        auto it = scn::ranges::begin(source);
  151|  32.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  32.7k|            auto result = scn::scan<T>(
  154|  32.7k|                global_locale,
  155|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  32.7k|                scn::runtime_format(f));
  157|  32.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.89k, False: 24.8k]
  ------------------
  158|  7.89k|                break;
  159|  7.89k|            }
  160|  24.8k|            it = result->begin();
  161|  24.8k|        }
  162|  7.89k|    }
  163|       |
  164|       |    // scan_value
  165|    789|    {
  166|    789|        auto it = scn::ranges::begin(source);
  167|  4.81k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.81k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.81k|            auto result = scn::scan_value<T>(
  170|  4.81k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.81k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 789, False: 4.02k]
  ------------------
  172|    789|                break;
  173|    789|            }
  174|  4.02k|            it = result->begin();
  175|  4.02k|        }
  176|    789|    }
  177|    789|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    789|{
  133|       |    // Regular scan
  134|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.89k, False: 789]
  ------------------
  135|  7.89k|        auto it = scn::ranges::begin(source);
  136|  43.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  43.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  43.6k|            auto result = scn::scan<T>(
  139|  43.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  43.6k|                scn::runtime_format(f));
  141|  43.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.89k, False: 35.7k]
  ------------------
  142|  7.89k|                break;
  143|  7.89k|            }
  144|  35.7k|            it = result->begin();
  145|  35.7k|        }
  146|  7.89k|    }
  147|       |
  148|       |    // scan localized
  149|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.89k, False: 789]
  ------------------
  150|  7.89k|        auto it = scn::ranges::begin(source);
  151|  43.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  43.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  43.6k|            auto result = scn::scan<T>(
  154|  43.6k|                global_locale,
  155|  43.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  43.6k|                scn::runtime_format(f));
  157|  43.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.89k, False: 35.7k]
  ------------------
  158|  7.89k|                break;
  159|  7.89k|            }
  160|  35.7k|            it = result->begin();
  161|  35.7k|        }
  162|  7.89k|    }
  163|       |
  164|       |    // scan_value
  165|    789|    {
  166|    789|        auto it = scn::ranges::begin(source);
  167|  6.72k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.72k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.72k|            auto result = scn::scan_value<T>(
  170|  6.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.72k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 789, False: 5.93k]
  ------------------
  172|    789|                break;
  173|    789|            }
  174|  5.93k|            it = result->begin();
  175|  5.93k|        }
  176|    789|    }
  177|    789|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    789|{
  133|       |    // Regular scan
  134|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.89k, False: 789]
  ------------------
  135|  7.89k|        auto it = scn::ranges::begin(source);
  136|  35.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  35.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  35.6k|            auto result = scn::scan<T>(
  139|  35.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  35.6k|                scn::runtime_format(f));
  141|  35.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.89k, False: 27.7k]
  ------------------
  142|  7.89k|                break;
  143|  7.89k|            }
  144|  27.7k|            it = result->begin();
  145|  27.7k|        }
  146|  7.89k|    }
  147|       |
  148|       |    // scan localized
  149|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.89k, False: 789]
  ------------------
  150|  7.89k|        auto it = scn::ranges::begin(source);
  151|  35.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  35.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  35.6k|            auto result = scn::scan<T>(
  154|  35.6k|                global_locale,
  155|  35.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  35.6k|                scn::runtime_format(f));
  157|  35.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.89k, False: 27.7k]
  ------------------
  158|  7.89k|                break;
  159|  7.89k|            }
  160|  27.7k|            it = result->begin();
  161|  27.7k|        }
  162|  7.89k|    }
  163|       |
  164|       |    // scan_value
  165|    789|    {
  166|    789|        auto it = scn::ranges::begin(source);
  167|  5.33k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.33k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.33k|            auto result = scn::scan_value<T>(
  170|  5.33k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.33k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 789, False: 4.54k]
  ------------------
  172|    789|                break;
  173|    789|            }
  174|  4.54k|            it = result->begin();
  175|  4.54k|        }
  176|    789|    }
  177|    789|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    789|{
  133|       |    // Regular scan
  134|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.89k, False: 789]
  ------------------
  135|  7.89k|        auto it = scn::ranges::begin(source);
  136|  44.4k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  44.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  44.4k|            auto result = scn::scan<T>(
  139|  44.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  44.4k|                scn::runtime_format(f));
  141|  44.4k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.89k, False: 36.5k]
  ------------------
  142|  7.89k|                break;
  143|  7.89k|            }
  144|  36.5k|            it = result->begin();
  145|  36.5k|        }
  146|  7.89k|    }
  147|       |
  148|       |    // scan localized
  149|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.89k, False: 789]
  ------------------
  150|  7.89k|        auto it = scn::ranges::begin(source);
  151|  44.4k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  44.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  44.4k|            auto result = scn::scan<T>(
  154|  44.4k|                global_locale,
  155|  44.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  44.4k|                scn::runtime_format(f));
  157|  44.4k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.89k, False: 36.5k]
  ------------------
  158|  7.89k|                break;
  159|  7.89k|            }
  160|  36.5k|            it = result->begin();
  161|  36.5k|        }
  162|  7.89k|    }
  163|       |
  164|       |    // scan_value
  165|    789|    {
  166|    789|        auto it = scn::ranges::begin(source);
  167|  6.85k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.85k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.85k|            auto result = scn::scan_value<T>(
  170|  6.85k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.85k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 789, False: 6.06k]
  ------------------
  172|    789|                break;
  173|    789|            }
  174|  6.06k|            it = result->begin();
  175|  6.06k|        }
  176|    789|    }
  177|    789|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    789|{
  133|       |    // Regular scan
  134|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.89k, False: 789]
  ------------------
  135|  7.89k|        auto it = scn::ranges::begin(source);
  136|  35.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  35.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  35.9k|            auto result = scn::scan<T>(
  139|  35.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  35.9k|                scn::runtime_format(f));
  141|  35.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.89k, False: 28.0k]
  ------------------
  142|  7.89k|                break;
  143|  7.89k|            }
  144|  28.0k|            it = result->begin();
  145|  28.0k|        }
  146|  7.89k|    }
  147|       |
  148|       |    // scan localized
  149|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.89k, False: 789]
  ------------------
  150|  7.89k|        auto it = scn::ranges::begin(source);
  151|  35.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  35.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  35.9k|            auto result = scn::scan<T>(
  154|  35.9k|                global_locale,
  155|  35.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  35.9k|                scn::runtime_format(f));
  157|  35.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.89k, False: 28.0k]
  ------------------
  158|  7.89k|                break;
  159|  7.89k|            }
  160|  28.0k|            it = result->begin();
  161|  28.0k|        }
  162|  7.89k|    }
  163|       |
  164|       |    // scan_value
  165|    789|    {
  166|    789|        auto it = scn::ranges::begin(source);
  167|  5.40k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.40k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.40k|            auto result = scn::scan_value<T>(
  170|  5.40k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.40k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 789, False: 4.61k]
  ------------------
  172|    789|                break;
  173|    789|            }
  174|  4.61k|            it = result->begin();
  175|  4.61k|        }
  176|    789|    }
  177|    789|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    789|{
  133|       |    // Regular scan
  134|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.89k, False: 789]
  ------------------
  135|  7.89k|        auto it = scn::ranges::begin(source);
  136|  37.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  37.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  37.3k|            auto result = scn::scan<T>(
  139|  37.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  37.3k|                scn::runtime_format(f));
  141|  37.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.89k, False: 29.4k]
  ------------------
  142|  7.89k|                break;
  143|  7.89k|            }
  144|  29.4k|            it = result->begin();
  145|  29.4k|        }
  146|  7.89k|    }
  147|       |
  148|       |    // scan localized
  149|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.89k, False: 789]
  ------------------
  150|  7.89k|        auto it = scn::ranges::begin(source);
  151|  37.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  37.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  37.3k|            auto result = scn::scan<T>(
  154|  37.3k|                global_locale,
  155|  37.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  37.3k|                scn::runtime_format(f));
  157|  37.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.89k, False: 29.4k]
  ------------------
  158|  7.89k|                break;
  159|  7.89k|            }
  160|  29.4k|            it = result->begin();
  161|  29.4k|        }
  162|  7.89k|    }
  163|       |
  164|       |    // scan_value
  165|    789|    {
  166|    789|        auto it = scn::ranges::begin(source);
  167|  5.79k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.79k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.79k|            auto result = scn::scan_value<T>(
  170|  5.79k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.79k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 789, False: 5.00k]
  ------------------
  172|    789|                break;
  173|    789|            }
  174|  5.00k|            it = result->begin();
  175|  5.00k|        }
  176|    789|    }
  177|    789|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    789|{
  133|       |    // Regular scan
  134|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.89k, False: 789]
  ------------------
  135|  7.89k|        auto it = scn::ranges::begin(source);
  136|  32.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  32.7k|            auto result = scn::scan<T>(
  139|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  32.7k|                scn::runtime_format(f));
  141|  32.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.89k, False: 24.8k]
  ------------------
  142|  7.89k|                break;
  143|  7.89k|            }
  144|  24.8k|            it = result->begin();
  145|  24.8k|        }
  146|  7.89k|    }
  147|       |
  148|       |    // scan localized
  149|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.89k, False: 789]
  ------------------
  150|  7.89k|        auto it = scn::ranges::begin(source);
  151|  32.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  32.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  32.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  32.7k|            auto result = scn::scan<T>(
  154|  32.7k|                global_locale,
  155|  32.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  32.7k|                scn::runtime_format(f));
  157|  32.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.89k, False: 24.8k]
  ------------------
  158|  7.89k|                break;
  159|  7.89k|            }
  160|  24.8k|            it = result->begin();
  161|  24.8k|        }
  162|  7.89k|    }
  163|       |
  164|       |    // scan_value
  165|    789|    {
  166|    789|        auto it = scn::ranges::begin(source);
  167|  4.79k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.79k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.79k|            auto result = scn::scan_value<T>(
  170|  4.79k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.79k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 789, False: 4.01k]
  ------------------
  172|    789|                break;
  173|    789|            }
  174|  4.01k|            it = result->begin();
  175|  4.01k|        }
  176|    789|    }
  177|    789|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    789|{
  133|       |    // Regular scan
  134|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.89k, False: 789]
  ------------------
  135|  7.89k|        auto it = scn::ranges::begin(source);
  136|  43.5k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  43.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  43.5k|            auto result = scn::scan<T>(
  139|  43.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  43.5k|                scn::runtime_format(f));
  141|  43.5k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.89k, False: 35.6k]
  ------------------
  142|  7.89k|                break;
  143|  7.89k|            }
  144|  35.6k|            it = result->begin();
  145|  35.6k|        }
  146|  7.89k|    }
  147|       |
  148|       |    // scan localized
  149|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.89k, False: 789]
  ------------------
  150|  7.89k|        auto it = scn::ranges::begin(source);
  151|  43.5k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  43.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  43.5k|            auto result = scn::scan<T>(
  154|  43.5k|                global_locale,
  155|  43.5k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  43.5k|                scn::runtime_format(f));
  157|  43.5k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.89k, False: 35.6k]
  ------------------
  158|  7.89k|                break;
  159|  7.89k|            }
  160|  35.6k|            it = result->begin();
  161|  35.6k|        }
  162|  7.89k|    }
  163|       |
  164|       |    // scan_value
  165|    789|    {
  166|    789|        auto it = scn::ranges::begin(source);
  167|  6.52k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.52k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.52k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.52k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.52k|            auto result = scn::scan_value<T>(
  170|  6.52k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.52k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 789, False: 5.73k]
  ------------------
  172|    789|                break;
  173|    789|            }
  174|  5.73k|            it = result->begin();
  175|  5.73k|        }
  176|    789|    }
  177|    789|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    789|{
  133|       |    // Regular scan
  134|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.89k, False: 789]
  ------------------
  135|  7.89k|        auto it = scn::ranges::begin(source);
  136|  35.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  35.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  35.6k|            auto result = scn::scan<T>(
  139|  35.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  35.6k|                scn::runtime_format(f));
  141|  35.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.89k, False: 27.7k]
  ------------------
  142|  7.89k|                break;
  143|  7.89k|            }
  144|  27.7k|            it = result->begin();
  145|  27.7k|        }
  146|  7.89k|    }
  147|       |
  148|       |    // scan localized
  149|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.89k, False: 789]
  ------------------
  150|  7.89k|        auto it = scn::ranges::begin(source);
  151|  35.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  35.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  35.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  35.6k|            auto result = scn::scan<T>(
  154|  35.6k|                global_locale,
  155|  35.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  35.6k|                scn::runtime_format(f));
  157|  35.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.89k, False: 27.7k]
  ------------------
  158|  7.89k|                break;
  159|  7.89k|            }
  160|  27.7k|            it = result->begin();
  161|  27.7k|        }
  162|  7.89k|    }
  163|       |
  164|       |    // scan_value
  165|    789|    {
  166|    789|        auto it = scn::ranges::begin(source);
  167|  5.30k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.30k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.30k|            auto result = scn::scan_value<T>(
  170|  5.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.30k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 789, False: 4.52k]
  ------------------
  172|    789|                break;
  173|    789|            }
  174|  4.52k|            it = result->begin();
  175|  4.52k|        }
  176|    789|    }
  177|    789|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    789|{
  133|       |    // Regular scan
  134|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.89k, False: 789]
  ------------------
  135|  7.89k|        auto it = scn::ranges::begin(source);
  136|  44.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  44.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  44.2k|            auto result = scn::scan<T>(
  139|  44.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  44.2k|                scn::runtime_format(f));
  141|  44.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.89k, False: 36.3k]
  ------------------
  142|  7.89k|                break;
  143|  7.89k|            }
  144|  36.3k|            it = result->begin();
  145|  36.3k|        }
  146|  7.89k|    }
  147|       |
  148|       |    // scan localized
  149|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.89k, False: 789]
  ------------------
  150|  7.89k|        auto it = scn::ranges::begin(source);
  151|  44.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  44.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  44.2k|            auto result = scn::scan<T>(
  154|  44.2k|                global_locale,
  155|  44.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  44.2k|                scn::runtime_format(f));
  157|  44.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.89k, False: 36.3k]
  ------------------
  158|  7.89k|                break;
  159|  7.89k|            }
  160|  36.3k|            it = result->begin();
  161|  36.3k|        }
  162|  7.89k|    }
  163|       |
  164|       |    // scan_value
  165|    789|    {
  166|    789|        auto it = scn::ranges::begin(source);
  167|  6.63k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  6.63k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  6.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  6.63k|            auto result = scn::scan_value<T>(
  170|  6.63k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  6.63k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 789, False: 5.85k]
  ------------------
  172|    789|                break;
  173|    789|            }
  174|  5.85k|            it = result->begin();
  175|  5.85k|        }
  176|    789|    }
  177|    789|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|    789|{
  133|       |    // Regular scan
  134|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 7.89k, False: 789]
  ------------------
  135|  7.89k|        auto it = scn::ranges::begin(source);
  136|  36.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  36.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  36.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  36.0k|            auto result = scn::scan<T>(
  139|  36.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  36.0k|                scn::runtime_format(f));
  141|  36.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 7.89k, False: 28.1k]
  ------------------
  142|  7.89k|                break;
  143|  7.89k|            }
  144|  28.1k|            it = result->begin();
  145|  28.1k|        }
  146|  7.89k|    }
  147|       |
  148|       |    // scan localized
  149|  7.89k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 7.89k, False: 789]
  ------------------
  150|  7.89k|        auto it = scn::ranges::begin(source);
  151|  36.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  36.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  36.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  36.0k|            auto result = scn::scan<T>(
  154|  36.0k|                global_locale,
  155|  36.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  36.0k|                scn::runtime_format(f));
  157|  36.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 7.89k, False: 28.1k]
  ------------------
  158|  7.89k|                break;
  159|  7.89k|            }
  160|  28.1k|            it = result->begin();
  161|  28.1k|        }
  162|  7.89k|    }
  163|       |
  164|       |    // scan_value
  165|    789|    {
  166|    789|        auto it = scn::ranges::begin(source);
  167|  5.37k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  5.37k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  5.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  5.37k|            auto result = scn::scan_value<T>(
  170|  5.37k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  5.37k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 789, False: 4.58k]
  ------------------
  172|    789|                break;
  173|    789|            }
  174|  4.58k|            it = result->begin();
  175|  4.58k|        }
  176|    789|    }
  177|    789|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    789|{
   90|    789|    using char_type = ranges::range_value_t<Source>;
   91|    789|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    789|    deque.clear();
   93|    789|    std::copy(ranges::begin(source), ranges::end(source),
   94|    789|              std::back_inserter(deque));
   95|    789|    return deque;
   96|    789|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    789|{
   79|    789|    if constexpr (std::is_same_v<CharT, char>) {
   80|    789|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|    789|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    789|{
  122|    789|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    789|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    789|    buf.resize(sizeof...(Args));
  125|    789|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    789|    return buf;
  127|    789|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    789|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|    789|    else {
  112|    789|        return wformat_string_view_buffer;
  113|    789|    }
  114|    789|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.57k|{
  185|  1.57k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.57k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.57k|                                   format_strings);
  188|  1.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.57k|{
  133|       |    // Regular scan
  134|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 15.7k, False: 1.57k]
  ------------------
  135|  15.7k|        auto it = scn::ranges::begin(source);
  136|  16.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  16.0k|            auto result = scn::scan<T>(
  139|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  16.0k|                scn::runtime_format(f));
  141|  16.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 15.7k, False: 242]
  ------------------
  142|  15.7k|                break;
  143|  15.7k|            }
  144|    242|            it = result->begin();
  145|    242|        }
  146|  15.7k|    }
  147|       |
  148|       |    // scan localized
  149|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 15.7k, False: 1.57k]
  ------------------
  150|  15.7k|        auto it = scn::ranges::begin(source);
  151|  16.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  16.0k|            auto result = scn::scan<T>(
  154|  16.0k|                global_locale,
  155|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  16.0k|                scn::runtime_format(f));
  157|  16.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 15.7k, False: 242]
  ------------------
  158|  15.7k|                break;
  159|  15.7k|            }
  160|    242|            it = result->begin();
  161|    242|        }
  162|  15.7k|    }
  163|       |
  164|       |    // scan_value
  165|  1.57k|    {
  166|  1.57k|        auto it = scn::ranges::begin(source);
  167|  1.61k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.61k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.61k|            auto result = scn::scan_value<T>(
  170|  1.61k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.61k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.57k, False: 39]
  ------------------
  172|  1.57k|                break;
  173|  1.57k|            }
  174|     39|            it = result->begin();
  175|     39|        }
  176|  1.57k|    }
  177|  1.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.57k|{
  133|       |    // Regular scan
  134|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 15.7k, False: 1.57k]
  ------------------
  135|  15.7k|        auto it = scn::ranges::begin(source);
  136|  15.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  15.9k|            auto result = scn::scan<T>(
  139|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  15.9k|                scn::runtime_format(f));
  141|  15.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 15.7k, False: 204]
  ------------------
  142|  15.7k|                break;
  143|  15.7k|            }
  144|    204|            it = result->begin();
  145|    204|        }
  146|  15.7k|    }
  147|       |
  148|       |    // scan localized
  149|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 15.7k, False: 1.57k]
  ------------------
  150|  15.7k|        auto it = scn::ranges::begin(source);
  151|  15.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  15.9k|            auto result = scn::scan<T>(
  154|  15.9k|                global_locale,
  155|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  15.9k|                scn::runtime_format(f));
  157|  15.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 15.7k, False: 204]
  ------------------
  158|  15.7k|                break;
  159|  15.7k|            }
  160|    204|            it = result->begin();
  161|    204|        }
  162|  15.7k|    }
  163|       |
  164|       |    // scan_value
  165|  1.57k|    {
  166|  1.57k|        auto it = scn::ranges::begin(source);
  167|  1.60k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.60k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.60k|            auto result = scn::scan_value<T>(
  170|  1.60k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.60k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.57k, False: 31]
  ------------------
  172|  1.57k|                break;
  173|  1.57k|            }
  174|     31|            it = result->begin();
  175|     31|        }
  176|  1.57k|    }
  177|  1.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.57k|{
  133|       |    // Regular scan
  134|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 15.7k, False: 1.57k]
  ------------------
  135|  15.7k|        auto it = scn::ranges::begin(source);
  136|  16.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  16.0k|            auto result = scn::scan<T>(
  139|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  16.0k|                scn::runtime_format(f));
  141|  16.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 15.7k, False: 295]
  ------------------
  142|  15.7k|                break;
  143|  15.7k|            }
  144|    295|            it = result->begin();
  145|    295|        }
  146|  15.7k|    }
  147|       |
  148|       |    // scan localized
  149|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 15.7k, False: 1.57k]
  ------------------
  150|  15.7k|        auto it = scn::ranges::begin(source);
  151|  16.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  16.0k|            auto result = scn::scan<T>(
  154|  16.0k|                global_locale,
  155|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  16.0k|                scn::runtime_format(f));
  157|  16.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 15.7k, False: 295]
  ------------------
  158|  15.7k|                break;
  159|  15.7k|            }
  160|    295|            it = result->begin();
  161|    295|        }
  162|  15.7k|    }
  163|       |
  164|       |    // scan_value
  165|  1.57k|    {
  166|  1.57k|        auto it = scn::ranges::begin(source);
  167|  1.62k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.62k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.62k|            auto result = scn::scan_value<T>(
  170|  1.62k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.62k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.57k, False: 49]
  ------------------
  172|  1.57k|                break;
  173|  1.57k|            }
  174|     49|            it = result->begin();
  175|     49|        }
  176|  1.57k|    }
  177|  1.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.57k|{
  133|       |    // Regular scan
  134|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 15.7k, False: 1.57k]
  ------------------
  135|  15.7k|        auto it = scn::ranges::begin(source);
  136|  16.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  16.0k|            auto result = scn::scan<T>(
  139|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  16.0k|                scn::runtime_format(f));
  141|  16.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 15.7k, False: 233]
  ------------------
  142|  15.7k|                break;
  143|  15.7k|            }
  144|    233|            it = result->begin();
  145|    233|        }
  146|  15.7k|    }
  147|       |
  148|       |    // scan localized
  149|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 15.7k, False: 1.57k]
  ------------------
  150|  15.7k|        auto it = scn::ranges::begin(source);
  151|  16.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  16.0k|            auto result = scn::scan<T>(
  154|  16.0k|                global_locale,
  155|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  16.0k|                scn::runtime_format(f));
  157|  16.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 15.7k, False: 233]
  ------------------
  158|  15.7k|                break;
  159|  15.7k|            }
  160|    233|            it = result->begin();
  161|    233|        }
  162|  15.7k|    }
  163|       |
  164|       |    // scan_value
  165|  1.57k|    {
  166|  1.57k|        auto it = scn::ranges::begin(source);
  167|  1.61k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.61k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.61k|            auto result = scn::scan_value<T>(
  170|  1.61k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.61k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.57k, False: 37]
  ------------------
  172|  1.57k|                break;
  173|  1.57k|            }
  174|     37|            it = result->begin();
  175|     37|        }
  176|  1.57k|    }
  177|  1.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.57k|{
  133|       |    // Regular scan
  134|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 15.7k, False: 1.57k]
  ------------------
  135|  15.7k|        auto it = scn::ranges::begin(source);
  136|  16.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  16.1k|            auto result = scn::scan<T>(
  139|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  16.1k|                scn::runtime_format(f));
  141|  16.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 15.7k, False: 348]
  ------------------
  142|  15.7k|                break;
  143|  15.7k|            }
  144|    348|            it = result->begin();
  145|    348|        }
  146|  15.7k|    }
  147|       |
  148|       |    // scan localized
  149|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 15.7k, False: 1.57k]
  ------------------
  150|  15.7k|        auto it = scn::ranges::begin(source);
  151|  16.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  16.1k|            auto result = scn::scan<T>(
  154|  16.1k|                global_locale,
  155|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  16.1k|                scn::runtime_format(f));
  157|  16.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 15.7k, False: 348]
  ------------------
  158|  15.7k|                break;
  159|  15.7k|            }
  160|    348|            it = result->begin();
  161|    348|        }
  162|  15.7k|    }
  163|       |
  164|       |    // scan_value
  165|  1.57k|    {
  166|  1.57k|        auto it = scn::ranges::begin(source);
  167|  1.63k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.63k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.63k|            auto result = scn::scan_value<T>(
  170|  1.63k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.63k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.57k, False: 60]
  ------------------
  172|  1.57k|                break;
  173|  1.57k|            }
  174|     60|            it = result->begin();
  175|     60|        }
  176|  1.57k|    }
  177|  1.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.57k|{
  133|       |    // Regular scan
  134|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 15.7k, False: 1.57k]
  ------------------
  135|  15.7k|        auto it = scn::ranges::begin(source);
  136|  16.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  16.0k|            auto result = scn::scan<T>(
  139|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  16.0k|                scn::runtime_format(f));
  141|  16.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 15.7k, False: 274]
  ------------------
  142|  15.7k|                break;
  143|  15.7k|            }
  144|    274|            it = result->begin();
  145|    274|        }
  146|  15.7k|    }
  147|       |
  148|       |    // scan localized
  149|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 15.7k, False: 1.57k]
  ------------------
  150|  15.7k|        auto it = scn::ranges::begin(source);
  151|  16.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  16.0k|            auto result = scn::scan<T>(
  154|  16.0k|                global_locale,
  155|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  16.0k|                scn::runtime_format(f));
  157|  16.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 15.7k, False: 274]
  ------------------
  158|  15.7k|                break;
  159|  15.7k|            }
  160|    274|            it = result->begin();
  161|    274|        }
  162|  15.7k|    }
  163|       |
  164|       |    // scan_value
  165|  1.57k|    {
  166|  1.57k|        auto it = scn::ranges::begin(source);
  167|  1.62k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.62k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.62k|            auto result = scn::scan_value<T>(
  170|  1.62k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.62k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.57k, False: 45]
  ------------------
  172|  1.57k|                break;
  173|  1.57k|            }
  174|     45|            it = result->begin();
  175|     45|        }
  176|  1.57k|    }
  177|  1.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.57k|{
  133|       |    // Regular scan
  134|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 15.7k, False: 1.57k]
  ------------------
  135|  15.7k|        auto it = scn::ranges::begin(source);
  136|  16.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  16.0k|            auto result = scn::scan<T>(
  139|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  16.0k|                scn::runtime_format(f));
  141|  16.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 15.7k, False: 242]
  ------------------
  142|  15.7k|                break;
  143|  15.7k|            }
  144|    242|            it = result->begin();
  145|    242|        }
  146|  15.7k|    }
  147|       |
  148|       |    // scan localized
  149|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 15.7k, False: 1.57k]
  ------------------
  150|  15.7k|        auto it = scn::ranges::begin(source);
  151|  16.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  16.0k|            auto result = scn::scan<T>(
  154|  16.0k|                global_locale,
  155|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  16.0k|                scn::runtime_format(f));
  157|  16.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 15.7k, False: 242]
  ------------------
  158|  15.7k|                break;
  159|  15.7k|            }
  160|    242|            it = result->begin();
  161|    242|        }
  162|  15.7k|    }
  163|       |
  164|       |    // scan_value
  165|  1.57k|    {
  166|  1.57k|        auto it = scn::ranges::begin(source);
  167|  1.61k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.61k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.61k|            auto result = scn::scan_value<T>(
  170|  1.61k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.61k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.57k, False: 39]
  ------------------
  172|  1.57k|                break;
  173|  1.57k|            }
  174|     39|            it = result->begin();
  175|     39|        }
  176|  1.57k|    }
  177|  1.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.57k|{
  133|       |    // Regular scan
  134|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 15.7k, False: 1.57k]
  ------------------
  135|  15.7k|        auto it = scn::ranges::begin(source);
  136|  15.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  15.9k|            auto result = scn::scan<T>(
  139|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  15.9k|                scn::runtime_format(f));
  141|  15.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 15.7k, False: 204]
  ------------------
  142|  15.7k|                break;
  143|  15.7k|            }
  144|    204|            it = result->begin();
  145|    204|        }
  146|  15.7k|    }
  147|       |
  148|       |    // scan localized
  149|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 15.7k, False: 1.57k]
  ------------------
  150|  15.7k|        auto it = scn::ranges::begin(source);
  151|  15.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  15.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  15.9k|            auto result = scn::scan<T>(
  154|  15.9k|                global_locale,
  155|  15.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  15.9k|                scn::runtime_format(f));
  157|  15.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 15.7k, False: 204]
  ------------------
  158|  15.7k|                break;
  159|  15.7k|            }
  160|    204|            it = result->begin();
  161|    204|        }
  162|  15.7k|    }
  163|       |
  164|       |    // scan_value
  165|  1.57k|    {
  166|  1.57k|        auto it = scn::ranges::begin(source);
  167|  1.60k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.60k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.60k|            auto result = scn::scan_value<T>(
  170|  1.60k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.60k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.57k, False: 31]
  ------------------
  172|  1.57k|                break;
  173|  1.57k|            }
  174|     31|            it = result->begin();
  175|     31|        }
  176|  1.57k|    }
  177|  1.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.57k|{
  133|       |    // Regular scan
  134|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 15.7k, False: 1.57k]
  ------------------
  135|  15.7k|        auto it = scn::ranges::begin(source);
  136|  16.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  16.0k|            auto result = scn::scan<T>(
  139|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  16.0k|                scn::runtime_format(f));
  141|  16.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 15.7k, False: 295]
  ------------------
  142|  15.7k|                break;
  143|  15.7k|            }
  144|    295|            it = result->begin();
  145|    295|        }
  146|  15.7k|    }
  147|       |
  148|       |    // scan localized
  149|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 15.7k, False: 1.57k]
  ------------------
  150|  15.7k|        auto it = scn::ranges::begin(source);
  151|  16.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  16.0k|            auto result = scn::scan<T>(
  154|  16.0k|                global_locale,
  155|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  16.0k|                scn::runtime_format(f));
  157|  16.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 15.7k, False: 295]
  ------------------
  158|  15.7k|                break;
  159|  15.7k|            }
  160|    295|            it = result->begin();
  161|    295|        }
  162|  15.7k|    }
  163|       |
  164|       |    // scan_value
  165|  1.57k|    {
  166|  1.57k|        auto it = scn::ranges::begin(source);
  167|  1.62k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.62k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.62k|            auto result = scn::scan_value<T>(
  170|  1.62k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.62k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.57k, False: 49]
  ------------------
  172|  1.57k|                break;
  173|  1.57k|            }
  174|     49|            it = result->begin();
  175|     49|        }
  176|  1.57k|    }
  177|  1.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.57k|{
  133|       |    // Regular scan
  134|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 15.7k, False: 1.57k]
  ------------------
  135|  15.7k|        auto it = scn::ranges::begin(source);
  136|  16.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  16.0k|            auto result = scn::scan<T>(
  139|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  16.0k|                scn::runtime_format(f));
  141|  16.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 15.7k, False: 233]
  ------------------
  142|  15.7k|                break;
  143|  15.7k|            }
  144|    233|            it = result->begin();
  145|    233|        }
  146|  15.7k|    }
  147|       |
  148|       |    // scan localized
  149|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 15.7k, False: 1.57k]
  ------------------
  150|  15.7k|        auto it = scn::ranges::begin(source);
  151|  16.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  16.0k|            auto result = scn::scan<T>(
  154|  16.0k|                global_locale,
  155|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  16.0k|                scn::runtime_format(f));
  157|  16.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 15.7k, False: 233]
  ------------------
  158|  15.7k|                break;
  159|  15.7k|            }
  160|    233|            it = result->begin();
  161|    233|        }
  162|  15.7k|    }
  163|       |
  164|       |    // scan_value
  165|  1.57k|    {
  166|  1.57k|        auto it = scn::ranges::begin(source);
  167|  1.61k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.61k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.61k|            auto result = scn::scan_value<T>(
  170|  1.61k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.61k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.57k, False: 37]
  ------------------
  172|  1.57k|                break;
  173|  1.57k|            }
  174|     37|            it = result->begin();
  175|     37|        }
  176|  1.57k|    }
  177|  1.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.57k|{
  133|       |    // Regular scan
  134|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 15.7k, False: 1.57k]
  ------------------
  135|  15.7k|        auto it = scn::ranges::begin(source);
  136|  16.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  16.1k|            auto result = scn::scan<T>(
  139|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  16.1k|                scn::runtime_format(f));
  141|  16.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 15.7k, False: 348]
  ------------------
  142|  15.7k|                break;
  143|  15.7k|            }
  144|    348|            it = result->begin();
  145|    348|        }
  146|  15.7k|    }
  147|       |
  148|       |    // scan localized
  149|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 15.7k, False: 1.57k]
  ------------------
  150|  15.7k|        auto it = scn::ranges::begin(source);
  151|  16.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  16.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  16.1k|            auto result = scn::scan<T>(
  154|  16.1k|                global_locale,
  155|  16.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  16.1k|                scn::runtime_format(f));
  157|  16.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 15.7k, False: 348]
  ------------------
  158|  15.7k|                break;
  159|  15.7k|            }
  160|    348|            it = result->begin();
  161|    348|        }
  162|  15.7k|    }
  163|       |
  164|       |    // scan_value
  165|  1.57k|    {
  166|  1.57k|        auto it = scn::ranges::begin(source);
  167|  1.63k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.63k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.63k|            auto result = scn::scan_value<T>(
  170|  1.63k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.63k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.57k, False: 60]
  ------------------
  172|  1.57k|                break;
  173|  1.57k|            }
  174|     60|            it = result->begin();
  175|     60|        }
  176|  1.57k|    }
  177|  1.57k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  1.57k|{
  133|       |    // Regular scan
  134|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 15.7k, False: 1.57k]
  ------------------
  135|  15.7k|        auto it = scn::ranges::begin(source);
  136|  16.0k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  16.0k|            auto result = scn::scan<T>(
  139|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  16.0k|                scn::runtime_format(f));
  141|  16.0k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 15.7k, False: 274]
  ------------------
  142|  15.7k|                break;
  143|  15.7k|            }
  144|    274|            it = result->begin();
  145|    274|        }
  146|  15.7k|    }
  147|       |
  148|       |    // scan localized
  149|  15.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 15.7k, False: 1.57k]
  ------------------
  150|  15.7k|        auto it = scn::ranges::begin(source);
  151|  16.0k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  16.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  16.0k|            auto result = scn::scan<T>(
  154|  16.0k|                global_locale,
  155|  16.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  16.0k|                scn::runtime_format(f));
  157|  16.0k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 15.7k, False: 274]
  ------------------
  158|  15.7k|                break;
  159|  15.7k|            }
  160|    274|            it = result->begin();
  161|    274|        }
  162|  15.7k|    }
  163|       |
  164|       |    // scan_value
  165|  1.57k|    {
  166|  1.57k|        auto it = scn::ranges::begin(source);
  167|  1.62k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  1.62k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  1.62k|            auto result = scn::scan_value<T>(
  170|  1.62k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  1.62k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.57k, False: 45]
  ------------------
  172|  1.57k|                break;
  173|  1.57k|            }
  174|     45|            it = result->begin();
  175|     45|        }
  176|  1.57k|    }
  177|  1.57k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.57k|{
   90|  1.57k|    using char_type = ranges::range_value_t<Source>;
   91|  1.57k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.57k|    deque.clear();
   93|  1.57k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.57k|              std::back_inserter(deque));
   95|  1.57k|    return deque;
   96|  1.57k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.57k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  1.57k|    else {
   83|  1.57k|        return wnoncontiguous_buffer;
   84|  1.57k|    }
   85|  1.57k|}

LLVMFuzzerTestOneInput:
   59|    789|{
   60|    789|    scn::fuzz::run(data, size);
   61|    789|    return 0;
   62|    789|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    789|{
   36|    789|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 789]
  |  Branch (36:35): [True: 0, False: 789]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|    789|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    789|    const auto& f =
   43|    789|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|    789|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|    789|    do_basic_run(sv, f);
   46|       |
   47|    789|    const auto& wf = get_format_strings<wchar_t>(
   48|    789|        L"{}", L"{:i}", L"{:d}", L"{:L}", L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|    789|        L"{:'}", L"{:'L}");
   50|    789|    do_basic_run(wsv_reinterpret, wf);
   51|    789|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 789, False: 0]
  ------------------
   52|    789|        do_basic_run(wsv_transcode, wf);
   53|    789|    }
   54|    789|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    789|{
   25|    789|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    789|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    789|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    789|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    789|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    789|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    789|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    789|{
   25|    789|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|    789|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|    789|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|    789|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|    789|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|    789|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|    789|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.57k|{
   25|  1.57k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.57k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.57k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.57k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.57k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.57k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.57k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.57k|{
   25|  1.57k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  1.57k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  1.57k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  1.57k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  1.57k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  1.57k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  1.57k|}

