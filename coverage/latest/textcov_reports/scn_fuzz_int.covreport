_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|   109k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  2.36k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  8.28k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  8.28k|  return idx < lenminusstep;
   70|  8.28k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  5.91k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  5.91k|  return &buf[idx];
   75|  5.91k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  8.28k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  8.28k|  idx += STEP_SIZE;
   88|  8.28k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  2.36k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  2.36k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 2.36k]
  ------------------
   80|  2.36k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  2.36k|  std::memcpy(dst, buf + idx, len - idx);
   82|  2.36k|  return len - idx;
   83|  2.36k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  1.78k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  1.78k|    size_t pos = 0;
   12|  1.78k|    size_t count = 0;
   13|  6.41k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 4.62k, False: 1.78k]
  ------------------
   14|  4.62k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  4.62k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  4.62k|      count += count_ones(utf8_continuation_mask);
   17|  4.62k|    }
   18|  1.78k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  1.78k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|   103k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|   103k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|   103k|      size_t pos = 0;
  131|   103k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|   103k|      size_t leading_byte = 0;
  139|   103k|      size_t margin = size;
  140|   228k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 125k, False: 103k]
  |  Branch (140:27): [True: 125k, False: 0]
  ------------------
  141|   125k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   125k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|   103k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|   103k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 103k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|   103k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 103k]
  ------------------
  195|   103k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 103k, False: 0]
  ------------------
  196|   103k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|   103k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 6.74k, False: 96.5k]
  ------------------
  198|  96.5k|        utf32_output += howmany;
  199|  96.5k|      }
  200|  96.5k|      return utf32_output - start;
  201|   103k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|   103k|    simdutf_really_inline bool errors() const {
  291|   103k|      return this->error.any_bits_set_anywhere();
  292|   103k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  1.78k|    char32_t* utf32_output) noexcept {
   13|  1.78k|  size_t pos = 0;
   14|  1.78k|  char32_t* start{utf32_output};
   15|  1.78k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  6.26k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 4.47k, False: 1.78k]
  ------------------
   17|  4.47k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  4.47k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 3.76k, False: 702]
  ------------------
   19|  3.76k|      in.store_ascii_as_utf32(utf32_output);
   20|  3.76k|      utf32_output += 64;
   21|  3.76k|      pos += 64;
   22|  3.76k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    702|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    702|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    702|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    702|    size_t max_starting_point = (pos + 64) - 12;
   28|  4.97k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 4.27k, False: 702]
  ------------------
   29|  4.27k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  4.27k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  4.27k|      pos += consumed;
   32|  4.27k|      utf8_end_of_code_point_mask >>= consumed;
   33|  4.27k|      }
   34|    702|    }
   35|  4.47k|  }
   36|  1.78k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  1.78k|  return utf32_output - start;
   38|  1.78k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  8.28k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  8.28k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  8.28k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 6.70k, False: 1.57k]
  |  |  ------------------
  ------------------
  154|  6.70k|        this->error |= this->prev_incomplete;
  155|  6.70k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.57k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.57k|            "We support either two or four chunks per 64-byte block.");
  159|  1.57k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.57k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.57k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.57k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.57k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.57k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.57k|      }
  172|  8.28k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.14k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.14k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.14k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.14k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.14k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.14k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.14k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.14k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.14k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.14k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.14k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.14k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.14k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.14k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.14k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.14k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.14k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.14k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.14k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.14k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.14k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.14k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.14k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.14k|    );
   51|  3.14k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.14k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.14k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.14k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.14k|      CARRY,
   59|  3.14k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.14k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.14k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.14k|    );
   80|  3.14k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.14k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.14k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.14k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.14k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.14k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.14k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.14k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.14k|    );
   96|  3.14k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.14k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.14k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.14k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.14k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.14k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.14k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.14k|    return must23_80 ^ sc;
  105|  3.14k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.57k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.57k|    static const uint8_t max_array[32] = {
  115|  1.57k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.57k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.57k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.57k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.57k|    };
  120|  1.57k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.57k|    return input.gt_bits(max_value);
  122|  1.57k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  2.36k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  2.36k|      this->error |= this->prev_incomplete;
  150|  2.36k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  2.36k|    simdutf_really_inline bool errors() const {
  176|  2.36k|      return this->error.any_bits_set_anywhere();
  177|  2.36k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  2.36k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  2.36k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  2.36k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  2.36k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  2.36k|    checker c{};
   12|  2.36k|    buf_block_reader<64> reader(input, length);
   13|  8.28k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 5.91k, False: 2.36k]
  ------------------
   14|  5.91k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  5.91k|      c.check_next_input(in);
   16|  5.91k|      reader.advance();
   17|  5.91k|    }
   18|  2.36k|    uint8_t block[64]{};
   19|  2.36k|    reader.get_remainder(block);
   20|  2.36k|    simd::simd8x64<uint8_t> in(block);
   21|  2.36k|    c.check_next_input(in);
   22|  2.36k|    reader.advance();
   23|  2.36k|    c.check_eof();
   24|  2.36k|    return !c.errors();
   25|  2.36k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  4.27k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  4.27k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  4.27k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  4.27k|      utf8_end_of_code_point_mask & 0xfff;
   24|  4.27k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.17k, False: 3.09k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.17k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.17k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.17k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.17k|    return 16; // We consumed 16 bytes.
   30|  1.17k|  }
   31|  3.09k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 66, False: 3.02k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|     66|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|     66|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|     66|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|     66|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|     66|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|     66|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|     66|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|     66|    return 16;
   42|     66|  }
   43|  3.02k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 82, False: 2.94k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|     82|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|     82|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|     82|    const __m128i ascii =
   49|     82|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|     82|    const __m128i middlebyte =
   51|     82|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|     82|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|     82|    const __m128i highbyte =
   54|     82|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|     82|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|     82|    const __m128i composed =
   57|     82|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|     82|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|     82|    utf32_output += 4;
   60|     82|    return 12;
   61|     82|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  2.94k|  const uint8_t idx =
   65|  2.94k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  2.94k|  const uint8_t consumed =
   67|  2.94k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  2.94k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 1.93k, False: 1.01k]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  1.93k|    const __m128i sh =
   75|  1.93k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  1.93k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  1.93k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  1.93k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  1.93k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  1.93k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  1.93k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  1.93k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 915, False: 99]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|    915|    const __m128i sh =
   86|    915|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|    915|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|    915|    const __m128i ascii =
   89|    915|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|    915|    const __m128i middlebyte =
   91|    915|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|    915|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|    915|    const __m128i highbyte =
   94|    915|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|    915|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|    915|    const __m128i composed =
   97|    915|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|    915|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|    915|    utf32_output += 4;
  100|    915|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 99, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|     99|    const __m128i sh =
  103|     99|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|     99|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|     99|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|     99|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|     99|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|     99|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|     99|    const __m128i correct =
  111|     99|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|     99|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|     99|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|     99|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|     99|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|     99|    const __m128i composed =
  117|     99|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|     99|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|     99|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|     99|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|     99|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  2.94k|  return consumed;
  125|  3.02k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|  2.36k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|  2.36k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|  2.36k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|   103k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|   103k|  utf8_to_utf32::validating_transcoder converter;
  276|   103k|  return converter.convert(buf, len, utf32_output);
  277|   103k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  1.78k|    char32_t* utf32_output) const noexcept {
  286|  1.78k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  1.78k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|  1.78k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|  1.78k|  return utf8::count_code_points(input, length);
  778|  1.78k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  8.28k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  8.28k|  return input.reduce_or().is_ascii();
   25|  8.28k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.14k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.14k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  3.14k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  3.14k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  3.14k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|   109k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|   109k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|   109k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|   109k|    return active_implementation;
  815|   109k|}
_ZN7simdutf13validate_utf8EPKcm:
  817|  2.36k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|  2.36k|  return get_active_implementation()->validate_utf8(buf, len);
  819|  2.36k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|   103k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|   103k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|   103k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  1.78k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  1.78k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  1.78k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|  1.78k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|  1.78k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|  1.78k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  1.78k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  1.78k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  1.78k|    size_t counter{0};
  171|  46.5k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 44.7k, False: 1.78k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  44.7k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 44.3k, False: 411]
  ------------------
  174|  44.7k|    }
  175|  1.78k|    return counter;
  176|  1.78k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|   103k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|   103k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|   103k|  size_t pos = 0;
   12|   103k|  char32_t* start{utf32_output};
   13|   199k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 103k, False: 96.5k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|   103k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 103k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|   103k|    uint8_t leading_byte = data[pos]; // leading byte
   31|   103k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 90.1k, False: 13.1k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  90.1k|      *utf32_output++ = char32_t(leading_byte);
   34|  90.1k|      pos++;
   35|  90.1k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 7.37k, False: 5.75k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  7.37k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 7.37k]
  ------------------
   38|  7.37k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 2.80k, False: 4.57k]
  ------------------
   39|       |      // range check
   40|  4.57k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  4.57k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 141, False: 4.43k]
  |  Branch (41:32): [True: 0, False: 4.43k]
  ------------------
   42|  4.43k|      *utf32_output++ = char32_t(code_point);
   43|  4.43k|      pos += 2;
   44|  5.75k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 2.74k, False: 3.01k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  2.74k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 2.74k]
  ------------------
   47|       |
   48|  2.74k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 1.10k, False: 1.63k]
  ------------------
   49|  1.63k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 189, False: 1.44k]
  ------------------
   50|       |      // range check
   51|  1.44k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  1.44k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  1.44k|                   (data[pos + 2] & 0b00111111);
   54|  1.44k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 141, False: 1.30k]
  |  Branch (54:33): [True: 0, False: 1.30k]
  ------------------
   55|  1.44k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 278, False: 1.02k]
  |  Branch (55:35): [True: 137, False: 141]
  ------------------
   56|    278|        return 0;
   57|    278|      }
   58|  1.17k|      *utf32_output++ = char32_t(code_point);
   59|  1.17k|      pos += 3;
   60|  3.01k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 3.01k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  3.01k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 3.01k]
  ------------------
   63|  3.01k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 1.13k, False: 1.88k]
  ------------------
   64|  1.88k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 157, False: 1.72k]
  ------------------
   65|  1.72k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 141, False: 1.58k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.58k|      uint32_t code_point =
   69|  1.58k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.58k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.58k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 649, False: 934]
  |  Branch (71:35): [True: 147, False: 787]
  ------------------
   72|    787|      *utf32_output++ = char32_t(code_point);
   73|    787|      pos += 4;
   74|    787|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|   103k|  }
   78|  96.5k|  return utf32_output - start;
   79|   103k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  1.78k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  1.78k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  1.78k|  size_t pos = 0;
   12|  1.78k|  char32_t* start{utf32_output};
   13|  14.9k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 13.1k, False: 1.78k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  13.1k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 7.14k, False: 6.01k]
  ------------------
   16|  7.14k|      uint64_t v;
   17|  7.14k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  7.14k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 6.73k, False: 417]
  ------------------
   19|  6.73k|        size_t final_pos = pos + 8;
   20|  60.5k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 53.8k, False: 6.73k]
  ------------------
   21|  53.8k|          *utf32_output++ = char32_t(buf[pos]);
   22|  53.8k|          pos++;
   23|  53.8k|        }
   24|  6.73k|        continue;
   25|  6.73k|      }
   26|  7.14k|    }
   27|  6.42k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  6.42k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 6.13k, False: 295]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  6.13k|      *utf32_output++ = char32_t(leading_byte);
   31|  6.13k|      pos++;
   32|  6.13k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 167, False: 128]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    167|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 167]
  ------------------
   35|    167|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    167|      pos += 2;
   37|    167|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 79, False: 49]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|     79|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 79]
  ------------------
   40|     79|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|     79|      pos += 3;
   42|     79|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 49, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     49|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 49]
  ------------------
   45|     49|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     49|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     49|      *utf32_output++ = char32_t(code_word);
   48|     49|      pos += 4;
   49|     49|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  6.42k|  }
   54|  1.78k|  return utf32_output - start;
   55|  1.78k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  4.62k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  4.62k|  return _popcnt64(input_num);
   16|  4.62k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  7.09k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  7.09k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  7.09k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  7.09k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  8.28k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  18.1k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  18.1k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  18.1k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|   231k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|   231k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|   231k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|   231k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  8.28k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  8.28k|      return this->chunks[0] | this->chunks[1];
  297|  8.28k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  23.6k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|   370k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  8.28k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  12.2k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.14k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.14k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.14k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  6.29k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  9.44k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  9.44k|      return lookup_16(simd8<L>::repeat_16(
  140|  9.44k|        replace0,  replace1,  replace2,  replace3,
  141|  9.44k|        replace4,  replace5,  replace6,  replace7,
  142|  9.44k|        replace8,  replace9,  replace10, replace11,
  143|  9.44k|        replace12, replace13, replace14, replace15
  144|  9.44k|      ));
  145|  9.44k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  9.44k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  9.44k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  9.44k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  12.5k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  9.44k|    ) {
  218|  9.44k|      return simd8<uint8_t>(
  219|  9.44k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  9.44k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  9.44k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  9.44k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  9.44k|      );
  224|  9.44k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  9.44k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  18.8k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   122k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   122k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.14k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.14k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.14k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.14k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.14k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.14k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  7.87k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  34.2k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  34.2k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  34.2k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  34.2k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  12.3k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  71.1k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  13.8k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  13.8k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  13.8k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  3.14k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  8.47k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.14k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.14k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.57k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.57k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|   105k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|   105k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  9.09k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  18.1k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  18.1k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  18.1k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  4.47k|    simdutf_really_inline bool is_ascii() const {
  300|  4.47k|      return this->reduce_or().is_ascii();
  301|  4.47k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  4.47k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  4.47k|      return this->chunks[0] | this->chunks[1];
  297|  4.47k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  4.47k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  4.47k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    702|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    702|      const simd8<T> mask = simd8<T>::splat(m);
  364|    702|      return  simd8x64<bool>(
  365|    702|        this->chunks[0] < mask,
  366|    702|        this->chunks[1] < mask
  367|    702|      ).to_bitmask();
  368|    702|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  1.40k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  5.32k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  5.32k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  5.32k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  5.32k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  5.32k|      return r_lo | (r_hi << 32);
  287|  5.32k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  10.6k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  10.6k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  3.76k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  3.76k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  3.76k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  3.76k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  7.53k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  7.53k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  7.53k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  7.53k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  7.53k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  7.53k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  4.62k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  4.62k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  4.62k|      return  simd8x64<bool>(
  373|  4.62k|        this->chunks[0] > mask,
  374|  4.62k|        this->chunks[1] > mask
  375|  4.62k|      ).to_bitmask();
  376|  4.62k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   624k|{
  619|   624k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   624k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   624k|    static_cast<    \
  |  |  247|   624k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   624k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|  1.36M|{
  387|  1.36M|    static_assert(
  388|  1.36M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.36M|        "Scan argument types must be default constructible");
  390|  1.36M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.36M|                  "Scan argument types must be Destructible");
  392|  1.36M|    static_assert(
  393|  1.36M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.36M|        "Scan argument types must not be references");
  395|  1.36M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   624k|    {
  564|   624k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   624k|    {
  574|   624k|        return {
  575|   624k|            detail::make_arg<base::is_packed, Context,
  576|   624k|                             detail::mapped_type_constant<
  577|   624k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   624k|                args)...};
  579|   624k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   624k|{
  415|   624k|    return make_value<Context>(value);
  416|   624k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|   688k|{
  372|   688k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   688k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   688k|                                  needs_context_tag>) {
  376|   688k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   688k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   688k|    }
  378|   688k|    else {
  379|   688k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   688k|            value, context_tag<Context>{}));
  381|   688k|    }
  382|   688k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|   688k|    {                                                                        \
  217|   688k|        return val;                                                          \
  218|   688k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|  1.36M|{
  341|  1.36M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.36M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.36M|    constexpr bool scannable_char =
  345|  1.36M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.36M|    static_assert(scannable_char,
  347|  1.36M|                  "Cannot scan an argument of an unsupported character "
  348|  1.36M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.36M|    constexpr bool scannable_const =
  351|  1.36M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.36M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.36M|    constexpr bool scannable_disabled =
  355|  1.36M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.36M|    static_assert(scannable_disabled,
  357|  1.36M|                  "Cannot scan an argument that has been disabled by "
  358|  1.36M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.36M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.36M|    static_assert(
  362|  1.36M|        scannable,
  363|  1.36M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.36M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.36M|    return arg_value{arg};
  367|  1.36M|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|  1.36M|    {
  160|  1.36M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   624k|    {
  647|   624k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  4.51M|    {
  694|  4.51M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   529k|    {
  554|   529k|        return m_args;
  555|   529k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  63.8k|{
  400|  63.8k|    check_scan_arg_types<T>();
  401|       |
  402|  63.8k|    basic_scan_arg<Context> arg;
  403|  63.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  63.8k|    arg.m_value = make_value<Context>(value);
  405|  63.8k|    return arg;
  406|  63.8k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  4.95M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  9.72M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   622k|{
  619|   622k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   622k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   622k|    static_cast<    \
  |  |  247|   622k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   622k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|  1.36M|{
  387|  1.36M|    static_assert(
  388|  1.36M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.36M|        "Scan argument types must be default constructible");
  390|  1.36M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.36M|                  "Scan argument types must be Destructible");
  392|  1.36M|    static_assert(
  393|  1.36M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.36M|        "Scan argument types must not be references");
  395|  1.36M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   622k|    {
  564|   622k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   622k|    {
  574|   622k|        return {
  575|   622k|            detail::make_arg<base::is_packed, Context,
  576|   622k|                             detail::mapped_type_constant<
  577|   622k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   622k|                args)...};
  579|   622k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   622k|{
  415|   622k|    return make_value<Context>(value);
  416|   622k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|   683k|{
  372|   683k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   683k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   683k|                                  needs_context_tag>) {
  376|   683k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   683k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   683k|    }
  378|   683k|    else {
  379|   683k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   683k|            value, context_tag<Context>{}));
  381|   683k|    }
  382|   683k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|   683k|    {                                                                        \
  217|   683k|        return val;                                                          \
  218|   683k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|  1.36M|{
  341|  1.36M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.36M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.36M|    constexpr bool scannable_char =
  345|  1.36M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.36M|    static_assert(scannable_char,
  347|  1.36M|                  "Cannot scan an argument of an unsupported character "
  348|  1.36M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.36M|    constexpr bool scannable_const =
  351|  1.36M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.36M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.36M|    constexpr bool scannable_disabled =
  355|  1.36M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.36M|    static_assert(scannable_disabled,
  357|  1.36M|                  "Cannot scan an argument that has been disabled by "
  358|  1.36M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.36M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.36M|    static_assert(
  362|  1.36M|        scannable,
  363|  1.36M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.36M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.36M|    return arg_value{arg};
  367|  1.36M|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|  1.36M|    {
  160|  1.36M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   622k|    {
  647|   622k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   527k|    {
  554|   527k|        return m_args;
  555|   527k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  61.3k|{
  400|  61.3k|    check_scan_arg_types<T>();
  401|       |
  402|  61.3k|    basic_scan_arg<Context> arg;
  403|  61.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  61.3k|    arg.m_value = make_value<Context>(value);
  405|  61.3k|    return arg;
  406|  61.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   874k|{
  619|   874k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   874k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   874k|    static_cast<    \
  |  |  247|   874k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   874k|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  1.86M|{
  387|  1.86M|    static_assert(
  388|  1.86M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.86M|        "Scan argument types must be default constructible");
  390|  1.86M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.86M|                  "Scan argument types must be Destructible");
  392|  1.86M|    static_assert(
  393|  1.86M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.86M|        "Scan argument types must not be references");
  395|  1.86M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   874k|    {
  564|   874k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   874k|    {
  574|   874k|        return {
  575|   874k|            detail::make_arg<base::is_packed, Context,
  576|   874k|                             detail::mapped_type_constant<
  577|   874k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   874k|                args)...};
  579|   874k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   874k|{
  415|   874k|    return make_value<Context>(value);
  416|   874k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|   958k|{
  372|   958k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   958k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   958k|                                  needs_context_tag>) {
  376|   958k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   958k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   958k|    }
  378|   958k|    else {
  379|   958k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   958k|            value, context_tag<Context>{}));
  381|   958k|    }
  382|   958k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|   958k|    {                                                                        \
  217|   958k|        return val;                                                          \
  218|   958k|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  1.86M|{
  341|  1.86M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.86M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.86M|    constexpr bool scannable_char =
  345|  1.86M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.86M|    static_assert(scannable_char,
  347|  1.86M|                  "Cannot scan an argument of an unsupported character "
  348|  1.86M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.86M|    constexpr bool scannable_const =
  351|  1.86M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.86M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.86M|    constexpr bool scannable_disabled =
  355|  1.86M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.86M|    static_assert(scannable_disabled,
  357|  1.86M|                  "Cannot scan an argument that has been disabled by "
  358|  1.86M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.86M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.86M|    static_assert(
  362|  1.86M|        scannable,
  363|  1.86M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.86M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.86M|    return arg_value{arg};
  367|  1.86M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  1.86M|    {
  160|  1.86M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   874k|    {
  647|   874k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|   779k|    {
  554|   779k|        return m_args;
  555|   779k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  83.9k|{
  400|  83.9k|    check_scan_arg_types<T>();
  401|       |
  402|  83.9k|    basic_scan_arg<Context> arg;
  403|  83.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  83.9k|    arg.m_value = make_value<Context>(value);
  405|  83.9k|    return arg;
  406|  83.9k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   749k|{
  619|   749k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   749k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   749k|    static_cast<    \
  |  |  247|   749k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   749k|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  1.61M|{
  387|  1.61M|    static_assert(
  388|  1.61M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.61M|        "Scan argument types must be default constructible");
  390|  1.61M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.61M|                  "Scan argument types must be Destructible");
  392|  1.61M|    static_assert(
  393|  1.61M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.61M|        "Scan argument types must not be references");
  395|  1.61M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   749k|    {
  564|   749k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   749k|    {
  574|   749k|        return {
  575|   749k|            detail::make_arg<base::is_packed, Context,
  576|   749k|                             detail::mapped_type_constant<
  577|   749k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   749k|                args)...};
  579|   749k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   749k|{
  415|   749k|    return make_value<Context>(value);
  416|   749k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|   820k|{
  372|   820k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   820k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   820k|                                  needs_context_tag>) {
  376|   820k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   820k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   820k|    }
  378|   820k|    else {
  379|   820k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   820k|            value, context_tag<Context>{}));
  381|   820k|    }
  382|   820k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|   820k|    {                                                                        \
  217|   820k|        return val;                                                          \
  218|   820k|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  1.61M|{
  341|  1.61M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.61M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.61M|    constexpr bool scannable_char =
  345|  1.61M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.61M|    static_assert(scannable_char,
  347|  1.61M|                  "Cannot scan an argument of an unsupported character "
  348|  1.61M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.61M|    constexpr bool scannable_const =
  351|  1.61M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.61M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.61M|    constexpr bool scannable_disabled =
  355|  1.61M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.61M|    static_assert(scannable_disabled,
  357|  1.61M|                  "Cannot scan an argument that has been disabled by "
  358|  1.61M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.61M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.61M|    static_assert(
  362|  1.61M|        scannable,
  363|  1.61M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.61M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.61M|    return arg_value{arg};
  367|  1.61M|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  1.61M|    {
  160|  1.61M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   749k|    {
  647|   749k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|   654k|    {
  554|   654k|        return m_args;
  555|   654k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  71.5k|{
  400|  71.5k|    check_scan_arg_types<T>();
  401|       |
  402|  71.5k|    basic_scan_arg<Context> arg;
  403|  71.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  71.5k|    arg.m_value = make_value<Context>(value);
  405|  71.5k|    return arg;
  406|  71.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   889k|{
  619|   889k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   889k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   889k|    static_cast<    \
  |  |  247|   889k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   889k|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|  1.89M|{
  387|  1.89M|    static_assert(
  388|  1.89M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.89M|        "Scan argument types must be default constructible");
  390|  1.89M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.89M|                  "Scan argument types must be Destructible");
  392|  1.89M|    static_assert(
  393|  1.89M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.89M|        "Scan argument types must not be references");
  395|  1.89M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   889k|    {
  564|   889k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   889k|    {
  574|   889k|        return {
  575|   889k|            detail::make_arg<base::is_packed, Context,
  576|   889k|                             detail::mapped_type_constant<
  577|   889k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   889k|                args)...};
  579|   889k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   889k|{
  415|   889k|    return make_value<Context>(value);
  416|   889k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|   974k|{
  372|   974k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   974k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   974k|                                  needs_context_tag>) {
  376|   974k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   974k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   974k|    }
  378|   974k|    else {
  379|   974k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   974k|            value, context_tag<Context>{}));
  381|   974k|    }
  382|   974k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|   974k|    {                                                                        \
  217|   974k|        return val;                                                          \
  218|   974k|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|  1.89M|{
  341|  1.89M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.89M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.89M|    constexpr bool scannable_char =
  345|  1.89M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.89M|    static_assert(scannable_char,
  347|  1.89M|                  "Cannot scan an argument of an unsupported character "
  348|  1.89M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.89M|    constexpr bool scannable_const =
  351|  1.89M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.89M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.89M|    constexpr bool scannable_disabled =
  355|  1.89M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.89M|    static_assert(scannable_disabled,
  357|  1.89M|                  "Cannot scan an argument that has been disabled by "
  358|  1.89M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.89M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.89M|    static_assert(
  362|  1.89M|        scannable,
  363|  1.89M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.89M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.89M|    return arg_value{arg};
  367|  1.89M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  1.89M|    {
  160|  1.89M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   889k|    {
  647|   889k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|   794k|    {
  554|   794k|        return m_args;
  555|   794k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|  85.3k|{
  400|  85.3k|    check_scan_arg_types<T>();
  401|       |
  402|  85.3k|    basic_scan_arg<Context> arg;
  403|  85.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  85.3k|    arg.m_value = make_value<Context>(value);
  405|  85.3k|    return arg;
  406|  85.3k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   755k|{
  619|   755k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   755k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   755k|    static_cast<    \
  |  |  247|   755k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   755k|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|  1.62M|{
  387|  1.62M|    static_assert(
  388|  1.62M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.62M|        "Scan argument types must be default constructible");
  390|  1.62M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.62M|                  "Scan argument types must be Destructible");
  392|  1.62M|    static_assert(
  393|  1.62M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.62M|        "Scan argument types must not be references");
  395|  1.62M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   755k|    {
  564|   755k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   755k|    {
  574|   755k|        return {
  575|   755k|            detail::make_arg<base::is_packed, Context,
  576|   755k|                             detail::mapped_type_constant<
  577|   755k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   755k|                args)...};
  579|   755k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   755k|{
  415|   755k|    return make_value<Context>(value);
  416|   755k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|   827k|{
  372|   827k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   827k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   827k|                                  needs_context_tag>) {
  376|   827k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   827k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   827k|    }
  378|   827k|    else {
  379|   827k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   827k|            value, context_tag<Context>{}));
  381|   827k|    }
  382|   827k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|   827k|    {                                                                        \
  217|   827k|        return val;                                                          \
  218|   827k|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|  1.62M|{
  341|  1.62M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.62M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.62M|    constexpr bool scannable_char =
  345|  1.62M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.62M|    static_assert(scannable_char,
  347|  1.62M|                  "Cannot scan an argument of an unsupported character "
  348|  1.62M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.62M|    constexpr bool scannable_const =
  351|  1.62M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.62M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.62M|    constexpr bool scannable_disabled =
  355|  1.62M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.62M|    static_assert(scannable_disabled,
  357|  1.62M|                  "Cannot scan an argument that has been disabled by "
  358|  1.62M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.62M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.62M|    static_assert(
  362|  1.62M|        scannable,
  363|  1.62M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.62M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.62M|    return arg_value{arg};
  367|  1.62M|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|  1.62M|    {
  160|  1.62M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   755k|    {
  647|   755k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|   660k|    {
  554|   660k|        return m_args;
  555|   660k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  72.0k|{
  400|  72.0k|    check_scan_arg_types<T>();
  401|       |
  402|  72.0k|    basic_scan_arg<Context> arg;
  403|  72.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  72.0k|    arg.m_value = make_value<Context>(value);
  405|  72.0k|    return arg;
  406|  72.0k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   613k|{
  619|   613k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   613k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   613k|    static_cast<    \
  |  |  247|   613k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   613k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   613k|    {
  564|   613k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   613k|    {
  574|   613k|        return {
  575|   613k|            detail::make_arg<base::is_packed, Context,
  576|   613k|                             detail::mapped_type_constant<
  577|   613k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   613k|                args)...};
  579|   613k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   613k|{
  415|   613k|    return make_value<Context>(value);
  416|   613k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|   672k|{
  372|   672k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   672k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   672k|                                  needs_context_tag>) {
  376|   672k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   672k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   672k|    }
  378|   672k|    else {
  379|   672k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   672k|            value, context_tag<Context>{}));
  381|   672k|    }
  382|   672k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|   672k|    {                                                                        \
  217|   672k|        return val;                                                          \
  218|   672k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   613k|    {
  647|   613k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  4.36M|    {
  694|  4.36M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   446k|    {
  554|   446k|        return m_args;
  555|   446k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  59.3k|{
  400|  59.3k|    check_scan_arg_types<T>();
  401|       |
  402|  59.3k|    basic_scan_arg<Context> arg;
  403|  59.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  59.3k|    arg.m_value = make_value<Context>(value);
  405|  59.3k|    return arg;
  406|  59.3k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  4.76M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   622k|{
  619|   622k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   622k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   622k|    static_cast<    \
  |  |  247|   622k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   622k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   622k|    {
  564|   622k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   622k|    {
  574|   622k|        return {
  575|   622k|            detail::make_arg<base::is_packed, Context,
  576|   622k|                             detail::mapped_type_constant<
  577|   622k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   622k|                args)...};
  579|   622k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   622k|{
  415|   622k|    return make_value<Context>(value);
  416|   622k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|   679k|{
  372|   679k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   679k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   679k|                                  needs_context_tag>) {
  376|   679k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   679k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   679k|    }
  378|   679k|    else {
  379|   679k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   679k|            value, context_tag<Context>{}));
  381|   679k|    }
  382|   679k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|   679k|    {                                                                        \
  217|   679k|        return val;                                                          \
  218|   679k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   622k|    {
  647|   622k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   455k|    {
  554|   455k|        return m_args;
  555|   455k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  57.2k|{
  400|  57.2k|    check_scan_arg_types<T>();
  401|       |
  402|  57.2k|    basic_scan_arg<Context> arg;
  403|  57.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  57.2k|    arg.m_value = make_value<Context>(value);
  405|  57.2k|    return arg;
  406|  57.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   832k|{
  619|   832k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   832k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   832k|    static_cast<    \
  |  |  247|   832k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   832k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|   832k|    {
  564|   832k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   832k|    {
  574|   832k|        return {
  575|   832k|            detail::make_arg<base::is_packed, Context,
  576|   832k|                             detail::mapped_type_constant<
  577|   832k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   832k|                args)...};
  579|   832k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|   832k|{
  415|   832k|    return make_value<Context>(value);
  416|   832k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|   908k|{
  372|   908k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   908k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   908k|                                  needs_context_tag>) {
  376|   908k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   908k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   908k|    }
  378|   908k|    else {
  379|   908k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   908k|            value, context_tag<Context>{}));
  381|   908k|    }
  382|   908k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|   908k|    {                                                                        \
  217|   908k|        return val;                                                          \
  218|   908k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   832k|    {
  647|   832k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|   665k|    {
  554|   665k|        return m_args;
  555|   665k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|  76.2k|{
  400|  76.2k|    check_scan_arg_types<T>();
  401|       |
  402|  76.2k|    basic_scan_arg<Context> arg;
  403|  76.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  76.2k|    arg.m_value = make_value<Context>(value);
  405|  76.2k|    return arg;
  406|  76.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   727k|{
  619|   727k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   727k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   727k|    static_cast<    \
  |  |  247|   727k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   727k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|   727k|    {
  564|   727k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   727k|    {
  574|   727k|        return {
  575|   727k|            detail::make_arg<base::is_packed, Context,
  576|   727k|                             detail::mapped_type_constant<
  577|   727k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   727k|                args)...};
  579|   727k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|   727k|{
  415|   727k|    return make_value<Context>(value);
  416|   727k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|   792k|{
  372|   792k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   792k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   792k|                                  needs_context_tag>) {
  376|   792k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   792k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   792k|    }
  378|   792k|    else {
  379|   792k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   792k|            value, context_tag<Context>{}));
  381|   792k|    }
  382|   792k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|   792k|    {                                                                        \
  217|   792k|        return val;                                                          \
  218|   792k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   727k|    {
  647|   727k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|   560k|    {
  554|   560k|        return m_args;
  555|   560k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|  65.5k|{
  400|  65.5k|    check_scan_arg_types<T>();
  401|       |
  402|  65.5k|    basic_scan_arg<Context> arg;
  403|  65.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  65.5k|    arg.m_value = make_value<Context>(value);
  405|  65.5k|    return arg;
  406|  65.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   842k|{
  619|   842k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   842k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   842k|    static_cast<    \
  |  |  247|   842k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   842k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|   842k|    {
  564|   842k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   842k|    {
  574|   842k|        return {
  575|   842k|            detail::make_arg<base::is_packed, Context,
  576|   842k|                             detail::mapped_type_constant<
  577|   842k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   842k|                args)...};
  579|   842k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|   842k|{
  415|   842k|    return make_value<Context>(value);
  416|   842k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|   919k|{
  372|   919k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   919k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   919k|                                  needs_context_tag>) {
  376|   919k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   919k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   919k|    }
  378|   919k|    else {
  379|   919k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   919k|            value, context_tag<Context>{}));
  381|   919k|    }
  382|   919k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|   919k|    {                                                                        \
  217|   919k|        return val;                                                          \
  218|   919k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   842k|    {
  647|   842k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|   676k|    {
  554|   676k|        return m_args;
  555|   676k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|  77.1k|{
  400|  77.1k|    check_scan_arg_types<T>();
  401|       |
  402|  77.1k|    basic_scan_arg<Context> arg;
  403|  77.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  77.1k|    arg.m_value = make_value<Context>(value);
  405|  77.1k|    return arg;
  406|  77.1k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   730k|{
  619|   730k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   730k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   730k|    static_cast<    \
  |  |  247|   730k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   730k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|   730k|    {
  564|   730k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   730k|    {
  574|   730k|        return {
  575|   730k|            detail::make_arg<base::is_packed, Context,
  576|   730k|                             detail::mapped_type_constant<
  577|   730k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   730k|                args)...};
  579|   730k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|   730k|{
  415|   730k|    return make_value<Context>(value);
  416|   730k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|   796k|{
  372|   796k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   796k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   796k|                                  needs_context_tag>) {
  376|   796k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   796k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   796k|    }
  378|   796k|    else {
  379|   796k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   796k|            value, context_tag<Context>{}));
  381|   796k|    }
  382|   796k|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|   796k|    {                                                                        \
  217|   796k|        return val;                                                          \
  218|   796k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   730k|    {
  647|   730k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|   564k|    {
  554|   564k|        return m_args;
  555|   564k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|  65.8k|{
  400|  65.8k|    check_scan_arg_types<T>();
  401|       |
  402|  65.8k|    basic_scan_arg<Context> arg;
  403|  65.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  65.8k|    arg.m_value = make_value<Context>(value);
  405|  65.8k|    return arg;
  406|  65.8k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  4.51M|    {
  682|  4.51M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  4.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.51M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  4.51M|        return static_cast<std::size_t>(m_desc &
  687|  4.51M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  4.51M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  9.02M|    {
  702|  9.02M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  9.02M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  4.51M|    {
  655|  4.51M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  4.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.51M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  4.51M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  4.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.51M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  4.51M|        const auto t = type(id);
  667|  4.51M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  4.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.51M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  4.51M|        basic_scan_arg<Context> arg;
  672|  4.51M|        arg.m_type = t;
  673|  4.51M|        arg.m_value = m_values[id];
  674|  4.51M|        return arg;
  675|  4.51M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  4.51M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  4.51M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  4.51M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  4.51M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  4.51M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  8.42M|    {
  483|  8.42M|        return m_type != detail::arg_type::none_type;
  484|  8.42M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  7.27M|    {
  488|  7.27M|        return m_type;
  489|  7.27M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  4.36M|    {
  682|  4.36M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  4.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.36M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  4.36M|        return static_cast<std::size_t>(m_desc &
  687|  4.36M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  4.36M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  8.73M|    {
  702|  8.73M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  8.73M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  4.36M|    {
  655|  4.36M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  4.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.36M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  4.36M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  4.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.36M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  4.36M|        const auto t = type(id);
  667|  4.36M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  4.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.36M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  4.36M|        basic_scan_arg<Context> arg;
  672|  4.36M|        arg.m_type = t;
  673|  4.36M|        arg.m_value = m_values[id];
  674|  4.36M|        return arg;
  675|  4.36M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  4.36M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  4.36M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  4.36M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  4.36M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  4.36M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  8.03M|    {
  483|  8.03M|        return m_type != detail::arg_type::none_type;
  484|  8.03M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  7.12M|    {
  488|  7.12M|        return m_type;
  489|  7.12M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   438k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   401k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   368k|    {
  109|   368k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  3.63M|    {
   60|  3.63M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   766k|    {
  124|   766k|        return m_current;
  125|   766k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  3.63M|    {
   43|  3.63M|        return m_args.get(id);
   44|  3.63M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  3.46M|    {
   53|  3.46M|        return m_locale;
   54|  3.46M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   283k|    {
  132|   283k|        return ranges_std::default_sentinel;
  133|   283k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|   113k|    {
  146|   113k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   113k|    static_cast<    \
  |  |  247|   113k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   113k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   283k|    {
  140|   283k|        return ranges::subrange{begin(), end()};
  141|   283k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   639k|    {
  109|   639k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  3.56M|    {
   60|  3.56M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|  1.32M|    {
  124|  1.32M|        return m_current;
  125|  1.32M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  3.56M|    {
   43|  3.56M|        return m_args.get(id);
   44|  3.56M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  3.26M|    {
   53|  3.26M|        return m_locale;
   54|  3.26M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   490k|    {
  132|   490k|        return ranges_std::default_sentinel;
  133|   490k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|   191k|    {
  146|   191k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|   191k|    static_cast<    \
  |  |  247|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|   191k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   490k|    {
  140|   490k|        return ranges::subrange{begin(), end()};
  141|   490k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  2.26M|    {
   69|  2.26M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  2.26M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  2.26M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  34.7M|    {
   75|  34.7M|        return m_code == good;
   76|  34.7M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|   938k|    {
   86|   938k|        return m_code;
   87|   938k|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|   938k|{
  111|   938k|    return a.code() == b;
  112|   938k|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|   938k|{
  116|   938k|    return !(a == b);
  117|   938k|}
_ZN3scn2v210scan_errorC2Ev:
   62|  21.1M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   553k|    {
  675|   553k|        return m_str;
  676|   553k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  4.51M|{
  385|  4.51M|    return s;
  386|  4.51M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  4.51M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   553k|    {
  671|   553k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   551k|    {
  675|   551k|        return m_str;
  676|   551k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   551k|    {
  671|   551k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   803k|    {
  675|   803k|        return m_str;
  676|   803k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   803k|    {
  671|   803k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   678k|    {
  675|   678k|        return m_str;
  676|   678k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   678k|    {
  671|   678k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   818k|    {
  675|   818k|        return m_str;
  676|   818k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   818k|    {
  671|   818k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   684k|    {
  675|   684k|        return m_str;
  676|   684k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   684k|    {
  671|   684k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  70.9k|    {
  675|  70.9k|        return m_str;
  676|  70.9k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  70.9k|    {
  671|  70.9k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  70.9k|    {
  675|  70.9k|        return m_str;
  676|  70.9k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  70.9k|    {
  671|  70.9k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  70.9k|    {
  675|  70.9k|        return m_str;
  676|  70.9k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  70.9k|    {
  671|  70.9k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  70.9k|    {
  675|  70.9k|        return m_str;
  676|  70.9k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  70.9k|    {
  671|  70.9k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  70.9k|    {
  675|  70.9k|        return m_str;
  676|  70.9k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  70.9k|    {
  671|  70.9k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  70.9k|    {
  675|  70.9k|        return m_str;
  676|  70.9k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  70.9k|    {
  671|  70.9k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   496k|    {
  675|   496k|        return m_str;
  676|   496k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  4.36M|{
  390|  4.36M|    return s;
  391|  4.36M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  4.36M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   496k|    {
  671|   496k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   497k|    {
  675|   497k|        return m_str;
  676|   497k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   497k|    {
  671|   497k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   707k|    {
  675|   707k|        return m_str;
  676|   707k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   707k|    {
  671|   707k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   602k|    {
  675|   602k|        return m_str;
  676|   602k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   602k|    {
  671|   602k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   717k|    {
  675|   717k|        return m_str;
  676|   717k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   717k|    {
  671|   717k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   606k|    {
  675|   606k|        return m_str;
  676|   606k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   606k|    {
  671|   606k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   116k|    {
  675|   116k|        return m_str;
  676|   116k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   116k|    {
  671|   116k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   124k|    {
  675|   124k|        return m_str;
  676|   124k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   124k|    {
  671|   124k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   124k|    {
  675|   124k|        return m_str;
  676|   124k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   124k|    {
  671|   124k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   124k|    {
  675|   124k|        return m_str;
  676|   124k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   124k|    {
  671|   124k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   124k|    {
  675|   124k|        return m_str;
  676|   124k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   124k|    {
  671|   124k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   124k|    {
  675|   124k|        return m_str;
  676|   124k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   124k|    {
  671|   124k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  6.69M|    {
  196|  6.69M|        SCN_GCC_COMPAT_PUSH
  197|  6.69M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  6.69M|        switch (type) {
  199|  1.67M|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 1.67M, False: 5.01M]
  ------------------
  200|  3.34M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 1.66M, False: 5.02M]
  ------------------
  201|  3.34M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 6.69M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   264k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 264k, False: 6.42M]
  ------------------
  206|   264k|                return 2;
  207|   503k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 503k, False: 6.18M]
  ------------------
  208|   503k|                return 8;
  209|  1.26M|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 1.26M, False: 5.42M]
  ------------------
  210|  1.26M|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 6.69M]
  ------------------
  211|  1.26M|                return 10;
  212|  1.31M|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 1.31M, False: 5.37M]
  ------------------
  213|  1.31M|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 6.69M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  6.69M|        }
  219|  6.69M|        SCN_GCC_COMPAT_POP
  220|  6.69M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  7.20M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  1.68M|    {
  245|  1.68M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  1.68M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  1.68M|            m_specs.localized = true;
  247|  1.68M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  1.68M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  5.20M|    {
  260|  5.20M|        m_specs.type = type;
  261|  5.20M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   312k|    {
  322|   312k|        SCN_UNLIKELY_ATTR
  323|   312k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   312k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  6.89M|    {
  333|  6.89M|        return static_cast<bool>(m_error);
  334|  6.89M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  986|  1.68M|{
  987|  1.68M|    switch (type) {
  988|      0|        case arg_type::none_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 1.68M]
  ------------------
  989|      0|            return arg_type_category::none;
  990|       |
  991|   247k|        case arg_type::schar_type:
  ------------------
  |  Branch (991:9): [True: 247k, False: 1.43M]
  ------------------
  992|   247k|        case arg_type::short_type:
  ------------------
  |  Branch (992:9): [True: 0, False: 1.68M]
  ------------------
  993|   567k|        case arg_type::int_type:
  ------------------
  |  Branch (993:9): [True: 320k, False: 1.36M]
  ------------------
  994|   567k|        case arg_type::long_type:
  ------------------
  |  Branch (994:9): [True: 0, False: 1.68M]
  ------------------
  995|   893k|        case arg_type::llong_type:
  ------------------
  |  Branch (995:9): [True: 325k, False: 1.35M]
  ------------------
  996|   893k|            return arg_type_category::integer;
  997|       |
  998|   237k|        case arg_type::uchar_type:
  ------------------
  |  Branch (998:9): [True: 237k, False: 1.44M]
  ------------------
  999|   237k|        case arg_type::ushort_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 1.68M]
  ------------------
 1000|   512k|        case arg_type::uint_type:
  ------------------
  |  Branch (1000:9): [True: 274k, False: 1.40M]
  ------------------
 1001|   512k|        case arg_type::ulong_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 1.68M]
  ------------------
 1002|   789k|        case arg_type::ullong_type:
  ------------------
  |  Branch (1002:9): [True: 276k, False: 1.40M]
  ------------------
 1003|   789k|            return arg_type_category::unsigned_integer;
 1004|       |
 1005|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 1.68M]
  ------------------
 1006|      0|            return arg_type_category::pointer;
 1007|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1007:9): [True: 0, False: 1.68M]
  ------------------
 1008|      0|            return arg_type_category::boolean;
 1009|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 1.68M]
  ------------------
 1010|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 1.68M]
  ------------------
 1011|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1011:9): [True: 0, False: 1.68M]
  ------------------
 1012|      0|            return arg_type_category::character;
 1013|       |
 1014|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 1.68M]
  ------------------
 1015|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 1.68M]
  ------------------
 1016|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 1.68M]
  ------------------
 1017|      0|            return arg_type_category::floating;
 1018|       |
 1019|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 1.68M]
  ------------------
 1020|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1020:9): [True: 0, False: 1.68M]
  ------------------
 1021|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1021:9): [True: 0, False: 1.68M]
  ------------------
 1022|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1022:9): [True: 0, False: 1.68M]
  ------------------
 1023|      0|            return arg_type_category::string;
 1024|       |
 1025|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1025:9): [True: 0, False: 1.68M]
  ------------------
 1026|      0|            return arg_type_category::custom;
 1027|       |
 1028|      0|            SCN_CLANG_PUSH
 1029|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1030|      0|        default:
  ------------------
  |  Branch (1030:9): [True: 0, False: 1.68M]
  ------------------
 1031|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1032|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1033|  1.68M|            SCN_CLANG_POP
 1034|  1.68M|    }
 1035|       |
 1036|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1037|  1.68M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  3.26M|{
  968|  3.26M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  3.26M|    handler.check_args_exhausted();
  970|  3.26M|    return handler.get_error();
  971|  3.26M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  3.26M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  3.26M|    auto begin = format.data();
  937|  3.26M|    auto it = begin;
  938|  3.26M|    const auto end = format.data() + format.size();
  939|       |
  940|  6.28M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 3.26M, False: 3.01M]
  ------------------
  941|  3.26M|        const auto ch = *it++;
  942|  3.26M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 3.26M, False: 0]
  ------------------
  943|  3.26M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  3.26M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  3.26M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 255k, False: 3.01M]
  ------------------
  947|   255k|                return;
  948|   255k|            }
  949|  3.26M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  3.26M|    }
  960|       |
  961|  3.01M|    handler.on_literal_text(begin, end);
  962|  3.01M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  865|  3.26M|{
  866|  3.26M|    struct id_adapter {
  867|  3.26M|        constexpr void operator()()
  868|  3.26M|        {
  869|  3.26M|            arg_id = handler.on_arg_id();
  870|  3.26M|        }
  871|  3.26M|        constexpr void operator()(std::size_t id)
  872|  3.26M|        {
  873|  3.26M|            arg_id = handler.on_arg_id(id);
  874|  3.26M|        }
  875|       |
  876|  3.26M|        constexpr void on_error(const char* msg)
  877|  3.26M|        {
  878|  3.26M|            SCN_UNLIKELY_ATTR
  879|  3.26M|            handler.on_error(msg);
  880|  3.26M|        }
  881|       |
  882|  3.26M|        Handler& handler;
  883|  3.26M|        std::size_t arg_id;
  884|  3.26M|    };
  885|       |
  886|  3.26M|    ++begin;
  887|  3.26M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.26M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  3.26M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 3.26M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  3.26M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 3.26M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  3.26M|    else {
  899|  3.26M|        auto adapter = id_adapter{handler, 0};
  900|  3.26M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  3.26M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.26M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  3.26M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 3.26M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  3.26M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 3.26M, False: 0]
  ------------------
  911|  3.26M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.26M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  3.26M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  3.26M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  6.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85.1k, False: 3.18M]
  |  |  |  Branch (153:45): [True: 0, False: 3.26M]
  |  |  |  Branch (153:45): [True: 85.1k, False: 3.18M]
  |  |  ------------------
  ------------------
  917|  85.1k|                handler.on_error("Unknown format specifier");
  918|  85.1k|                return begin;
  919|  85.1k|            }
  920|  3.26M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  3.26M|    }
  927|  3.18M|    return begin + 1;
  928|  3.26M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  3.26M|{
  400|  3.26M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  3.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  3.26M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 3.26M, False: 0]
  |  Branch (401:26): [True: 0, False: 3.26M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  3.26M|    handler();
  406|  3.26M|    return begin;
  407|  3.26M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  3.26M|        {
  869|  3.26M|            arg_id = handler.on_arg_id();
  870|  3.26M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  3.26M|    {
 1046|  3.26M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  3.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  3.26M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  794|  3.26M|{
  795|  3.26M|    auto do_presentation = [&]() -> const CharT* {
  796|  3.26M|        if (*begin == CharT{'['}) {
  797|  3.26M|            auto set = parse_presentation_set(begin, end, handler);
  798|  3.26M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  3.26M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  3.26M|                return begin;
  803|  3.26M|            }
  804|  3.26M|            handler.on_character_set_string(set);
  805|  3.26M|            return begin;
  806|  3.26M|        }
  807|  3.26M|        if (*begin == CharT{'/'}) {
  808|  3.26M|            return parse_presentation_regex(begin, end, handler);
  809|  3.26M|        }
  810|  3.26M|        presentation_type type = parse_presentation_type(*begin++);
  811|  3.26M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  3.26M|            handler.on_error("Invalid type specifier in format string");
  813|  3.26M|            return begin;
  814|  3.26M|        }
  815|  3.26M|        handler.on_type(type);
  816|  3.26M|        return begin;
  817|  3.26M|    };
  818|       |
  819|  3.26M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 3.26M, False: 0]
  |  Branch (819:28): [True: 3.21M, False: 56.7k]
  ------------------
  820|  3.26M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 3.18M, False: 28.3k]
  |  Branch (820:36): [True: 2.36M, False: 821k]
  ------------------
  821|  2.36M|        return do_presentation();
  822|  2.36M|    }
  823|       |
  824|   906k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   906k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 906k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   906k|    begin = parse_align(begin, end, handler);
  830|   906k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   906k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 906k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   906k|    begin = parse_width(begin, end, handler);
  836|   906k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   906k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 906k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   906k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 821k, False: 85.1k]
  ------------------
  842|   821k|        handler.on_localized();
  843|   821k|        ++begin;
  844|   821k|    }
  845|   906k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   906k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 906k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   906k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 906k, False: 0]
  |  Branch (850:25): [True: 85.1k, False: 821k]
  ------------------
  851|  85.1k|        do_presentation();
  852|  85.1k|    }
  853|   906k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   906k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 906k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   906k|    return begin;
  859|   906k|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  3.52M|{
  464|  3.52M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.59M, False: 934k]
  |  Branch (464:33): [True: 2.59M, False: 0]
  ------------------
  465|  3.52M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 877k, False: 56.7k]
  |  Branch (465:33): [True: 877k, False: 0]
  ------------------
  466|  3.52M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  2.44M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.44M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 2.44M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  2.44M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 2.44M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  2.44M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.44M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  2.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.7k, False: 2.39M]
  |  |  ------------------
  ------------------
  812|  56.7k|            handler.on_error("Invalid type specifier in format string");
  813|  56.7k|            return begin;
  814|  56.7k|        }
  815|  2.39M|        handler.on_type(type);
  816|  2.39M|        return begin;
  817|  2.44M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  2.76M|{
  412|  2.76M|    switch (type) {
  413|   116k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 116k, False: 2.64M]
  ------------------
  414|   173k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 56.7k, False: 2.70M]
  ------------------
  415|   173k|            return presentation_type::int_binary;
  416|   656k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 656k, False: 2.10M]
  ------------------
  417|   656k|            return presentation_type::int_decimal;
  418|   876k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 876k, False: 1.88M]
  ------------------
  419|   876k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.76M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   251k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 251k, False: 2.50M]
  ------------------
  423|   251k|            return presentation_type::int_octal;
  424|   690k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 690k, False: 2.07M]
  ------------------
  425|   690k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.76M]
  ------------------
  426|   690k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.76M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.76M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.76M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.76M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.76M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.76M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.76M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.76M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.76M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.76M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.76M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.76M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.76M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.76M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.76M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.76M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   113k|        default:
  ------------------
  |  Branch (456:9): [True: 113k, False: 2.64M]
  ------------------
  457|   113k|            return presentation_type::none;
  458|  2.76M|    }
  459|  2.76M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|   906k|{
  489|   906k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   906k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   906k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   906k|        switch (ch) {
  493|   906k|            case L'<':
  494|   906k|                return align_type::left;
  495|   906k|            case L'>':
  496|   906k|                return align_type::right;
  497|   906k|            case L'^':
  498|   906k|                return align_type::center;
  499|   906k|            default:
  500|   906k|                return align_type::none;
  501|   906k|        }
  502|   906k|    };
  503|       |
  504|   906k|    auto potential_fill_len = code_point_length(begin, end);
  505|   906k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 906k]
  |  |  |  Branch (153:45): [True: 0, False: 906k]
  |  |  |  Branch (153:45): [True: 0, False: 906k]
  |  |  ------------------
  ------------------
  506|   906k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   906k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   906k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   906k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   906k|    const auto begin_before_fill = begin;
  516|   906k|    begin += potential_fill_len;
  517|       |
  518|   906k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 906k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   906k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   906k|    const auto begin_after_fill = begin;
  524|   906k|    ++begin;
  525|       |
  526|   906k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 906k, False: 0]
  ------------------
  527|   906k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   906k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 906k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   906k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 906k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   906k|    }
  535|       |
  536|   906k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 906k, False: 0]
  ------------------
  537|   906k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 906k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   906k|        return begin_before_fill;
  542|   906k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   906k|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|  1.04M|{
  471|  1.04M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.04M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.04M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.04M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.04M|        return 1;
  474|  1.04M|    }
  475|  1.04M|    else {
  476|  1.04M|        const auto lengths =
  477|  1.04M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.04M|            "\3\4";
  479|  1.04M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.04M|        return len;
  481|  1.04M|    }
  482|  1.04M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.81M|    auto check_align = [](wchar_t ch) {
  492|  1.81M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.81M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.81M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.81M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.81M|            default:
  ------------------
  |  Branch (499:13): [True: 1.81M, False: 0]
  ------------------
  500|  1.81M|                return align_type::none;
  501|  1.81M|        }
  502|  1.81M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|   906k|{
  554|   906k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   906k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   906k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   906k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 849k, False: 56.7k]
  |  Branch (556:33): [True: 0, False: 849k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   906k|    return begin;
  567|   906k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1050|   821k|    {
 1051|   821k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   821k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 382k, False: 438k]
  ------------------
 1053|   821k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 382k]
  ------------------
 1054|   821k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   821k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   821k|        Handler::on_localized();
 1063|   821k|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1072|  6.73M|{
 1073|  6.73M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  6.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.73M]
  |  |  ------------------
  ------------------
 1074|      0|        return handler.on_error("Invalid type specifier for integer type");
 1075|      0|    }
 1076|  6.73M|    if (specs.localized) {
  ------------------
  |  Branch (1076:9): [True: 1.68M, False: 5.05M]
  ------------------
 1077|  1.68M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.68M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|            return;
 1082|      0|        }
 1083|  1.68M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|  1.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.68M]
  |  |  ------------------
  ------------------
 1084|       |            // clang-format off
 1085|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1086|       |            // clang-format on
 1087|      0|        }
 1088|  1.68M|    }
 1089|  6.73M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   368k|{
  968|   368k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   368k|    handler.check_args_exhausted();
  970|   368k|    return handler.get_error();
  971|   368k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   368k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   368k|    auto begin = format.data();
  937|   368k|    auto it = begin;
  938|   368k|    const auto end = format.data() + format.size();
  939|       |
  940|   482k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 368k, False: 113k]
  ------------------
  941|   368k|        const auto ch = *it++;
  942|   368k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 368k, False: 0]
  ------------------
  943|   368k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   368k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   368k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 255k, False: 113k]
  ------------------
  947|   255k|                return;
  948|   255k|            }
  949|   368k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   368k|    }
  960|       |
  961|   113k|    handler.on_literal_text(begin, end);
  962|   113k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  865|   368k|{
  866|   368k|    struct id_adapter {
  867|   368k|        constexpr void operator()()
  868|   368k|        {
  869|   368k|            arg_id = handler.on_arg_id();
  870|   368k|        }
  871|   368k|        constexpr void operator()(std::size_t id)
  872|   368k|        {
  873|   368k|            arg_id = handler.on_arg_id(id);
  874|   368k|        }
  875|       |
  876|   368k|        constexpr void on_error(const char* msg)
  877|   368k|        {
  878|   368k|            SCN_UNLIKELY_ATTR
  879|   368k|            handler.on_error(msg);
  880|   368k|        }
  881|       |
  882|   368k|        Handler& handler;
  883|   368k|        std::size_t arg_id;
  884|   368k|    };
  885|       |
  886|   368k|    ++begin;
  887|   368k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   368k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 368k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   368k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 368k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   368k|    else {
  899|   368k|        auto adapter = id_adapter{handler, 0};
  900|   368k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   368k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   368k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 368k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   368k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 368k, False: 0]
  ------------------
  911|   368k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   368k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   368k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   737k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 85.1k, False: 283k]
  |  |  |  Branch (153:45): [True: 0, False: 368k]
  |  |  |  Branch (153:45): [True: 85.1k, False: 283k]
  |  |  ------------------
  ------------------
  917|  85.1k|                handler.on_error("Unknown format specifier");
  918|  85.1k|                return begin;
  919|  85.1k|            }
  920|   368k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   368k|    }
  927|   283k|    return begin + 1;
  928|   368k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   368k|{
  400|   368k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   368k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 368k, False: 0]
  |  Branch (401:26): [True: 0, False: 368k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   368k|    handler();
  406|   368k|    return begin;
  407|   368k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   368k|        {
  869|   368k|            arg_id = handler.on_arg_id();
  870|   368k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   368k|    {
 1046|   368k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   368k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  794|   368k|{
  795|   368k|    auto do_presentation = [&]() -> const CharT* {
  796|   368k|        if (*begin == CharT{'['}) {
  797|   368k|            auto set = parse_presentation_set(begin, end, handler);
  798|   368k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   368k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   368k|                return begin;
  803|   368k|            }
  804|   368k|            handler.on_character_set_string(set);
  805|   368k|            return begin;
  806|   368k|        }
  807|   368k|        if (*begin == CharT{'/'}) {
  808|   368k|            return parse_presentation_regex(begin, end, handler);
  809|   368k|        }
  810|   368k|        presentation_type type = parse_presentation_type(*begin++);
  811|   368k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   368k|            handler.on_error("Invalid type specifier in format string");
  813|   368k|            return begin;
  814|   368k|        }
  815|   368k|        handler.on_type(type);
  816|   368k|        return begin;
  817|   368k|    };
  818|       |
  819|   368k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 368k, False: 0]
  |  Branch (819:28): [True: 312k, False: 56.7k]
  ------------------
  820|   368k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 283k, False: 28.3k]
  |  Branch (820:36): [True: 227k, False: 56.7k]
  ------------------
  821|   227k|        return do_presentation();
  822|   227k|    }
  823|       |
  824|   141k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   141k|    begin = parse_align(begin, end, handler);
  830|   141k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   141k|    begin = parse_width(begin, end, handler);
  836|   141k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   141k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 56.7k, False: 85.1k]
  ------------------
  842|  56.7k|        handler.on_localized();
  843|  56.7k|        ++begin;
  844|  56.7k|    }
  845|   141k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   141k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 141k, False: 0]
  |  Branch (850:25): [True: 85.1k, False: 56.7k]
  ------------------
  851|  85.1k|        do_presentation();
  852|  85.1k|    }
  853|   141k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   141k|    return begin;
  859|   141k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   312k|    auto do_presentation = [&]() -> const CharT* {
  796|   312k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 312k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   312k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 312k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   312k|        presentation_type type = parse_presentation_type(*begin++);
  811|   312k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 56.7k, False: 255k]
  |  |  ------------------
  ------------------
  812|  56.7k|            handler.on_error("Invalid type specifier in format string");
  813|  56.7k|            return begin;
  814|  56.7k|        }
  815|   255k|        handler.on_type(type);
  816|   255k|        return begin;
  817|   312k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|   141k|{
  489|   141k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   141k|        switch (ch) {
  493|   141k|            case L'<':
  494|   141k|                return align_type::left;
  495|   141k|            case L'>':
  496|   141k|                return align_type::right;
  497|   141k|            case L'^':
  498|   141k|                return align_type::center;
  499|   141k|            default:
  500|   141k|                return align_type::none;
  501|   141k|        }
  502|   141k|    };
  503|       |
  504|   141k|    auto potential_fill_len = code_point_length(begin, end);
  505|   141k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 141k]
  |  |  |  Branch (153:45): [True: 0, False: 141k]
  |  |  |  Branch (153:45): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
  506|   141k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   141k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   141k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   141k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   141k|    const auto begin_before_fill = begin;
  516|   141k|    begin += potential_fill_len;
  517|       |
  518|   141k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 141k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   141k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   141k|    const auto begin_after_fill = begin;
  524|   141k|    ++begin;
  525|       |
  526|   141k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 141k, False: 0]
  ------------------
  527|   141k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   141k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 141k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   141k|    }
  535|       |
  536|   141k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 141k, False: 0]
  ------------------
  537|   141k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 141k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   141k|        return begin_before_fill;
  542|   141k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   141k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   283k|    auto check_align = [](wchar_t ch) {
  492|   283k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 283k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 283k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 283k]
  ------------------
  498|      0|                return align_type::center;
  499|   283k|            default:
  ------------------
  |  Branch (499:13): [True: 283k, False: 0]
  ------------------
  500|   283k|                return align_type::none;
  501|   283k|        }
  502|   283k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|   141k|{
  554|   141k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   141k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 85.1k, False: 56.7k]
  |  Branch (556:33): [True: 0, False: 85.1k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   141k|    return begin;
  567|   141k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1050|  56.7k|    {
 1051|  56.7k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  56.7k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 28.3k, False: 28.3k]
  ------------------
 1053|  56.7k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 28.3k]
  ------------------
 1054|  56.7k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  56.7k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  56.7k|        Handler::on_localized();
 1063|  56.7k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|  2.92M|{
  968|  2.92M|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|  2.92M|    handler.check_args_exhausted();
  970|  2.92M|    return handler.get_error();
  971|  2.92M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|  2.92M|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|  2.92M|    auto begin = format.data();
  937|  2.92M|    auto it = begin;
  938|  2.92M|    const auto end = format.data() + format.size();
  939|       |
  940|  5.40M|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 2.92M, False: 2.47M]
  ------------------
  941|  2.92M|        const auto ch = *it++;
  942|  2.92M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 2.92M, False: 0]
  ------------------
  943|  2.92M|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|  2.92M|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|  2.92M|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 448k, False: 2.47M]
  ------------------
  947|   448k|                return;
  948|   448k|            }
  949|  2.92M|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|  2.92M|    }
  960|       |
  961|  2.47M|    handler.on_literal_text(begin, end);
  962|  2.47M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  865|  2.92M|{
  866|  2.92M|    struct id_adapter {
  867|  2.92M|        constexpr void operator()()
  868|  2.92M|        {
  869|  2.92M|            arg_id = handler.on_arg_id();
  870|  2.92M|        }
  871|  2.92M|        constexpr void operator()(std::size_t id)
  872|  2.92M|        {
  873|  2.92M|            arg_id = handler.on_arg_id(id);
  874|  2.92M|        }
  875|       |
  876|  2.92M|        constexpr void on_error(const char* msg)
  877|  2.92M|        {
  878|  2.92M|            SCN_UNLIKELY_ATTR
  879|  2.92M|            handler.on_error(msg);
  880|  2.92M|        }
  881|       |
  882|  2.92M|        Handler& handler;
  883|  2.92M|        std::size_t arg_id;
  884|  2.92M|    };
  885|       |
  886|  2.92M|    ++begin;
  887|  2.92M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.92M]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|  2.92M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 2.92M]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|  2.92M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 2.92M]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|  2.92M|    else {
  899|  2.92M|        auto adapter = id_adapter{handler, 0};
  900|  2.92M|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|  2.92M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  2.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.92M]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|  2.92M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 2.92M]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|  2.92M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 2.92M, False: 0]
  ------------------
  911|  2.92M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  2.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.92M]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|  2.92M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|  2.92M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  5.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 149k, False: 2.77M]
  |  |  |  Branch (153:45): [True: 0, False: 2.92M]
  |  |  |  Branch (153:45): [True: 149k, False: 2.77M]
  |  |  ------------------
  ------------------
  917|   149k|                handler.on_error("Unknown format specifier");
  918|   149k|                return begin;
  919|   149k|            }
  920|  2.92M|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|  2.92M|    }
  927|  2.77M|    return begin + 1;
  928|  2.92M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  2.92M|{
  400|  2.92M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  2.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  2.92M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 2.92M, False: 0]
  |  Branch (401:26): [True: 0, False: 2.92M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  2.92M|    handler();
  406|  2.92M|    return begin;
  407|  2.92M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|  2.92M|        {
  869|  2.92M|            arg_id = handler.on_arg_id();
  870|  2.92M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1045|  2.92M|    {
 1046|  2.92M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  2.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|  2.92M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  794|  2.92M|{
  795|  2.92M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.92M|        if (*begin == CharT{'['}) {
  797|  2.92M|            auto set = parse_presentation_set(begin, end, handler);
  798|  2.92M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|  2.92M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|  2.92M|                return begin;
  803|  2.92M|            }
  804|  2.92M|            handler.on_character_set_string(set);
  805|  2.92M|            return begin;
  806|  2.92M|        }
  807|  2.92M|        if (*begin == CharT{'/'}) {
  808|  2.92M|            return parse_presentation_regex(begin, end, handler);
  809|  2.92M|        }
  810|  2.92M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.92M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|  2.92M|            handler.on_error("Invalid type specifier in format string");
  813|  2.92M|            return begin;
  814|  2.92M|        }
  815|  2.92M|        handler.on_type(type);
  816|  2.92M|        return begin;
  817|  2.92M|    };
  818|       |
  819|  2.92M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 2.92M, False: 0]
  |  Branch (819:28): [True: 2.82M, False: 99.6k]
  ------------------
  820|  2.92M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 2.77M, False: 49.8k]
  |  Branch (820:36): [True: 2.07M, False: 704k]
  ------------------
  821|  2.07M|        return do_presentation();
  822|  2.07M|    }
  823|       |
  824|   854k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   854k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 854k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   854k|    begin = parse_align(begin, end, handler);
  830|   854k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   854k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 854k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   854k|    begin = parse_width(begin, end, handler);
  836|   854k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   854k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 854k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   854k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 704k, False: 149k]
  ------------------
  842|   704k|        handler.on_localized();
  843|   704k|        ++begin;
  844|   704k|    }
  845|   854k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   854k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 854k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   854k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 854k, False: 0]
  |  Branch (850:25): [True: 149k, False: 704k]
  ------------------
  851|   149k|        do_presentation();
  852|   149k|    }
  853|   854k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   854k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 854k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   854k|    return begin;
  859|   854k|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  3.36M|{
  464|  3.36M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 2.46M, False: 903k]
  |  Branch (464:33): [True: 2.46M, False: 0]
  ------------------
  465|  3.36M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 804k, False: 99.6k]
  |  Branch (465:33): [True: 804k, False: 0]
  ------------------
  466|  3.36M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  795|  2.22M|    auto do_presentation = [&]() -> const CharT* {
  796|  2.22M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 2.22M]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|  2.22M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 2.22M]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|  2.22M|        presentation_type type = parse_presentation_type(*begin++);
  811|  2.22M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 99.6k, False: 2.12M]
  |  |  ------------------
  ------------------
  812|  99.6k|            handler.on_error("Invalid type specifier in format string");
  813|  99.6k|            return begin;
  814|  99.6k|        }
  815|  2.12M|        handler.on_type(type);
  816|  2.12M|        return begin;
  817|  2.22M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  2.76M|{
  412|  2.76M|    switch (type) {
  413|   150k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 150k, False: 2.61M]
  ------------------
  414|   249k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 99.6k, False: 2.66M]
  ------------------
  415|   249k|            return presentation_type::int_binary;
  416|   614k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 614k, False: 2.14M]
  ------------------
  417|   614k|            return presentation_type::int_decimal;
  418|   802k|        case 'i':
  ------------------
  |  Branch (418:9): [True: 802k, False: 1.95M]
  ------------------
  419|   802k|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 2.76M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   255k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 255k, False: 2.50M]
  ------------------
  423|   255k|            return presentation_type::int_octal;
  424|   639k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 639k, False: 2.12M]
  ------------------
  425|   639k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 2.76M]
  ------------------
  426|   639k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 2.76M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 2.76M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 2.76M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 2.76M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 2.76M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 2.76M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 2.76M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 2.76M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 2.76M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 2.76M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 2.76M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 2.76M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 2.76M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 2.76M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 2.76M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 2.76M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   199k|        default:
  ------------------
  |  Branch (456:9): [True: 199k, False: 2.56M]
  ------------------
  457|   199k|            return presentation_type::none;
  458|  2.76M|    }
  459|  2.76M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|   854k|{
  489|   854k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   854k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   854k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   854k|        switch (ch) {
  493|   854k|            case L'<':
  494|   854k|                return align_type::left;
  495|   854k|            case L'>':
  496|   854k|                return align_type::right;
  497|   854k|            case L'^':
  498|   854k|                return align_type::center;
  499|   854k|            default:
  500|   854k|                return align_type::none;
  501|   854k|        }
  502|   854k|    };
  503|       |
  504|   854k|    auto potential_fill_len = code_point_length(begin, end);
  505|   854k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 854k]
  |  |  |  Branch (153:45): [True: 0, False: 854k]
  |  |  |  Branch (153:45): [True: 0, False: 854k]
  |  |  ------------------
  ------------------
  506|   854k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   854k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   854k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   854k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   854k|    const auto begin_before_fill = begin;
  516|   854k|    begin += potential_fill_len;
  517|       |
  518|   854k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 854k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   854k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   854k|    const auto begin_after_fill = begin;
  524|   854k|    ++begin;
  525|       |
  526|   854k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 854k, False: 0]
  ------------------
  527|   854k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   854k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 854k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   854k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 854k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   854k|    }
  535|       |
  536|   854k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 854k, False: 0]
  ------------------
  537|   854k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 854k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   854k|        return begin_before_fill;
  542|   854k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   854k|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|  1.10M|{
  471|  1.10M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.10M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.10M|        return 1;
  474|  1.10M|    }
  475|  1.10M|    else {
  476|  1.10M|        const auto lengths =
  477|  1.10M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.10M|            "\3\4";
  479|  1.10M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.10M|        return len;
  481|  1.10M|    }
  482|  1.10M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  1.70M|    auto check_align = [](wchar_t ch) {
  492|  1.70M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 1.70M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 1.70M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 1.70M]
  ------------------
  498|      0|                return align_type::center;
  499|  1.70M|            default:
  ------------------
  |  Branch (499:13): [True: 1.70M, False: 0]
  ------------------
  500|  1.70M|                return align_type::none;
  501|  1.70M|        }
  502|  1.70M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|   854k|{
  554|   854k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   854k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   854k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   854k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 754k, False: 99.6k]
  |  Branch (556:33): [True: 0, False: 754k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   854k|    return begin;
  567|   854k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1050|   704k|    {
 1051|   704k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|   704k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 328k, False: 376k]
  ------------------
 1053|   704k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 328k]
  ------------------
 1054|   704k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|   704k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|   704k|        Handler::on_localized();
 1063|   704k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  967|   639k|{
  968|   639k|    parse_format_string_impl<IsConstexpr>(format, handler);
  969|   639k|    handler.check_args_exhausted();
  970|   639k|    return handler.get_error();
  971|   639k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  933|   639k|{
  934|       |    // TODO: memchr fast path with a larger (> 32) format string
  935|       |
  936|   639k|    auto begin = format.data();
  937|   639k|    auto it = begin;
  938|   639k|    const auto end = format.data() + format.size();
  939|       |
  940|   830k|    while (it != end) {
  ------------------
  |  Branch (940:12): [True: 639k, False: 191k]
  ------------------
  941|   639k|        const auto ch = *it++;
  942|   639k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (942:13): [True: 639k, False: 0]
  ------------------
  943|   639k|            handler.on_literal_text(begin, it - 1);
  944|       |
  945|   639k|            begin = it = parse_replacement_field(it - 1, end, handler);
  946|   639k|            if (!handler) {
  ------------------
  |  Branch (946:17): [True: 448k, False: 191k]
  ------------------
  947|   448k|                return;
  948|   448k|            }
  949|   639k|        }
  950|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (950:18): [True: 0, False: 0]
  ------------------
  951|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  952|      0|                handler.on_error("Unmatched '}' in format string");
  953|      0|                return;
  954|      0|            }
  955|       |
  956|      0|            handler.on_literal_text(begin, it);
  957|      0|            begin = ++it;
  958|      0|        }
  959|   639k|    }
  960|       |
  961|   191k|    handler.on_literal_text(begin, end);
  962|   191k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  865|   639k|{
  866|   639k|    struct id_adapter {
  867|   639k|        constexpr void operator()()
  868|   639k|        {
  869|   639k|            arg_id = handler.on_arg_id();
  870|   639k|        }
  871|   639k|        constexpr void operator()(std::size_t id)
  872|   639k|        {
  873|   639k|            arg_id = handler.on_arg_id(id);
  874|   639k|        }
  875|       |
  876|   639k|        constexpr void on_error(const char* msg)
  877|   639k|        {
  878|   639k|            SCN_UNLIKELY_ATTR
  879|   639k|            handler.on_error(msg);
  880|   639k|        }
  881|       |
  882|   639k|        Handler& handler;
  883|   639k|        std::size_t arg_id;
  884|   639k|    };
  885|       |
  886|   639k|    ++begin;
  887|   639k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 639k]
  |  |  ------------------
  ------------------
  888|      0|        handler.on_error("Unexpected end of replacement field");
  889|      0|        return begin;
  890|      0|    }
  891|       |
  892|   639k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (892:9): [True: 0, False: 639k]
  ------------------
  893|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  894|      0|    }
  895|   639k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (895:14): [True: 0, False: 639k]
  ------------------
  896|      0|        handler.on_literal_text(begin, begin + 1);
  897|      0|    }
  898|   639k|    else {
  899|   639k|        auto adapter = id_adapter{handler, 0};
  900|   639k|        begin = parse_arg_id(begin, end, adapter);
  901|       |
  902|   639k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 639k]
  |  |  ------------------
  ------------------
  903|      0|            handler.on_error("Missing '}' in format string");
  904|      0|            return begin;
  905|      0|        }
  906|       |
  907|   639k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (907:13): [True: 0, False: 639k]
  ------------------
  908|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  909|      0|        }
  910|   639k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (910:18): [True: 639k, False: 0]
  ------------------
  911|   639k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 639k]
  |  |  ------------------
  ------------------
  912|      0|                handler.on_error("Unexpected end of replacement field");
  913|      0|                return begin;
  914|      0|            }
  915|   639k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  916|   639k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 149k, False: 490k]
  |  |  |  Branch (153:45): [True: 0, False: 639k]
  |  |  |  Branch (153:45): [True: 149k, False: 490k]
  |  |  ------------------
  ------------------
  917|   149k|                handler.on_error("Unknown format specifier");
  918|   149k|                return begin;
  919|   149k|            }
  920|   639k|        }
  921|      0|        else {
  922|      0|            SCN_UNLIKELY_ATTR
  923|      0|            handler.on_error("Missing '}' in format string");
  924|      0|            return begin;
  925|      0|        }
  926|   639k|    }
  927|   490k|    return begin + 1;
  928|   639k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   639k|{
  400|   639k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   639k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   639k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   639k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 639k, False: 0]
  |  Branch (401:26): [True: 0, False: 639k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   639k|    handler();
  406|   639k|    return begin;
  407|   639k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  868|   639k|        {
  869|   639k|            arg_id = handler.on_arg_id();
  870|   639k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1045|   639k|    {
 1046|   639k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   639k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   639k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1047|   639k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  794|   639k|{
  795|   639k|    auto do_presentation = [&]() -> const CharT* {
  796|   639k|        if (*begin == CharT{'['}) {
  797|   639k|            auto set = parse_presentation_set(begin, end, handler);
  798|   639k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  799|       |                // clang-format off
  800|   639k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|   639k|                return begin;
  803|   639k|            }
  804|   639k|            handler.on_character_set_string(set);
  805|   639k|            return begin;
  806|   639k|        }
  807|   639k|        if (*begin == CharT{'/'}) {
  808|   639k|            return parse_presentation_regex(begin, end, handler);
  809|   639k|        }
  810|   639k|        presentation_type type = parse_presentation_type(*begin++);
  811|   639k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  812|   639k|            handler.on_error("Invalid type specifier in format string");
  813|   639k|            return begin;
  814|   639k|        }
  815|   639k|        handler.on_type(type);
  816|   639k|        return begin;
  817|   639k|    };
  818|       |
  819|   639k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (819:9): [True: 639k, False: 0]
  |  Branch (819:28): [True: 540k, False: 99.6k]
  ------------------
  820|   639k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (820:9): [True: 490k, False: 49.8k]
  |  Branch (820:36): [True: 390k, False: 99.6k]
  ------------------
  821|   390k|        return do_presentation();
  822|   390k|    }
  823|       |
  824|   249k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   249k|    begin = parse_align(begin, end, handler);
  830|   249k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   249k|    begin = parse_width(begin, end, handler);
  836|   249k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
  837|      0|        handler.on_error("Unexpected end of format string");
  838|      0|        return begin;
  839|      0|    }
  840|       |
  841|   249k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (841:9): [True: 99.6k, False: 149k]
  ------------------
  842|  99.6k|        handler.on_localized();
  843|  99.6k|        ++begin;
  844|  99.6k|    }
  845|   249k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
  846|      0|        handler.on_error("Unexpected end of format string");
  847|      0|        return begin;
  848|      0|    }
  849|       |
  850|   249k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (850:9): [True: 249k, False: 0]
  |  Branch (850:25): [True: 149k, False: 99.6k]
  ------------------
  851|   149k|        do_presentation();
  852|   149k|    }
  853|   249k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
  854|      0|        handler.on_error("Unexpected end of format string");
  855|      0|        return begin;
  856|      0|    }
  857|       |
  858|   249k|    return begin;
  859|   249k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  795|   540k|    auto do_presentation = [&]() -> const CharT* {
  796|   540k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (796:13): [True: 0, False: 540k]
  ------------------
  797|      0|            auto set = parse_presentation_set(begin, end, handler);
  798|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  799|       |                // clang-format off
  800|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  801|       |                // clang-format on
  802|      0|                return begin;
  803|      0|            }
  804|      0|            handler.on_character_set_string(set);
  805|      0|            return begin;
  806|      0|        }
  807|   540k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (807:13): [True: 0, False: 540k]
  ------------------
  808|      0|            return parse_presentation_regex(begin, end, handler);
  809|      0|        }
  810|   540k|        presentation_type type = parse_presentation_type(*begin++);
  811|   540k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   540k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 99.6k, False: 440k]
  |  |  ------------------
  ------------------
  812|  99.6k|            handler.on_error("Invalid type specifier in format string");
  813|  99.6k|            return begin;
  814|  99.6k|        }
  815|   440k|        handler.on_type(type);
  816|   440k|        return begin;
  817|   540k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   249k|{
  489|   249k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   249k|        switch (ch) {
  493|   249k|            case L'<':
  494|   249k|                return align_type::left;
  495|   249k|            case L'>':
  496|   249k|                return align_type::right;
  497|   249k|            case L'^':
  498|   249k|                return align_type::center;
  499|   249k|            default:
  500|   249k|                return align_type::none;
  501|   249k|        }
  502|   249k|    };
  503|       |
  504|   249k|    auto potential_fill_len = code_point_length(begin, end);
  505|   249k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   498k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 249k]
  |  |  |  Branch (153:45): [True: 0, False: 249k]
  |  |  |  Branch (153:45): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
  506|   249k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   249k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   249k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   249k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   249k|    const auto begin_before_fill = begin;
  516|   249k|    begin += potential_fill_len;
  517|       |
  518|   249k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 249k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   249k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   249k|    const auto begin_after_fill = begin;
  524|   249k|    ++begin;
  525|       |
  526|   249k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 249k, False: 0]
  ------------------
  527|   249k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   249k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 249k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   249k|    }
  535|       |
  536|   249k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 249k, False: 0]
  ------------------
  537|   249k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 249k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   249k|        return begin_before_fill;
  542|   249k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   249k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   498k|    auto check_align = [](wchar_t ch) {
  492|   498k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 498k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 498k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 498k]
  ------------------
  498|      0|                return align_type::center;
  499|   498k|            default:
  ------------------
  |  Branch (499:13): [True: 498k, False: 0]
  ------------------
  500|   498k|                return align_type::none;
  501|   498k|        }
  502|   498k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   249k|{
  554|   249k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   249k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 149k, False: 99.6k]
  |  Branch (556:33): [True: 0, False: 149k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   249k|    return begin;
  567|   249k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1050|  99.6k|    {
 1051|  99.6k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1052|  99.6k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1052:13): [True: 49.8k, False: 49.8k]
  ------------------
 1053|  99.6k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1053:13): [True: 0, False: 49.8k]
  ------------------
 1054|  99.6k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1054:13): [True: 0, False: 0]
  ------------------
 1055|  99.6k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1055:13): [True: 0, False: 0]
  ------------------
 1056|      0|            SCN_UNLIKELY_ATTR
 1057|       |            // clang-format off
 1058|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1059|       |            // clang-format on
 1060|      0|        }
 1061|       |
 1062|  99.6k|        Handler::on_localized();
 1063|  99.6k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  4.49M|{
  226|  4.49M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  4.49M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  4.49M|                  "\n"
  230|  4.49M|                  "Unsupported range type given as input to a scanning "
  231|  4.49M|                  "function.\n"
  232|  4.49M|                  "A range needs to have a character type (value type) "
  233|  4.49M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  4.49M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  4.49M|                  "to be included.\n"
  236|  4.49M|                  "See the scnlib documentation for more details.");
  237|  4.49M|    static_assert(
  238|  4.49M|        !std::is_same_v<T, custom_char_traits>,
  239|  4.49M|        "\n"
  240|  4.49M|        "Unsupported range type given as input to a scanning "
  241|  4.49M|        "function.\n"
  242|  4.49M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  4.49M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  4.49M|        "not supported.");
  245|  4.49M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  4.49M|                  "\n"
  247|  4.49M|                  "Unsupported range type given as input to a scanning "
  248|  4.49M|                  "function.\n"
  249|  4.49M|                  "file_marker_found cannot be used as an "
  250|  4.49M|                  "source range type to scn::scan.\n"
  251|  4.49M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  4.49M|                  "and do not provide an explicit source range, "
  253|  4.49M|                  "or use scn::scan with a FILE* directly.");
  254|  4.49M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  4.49M|                  "\n"
  256|  4.49M|                  "Unsupported range type given as input to a scanning "
  257|  4.49M|                  "function.\n"
  258|  4.49M|                  "In order to be scannable, a range needs to satisfy "
  259|  4.49M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  4.49M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  4.49M|                  "\n"
  262|  4.49M|                  "Unsupported range type given as input to a scanning "
  263|  4.49M|                  "function.\n"
  264|  4.49M|                  "A range needs to model forward_range and have a valid "
  265|  4.49M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  4.49M|                  "Examples of scannable ranges are std::string, "
  267|  4.49M|                  "std::string_view, "
  268|  4.49M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  4.49M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  4.49M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  4.49M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  4.49M|{
  153|  4.49M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  4.49M|        return std::basic_string_view{ranges::data(r),
  155|  4.49M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  4.49M|    }
  162|  4.49M|    else {
  163|  4.49M|        return invalid_char_type{};
  164|  4.49M|    }
  165|  4.49M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   454k|{
  226|   454k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   454k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   454k|                  "\n"
  230|   454k|                  "Unsupported range type given as input to a scanning "
  231|   454k|                  "function.\n"
  232|   454k|                  "A range needs to have a character type (value type) "
  233|   454k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   454k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   454k|                  "to be included.\n"
  236|   454k|                  "See the scnlib documentation for more details.");
  237|   454k|    static_assert(
  238|   454k|        !std::is_same_v<T, custom_char_traits>,
  239|   454k|        "\n"
  240|   454k|        "Unsupported range type given as input to a scanning "
  241|   454k|        "function.\n"
  242|   454k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   454k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   454k|        "not supported.");
  245|   454k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   454k|                  "\n"
  247|   454k|                  "Unsupported range type given as input to a scanning "
  248|   454k|                  "function.\n"
  249|   454k|                  "file_marker_found cannot be used as an "
  250|   454k|                  "source range type to scn::scan.\n"
  251|   454k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   454k|                  "and do not provide an explicit source range, "
  253|   454k|                  "or use scn::scan with a FILE* directly.");
  254|   454k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   454k|                  "\n"
  256|   454k|                  "Unsupported range type given as input to a scanning "
  257|   454k|                  "function.\n"
  258|   454k|                  "In order to be scannable, a range needs to satisfy "
  259|   454k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   454k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   454k|                  "\n"
  262|   454k|                  "Unsupported range type given as input to a scanning "
  263|   454k|                  "function.\n"
  264|   454k|                  "A range needs to model forward_range and have a valid "
  265|   454k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   454k|                  "Examples of scannable ranges are std::string, "
  267|   454k|                  "std::string_view, "
  268|   454k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   454k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   454k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   454k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   454k|{
  196|   454k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   454k|        return file_marker_found{};
  198|   454k|    }
  199|   454k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   454k|        if constexpr (ranges::input_range<Range>) {
  201|   454k|            return insufficient_range{};
  202|   454k|        }
  203|   454k|        else {
  204|   454k|            return invalid_input_range{};
  205|   454k|        }
  206|   454k|    }
  207|   454k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   454k|        return invalid_char_type{};
  209|   454k|    }
  210|   454k|    else {
  211|   454k|        return make_forward_scan_buffer(r);
  212|   454k|    }
  213|   454k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  3.97M|{
  226|  3.97M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  3.97M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  3.97M|                  "\n"
  230|  3.97M|                  "Unsupported range type given as input to a scanning "
  231|  3.97M|                  "function.\n"
  232|  3.97M|                  "A range needs to have a character type (value type) "
  233|  3.97M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  3.97M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  3.97M|                  "to be included.\n"
  236|  3.97M|                  "See the scnlib documentation for more details.");
  237|  3.97M|    static_assert(
  238|  3.97M|        !std::is_same_v<T, custom_char_traits>,
  239|  3.97M|        "\n"
  240|  3.97M|        "Unsupported range type given as input to a scanning "
  241|  3.97M|        "function.\n"
  242|  3.97M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  3.97M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  3.97M|        "not supported.");
  245|  3.97M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  3.97M|                  "\n"
  247|  3.97M|                  "Unsupported range type given as input to a scanning "
  248|  3.97M|                  "function.\n"
  249|  3.97M|                  "file_marker_found cannot be used as an "
  250|  3.97M|                  "source range type to scn::scan.\n"
  251|  3.97M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  3.97M|                  "and do not provide an explicit source range, "
  253|  3.97M|                  "or use scn::scan with a FILE* directly.");
  254|  3.97M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  3.97M|                  "\n"
  256|  3.97M|                  "Unsupported range type given as input to a scanning "
  257|  3.97M|                  "function.\n"
  258|  3.97M|                  "In order to be scannable, a range needs to satisfy "
  259|  3.97M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  3.97M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  3.97M|                  "\n"
  262|  3.97M|                  "Unsupported range type given as input to a scanning "
  263|  3.97M|                  "function.\n"
  264|  3.97M|                  "A range needs to model forward_range and have a valid "
  265|  3.97M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  3.97M|                  "Examples of scannable ranges are std::string, "
  267|  3.97M|                  "std::string_view, "
  268|  3.97M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  3.97M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  3.97M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  3.97M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  3.97M|{
  153|  3.97M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  3.97M|        return std::basic_string_view{ranges::data(r),
  155|  3.97M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  3.97M|    }
  162|  3.97M|    else {
  163|  3.97M|        return invalid_char_type{};
  164|  3.97M|    }
  165|  3.97M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   789k|{
  226|   789k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   789k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   789k|                  "\n"
  230|   789k|                  "Unsupported range type given as input to a scanning "
  231|   789k|                  "function.\n"
  232|   789k|                  "A range needs to have a character type (value type) "
  233|   789k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   789k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   789k|                  "to be included.\n"
  236|   789k|                  "See the scnlib documentation for more details.");
  237|   789k|    static_assert(
  238|   789k|        !std::is_same_v<T, custom_char_traits>,
  239|   789k|        "\n"
  240|   789k|        "Unsupported range type given as input to a scanning "
  241|   789k|        "function.\n"
  242|   789k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   789k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   789k|        "not supported.");
  245|   789k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   789k|                  "\n"
  247|   789k|                  "Unsupported range type given as input to a scanning "
  248|   789k|                  "function.\n"
  249|   789k|                  "file_marker_found cannot be used as an "
  250|   789k|                  "source range type to scn::scan.\n"
  251|   789k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   789k|                  "and do not provide an explicit source range, "
  253|   789k|                  "or use scn::scan with a FILE* directly.");
  254|   789k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   789k|                  "\n"
  256|   789k|                  "Unsupported range type given as input to a scanning "
  257|   789k|                  "function.\n"
  258|   789k|                  "In order to be scannable, a range needs to satisfy "
  259|   789k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   789k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   789k|                  "\n"
  262|   789k|                  "Unsupported range type given as input to a scanning "
  263|   789k|                  "function.\n"
  264|   789k|                  "A range needs to model forward_range and have a valid "
  265|   789k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   789k|                  "Examples of scannable ranges are std::string, "
  267|   789k|                  "std::string_view, "
  268|   789k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   789k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   789k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   789k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   789k|{
  196|   789k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   789k|        return file_marker_found{};
  198|   789k|    }
  199|   789k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   789k|        if constexpr (ranges::input_range<Range>) {
  201|   789k|            return insufficient_range{};
  202|   789k|        }
  203|   789k|        else {
  204|   789k|            return invalid_input_range{};
  205|   789k|        }
  206|   789k|    }
  207|   789k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   789k|        return invalid_char_type{};
  209|   789k|    }
  210|   789k|    else {
  211|   789k|        return make_forward_scan_buffer(r);
  212|   789k|    }
  213|   789k|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  6.95M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  3.63M|    {
   45|  3.63M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  3.63M|    {
   66|  3.63M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  3.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.63M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  3.63M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  3.63M|        do_check_arg_id(id);
   74|  3.63M|        return id;
   75|  3.63M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  3.63M|{
  210|  3.63M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  3.63M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  3.63M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  3.46M|    {
   61|  3.46M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  3.46M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  7.10M|    {
   50|  7.10M|        return m_format.data();
   51|  7.10M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  3.56M|    {
   45|  3.56M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  3.56M|    {
   66|  3.56M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  3.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.56M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  3.56M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  3.56M|        do_check_arg_id(id);
   74|  3.56M|        return id;
   75|  3.56M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  3.56M|{
  210|  3.56M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  3.56M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  3.56M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  3.26M|    {
   61|  3.26M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  3.26M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  6.83M|    {
   50|  6.83M|        return m_format.data();
   51|  6.83M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  12.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  8.88M|    {
  482|  8.88M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  8.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  8.88M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  8.88M|    {
  473|  8.88M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  8.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  8.88M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.97M|    {
  482|  3.97M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.97M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  3.97M|    {
  473|  3.97M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.97M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   928k|    {
  594|   928k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   928k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   928k|    {
  564|   928k|        return ranges::prev(it);
  565|   928k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.86M|    {
  482|  2.86M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.86M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.86M|    {
  473|  2.86M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.86M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  3.27M|    {
  513|  3.27M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  3.27M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  3.27M|    {
  505|  3.27M|        return ranges::next(it, n);
  506|  3.27M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  3.09M|    {
  549|  3.09M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  3.09M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  3.09M|    {
  541|  3.09M|        return ranges::distance(lhs, rhs);
  542|  3.09M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  1.23M|    {
  513|  1.23M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  1.23M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  1.23M|    {
  498|  1.23M|        it.batch_advance(n);
  499|  1.23M|        return it;
  500|  1.23M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   113k|    {
  549|   113k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   113k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   113k|    {
  534|   113k|        return rhs.position() - lhs.position();
  535|   113k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  2.50M|    {
  482|  2.50M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  2.50M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  2.50M|    {
  473|  2.50M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  2.50M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|   780k|    {
  594|   780k|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|   780k|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|   780k|    {
  564|   780k|        return ranges::prev(it);
  565|   780k|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  2.67M|    {
  513|  2.67M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.67M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  2.67M|    {
  505|  2.67M|        return ranges::next(it, n);
  506|  2.67M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  2.54M|    {
  549|  2.54M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  2.54M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  2.54M|    {
  541|  2.54M|        return ranges::distance(lhs, rhs);
  542|  2.54M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  2.14M|    {
  513|  2.14M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.14M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  2.14M|    {
  498|  2.14M|        it.batch_advance(n);
  499|  2.14M|        return it;
  500|  2.14M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|   191k|    {
  549|   191k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|   191k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|   191k|    {
  534|   191k|        return rhs.position() - lhs.position();
  535|   191k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  4.20M|{
  343|  4.20M|    return {ranges::next(ranges::begin(source), n),
  344|  4.20M|            make_vscan_result_range_end(source)};
  345|  4.20M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  4.20M|{
  330|  4.20M|    return ranges::end(source);
  331|  4.20M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   562k|    {
  253|   562k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  4.20M|    {
  104|  4.20M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|  1.08M|    {
   39|  1.08M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  4.20M|    {
  121|  4.20M|        return ranges::begin(m_range);
  122|  4.20M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   557k|    {
  253|   557k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|  1.08M|    {
   39|  1.08M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   833k|    {
  253|   833k|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|  1.59M|    {
   39|  1.59M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   695k|    {
  253|   695k|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|  1.33M|    {
   39|  1.33M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   849k|    {
  253|   849k|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|  1.62M|    {
   39|  1.62M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   701k|    {
  253|   701k|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|  1.35M|    {
   39|  1.35M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   156k|{
  343|   156k|    return {ranges::next(ranges::begin(source), n),
  344|   156k|            make_vscan_result_range_end(source)};
  345|   156k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   156k|{
  330|   156k|    return ranges::end(source);
  331|   156k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  26.0k|    {
  253|  26.0k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   156k|    {
  104|   156k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   156k|    {
  121|   156k|        return ranges::begin(m_range);
  122|   156k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  26.0k|    {
  253|  26.0k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  26.0k|    {
  253|  26.0k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  26.0k|    {
  253|  26.0k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  26.0k|    {
  253|  26.0k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  26.0k|    {
  253|  26.0k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  3.45M|{
  343|  3.45M|    return {ranges::next(ranges::begin(source), n),
  344|  3.45M|            make_vscan_result_range_end(source)};
  345|  3.45M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  3.45M|{
  330|  3.45M|    return ranges::end(source);
  331|  3.45M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   460k|    {
  253|   460k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  3.45M|    {
  104|  3.45M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  3.45M|    {
  121|  3.45M|        return ranges::begin(m_range);
  122|  3.45M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   459k|    {
  253|   459k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|   688k|    {
  253|   688k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   572k|    {
  253|   572k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|   699k|    {
  253|   699k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   576k|    {
  253|   576k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|   265k|{
  343|   265k|    return {ranges::next(ranges::begin(source), n),
  344|   265k|            make_vscan_result_range_end(source)};
  345|   265k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|   265k|{
  330|   265k|    return ranges::end(source);
  331|   265k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  37.3k|    {
  253|  37.3k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|   265k|    {
  104|   265k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|   265k|    {
  121|   265k|        return ranges::begin(m_range);
  122|   265k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  45.6k|    {
  253|  45.6k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  45.6k|    {
  253|  45.6k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  45.6k|    {
  253|  45.6k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  45.6k|    {
  253|  45.6k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  45.6k|    {
  253|  45.6k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   276k|{
  117|   276k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   276k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   276k|{
   77|   276k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   276k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   276k|    static_cast<    \
  |  |  247|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   276k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   276k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   276k|    static_cast<    \
  |  |  247|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   276k|    static_cast<    \
  |  |  247|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   276k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   553k|{
   55|   553k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 505k]
  |  |  ------------------
  ------------------
   56|  47.3k|        return unexpected(result.error());
   57|  47.3k|    }
   58|   505k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   505k|    static_cast<    \
  |  |  247|   505k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   505k|    static_cast<    \
  |  |  247|   505k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   553k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   276k|{
  201|   276k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   276k|                                                      format, {});
  203|   276k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   276k|{
  163|   276k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   276k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   276k|    static_cast<    \
  |  |  247|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   276k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   276k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   276k|    static_cast<    \
  |  |  247|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   276k|    static_cast<    \
  |  |  247|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   276k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  59.1k|{
  248|  59.1k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  59.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  59.1k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  59.1k|{
  229|  59.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  59.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  59.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  59.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  59.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.36k, False: 56.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.36k|    }                                                  \
  |  |  |  |   70|  59.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  56.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  56.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  56.7k|    static_cast<    \
  |  |  247|  56.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  56.7k|    static_cast<    \
  |  |  247|  56.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  59.1k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   275k|{
  117|   275k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   275k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   275k|{
   77|   275k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   275k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   275k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   275k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   275k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   551k|{
   55|   551k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 503k]
  |  |  ------------------
  ------------------
   56|  47.3k|        return unexpected(result.error());
   57|  47.3k|    }
   58|   503k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   503k|    static_cast<    \
  |  |  247|   503k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   503k|    static_cast<    \
  |  |  247|   503k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   551k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   275k|{
  201|   275k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   275k|                                                      format, {});
  203|   275k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   275k|{
  163|   275k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   275k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   275k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   275k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   275k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   275k|    static_cast<    \
  |  |  247|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   275k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  56.5k|{
  248|  56.5k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  56.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  56.5k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  56.5k|{
  229|  56.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  56.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  56.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  56.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  56.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.36k, False: 54.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.36k|    }                                                  \
  |  |  |  |   70|  56.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  54.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  54.2k|    static_cast<    \
  |  |  247|  54.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  54.2k|    static_cast<    \
  |  |  247|  54.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  56.5k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   401k|{
  117|   401k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   401k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   401k|{
   77|   401k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   401k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   401k|    static_cast<    \
  |  |  247|   401k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   401k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   401k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   401k|    static_cast<    \
  |  |  247|   401k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   401k|    static_cast<    \
  |  |  247|   401k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   401k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   803k|{
   55|   803k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   803k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 756k]
  |  |  ------------------
  ------------------
   56|  47.3k|        return unexpected(result.error());
   57|  47.3k|    }
   58|   756k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   756k|    static_cast<    \
  |  |  247|   756k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   756k|    static_cast<    \
  |  |  247|   756k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   803k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   401k|{
  201|   401k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   401k|                                                      format, {});
  203|   401k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   401k|{
  163|   401k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   401k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   401k|    static_cast<    \
  |  |  247|   401k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   401k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   401k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   401k|    static_cast<    \
  |  |  247|   401k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   401k|    static_cast<    \
  |  |  247|   401k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   401k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  79.2k|{
  248|  79.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  79.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  79.2k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  79.2k|{
  229|  79.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  79.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  79.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.36k, False: 76.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.36k|    }                                                  \
  |  |  |  |   70|  79.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  76.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  76.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  76.8k|    static_cast<    \
  |  |  247|  76.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  76.8k|    static_cast<    \
  |  |  247|  76.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  79.2k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   339k|{
  117|   339k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   339k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   339k|{
   77|   339k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   339k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   339k|    static_cast<    \
  |  |  247|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   339k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   339k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   339k|    static_cast<    \
  |  |  247|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   339k|    static_cast<    \
  |  |  247|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   339k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   678k|{
   55|   678k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   678k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 631k]
  |  |  ------------------
  ------------------
   56|  47.3k|        return unexpected(result.error());
   57|  47.3k|    }
   58|   631k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   631k|    static_cast<    \
  |  |  247|   631k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   631k|    static_cast<    \
  |  |  247|   631k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   678k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   339k|{
  201|   339k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   339k|                                                      format, {});
  203|   339k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   339k|{
  163|   339k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   339k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   339k|    static_cast<    \
  |  |  247|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   339k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   339k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   339k|    static_cast<    \
  |  |  247|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   339k|    static_cast<    \
  |  |  247|   339k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   339k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  66.8k|{
  248|  66.8k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  66.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  66.8k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  66.8k|{
  229|  66.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  66.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  66.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.36k, False: 64.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.36k|    }                                                  \
  |  |  |  |   70|  66.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  64.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  64.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  64.4k|    static_cast<    \
  |  |  247|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  64.4k|    static_cast<    \
  |  |  247|  64.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  66.8k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   409k|{
  117|   409k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   409k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   409k|{
   77|   409k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   409k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   409k|    static_cast<    \
  |  |  247|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   409k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   409k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   409k|    static_cast<    \
  |  |  247|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   409k|    static_cast<    \
  |  |  247|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   409k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   818k|{
   55|   818k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   818k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 771k]
  |  |  ------------------
  ------------------
   56|  47.3k|        return unexpected(result.error());
   57|  47.3k|    }
   58|   771k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   771k|    static_cast<    \
  |  |  247|   771k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   771k|    static_cast<    \
  |  |  247|   771k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   818k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   409k|{
  201|   409k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   409k|                                                      format, {});
  203|   409k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   409k|{
  163|   409k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   409k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   409k|    static_cast<    \
  |  |  247|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   409k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   409k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   409k|    static_cast<    \
  |  |  247|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   409k|    static_cast<    \
  |  |  247|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   409k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  80.6k|{
  248|  80.6k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  80.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  80.6k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  80.6k|{
  229|  80.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  80.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  80.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.36k, False: 78.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.36k|    }                                                  \
  |  |  |  |   70|  80.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  78.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  78.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  78.2k|    static_cast<    \
  |  |  247|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  78.2k|    static_cast<    \
  |  |  247|  78.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  80.6k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   342k|{
  117|   342k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   342k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   342k|{
   77|   342k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   342k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   342k|    static_cast<    \
  |  |  247|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   342k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   342k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   342k|    static_cast<    \
  |  |  247|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   342k|    static_cast<    \
  |  |  247|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   342k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   684k|{
   55|   684k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   684k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 636k]
  |  |  ------------------
  ------------------
   56|  47.3k|        return unexpected(result.error());
   57|  47.3k|    }
   58|   636k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   636k|    static_cast<    \
  |  |  247|   636k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   636k|    static_cast<    \
  |  |  247|   636k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   684k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   342k|{
  201|   342k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   342k|                                                      format, {});
  203|   342k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   342k|{
  163|   342k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   342k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   342k|    static_cast<    \
  |  |  247|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   342k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   342k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   342k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   342k|    static_cast<    \
  |  |  247|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   342k|    static_cast<    \
  |  |  247|   342k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   342k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  67.2k|{
  248|  67.2k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  67.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  67.2k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  67.2k|{
  229|  67.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  67.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  67.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.36k, False: 64.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.36k|    }                                                  \
  |  |  |  |   70|  67.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  64.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  64.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  64.9k|    static_cast<    \
  |  |  247|  64.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  64.9k|    static_cast<    \
  |  |  247|  64.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  67.2k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  35.4k|{
  117|  35.4k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  35.4k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  35.4k|{
   77|  35.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  35.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  35.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  35.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  35.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  70.9k|{
   55|  70.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 23.6k]
  |  |  ------------------
  ------------------
   56|  47.3k|        return unexpected(result.error());
   57|  47.3k|    }
   58|  23.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  70.9k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  35.4k|{
  201|  35.4k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  35.4k|                                                      format, {});
  203|  35.4k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  35.4k|{
  163|  35.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  35.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  35.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  35.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  35.4k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.73k|{
  248|  4.73k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.73k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.73k|{
  229|  4.73k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.73k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.36k, False: 2.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.36k|    }                                                  \
  |  |  |  |   70|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.36k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.36k|    static_cast<    \
  |  |  247|  2.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.36k|    static_cast<    \
  |  |  247|  2.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.73k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  35.4k|{
  117|  35.4k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  35.4k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  35.4k|{
   77|  35.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  35.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  35.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  35.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  35.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  70.9k|{
   55|  70.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 23.6k]
  |  |  ------------------
  ------------------
   56|  47.3k|        return unexpected(result.error());
   57|  47.3k|    }
   58|  23.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  70.9k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  35.4k|{
  201|  35.4k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  35.4k|                                                      format, {});
  203|  35.4k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  35.4k|{
  163|  35.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  35.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  35.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  35.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  35.4k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.73k|{
  248|  4.73k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.73k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.73k|{
  229|  4.73k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.73k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.36k, False: 2.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.36k|    }                                                  \
  |  |  |  |   70|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.36k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.36k|    static_cast<    \
  |  |  247|  2.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.36k|    static_cast<    \
  |  |  247|  2.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.73k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  35.4k|{
  117|  35.4k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  35.4k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  35.4k|{
   77|  35.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  35.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  35.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  35.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  35.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  70.9k|{
   55|  70.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 23.6k]
  |  |  ------------------
  ------------------
   56|  47.3k|        return unexpected(result.error());
   57|  47.3k|    }
   58|  23.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  70.9k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  35.4k|{
  201|  35.4k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  35.4k|                                                      format, {});
  203|  35.4k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  35.4k|{
  163|  35.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  35.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  35.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  35.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  35.4k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.73k|{
  248|  4.73k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.73k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.73k|{
  229|  4.73k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.73k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.36k, False: 2.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.36k|    }                                                  \
  |  |  |  |   70|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.36k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.36k|    static_cast<    \
  |  |  247|  2.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.36k|    static_cast<    \
  |  |  247|  2.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.73k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  35.4k|{
  117|  35.4k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  35.4k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  35.4k|{
   77|  35.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  35.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  35.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  35.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  35.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  70.9k|{
   55|  70.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 23.6k]
  |  |  ------------------
  ------------------
   56|  47.3k|        return unexpected(result.error());
   57|  47.3k|    }
   58|  23.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  70.9k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  35.4k|{
  201|  35.4k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  35.4k|                                                      format, {});
  203|  35.4k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  35.4k|{
  163|  35.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  35.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  35.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  35.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  35.4k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.73k|{
  248|  4.73k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.73k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.73k|{
  229|  4.73k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.73k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.36k, False: 2.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.36k|    }                                                  \
  |  |  |  |   70|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.36k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.36k|    static_cast<    \
  |  |  247|  2.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.36k|    static_cast<    \
  |  |  247|  2.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.73k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  35.4k|{
  117|  35.4k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  35.4k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  35.4k|{
   77|  35.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  35.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  35.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  35.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  35.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  70.9k|{
   55|  70.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 23.6k]
  |  |  ------------------
  ------------------
   56|  47.3k|        return unexpected(result.error());
   57|  47.3k|    }
   58|  23.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  70.9k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  35.4k|{
  201|  35.4k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  35.4k|                                                      format, {});
  203|  35.4k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  35.4k|{
  163|  35.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  35.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  35.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  35.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  35.4k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.73k|{
  248|  4.73k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.73k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.73k|{
  229|  4.73k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.73k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.36k, False: 2.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.36k|    }                                                  \
  |  |  |  |   70|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.36k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.36k|    static_cast<    \
  |  |  247|  2.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.36k|    static_cast<    \
  |  |  247|  2.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.73k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  35.4k|{
  117|  35.4k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  35.4k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  35.4k|{
   77|  35.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  35.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  35.4k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  35.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  35.4k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  70.9k|{
   55|  70.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  70.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 47.3k, False: 23.6k]
  |  |  ------------------
  ------------------
   56|  47.3k|        return unexpected(result.error());
   57|  47.3k|    }
   58|  23.6k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  23.6k|    static_cast<    \
  |  |  247|  23.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  70.9k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  35.4k|{
  201|  35.4k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  35.4k|                                                      format, {});
  203|  35.4k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  35.4k|{
  163|  35.4k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  35.4k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  35.4k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  35.4k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  35.4k|    static_cast<    \
  |  |  247|  35.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  35.4k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  4.73k|{
  248|  4.73k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  4.73k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  4.73k|{
  229|  4.73k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  4.73k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.36k, False: 2.36k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.36k|    }                                                  \
  |  |  |  |   70|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  2.36k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  2.36k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.36k|    static_cast<    \
  |  |  247|  2.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  2.36k|    static_cast<    \
  |  |  247|  2.36k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  4.73k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   248k|{
   77|   248k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   248k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   248k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   248k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   248k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   496k|{
   55|   496k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   496k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 413k]
  |  |  ------------------
  ------------------
   56|  83.0k|        return unexpected(result.error());
   57|  83.0k|    }
   58|   413k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   413k|    static_cast<    \
  |  |  247|   413k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   413k|    static_cast<    \
  |  |  247|   413k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   496k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   248k|{
  163|   248k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   248k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   248k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   248k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   248k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  51.0k|{
  229|  51.0k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  51.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  51.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  51.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  51.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  51.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.15k, False: 46.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.15k|    }                                                  \
  |  |  |  |   70|  51.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  46.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  46.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  46.8k|    static_cast<    \
  |  |  247|  46.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  46.8k|    static_cast<    \
  |  |  247|  46.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  51.0k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   248k|{
   77|   248k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   248k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   248k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   248k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   248k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   497k|{
   55|   497k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 414k]
  |  |  ------------------
  ------------------
   56|  83.0k|        return unexpected(result.error());
   57|  83.0k|    }
   58|   414k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   414k|    static_cast<    \
  |  |  247|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   414k|    static_cast<    \
  |  |  247|   414k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   497k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   248k|{
  163|   248k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   248k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   248k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   248k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   248k|    static_cast<    \
  |  |  247|   248k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   248k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  48.9k|{
  229|  48.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  48.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  48.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  48.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  48.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.15k, False: 44.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.15k|    }                                                  \
  |  |  |  |   70|  48.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  44.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  44.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  44.8k|    static_cast<    \
  |  |  247|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  44.8k|    static_cast<    \
  |  |  247|  44.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  48.9k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   353k|{
   77|   353k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   353k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   353k|    static_cast<    \
  |  |  247|   353k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   353k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   353k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   353k|    static_cast<    \
  |  |  247|   353k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   353k|    static_cast<    \
  |  |  247|   353k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   353k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   707k|{
   55|   707k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   707k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 624k]
  |  |  ------------------
  ------------------
   56|  83.0k|        return unexpected(result.error());
   57|  83.0k|    }
   58|   624k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   624k|    static_cast<    \
  |  |  247|   624k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   624k|    static_cast<    \
  |  |  247|   624k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   707k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   353k|{
  163|   353k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   353k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   353k|    static_cast<    \
  |  |  247|   353k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   353k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   353k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   353k|    static_cast<    \
  |  |  247|   353k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   353k|    static_cast<    \
  |  |  247|   353k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   353k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  67.9k|{
  229|  67.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  67.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  67.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  67.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.15k, False: 63.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.15k|    }                                                  \
  |  |  |  |   70|  67.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  63.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  63.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  63.7k|    static_cast<    \
  |  |  247|  63.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  63.7k|    static_cast<    \
  |  |  247|  63.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  67.9k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   301k|{
   77|   301k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   301k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   301k|    static_cast<    \
  |  |  247|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   301k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   301k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   301k|    static_cast<    \
  |  |  247|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   301k|    static_cast<    \
  |  |  247|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   301k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   602k|{
   55|   602k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 519k]
  |  |  ------------------
  ------------------
   56|  83.0k|        return unexpected(result.error());
   57|  83.0k|    }
   58|   519k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   519k|    static_cast<    \
  |  |  247|   519k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   519k|    static_cast<    \
  |  |  247|   519k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   602k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   301k|{
  163|   301k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   301k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   301k|    static_cast<    \
  |  |  247|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   301k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   301k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   301k|    static_cast<    \
  |  |  247|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   301k|    static_cast<    \
  |  |  247|   301k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   301k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  57.2k|{
  229|  57.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  57.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  57.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  57.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  57.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.15k, False: 53.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.15k|    }                                                  \
  |  |  |  |   70|  57.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  53.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  53.0k|    static_cast<    \
  |  |  247|  53.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  53.0k|    static_cast<    \
  |  |  247|  53.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  57.2k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   358k|{
   77|   358k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   358k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   358k|    static_cast<    \
  |  |  247|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   358k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   358k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   358k|    static_cast<    \
  |  |  247|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   358k|    static_cast<    \
  |  |  247|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   358k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   717k|{
   55|   717k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   717k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 634k]
  |  |  ------------------
  ------------------
   56|  83.0k|        return unexpected(result.error());
   57|  83.0k|    }
   58|   634k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   634k|    static_cast<    \
  |  |  247|   634k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   634k|    static_cast<    \
  |  |  247|   634k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   717k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   358k|{
  163|   358k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   358k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   358k|    static_cast<    \
  |  |  247|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   358k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   358k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   358k|    static_cast<    \
  |  |  247|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   358k|    static_cast<    \
  |  |  247|   358k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   358k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  68.8k|{
  229|  68.8k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  68.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  68.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  68.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  68.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  68.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.15k, False: 64.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.15k|    }                                                  \
  |  |  |  |   70|  68.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  64.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  64.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  64.6k|    static_cast<    \
  |  |  247|  64.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  64.6k|    static_cast<    \
  |  |  247|  64.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  68.8k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   303k|{
   77|   303k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   303k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   303k|    static_cast<    \
  |  |  247|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   303k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   303k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   303k|    static_cast<    \
  |  |  247|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   303k|    static_cast<    \
  |  |  247|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   303k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   606k|{
   55|   606k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 523k]
  |  |  ------------------
  ------------------
   56|  83.0k|        return unexpected(result.error());
   57|  83.0k|    }
   58|   523k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   523k|    static_cast<    \
  |  |  247|   523k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   523k|    static_cast<    \
  |  |  247|   523k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   606k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   303k|{
  163|   303k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   303k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   303k|    static_cast<    \
  |  |  247|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   303k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   303k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   303k|    static_cast<    \
  |  |  247|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   303k|    static_cast<    \
  |  |  247|   303k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   303k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  57.5k|{
  229|  57.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  57.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  57.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  57.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  57.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  57.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.15k, False: 53.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.15k|    }                                                  \
  |  |  |  |   70|  57.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  53.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  53.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  53.4k|    static_cast<    \
  |  |  247|  53.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  53.4k|    static_cast<    \
  |  |  247|  53.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  57.5k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  58.1k|{
   77|  58.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  58.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.1k|    static_cast<    \
  |  |  247|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  58.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  58.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.1k|    static_cast<    \
  |  |  247|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.1k|    static_cast<    \
  |  |  247|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  58.1k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   116k|{
   55|   116k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 33.2k]
  |  |  ------------------
  ------------------
   56|  83.0k|        return unexpected(result.error());
   57|  83.0k|    }
   58|  33.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  33.2k|    static_cast<    \
  |  |  247|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  33.2k|    static_cast<    \
  |  |  247|  33.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   116k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  58.1k|{
  163|  58.1k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  58.1k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  58.1k|    static_cast<    \
  |  |  247|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  58.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  58.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.1k|    static_cast<    \
  |  |  247|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  58.1k|    static_cast<    \
  |  |  247|  58.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  58.1k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.30k|{
  229|  8.30k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.15k, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.15k|    }                                                  \
  |  |  |  |   70|  8.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  4.15k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.15k|    static_cast<    \
  |  |  247|  4.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.15k|    static_cast<    \
  |  |  247|  4.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.30k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  62.3k|{
   77|  62.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  62.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  62.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  62.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  62.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   124k|{
   55|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 41.5k]
  |  |  ------------------
  ------------------
   56|  83.0k|        return unexpected(result.error());
   57|  83.0k|    }
   58|  41.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  41.5k|    static_cast<    \
  |  |  247|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  41.5k|    static_cast<    \
  |  |  247|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   124k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  62.3k|{
  163|  62.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  62.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  62.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  62.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  62.3k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.30k|{
  229|  8.30k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.15k, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.15k|    }                                                  \
  |  |  |  |   70|  8.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  4.15k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.15k|    static_cast<    \
  |  |  247|  4.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.15k|    static_cast<    \
  |  |  247|  4.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.30k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  62.3k|{
   77|  62.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  62.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  62.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  62.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  62.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   124k|{
   55|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 41.5k]
  |  |  ------------------
  ------------------
   56|  83.0k|        return unexpected(result.error());
   57|  83.0k|    }
   58|  41.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  41.5k|    static_cast<    \
  |  |  247|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  41.5k|    static_cast<    \
  |  |  247|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   124k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  62.3k|{
  163|  62.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  62.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  62.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  62.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  62.3k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.30k|{
  229|  8.30k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.15k, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.15k|    }                                                  \
  |  |  |  |   70|  8.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  4.15k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.15k|    static_cast<    \
  |  |  247|  4.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.15k|    static_cast<    \
  |  |  247|  4.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.30k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  62.3k|{
   77|  62.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  62.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  62.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  62.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  62.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   124k|{
   55|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 41.5k]
  |  |  ------------------
  ------------------
   56|  83.0k|        return unexpected(result.error());
   57|  83.0k|    }
   58|  41.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  41.5k|    static_cast<    \
  |  |  247|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  41.5k|    static_cast<    \
  |  |  247|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   124k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  62.3k|{
  163|  62.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  62.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  62.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  62.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  62.3k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.30k|{
  229|  8.30k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.15k, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.15k|    }                                                  \
  |  |  |  |   70|  8.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  4.15k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.15k|    static_cast<    \
  |  |  247|  4.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.15k|    static_cast<    \
  |  |  247|  4.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.30k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  62.3k|{
   77|  62.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  62.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  62.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  62.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  62.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   124k|{
   55|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 41.5k]
  |  |  ------------------
  ------------------
   56|  83.0k|        return unexpected(result.error());
   57|  83.0k|    }
   58|  41.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  41.5k|    static_cast<    \
  |  |  247|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  41.5k|    static_cast<    \
  |  |  247|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   124k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  62.3k|{
  163|  62.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  62.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  62.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  62.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  62.3k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.30k|{
  229|  8.30k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.15k, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.15k|    }                                                  \
  |  |  |  |   70|  8.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  4.15k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.15k|    static_cast<    \
  |  |  247|  4.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.15k|    static_cast<    \
  |  |  247|  4.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.30k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  62.3k|{
   77|  62.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  62.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  62.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  62.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  62.3k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   124k|{
   55|   124k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 83.0k, False: 41.5k]
  |  |  ------------------
  ------------------
   56|  83.0k|        return unexpected(result.error());
   57|  83.0k|    }
   58|  41.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  41.5k|    static_cast<    \
  |  |  247|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  41.5k|    static_cast<    \
  |  |  247|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   124k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  62.3k|{
  163|  62.3k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  62.3k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  62.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  62.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  62.3k|    static_cast<    \
  |  |  247|  62.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  62.3k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.30k|{
  229|  8.30k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.30k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.15k, False: 4.15k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.15k|    }                                                  \
  |  |  |  |   70|  8.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  4.15k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.15k|    static_cast<    \
  |  |  247|  4.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  4.15k|    static_cast<    \
  |  |  247|  4.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.30k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   454k|{
  486|   454k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   454k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   454k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   454k|    {
  378|   454k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   454k|    {
  360|   454k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   454k|    {
  129|   454k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   454k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   738k|    {
  382|   738k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.05k, False: 737k]
  ------------------
  383|  1.05k|            return false;
  384|  1.05k|        }
  385|   737k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 368k, False: 368k]
  ------------------
  386|   368k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   368k|                                          this->m_current_view.begin(),
  388|   368k|                                          this->m_current_view.end());
  389|   368k|        }
  390|   737k|        m_latest = *m_cursor;
  391|   737k|        ++m_cursor;
  392|   737k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   737k|        return true;
  394|   738k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   454k|    {
   49|   454k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   454k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   454k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   789k|{
  486|   789k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   789k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   789k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   789k|    {
  378|   789k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|   789k|    {
  360|   789k|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|   789k|    {
  129|   789k|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|   789k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.55M|    {
  382|  1.55M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 1.29k, False: 1.55M]
  ------------------
  383|  1.29k|            return false;
  384|  1.29k|        }
  385|  1.55M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 913k, False: 639k]
  ------------------
  386|   913k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   913k|                                          this->m_current_view.begin(),
  388|   913k|                                          this->m_current_view.end());
  389|   913k|        }
  390|  1.55M|        m_latest = *m_cursor;
  391|  1.55M|        ++m_cursor;
  392|  1.55M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.55M|        return true;
  394|  1.55M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|   789k|    {
   49|   789k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   789k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   789k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  23.0M|    {
  173|  23.0M|        return m_end == nullptr;
  174|  23.0M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   993k|    {
  189|   993k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 993k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   993k|        return parent()->get_segment_starting_at(position());
  195|   993k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  11.9M|    {
  183|  11.9M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  11.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  11.9M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   993k|    {
   79|   993k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   993k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 127k, False: 865k]
  |  |  ------------------
  ------------------
   80|   993k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   127k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   127k|        }
   83|   865k|        const auto start = pos - m_putback_buffer.size();
   84|   865k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   865k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   865k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   993k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   709k|    {
  178|   709k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   709k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  2.22M|    {
  168|  2.22M|        return m_position;
  169|  2.22M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|  1.36M|    {
  101|  1.36M|        return m_is_contiguous;
  102|  1.36M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  44.9M|    {
  173|  44.9M|        return m_end == nullptr;
  174|  44.9M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  1.72M|    {
  189|  1.72M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.72M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.72M|        return parent()->get_segment_starting_at(position());
  195|  1.72M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  23.5M|    {
  183|  23.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  23.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  23.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  23.5M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  1.72M|    {
   79|  1.72M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 224k, False: 1.50M]
  |  |  ------------------
  ------------------
   80|  1.72M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|   224k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|   224k|        }
   83|  1.50M|        const auto start = pos - m_putback_buffer.size();
   84|  1.50M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  1.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.72M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|  1.23M|    {
  178|  1.23M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|  1.23M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  3.87M|    {
  168|  3.87M|        return m_position;
  169|  3.87M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  2.36M|    {
  101|  2.36M|        return m_is_contiguous;
  102|  2.36M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   454k|{
  322|   454k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 454k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   454k|    return ranges::subrange{forward_iterator{this, 0},
  327|   454k|                            ranges_std::default_sentinel};
  328|   454k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   454k|    {
  155|   454k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   454k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   454k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   454k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   454k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   454k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   454k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.70M|    {
  258|  1.70M|        return x.is_at_end();
  259|  1.70M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  2.22M|    {
  302|  2.22M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 2.22M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  2.22M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 2.22M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  2.22M|        return !read_at_position();
  309|  2.22M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  5.91M|    {
  282|  5.91M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  5.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  5.91M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 5.91M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  5.91M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  5.91M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 5.17M, False: 738k]
  |  |  ------------------
  ------------------
  289|  5.17M|            return true;
  290|  5.17M|        }
  291|       |
  292|  1.47M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 738k, False: 737k]
  ------------------
  293|   738k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.05k, False: 737k]
  ------------------
  294|  1.05k|                return false;
  295|  1.05k|            }
  296|   738k|        }
  297|   737k|        return true;
  298|   738k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  8.10M|    {
   59|  8.10M|        return m_putback_buffer.size() + m_current_view.size();
   60|  8.10M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   524k|    {
  269|   524k|        return !x.is_at_end();
  270|   524k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  2.80M|    {
  217|  2.80M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  2.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  2.80M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 2.80M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  2.80M|        auto res = read_at_position();
  226|  2.80M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  2.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  2.80M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  2.80M|    {
   90|  2.80M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  2.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.62M, False: 185k]
  |  |  ------------------
  ------------------
   91|  2.80M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  2.62M|            return m_putback_buffer[pos];
   93|  2.62M|        }
   94|   185k|        const auto start = pos - m_putback_buffer.size();
   95|   185k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   185k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   185k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  2.80M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   879k|    {
  203|   879k|        ++m_position;
  204|   879k|        std::ignore = read_at_position();
  205|   879k|        return *this;
  206|   879k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   964k|    {
  252|   964k|        return !(lhs == rhs);
  253|   964k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|  1.27M|    {
  247|  1.27M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 1.27M, False: 0]
  |  Branch (247:46): [True: 312k, False: 964k]
  ------------------
  248|  1.27M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|  1.23M|    {
  232|  1.23M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  1.23M|        return *this;
  235|  1.23M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   297k|    {
   54|   297k|        sync(0);
   55|   297k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|   789k|{
  322|   789k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 789k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   789k|    return ranges::subrange{forward_iterator{this, 0},
  327|   789k|                            ranges_std::default_sentinel};
  328|   789k|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|   789k|    {
  155|   789k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   789k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   789k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   789k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   789k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   789k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   789k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  2.95M|    {
  258|  2.95M|        return x.is_at_end();
  259|  2.95M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  4.14M|    {
  302|  4.14M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 4.14M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  4.14M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 4.14M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  4.14M|        return !read_at_position();
  309|  4.14M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  11.6M|    {
  282|  11.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  11.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  11.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 11.6M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  11.6M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  11.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 10.1M, False: 1.55M]
  |  |  ------------------
  ------------------
  289|  10.1M|            return true;
  290|  10.1M|        }
  291|       |
  292|  3.10M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.55M, False: 1.55M]
  ------------------
  293|  1.55M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 1.29k, False: 1.55M]
  ------------------
  294|  1.29k|                return false;
  295|  1.29k|            }
  296|  1.55M|        }
  297|  1.55M|        return true;
  298|  1.55M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  16.0M|    {
   59|  16.0M|        return m_putback_buffer.size() + m_current_view.size();
   60|  16.0M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.18M|    {
  269|  1.18M|        return !x.is_at_end();
  270|  1.18M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  5.49M|    {
  217|  5.49M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  5.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  5.49M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 5.49M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  5.49M|        auto res = read_at_position();
  226|  5.49M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  5.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  5.49M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  5.49M|    {
   90|  5.49M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  5.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.79M, False: 698k]
  |  |  ------------------
  ------------------
   91|  5.49M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  4.79M|            return m_putback_buffer[pos];
   93|  4.79M|        }
   94|   698k|        const auto start = pos - m_putback_buffer.size();
   95|   698k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   698k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   698k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  5.49M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  2.03M|    {
  203|  2.03M|        ++m_position;
  204|  2.03M|        std::ignore = read_at_position();
  205|  2.03M|        return *this;
  206|  2.03M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  1.91M|    {
  252|  1.91M|        return !(lhs == rhs);
  253|  1.91M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  2.45M|    {
  247|  2.45M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 2.45M, False: 0]
  |  Branch (247:46): [True: 539k, False: 1.91M]
  ------------------
  248|  2.45M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|  2.14M|    {
  232|  2.14M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  2.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  2.14M|        return *this;
  235|  2.14M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|   523k|    {
   54|   523k|        sync(0);
   55|   523k|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   378k|{
   72|   378k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   378k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   378k|    }
   75|   378k|    else if constexpr (sizeof(U) == 2) {
   76|   378k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   378k|    }
   78|   378k|    else {
   79|       |        // utf-32
   80|   378k|        static_assert(sizeof(U) == 4);
   81|   378k|        SCN_UNUSED(ch);
   82|   378k|        return 1;
   83|   378k|    }
   84|   378k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   378k|{
   36|   378k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   378k|    SCN_GCC_COMPAT_PUSH
   39|   378k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   378k|    constexpr char lengths[] =
   41|   378k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   378k|        "\1\1\1\1\1\1\1\1"
   43|   378k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   378k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   378k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   378k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   378k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   378k|    SCN_GCC_COMPAT_POP
   50|   378k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  58.2M|{
   72|  58.2M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  58.2M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  58.2M|    }
   75|  58.2M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  58.2M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  58.2M|    }
   78|  58.2M|    else {
   79|       |        // utf-32
   80|  58.2M|        static_assert(sizeof(U) == 4);
   81|  58.2M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  58.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  58.2M|        return 1;
   83|  58.2M|    }
   84|  58.2M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.22M|{
   36|  1.22M|#define SCN_VISIT(Type)                                         \
   37|  1.22M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.22M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.22M|    }                                                           \
   40|  1.22M|    else {                                                      \
   41|  1.22M|        return vis(monostate_val);                              \
   42|  1.22M|    }
   43|       |
   44|  1.22M|    monostate monostate_val{};
   45|       |
   46|  1.22M|    switch (arg.m_type) {
   47|   177k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 177k, False: 1.05M]
  ------------------
   48|   177k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   177k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   177k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   177k|    }                                                           \
  |  |   40|   177k|    else {                                                      \
  |  |   41|   177k|        return vis(monostate_val);                              \
  |  |   42|   177k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.22M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   237k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 237k, False: 991k]
  ------------------
   52|   237k|            SCN_VISIT(int);
  ------------------
  |  |   37|   237k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   237k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   237k|    }                                                           \
  |  |   40|   237k|    else {                                                      \
  |  |   41|   237k|        return vis(monostate_val);                              \
  |  |   42|   237k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.22M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   241k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 241k, False: 987k]
  ------------------
   56|   241k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   241k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   241k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   241k|    }                                                           \
  |  |   40|   241k|    else {                                                      \
  |  |   41|   241k|        return vis(monostate_val);                              \
  |  |   42|   241k|    }
  ------------------
   57|   169k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 169k, False: 1.05M]
  ------------------
   58|   169k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   169k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   169k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   169k|    }                                                           \
  |  |   40|   169k|    else {                                                      \
  |  |   41|   169k|        return vis(monostate_val);                              \
  |  |   42|   169k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.22M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   200k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 200k, False: 1.02M]
  ------------------
   62|   200k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   200k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   200k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   200k|    }                                                           \
  |  |   40|   200k|    else {                                                      \
  |  |   41|   200k|        return vis(monostate_val);                              \
  |  |   42|   200k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.22M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   201k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 201k, False: 1.02M]
  ------------------
   66|   201k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   201k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   201k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   201k|    }                                                           \
  |  |   40|   201k|    else {                                                      \
  |  |   41|   201k|        return vis(monostate_val);                              \
  |  |   42|   201k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.22M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.22M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.22M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.22M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.22M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.22M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.22M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.22M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.22M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.22M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.22M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.22M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.22M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.22M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.22M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.22M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.22M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.22M|            SCN_CLANG_POP
  114|  1.22M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.22M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  85.1k|{
   36|  85.1k|#define SCN_VISIT(Type)                                         \
   37|  85.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  85.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  85.1k|    }                                                           \
   40|  85.1k|    else {                                                      \
   41|  85.1k|        return vis(monostate_val);                              \
   42|  85.1k|    }
   43|       |
   44|  85.1k|    monostate monostate_val{};
   45|       |
   46|  85.1k|    switch (arg.m_type) {
   47|  14.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 14.1k, False: 70.9k]
  ------------------
   48|  14.1k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  14.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  14.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  14.1k|    }                                                           \
  |  |   40|  14.1k|    else {                                                      \
  |  |   41|  14.1k|        return vis(monostate_val);                              \
  |  |   42|  14.1k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 85.1k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  14.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 14.1k, False: 70.9k]
  ------------------
   52|  14.1k|            SCN_VISIT(int);
  ------------------
  |  |   37|  14.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  14.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  14.1k|    }                                                           \
  |  |   40|  14.1k|    else {                                                      \
  |  |   41|  14.1k|        return vis(monostate_val);                              \
  |  |   42|  14.1k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 85.1k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  14.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 14.1k, False: 70.9k]
  ------------------
   56|  14.1k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  14.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  14.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  14.1k|    }                                                           \
  |  |   40|  14.1k|    else {                                                      \
  |  |   41|  14.1k|        return vis(monostate_val);                              \
  |  |   42|  14.1k|    }
  ------------------
   57|  14.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 14.1k, False: 70.9k]
  ------------------
   58|  14.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  14.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  14.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  14.1k|    }                                                           \
  |  |   40|  14.1k|    else {                                                      \
  |  |   41|  14.1k|        return vis(monostate_val);                              \
  |  |   42|  14.1k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 85.1k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  14.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 14.1k, False: 70.9k]
  ------------------
   62|  14.1k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  14.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  14.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  14.1k|    }                                                           \
  |  |   40|  14.1k|    else {                                                      \
  |  |   41|  14.1k|        return vis(monostate_val);                              \
  |  |   42|  14.1k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 85.1k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  14.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 14.1k, False: 70.9k]
  ------------------
   66|  14.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  14.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  14.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  14.1k|    }                                                           \
  |  |   40|  14.1k|    else {                                                      \
  |  |   41|  14.1k|        return vis(monostate_val);                              \
  |  |   42|  14.1k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 85.1k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 85.1k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 85.1k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 85.1k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 85.1k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 85.1k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 85.1k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 85.1k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 85.1k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 85.1k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 85.1k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 85.1k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 85.1k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 85.1k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 85.1k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 85.1k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 85.1k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  85.1k|            SCN_CLANG_POP
  114|  85.1k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  85.1k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  3.18M|{
   36|  3.18M|#define SCN_VISIT(Type)                                         \
   37|  3.18M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  3.18M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  3.18M|    }                                                           \
   40|  3.18M|    else {                                                      \
   41|  3.18M|        return vis(monostate_val);                              \
   42|  3.18M|    }
   43|       |
   44|  3.18M|    monostate monostate_val{};
   45|       |
   46|  3.18M|    switch (arg.m_type) {
   47|   420k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 420k, False: 2.76M]
  ------------------
   48|   420k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   420k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   420k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   420k|    }                                                           \
  |  |   40|   420k|    else {                                                      \
  |  |   41|   420k|        return vis(monostate_val);                              \
  |  |   42|   420k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 3.18M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   630k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 630k, False: 2.55M]
  ------------------
   52|   630k|            SCN_VISIT(int);
  ------------------
  |  |   37|   630k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   630k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   630k|    }                                                           \
  |  |   40|   630k|    else {                                                      \
  |  |   41|   630k|        return vis(monostate_val);                              \
  |  |   42|   630k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 3.18M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   643k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 643k, False: 2.54M]
  ------------------
   56|   643k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   643k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   643k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   643k|    }                                                           \
  |  |   40|   643k|    else {                                                      \
  |  |   41|   643k|        return vis(monostate_val);                              \
  |  |   42|   643k|    }
  ------------------
   57|   423k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 423k, False: 2.76M]
  ------------------
   58|   423k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   423k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   423k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   423k|    }                                                           \
  |  |   40|   423k|    else {                                                      \
  |  |   41|   423k|        return vis(monostate_val);                              \
  |  |   42|   423k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 3.18M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   530k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 530k, False: 2.65M]
  ------------------
   62|   530k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   530k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   530k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   530k|    }                                                           \
  |  |   40|   530k|    else {                                                      \
  |  |   41|   530k|        return vis(monostate_val);                              \
  |  |   42|   530k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 3.18M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   535k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 535k, False: 2.64M]
  ------------------
   66|   535k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   535k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   535k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   535k|    }                                                           \
  |  |   40|   535k|    else {                                                      \
  |  |   41|   535k|        return vis(monostate_val);                              \
  |  |   42|   535k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 3.18M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 3.18M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 3.18M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 3.18M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 3.18M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 3.18M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 3.18M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 3.18M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 3.18M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 3.18M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 3.18M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 3.18M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 3.18M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 3.18M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 3.18M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 3.18M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 3.18M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  3.18M|            SCN_CLANG_POP
  114|  3.18M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  3.18M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   283k|{
   36|   283k|#define SCN_VISIT(Type)                                         \
   37|   283k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   283k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   283k|    }                                                           \
   40|   283k|    else {                                                      \
   41|   283k|        return vis(monostate_val);                              \
   42|   283k|    }
   43|       |
   44|   283k|    monostate monostate_val{};
   45|       |
   46|   283k|    switch (arg.m_type) {
   47|  47.3k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 47.3k, False: 236k]
  ------------------
   48|  47.3k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  47.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.3k|    }                                                           \
  |  |   40|  47.3k|    else {                                                      \
  |  |   41|  47.3k|        return vis(monostate_val);                              \
  |  |   42|  47.3k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 283k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  47.3k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 47.3k, False: 236k]
  ------------------
   52|  47.3k|            SCN_VISIT(int);
  ------------------
  |  |   37|  47.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.3k|    }                                                           \
  |  |   40|  47.3k|    else {                                                      \
  |  |   41|  47.3k|        return vis(monostate_val);                              \
  |  |   42|  47.3k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 283k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  47.3k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 47.3k, False: 236k]
  ------------------
   56|  47.3k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  47.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.3k|    }                                                           \
  |  |   40|  47.3k|    else {                                                      \
  |  |   41|  47.3k|        return vis(monostate_val);                              \
  |  |   42|  47.3k|    }
  ------------------
   57|  47.3k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 47.3k, False: 236k]
  ------------------
   58|  47.3k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  47.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.3k|    }                                                           \
  |  |   40|  47.3k|    else {                                                      \
  |  |   41|  47.3k|        return vis(monostate_val);                              \
  |  |   42|  47.3k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 283k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  47.3k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 47.3k, False: 236k]
  ------------------
   62|  47.3k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  47.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.3k|    }                                                           \
  |  |   40|  47.3k|    else {                                                      \
  |  |   41|  47.3k|        return vis(monostate_val);                              \
  |  |   42|  47.3k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 283k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  47.3k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 47.3k, False: 236k]
  ------------------
   66|  47.3k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  47.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  47.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  47.3k|    }                                                           \
  |  |   40|  47.3k|    else {                                                      \
  |  |   41|  47.3k|        return vis(monostate_val);                              \
  |  |   42|  47.3k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 283k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 283k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 283k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 283k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 283k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 283k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 283k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 283k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 283k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 283k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 283k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 283k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 283k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 283k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 283k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 283k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 283k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   283k|            SCN_CLANG_POP
  114|   283k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   283k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.05M|{
   36|  1.05M|#define SCN_VISIT(Type)                                         \
   37|  1.05M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.05M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.05M|    }                                                           \
   40|  1.05M|    else {                                                      \
   41|  1.05M|        return vis(monostate_val);                              \
   42|  1.05M|    }
   43|       |
   44|  1.05M|    monostate monostate_val{};
   45|       |
   46|  1.05M|    switch (arg.m_type) {
   47|   153k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 153k, False: 901k]
  ------------------
   48|   153k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   153k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   153k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   153k|    }                                                           \
  |  |   40|   153k|    else {                                                      \
  |  |   41|   153k|        return vis(monostate_val);                              \
  |  |   42|   153k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.05M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   203k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 203k, False: 850k]
  ------------------
   52|   203k|            SCN_VISIT(int);
  ------------------
  |  |   37|   203k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   203k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   203k|    }                                                           \
  |  |   40|   203k|    else {                                                      \
  |  |   41|   203k|        return vis(monostate_val);                              \
  |  |   42|   203k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.05M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   206k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 206k, False: 848k]
  ------------------
   56|   206k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   206k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   206k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   206k|    }                                                           \
  |  |   40|   206k|    else {                                                      \
  |  |   41|   206k|        return vis(monostate_val);                              \
  |  |   42|   206k|    }
  ------------------
   57|   146k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 146k, False: 907k]
  ------------------
   58|   146k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   146k|    }                                                           \
  |  |   40|   146k|    else {                                                      \
  |  |   41|   146k|        return vis(monostate_val);                              \
  |  |   42|   146k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.05M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   171k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 171k, False: 882k]
  ------------------
   62|   171k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   171k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   171k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   171k|    }                                                           \
  |  |   40|   171k|    else {                                                      \
  |  |   41|   171k|        return vis(monostate_val);                              \
  |  |   42|   171k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.05M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   172k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 172k, False: 881k]
  ------------------
   66|   172k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   172k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   172k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   172k|    }                                                           \
  |  |   40|   172k|    else {                                                      \
  |  |   41|   172k|        return vis(monostate_val);                              \
  |  |   42|   172k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.05M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.05M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.05M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.05M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.05M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.05M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.05M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.05M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.05M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.05M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.05M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.05M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.05M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.05M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.05M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.05M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.05M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.05M|            SCN_CLANG_POP
  114|  1.05M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.05M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  2.77M|{
   36|  2.77M|#define SCN_VISIT(Type)                                         \
   37|  2.77M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  2.77M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  2.77M|    }                                                           \
   40|  2.77M|    else {                                                      \
   41|  2.77M|        return vis(monostate_val);                              \
   42|  2.77M|    }
   43|       |
   44|  2.77M|    monostate monostate_val{};
   45|       |
   46|  2.77M|    switch (arg.m_type) {
   47|   369k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 369k, False: 2.40M]
  ------------------
   48|   369k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   369k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   369k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   369k|    }                                                           \
  |  |   40|   369k|    else {                                                      \
  |  |   41|   369k|        return vis(monostate_val);                              \
  |  |   42|   369k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 2.77M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   546k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 546k, False: 2.22M]
  ------------------
   52|   546k|            SCN_VISIT(int);
  ------------------
  |  |   37|   546k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   546k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   546k|    }                                                           \
  |  |   40|   546k|    else {                                                      \
  |  |   41|   546k|        return vis(monostate_val);                              \
  |  |   42|   546k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 2.77M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   555k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 555k, False: 2.22M]
  ------------------
   56|   555k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   555k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   555k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   555k|    }                                                           \
  |  |   40|   555k|    else {                                                      \
  |  |   41|   555k|        return vis(monostate_val);                              \
  |  |   42|   555k|    }
  ------------------
   57|   374k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 374k, False: 2.40M]
  ------------------
   58|   374k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   374k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   374k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   374k|    }                                                           \
  |  |   40|   374k|    else {                                                      \
  |  |   41|   374k|        return vis(monostate_val);                              \
  |  |   42|   374k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 2.77M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   463k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 463k, False: 2.31M]
  ------------------
   62|   463k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   463k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   463k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   463k|    }                                                           \
  |  |   40|   463k|    else {                                                      \
  |  |   41|   463k|        return vis(monostate_val);                              \
  |  |   42|   463k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 2.77M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   466k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 466k, False: 2.30M]
  ------------------
   66|   466k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   466k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   466k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   466k|    }                                                           \
  |  |   40|   466k|    else {                                                      \
  |  |   41|   466k|        return vis(monostate_val);                              \
  |  |   42|   466k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 2.77M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 2.77M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 2.77M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 2.77M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 2.77M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 2.77M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 2.77M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 2.77M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 2.77M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 2.77M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 2.77M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 2.77M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 2.77M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 2.77M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 2.77M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 2.77M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 2.77M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  2.77M|            SCN_CLANG_POP
  114|  2.77M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  2.77M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   149k|{
   36|   149k|#define SCN_VISIT(Type)                                         \
   37|   149k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   149k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   149k|    }                                                           \
   40|   149k|    else {                                                      \
   41|   149k|        return vis(monostate_val);                              \
   42|   149k|    }
   43|       |
   44|   149k|    monostate monostate_val{};
   45|       |
   46|   149k|    switch (arg.m_type) {
   47|  24.9k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 24.9k, False: 124k]
  ------------------
   48|  24.9k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  24.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.9k|    }                                                           \
  |  |   40|  24.9k|    else {                                                      \
  |  |   41|  24.9k|        return vis(monostate_val);                              \
  |  |   42|  24.9k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 149k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  24.9k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 24.9k, False: 124k]
  ------------------
   52|  24.9k|            SCN_VISIT(int);
  ------------------
  |  |   37|  24.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.9k|    }                                                           \
  |  |   40|  24.9k|    else {                                                      \
  |  |   41|  24.9k|        return vis(monostate_val);                              \
  |  |   42|  24.9k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 149k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  24.9k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 24.9k, False: 124k]
  ------------------
   56|  24.9k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  24.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.9k|    }                                                           \
  |  |   40|  24.9k|    else {                                                      \
  |  |   41|  24.9k|        return vis(monostate_val);                              \
  |  |   42|  24.9k|    }
  ------------------
   57|  24.9k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 24.9k, False: 124k]
  ------------------
   58|  24.9k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  24.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.9k|    }                                                           \
  |  |   40|  24.9k|    else {                                                      \
  |  |   41|  24.9k|        return vis(monostate_val);                              \
  |  |   42|  24.9k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 149k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  24.9k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 24.9k, False: 124k]
  ------------------
   62|  24.9k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  24.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.9k|    }                                                           \
  |  |   40|  24.9k|    else {                                                      \
  |  |   41|  24.9k|        return vis(monostate_val);                              \
  |  |   42|  24.9k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 149k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  24.9k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 24.9k, False: 124k]
  ------------------
   66|  24.9k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  24.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.9k|    }                                                           \
  |  |   40|  24.9k|    else {                                                      \
  |  |   41|  24.9k|        return vis(monostate_val);                              \
  |  |   42|  24.9k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 149k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 149k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 149k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 149k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 149k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 149k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 149k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 149k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 149k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 149k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 149k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 149k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 149k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 149k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 149k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 149k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 149k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   149k|            SCN_CLANG_POP
  114|   149k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   149k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   490k|{
   36|   490k|#define SCN_VISIT(Type)                                         \
   37|   490k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   490k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   490k|    }                                                           \
   40|   490k|    else {                                                      \
   41|   490k|        return vis(monostate_val);                              \
   42|   490k|    }
   43|       |
   44|   490k|    monostate monostate_val{};
   45|       |
   46|   490k|    switch (arg.m_type) {
   47|  74.7k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 74.7k, False: 415k]
  ------------------
   48|  74.7k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  74.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  74.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  74.7k|    }                                                           \
  |  |   40|  74.7k|    else {                                                      \
  |  |   41|  74.7k|        return vis(monostate_val);                              \
  |  |   42|  74.7k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 490k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  83.0k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 83.0k, False: 407k]
  ------------------
   52|  83.0k|            SCN_VISIT(int);
  ------------------
  |  |   37|  83.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  83.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  83.0k|    }                                                           \
  |  |   40|  83.0k|    else {                                                      \
  |  |   41|  83.0k|        return vis(monostate_val);                              \
  |  |   42|  83.0k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 490k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  83.0k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 83.0k, False: 407k]
  ------------------
   56|  83.0k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  83.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  83.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  83.0k|    }                                                           \
  |  |   40|  83.0k|    else {                                                      \
  |  |   41|  83.0k|        return vis(monostate_val);                              \
  |  |   42|  83.0k|    }
  ------------------
   57|  83.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 83.0k, False: 407k]
  ------------------
   58|  83.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  83.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  83.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  83.0k|    }                                                           \
  |  |   40|  83.0k|    else {                                                      \
  |  |   41|  83.0k|        return vis(monostate_val);                              \
  |  |   42|  83.0k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 490k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  83.0k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 83.0k, False: 407k]
  ------------------
   62|  83.0k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  83.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  83.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  83.0k|    }                                                           \
  |  |   40|  83.0k|    else {                                                      \
  |  |   41|  83.0k|        return vis(monostate_val);                              \
  |  |   42|  83.0k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 490k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  83.0k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 83.0k, False: 407k]
  ------------------
   66|  83.0k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  83.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  83.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  83.0k|    }                                                           \
  |  |   40|  83.0k|    else {                                                      \
  |  |   41|  83.0k|        return vis(monostate_val);                              \
  |  |   42|  83.0k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 490k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 490k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 490k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 490k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 490k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 490k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 490k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 490k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 490k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 490k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 490k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 490k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 490k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 490k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 490k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 490k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 490k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   490k|            SCN_CLANG_POP
  114|   490k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   490k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  2.04M|{
  174|  2.04M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  2.04M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  2.04M|{
  111|  2.04M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  2.04M|    auto result = vscan_impl(buffer, format, args);
  114|  2.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 141k, False: 1.90M]
  |  |  ------------------
  ------------------
  115|   141k|        return unexpected(result.error());
  116|   141k|    }
  117|  1.90M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  2.04M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  2.04M|{
  192|  2.04M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  2.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  2.04M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  2.04M|{
  127|  2.04M|#if !SCN_DISABLE_LOCALE
  128|  2.04M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  2.04M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  2.04M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  2.04M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  2.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  2.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 141k, False: 1.90M]
  |  |  ------------------
  ------------------
  135|   141k|        return unexpected(result.error());
  136|   141k|    }
  137|  1.90M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  2.04M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   409k|{
  205|   409k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   409k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   409k|{
  151|   409k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   409k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   409k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.1k, False: 395k]
  |  |  ------------------
  ------------------
  155|  14.1k|        return unexpected(result.error());
  156|  14.1k|    }
  157|   395k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   395k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   409k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   212k|{
  174|   212k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   212k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   212k|{
  111|   212k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   212k|    auto result = vscan_impl(buffer, format, args);
  114|   212k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 141k, False: 70.9k]
  |  |  ------------------
  ------------------
  115|   141k|        return unexpected(result.error());
  116|   141k|    }
  117|  70.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  70.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   212k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   212k|{
  192|   212k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   212k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   212k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   212k|{
  127|   212k|#if !SCN_DISABLE_LOCALE
  128|   212k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   212k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   212k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   212k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   212k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 141k, False: 70.9k]
  |  |  ------------------
  ------------------
  135|   141k|        return unexpected(result.error());
  136|   141k|    }
  137|  70.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  70.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   212k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  28.3k|{
  205|  28.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  28.3k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  28.3k|{
  151|  28.3k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  28.3k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  28.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  28.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.1k, False: 14.1k]
  |  |  ------------------
  ------------------
  155|  14.1k|        return unexpected(result.error());
  156|  14.1k|    }
  157|  14.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  28.3k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  1.81M|{
  111|  1.81M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  1.81M|    auto result = vscan_impl(buffer, format, args);
  114|  1.81M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 249k, False: 1.56M]
  |  |  ------------------
  ------------------
  115|   249k|        return unexpected(result.error());
  116|   249k|    }
  117|  1.56M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  1.81M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  1.81M|{
  127|  1.81M|#if !SCN_DISABLE_LOCALE
  128|  1.81M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  1.81M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  1.81M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  1.81M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  1.81M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 249k, False: 1.56M]
  |  |  ------------------
  ------------------
  135|   249k|        return unexpected(result.error());
  136|   249k|    }
  137|  1.56M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  1.81M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   351k|{
  151|   351k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   351k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   351k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.9k, False: 326k]
  |  |  ------------------
  ------------------
  155|  24.9k|        return unexpected(result.error());
  156|  24.9k|    }
  157|   326k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   351k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   369k|{
  111|   369k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   369k|    auto result = vscan_impl(buffer, format, args);
  114|   369k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 249k, False: 120k]
  |  |  ------------------
  ------------------
  115|   249k|        return unexpected(result.error());
  116|   249k|    }
  117|   120k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   369k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   369k|{
  127|   369k|#if !SCN_DISABLE_LOCALE
  128|   369k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   369k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   369k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   369k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   369k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 249k, False: 120k]
  |  |  ------------------
  ------------------
  135|   249k|        return unexpected(result.error());
  136|   249k|    }
  137|   120k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   369k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  49.8k|{
  151|  49.8k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  49.8k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  49.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  49.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.9k, False: 24.9k]
  |  |  ------------------
  ------------------
  155|  24.9k|        return unexpected(result.error());
  156|  24.9k|    }
  157|  24.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  49.8k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   248k|{
   90|   248k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   248k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  1.81M|{
   45|  1.81M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  1.81M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   248k|{
  125|   248k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   248k|                                                         format, {});
  127|   248k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  1.81M|{
   61|  1.81M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  1.81M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  51.0k|{
  159|  51.0k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  51.0k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   351k|{
   73|   351k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   351k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   248k|{
   90|   248k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   248k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   248k|{
  125|   248k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   248k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   248k|                                                         format, {});
  127|   248k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  48.9k|{
  159|  48.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  48.9k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   353k|{
   90|   353k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   353k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   353k|{
  125|   353k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   353k|                                                         format, {});
  127|   353k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  67.9k|{
  159|  67.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  67.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  67.9k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   301k|{
   90|   301k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   301k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   301k|{
  125|   301k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   301k|                                                         format, {});
  127|   301k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  57.2k|{
  159|  57.2k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  57.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  57.2k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   358k|{
   90|   358k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   358k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   358k|{
  125|   358k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   358k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   358k|                                                         format, {});
  127|   358k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  68.8k|{
  159|  68.8k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  68.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  68.8k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   303k|{
   90|   303k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   303k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   303k|{
  125|   303k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   303k|                                                         format, {});
  127|   303k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  57.5k|{
  159|  57.5k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  57.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  57.5k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  58.1k|{
   90|  58.1k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  58.1k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   369k|{
   45|   369k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   369k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  58.1k|{
  125|  58.1k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  58.1k|                                                         format, {});
  127|  58.1k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   369k|{
   61|   369k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   369k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.30k|{
  159|  8.30k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.30k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  49.8k|{
   73|  49.8k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  49.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  49.8k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  62.3k|{
   90|  62.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  62.3k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  62.3k|{
  125|  62.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  62.3k|                                                         format, {});
  127|  62.3k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.30k|{
  159|  8.30k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.30k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  62.3k|{
   90|  62.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  62.3k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  62.3k|{
  125|  62.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  62.3k|                                                         format, {});
  127|  62.3k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.30k|{
  159|  8.30k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.30k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  62.3k|{
   90|  62.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  62.3k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  62.3k|{
  125|  62.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  62.3k|                                                         format, {});
  127|  62.3k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.30k|{
  159|  8.30k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.30k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  62.3k|{
   90|  62.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  62.3k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  62.3k|{
  125|  62.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  62.3k|                                                         format, {});
  127|  62.3k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.30k|{
  159|  8.30k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.30k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  62.3k|{
   90|  62.3k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  62.3k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  62.3k|{
  125|  62.3k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  62.3k|                                                         format, {});
  127|  62.3k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.30k|{
  159|  8.30k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.30k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  4.90M|            {
 2693|  4.90M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.90M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  4.90M|            {
 2672|  4.90M|                return decay_copy(t.begin());
 2673|  4.90M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   144M|    {
 2606|   144M|        return std::forward<T>(t);
 2607|   144M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  8.88M|            {
 3178|  8.88M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  8.88M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  8.88M|            {
 3158|  8.88M|                return t.data();
 3159|  8.88M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  8.88M|    {
 6095|  8.88M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 22.4k, False: 8.86M]
  ------------------
 6096|  8.88M|                   ? nullptr
 6097|  8.88M|                   : std::addressof(*ranges::begin(derived()));
 6098|  8.88M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  8.88M|            {
 3127|  8.88M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  8.88M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  8.88M|            {
 3098|  8.88M|                return bool((std::forward<T>(t).empty()));
 3099|  8.88M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  21.1M|        {
 6454|  21.1M|            return data_.begin_ == data_.end_;
 6455|  21.1M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  17.7M|    {
 6049|  17.7M|        return static_cast<const D&>(*this);
 6050|  17.7M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  36.5M|            {
 2693|  36.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  36.5M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  36.5M|            {
 2672|  36.5M|                return decay_copy(t.begin());
 2673|  36.5M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  84.1M|        {
 6444|  84.1M|            return data_.begin_;
 6445|  84.1M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  8.88M|            {
 3038|  8.88M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  8.88M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  8.88M|            {
 3000|  8.88M|                return decay_copy(std::forward<T>(t).size());
 3001|  8.88M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  35.7M|    {
 2606|  35.7M|        return std::forward<T>(t);
 2607|  35.7M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  21.1M|        {
 6462|  21.1M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  21.1M|                return data_.size_;
 6464|  21.1M|            }
 6465|  21.1M|            else {
 6466|  21.1M|                return data_.end_ - data_.begin_;
 6467|  21.1M|            }
 6468|  21.1M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  15.3M|            {
 3788|  15.3M|                ranges::advance(x, n);
 3789|  15.3M|                return x;
 3790|  15.3M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  15.3M|            {
 3678|  15.3M|                fn::impl(i, n);
 3679|  15.3M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  15.3M|            {
 3562|  15.3M|                r += n;
 3563|  15.3M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  44.3M|            {
 2693|  44.3M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  44.3M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  44.3M|            {
 2672|  44.3M|                return decay_copy(t.begin());
 2673|  44.3M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  21.5M|            {
 2759|  21.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  21.5M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  21.5M|            {
 2739|  21.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  21.5M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  55.6M|        {
 6449|  55.6M|            return data_.end_;
 6450|  55.6M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  9.10M|            {
 2759|  9.10M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  9.10M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  9.10M|            {
 2739|  9.10M|                return decay_copy(std::forward<T>(t).end());
 2740|  9.10M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  35.8M|        {
 6375|  35.8M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  35.8M|        {
 6294|  35.8M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   297k|            {
 2693|   297k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   297k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   297k|            {
 2672|   297k|                return decay_copy(t.begin());
 2673|   297k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  2.41M|    {
 2606|  2.41M|        return std::forward<T>(t);
 2607|  2.41M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   610k|            {
 2693|   610k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   610k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   610k|            {
 2672|   610k|                return decay_copy(t.begin());
 2673|   610k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   766k|        {
 6444|   766k|            return data_.begin_;
 6445|   766k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   894k|            {
 2759|   894k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   894k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   894k|            {
 2739|   894k|                return decay_copy(std::forward<T>(t).end());
 2740|   894k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   894k|        {
 6449|   894k|            return data_.end_;
 6450|   894k|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   156k|            {
 3788|   156k|                ranges::advance(x, n);
 3789|   156k|                return x;
 3790|   156k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   156k|            {
 3678|   156k|                fn::impl(i, n);
 3679|   156k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   156k|            {
 3562|   156k|                r += n;
 3563|   156k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   454k|            {
 2759|   454k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   454k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   454k|            {
 2739|   454k|                return decay_copy(std::forward<T>(t).end());
 2740|   454k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   610k|        {
 6375|   610k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   610k|        {
 6294|   610k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   156k|            {
 2693|   156k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   156k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   156k|            {
 2672|   156k|                return decay_copy(t.begin());
 2673|   156k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  1.16M|            {
 2693|  1.16M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.16M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  1.16M|            {
 2672|  1.16M|                return decay_copy(t.begin());
 2673|  1.16M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   189M|    {
 2606|   189M|        return std::forward<T>(t);
 2607|   189M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  3.97M|            {
 3178|  3.97M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.97M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.97M|            {
 3158|  3.97M|                return t.data();
 3159|  3.97M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  3.97M|    {
 6095|  3.97M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 23.4k, False: 3.95M]
  ------------------
 6096|  3.97M|                   ? nullptr
 6097|  3.97M|                   : std::addressof(*ranges::begin(derived()));
 6098|  3.97M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  3.97M|            {
 3127|  3.97M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  3.97M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  3.97M|            {
 3098|  3.97M|                return bool((std::forward<T>(t).empty()));
 3099|  3.97M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  6.48M|        {
 6454|  6.48M|            return data_.begin_ == data_.end_;
 6455|  6.48M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  7.93M|    {
 6049|  7.93M|        return static_cast<const D&>(*this);
 6050|  7.93M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  31.5M|            {
 2693|  31.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  31.5M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  31.5M|            {
 2672|  31.5M|                return decay_copy(t.begin());
 2673|  31.5M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|  80.5M|        {
 6444|  80.5M|            return data_.begin_;
 6445|  80.5M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  3.97M|            {
 3038|  3.97M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  3.97M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  3.97M|            {
 3000|  3.97M|                return decay_copy(std::forward<T>(t).size());
 3001|  3.97M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  14.6M|        {
 6462|  14.6M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  14.6M|                return data_.size_;
 6464|  14.6M|            }
 6465|  14.6M|            else {
 6466|  14.6M|                return data_.end_ - data_.begin_;
 6467|  14.6M|            }
 6468|  14.6M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  17.0M|            {
 3788|  17.0M|                ranges::advance(x, n);
 3789|  17.0M|                return x;
 3790|  17.0M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  17.0M|            {
 3678|  17.0M|                fn::impl(i, n);
 3679|  17.0M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  17.0M|            {
 3562|  17.0M|                r += n;
 3563|  17.0M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  46.1M|            {
 2693|  46.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  46.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  46.1M|            {
 2672|  46.1M|                return decay_copy(t.begin());
 2673|  46.1M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  18.5M|            {
 2759|  18.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  18.5M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  18.5M|            {
 2739|  18.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  18.5M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   109M|        {
 6449|   109M|            return data_.end_;
 6450|   109M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  5.90M|            {
 2759|  5.90M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  5.90M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  5.90M|            {
 2739|  5.90M|                return decay_copy(std::forward<T>(t).end());
 2740|  5.90M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  31.1M|        {
 6375|  31.1M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  31.1M|        {
 6294|  31.1M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   523k|            {
 2693|   523k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   523k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   523k|            {
 2672|   523k|                return decay_copy(t.begin());
 2673|   523k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  4.45M|    {
 2606|  4.45M|        return std::forward<T>(t);
 2607|  4.45M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  1.05M|            {
 2693|  1.05M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.05M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  1.05M|            {
 2672|  1.05M|                return decay_copy(t.begin());
 2673|  1.05M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|  1.32M|        {
 6444|  1.32M|            return data_.begin_;
 6445|  1.32M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.82M|            {
 2759|  1.82M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.82M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.82M|            {
 2739|  1.82M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.82M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.82M|        {
 6449|  1.82M|            return data_.end_;
 6450|  1.82M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|   265k|            {
 3788|   265k|                ranges::advance(x, n);
 3789|   265k|                return x;
 3790|   265k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|   265k|            {
 3678|   265k|                fn::impl(i, n);
 3679|   265k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|   265k|            {
 3562|   265k|                r += n;
 3563|   265k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   789k|            {
 2759|   789k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   789k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   789k|            {
 2739|   789k|                return decay_copy(std::forward<T>(t).end());
 2740|   789k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|  1.05M|        {
 6375|  1.05M|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|  1.05M|        {
 6294|  1.05M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|   265k|            {
 2693|   265k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   265k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|   265k|            {
 2672|   265k|                return decay_copy(t.begin());
 2673|   265k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  9.33M|        {
 6444|  9.33M|            return data_.begin_;
 6445|  9.33M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  16.8M|        {
 6444|  16.8M|            return data_.begin_;
 6445|  16.8M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  24.4M|    {
 6044|  24.4M|        return static_cast<D&>(*this);
 6045|  24.4M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  12.2M|            {
 3098|  12.2M|                return bool((std::forward<T>(t).empty()));
 3099|  12.2M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  12.2M|            {
 3127|  12.2M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  12.2M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  12.2M|    {
 6085|  12.2M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 12.2M]
  ------------------
 6086|  12.2M|                   ? nullptr
 6087|  12.2M|                   : std::addressof(*ranges::begin(derived()));
 6088|  12.2M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  27.8M|            {
 2739|  27.8M|                return decay_copy(std::forward<T>(t).end());
 2740|  27.8M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  27.8M|            {
 2759|  27.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  27.8M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  5.01M|    {
 6044|  5.01M|        return static_cast<D&>(*this);
 6045|  5.01M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  2.50M|            {
 3098|  2.50M|                return bool((std::forward<T>(t).empty()));
 3099|  2.50M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  2.50M|            {
 3127|  2.50M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  2.50M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  2.50M|    {
 6085|  2.50M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 2.50M]
  ------------------
 6086|  2.50M|                   ? nullptr
 6087|  2.50M|                   : std::addressof(*ranges::begin(derived()));
 6088|  2.50M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  85.9M|            {
 2739|  85.9M|                return decay_copy(std::forward<T>(t).end());
 2740|  85.9M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  85.9M|            {
 2759|  85.9M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  85.9M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  7.39M|            {
 3780|  7.39M|                ++x;
 3781|  7.39M|                return x;
 3782|  7.39M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  12.2M|            {
 3038|  12.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  12.2M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  12.2M|            {
 3000|  12.2M|                return decay_copy(std::forward<T>(t).size());
 3001|  12.2M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  12.2M|            {
 3178|  12.2M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  12.2M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  12.2M|            {
 3158|  12.2M|                return t.data();
 3159|  12.2M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   928k|            {
 3828|   928k|                --x;
 3829|   928k|                return x;
 3830|   928k|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|  1.07M|            {
 3077|  1.07M|                return fn::impl(std::forward<T>(t));
 3078|  1.07M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|  1.07M|            {
 3067|  1.07M|                return static_cast<ssize_return_t<T>>(
 3068|  1.07M|                    ranges::size(std::forward<T>(t)));
 3069|  1.07M|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|  1.07M|            {
 3038|  1.07M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  1.07M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  1.07M|            {
 3000|  1.07M|                return decay_copy(std::forward<T>(t).size());
 3001|  1.07M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  11.1M|    {
 2606|  11.1M|        return std::forward<T>(t);
 2607|  11.1M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  10.0M|            {
 3077|  10.0M|                return fn::impl(std::forward<T>(t));
 3078|  10.0M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  10.0M|            {
 3067|  10.0M|                return static_cast<ssize_return_t<T>>(
 3068|  10.0M|                    ranges::size(std::forward<T>(t)));
 3069|  10.0M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  10.0M|            {
 3038|  10.0M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  10.0M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  10.0M|            {
 3000|  10.0M|                return decay_copy(std::forward<T>(t).size());
 3001|  10.0M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  9.34M|            {
 1300|  9.34M|                return fn::impl(std::forward<F>(f),
 1301|  9.34M|                                std::forward<Args>(args)...);
 1302|  9.34M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  9.34M|            {
 1289|  9.34M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  9.34M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  9.34M|    {
 1142|  9.34M|        return std::forward<T>(t);
 1143|  9.34M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  15.9M|            {
 3756|  15.9M|                return fn::impl(std::move(first), std::move(last));
 3757|  15.9M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  15.9M|            {
 3716|  15.9M|                return s - i;
 3717|  15.9M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  2.21M|        {
 6375|  2.21M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  2.21M|        {
 6294|  2.21M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  4.56M|            {
 2693|  4.56M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.56M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  4.56M|            {
 2672|  4.56M|                return decay_copy(t.begin());
 2673|  4.56M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  8.96M|    {
 2606|  8.96M|        return std::forward<T>(t);
 2607|  8.96M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.50M|            {
 2759|  1.50M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.50M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.50M|            {
 2739|  1.50M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.50M|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  9.83M|    {
 2606|  9.83M|        return std::forward<T>(t);
 2607|  9.83M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  3.57M|        {
 6449|  3.57M|            return data_.end_;
 6450|  3.57M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   383k|        {
 6444|   383k|            return data_.begin_;
 6445|   383k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   383k|        {
 6449|   383k|            return data_.end_;
 6450|   383k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   127k|        {
 6375|   127k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   127k|        {
 6294|   127k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   595k|            {
 3780|   595k|                ++x;
 3781|   595k|                return x;
 3782|   595k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   312k|        {
 6793|   312k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   312k|                                    proj);
 6795|   312k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   312k|        {
 6761|   439k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 439k, False: 54]
  ------------------
 6762|   439k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 312k, False: 127k]
  ------------------
 6763|   312k|                    return first;
 6764|   312k|                }
 6765|   127k|                ++first;
 6766|   127k|            }
 6767|     54|            return first;
 6768|   312k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   439k|            {
 1300|   439k|                return fn::impl(std::forward<F>(f),
 1301|   439k|                                std::forward<Args>(args)...);
 1302|   439k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   439k|            {
 1289|   439k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   439k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   439k|            {
 1300|   439k|                return fn::impl(std::forward<F>(f),
 1301|   439k|                                std::forward<Args>(args)...);
 1302|   439k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   439k|            {
 1289|   439k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   439k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   439k|    {
 1142|   439k|        return std::forward<T>(t);
 1143|   439k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  2.07M|            {
 2759|  2.07M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.07M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  2.07M|            {
 2739|  2.07M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.07M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  4.39M|            {
 2693|  4.39M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  4.39M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  4.39M|            {
 2672|  4.39M|                return decay_copy(t.begin());
 2673|  4.39M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  2.50M|            {
 3178|  2.50M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  2.50M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  2.50M|            {
 3158|  2.50M|                return t.data();
 3159|  2.50M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  10.6M|            {
 3038|  10.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  10.6M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  10.6M|            {
 3000|  10.6M|                return decay_copy(std::forward<T>(t).size());
 3001|  10.6M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  6.38M|            {
 3780|  6.38M|                ++x;
 3781|  6.38M|                return x;
 3782|  6.38M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  8.11M|            {
 3077|  8.11M|                return fn::impl(std::forward<T>(t));
 3078|  8.11M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  8.11M|            {
 3067|  8.11M|                return static_cast<ssize_return_t<T>>(
 3068|  8.11M|                    ranges::size(std::forward<T>(t)));
 3069|  8.11M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|   780k|            {
 3828|   780k|                --x;
 3829|   780k|                return x;
 3830|   780k|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  10.0M|            {
 3756|  10.0M|                return fn::impl(std::move(first), std::move(last));
 3757|  10.0M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  10.0M|            {
 3716|  10.0M|                return s - i;
 3717|  10.0M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  3.83M|        {
 6375|  3.83M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  3.83M|        {
 6294|  3.83M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  8.58M|            {
 2693|  8.58M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  8.58M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  8.58M|            {
 2672|  8.58M|                return decay_copy(t.begin());
 2673|  8.58M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  16.2M|    {
 2606|  16.2M|        return std::forward<T>(t);
 2607|  16.2M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  2.65M|            {
 2759|  2.65M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  2.65M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  2.65M|            {
 2739|  2.65M|                return decay_copy(std::forward<T>(t).end());
 2740|  2.65M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  6.25M|        {
 6449|  6.25M|            return data_.end_;
 6450|  6.25M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   672k|        {
 6444|   672k|            return data_.begin_;
 6445|   672k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   672k|        {
 6449|   672k|            return data_.end_;
 6450|   672k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|   224k|        {
 6375|   224k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|   224k|        {
 6294|   224k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|  1.03M|            {
 3780|  1.03M|                ++x;
 3781|  1.03M|                return x;
 3782|  1.03M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   539k|        {
 6793|   539k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   539k|                                    proj);
 6795|   539k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   539k|        {
 6761|   988k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 988k, False: 108]
  ------------------
 6762|   988k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 539k, False: 448k]
  ------------------
 6763|   539k|                    return first;
 6764|   539k|                }
 6765|   448k|                ++first;
 6766|   448k|            }
 6767|    108|            return first;
 6768|   539k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   988k|            {
 1300|   988k|                return fn::impl(std::forward<F>(f),
 1301|   988k|                                std::forward<Args>(args)...);
 1302|   988k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   988k|            {
 1289|   988k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   988k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   988k|            {
 1300|   988k|                return fn::impl(std::forward<F>(f),
 1301|   988k|                                std::forward<Args>(args)...);
 1302|   988k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   988k|            {
 1289|   988k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   988k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   988k|    {
 1142|   988k|        return std::forward<T>(t);
 1143|   988k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  3.59M|            {
 2759|  3.59M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.59M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  3.59M|            {
 2739|  3.59M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.59M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  7.64M|            {
 2693|  7.64M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  7.64M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  7.64M|            {
 2672|  7.64M|                return decay_copy(t.begin());
 2673|  7.64M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  4.60M|        {
 6793|  4.60M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  4.60M|                                    proj);
 6795|  4.60M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  4.60M|        {
 6761|  9.41M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 9.34M, False: 73.7k]
  ------------------
 6762|  9.34M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 4.52M, False: 4.81M]
  ------------------
 6763|  4.52M|                    return first;
 6764|  4.52M|                }
 6765|  4.81M|                ++first;
 6766|  4.81M|            }
 6767|  73.7k|            return first;
 6768|  4.60M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  9.34M|            {
 1300|  9.34M|                return fn::impl(std::forward<F>(f),
 1301|  9.34M|                                std::forward<Args>(args)...);
 1302|  9.34M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  9.34M|            {
 1289|  9.34M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  9.34M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   359k|{
   50|   359k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   359k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|   128k|{
   50|   128k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   128k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  58.1k|{
   50|  58.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  58.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  58.1k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   312k|    {
   44|   312k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   539k|    {
   44|   539k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|  66.5k|{
   50|  66.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  66.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  66.5k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  10.9M|    {
 1191|  10.9M|        return has_value();
 1192|  10.9M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  21.1M|    {
  189|  21.1M|        return m_has_value;
  190|  21.1M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  1.64M|    {
 1197|  1.64M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.64M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.64M|    {
  172|  1.64M|        return m_unexpected;
  173|  1.64M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  12.3M|    {
   72|  12.3M|        return m_unexpected;
   73|  12.3M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  6.11M|    {
   58|  6.11M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  6.11M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  6.11M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   297k|    {
 1078|   297k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   297k|    {
  151|   297k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  7.27M|    {
   67|  7.27M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  7.27M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  7.27M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.49M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  8.50M|    {
 1251|  8.50M|        return value();
 1252|  8.50M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  8.50M|    {
 1221|  8.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  8.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  8.50M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  8.50M|    {
  155|  8.50M|        return m_value;
  156|  8.50M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  4.20M|    {
 1034|  4.20M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  4.20M|    {
  142|  4.20M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  4.49M|    {
 1191|  4.49M|        return has_value();
 1192|  4.49M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  8.99M|    {
  189|  8.99M|        return m_has_value;
  190|  8.99M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   297k|    {
 1197|   297k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   297k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   297k|    {
  172|   297k|        return m_unexpected;
  173|   297k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  49.6k|    {
 1078|  49.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  49.6k|    {
  151|  49.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   612k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  3.80M|    {
 1251|  3.80M|        return value();
 1252|  3.80M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  4.20M|    {
 1221|  4.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.20M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.20M|    {
  155|  4.20M|        return m_value;
  156|  4.20M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   562k|    {
 1034|   562k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   562k|    {
  142|   562k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   612k|    {
 1191|   612k|        return has_value();
 1192|   612k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.17M|    {
  189|  1.17M|        return m_has_value;
  190|  1.17M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   562k|    {
 1274|   562k|        return std::addressof(value());
 1275|   562k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   562k|    {
 1221|   562k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   562k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   562k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   562k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   562k|    {
  155|   562k|        return m_value;
  156|   562k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   395k|    {
 1263|   395k|        return std::move(value());
 1264|   395k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  49.6k|    {
 1078|  49.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  49.6k|    {
  151|  49.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   607k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   557k|    {
 1034|   557k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   557k|    {
  142|   557k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   607k|    {
 1191|   607k|        return has_value();
 1192|   607k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.16M|    {
  189|  1.16M|        return m_has_value;
  190|  1.16M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   557k|    {
 1274|   557k|        return std::addressof(value());
 1275|   557k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   557k|    {
 1221|   557k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   557k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   557k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   557k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   557k|    {
  155|   557k|        return m_value;
  156|   557k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  49.6k|    {
 1078|  49.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  49.6k|    {
  151|  49.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   882k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   833k|    {
 1034|   833k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   833k|    {
  142|   833k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   882k|    {
 1191|   882k|        return has_value();
 1192|   882k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.71M|    {
  189|  1.71M|        return m_has_value;
  190|  1.71M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   833k|    {
 1274|   833k|        return std::addressof(value());
 1275|   833k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   833k|    {
 1221|   833k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   833k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   833k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   833k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   833k|    {
  155|   833k|        return m_value;
  156|   833k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  49.6k|    {
 1078|  49.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  49.6k|    {
  151|  49.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   745k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   695k|    {
 1034|   695k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   695k|    {
  142|   695k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   745k|    {
 1191|   745k|        return has_value();
 1192|   745k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.44M|    {
  189|  1.44M|        return m_has_value;
  190|  1.44M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   695k|    {
 1274|   695k|        return std::addressof(value());
 1275|   695k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   695k|    {
 1221|   695k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   695k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   695k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   695k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   695k|    {
  155|   695k|        return m_value;
  156|   695k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  49.6k|    {
 1078|  49.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  49.6k|    {
  151|  49.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   899k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   849k|    {
 1034|   849k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   849k|    {
  142|   849k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   899k|    {
 1191|   899k|        return has_value();
 1192|   899k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.74M|    {
  189|  1.74M|        return m_has_value;
  190|  1.74M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   849k|    {
 1274|   849k|        return std::addressof(value());
 1275|   849k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   849k|    {
 1221|   849k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   849k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   849k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   849k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   849k|    {
  155|   849k|        return m_value;
  156|   849k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  49.6k|    {
 1078|  49.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  49.6k|    {
  151|  49.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   751k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   701k|    {
 1034|   701k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   701k|    {
  142|   701k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   751k|    {
 1191|   751k|        return has_value();
 1192|   751k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.45M|    {
  189|  1.45M|        return m_has_value;
  190|  1.45M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   701k|    {
 1274|   701k|        return std::addressof(value());
 1275|   701k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   701k|    {
 1221|   701k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   701k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   701k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   701k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   701k|    {
  155|   701k|        return m_value;
  156|   701k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   297k|    {
 1078|   297k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   297k|    {
  151|   297k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   454k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   156k|    {
 1034|   156k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   156k|    {
  142|   156k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   454k|    {
 1191|   454k|        return has_value();
 1192|   454k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   908k|    {
  189|   908k|        return m_has_value;
  190|   908k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   297k|    {
 1197|   297k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   297k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   297k|    {
  172|   297k|        return m_unexpected;
  173|   297k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.6k|    {
 1078|  49.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  49.6k|    {
  151|  49.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  75.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   141k|    {
 1251|   141k|        return value();
 1252|   141k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   156k|    {
 1221|   156k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   156k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   156k|    {
  155|   156k|        return m_value;
  156|   156k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  26.0k|    {
 1034|  26.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  26.0k|    {
  142|  26.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  75.6k|    {
 1191|  75.6k|        return has_value();
 1192|  75.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   101k|    {
  189|   101k|        return m_has_value;
  190|   101k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  26.0k|    {
 1274|  26.0k|        return std::addressof(value());
 1275|  26.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  26.0k|    {
 1221|  26.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  26.0k|    {
  155|  26.0k|        return m_value;
  156|  26.0k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  14.1k|    {
 1263|  14.1k|        return std::move(value());
 1264|  14.1k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.6k|    {
 1078|  49.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  49.6k|    {
  151|  49.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  75.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  26.0k|    {
 1034|  26.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  26.0k|    {
  142|  26.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  75.6k|    {
 1191|  75.6k|        return has_value();
 1192|  75.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   101k|    {
  189|   101k|        return m_has_value;
  190|   101k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  26.0k|    {
 1274|  26.0k|        return std::addressof(value());
 1275|  26.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  26.0k|    {
 1221|  26.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  26.0k|    {
  155|  26.0k|        return m_value;
  156|  26.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.6k|    {
 1078|  49.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  49.6k|    {
  151|  49.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  75.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  26.0k|    {
 1034|  26.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  26.0k|    {
  142|  26.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  75.6k|    {
 1191|  75.6k|        return has_value();
 1192|  75.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   101k|    {
  189|   101k|        return m_has_value;
  190|   101k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  26.0k|    {
 1274|  26.0k|        return std::addressof(value());
 1275|  26.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  26.0k|    {
 1221|  26.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  26.0k|    {
  155|  26.0k|        return m_value;
  156|  26.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.6k|    {
 1078|  49.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  49.6k|    {
  151|  49.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  75.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  26.0k|    {
 1034|  26.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  26.0k|    {
  142|  26.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  75.6k|    {
 1191|  75.6k|        return has_value();
 1192|  75.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   101k|    {
  189|   101k|        return m_has_value;
  190|   101k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  26.0k|    {
 1274|  26.0k|        return std::addressof(value());
 1275|  26.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  26.0k|    {
 1221|  26.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  26.0k|    {
  155|  26.0k|        return m_value;
  156|  26.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.6k|    {
 1078|  49.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  49.6k|    {
  151|  49.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  75.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  26.0k|    {
 1034|  26.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  26.0k|    {
  142|  26.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  75.6k|    {
 1191|  75.6k|        return has_value();
 1192|  75.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   101k|    {
  189|   101k|        return m_has_value;
  190|   101k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  26.0k|    {
 1274|  26.0k|        return std::addressof(value());
 1275|  26.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  26.0k|    {
 1221|  26.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  26.0k|    {
  155|  26.0k|        return m_value;
  156|  26.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.6k|    {
 1078|  49.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  49.6k|    {
  151|  49.6k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  75.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  26.0k|    {
 1034|  26.0k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  26.0k|    {
  142|  26.0k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  75.6k|    {
 1191|  75.6k|        return has_value();
 1192|  75.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   101k|    {
  189|   101k|        return m_has_value;
  190|   101k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  26.0k|    {
 1274|  26.0k|        return std::addressof(value());
 1275|  26.0k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  26.0k|    {
 1221|  26.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  26.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  26.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  26.0k|    {
  155|  26.0k|        return m_value;
  156|  26.0k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   523k|    {
 1078|   523k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   523k|    {
  151|   523k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.97M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  3.45M|    {
 1034|  3.45M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  3.45M|    {
  142|  3.45M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  3.97M|    {
 1191|  3.97M|        return has_value();
 1192|  3.97M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  7.95M|    {
  189|  7.95M|        return m_has_value;
  190|  7.95M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   523k|    {
 1197|   523k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   523k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   523k|    {
  172|   523k|        return m_unexpected;
  173|   523k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  87.2k|    {
 1078|  87.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  87.2k|    {
  151|  87.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   547k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  3.12M|    {
 1251|  3.12M|        return value();
 1252|  3.12M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  3.45M|    {
 1221|  3.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.45M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.45M|    {
  155|  3.45M|        return m_value;
  156|  3.45M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   460k|    {
 1034|   460k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   460k|    {
  142|   460k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   547k|    {
 1191|   547k|        return has_value();
 1192|   547k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.00M|    {
  189|  1.00M|        return m_has_value;
  190|  1.00M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   460k|    {
 1274|   460k|        return std::addressof(value());
 1275|   460k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   460k|    {
 1221|   460k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   460k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   460k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   460k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   460k|    {
  155|   460k|        return m_value;
  156|   460k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   326k|    {
 1263|   326k|        return std::move(value());
 1264|   326k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  87.2k|    {
 1078|  87.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  87.2k|    {
  151|  87.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   546k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   459k|    {
 1034|   459k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   459k|    {
  142|   459k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   546k|    {
 1191|   546k|        return has_value();
 1192|   546k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.00M|    {
  189|  1.00M|        return m_has_value;
  190|  1.00M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   459k|    {
 1274|   459k|        return std::addressof(value());
 1275|   459k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   459k|    {
 1221|   459k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   459k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   459k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   459k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   459k|    {
  155|   459k|        return m_value;
  156|   459k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  87.2k|    {
 1078|  87.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  87.2k|    {
  151|  87.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   775k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   688k|    {
 1034|   688k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   688k|    {
  142|   688k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   775k|    {
 1191|   775k|        return has_value();
 1192|   775k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.46M|    {
  189|  1.46M|        return m_has_value;
  190|  1.46M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|   688k|    {
 1274|   688k|        return std::addressof(value());
 1275|   688k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   688k|    {
 1221|   688k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   688k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   688k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   688k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   688k|    {
  155|   688k|        return m_value;
  156|   688k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  87.2k|    {
 1078|  87.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  87.2k|    {
  151|  87.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   659k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   572k|    {
 1034|   572k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   572k|    {
  142|   572k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   659k|    {
 1191|   659k|        return has_value();
 1192|   659k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.23M|    {
  189|  1.23M|        return m_has_value;
  190|  1.23M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   572k|    {
 1274|   572k|        return std::addressof(value());
 1275|   572k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   572k|    {
 1221|   572k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   572k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   572k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   572k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   572k|    {
  155|   572k|        return m_value;
  156|   572k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  87.2k|    {
 1078|  87.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  87.2k|    {
  151|  87.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   786k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   699k|    {
 1034|   699k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   699k|    {
  142|   699k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   786k|    {
 1191|   786k|        return has_value();
 1192|   786k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.48M|    {
  189|  1.48M|        return m_has_value;
  190|  1.48M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|   699k|    {
 1274|   699k|        return std::addressof(value());
 1275|   699k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   699k|    {
 1221|   699k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   699k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   699k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   699k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   699k|    {
  155|   699k|        return m_value;
  156|   699k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  87.2k|    {
 1078|  87.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  87.2k|    {
  151|  87.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   663k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   576k|    {
 1034|   576k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   576k|    {
  142|   576k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   663k|    {
 1191|   663k|        return has_value();
 1192|   663k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.24M|    {
  189|  1.24M|        return m_has_value;
  190|  1.24M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   576k|    {
 1274|   576k|        return std::addressof(value());
 1275|   576k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   576k|    {
 1221|   576k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   576k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   576k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   576k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   576k|    {
  155|   576k|        return m_value;
  156|   576k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   523k|    {
 1078|   523k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   523k|    {
  151|   523k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   789k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   265k|    {
 1034|   265k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|   265k|    {
  142|   265k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   789k|    {
 1191|   789k|        return has_value();
 1192|   789k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.57M|    {
  189|  1.57M|        return m_has_value;
  190|  1.57M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   523k|    {
 1197|   523k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   523k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   523k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   523k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   523k|    {
  172|   523k|        return m_unexpected;
  173|   523k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  87.2k|    {
 1078|  87.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  87.2k|    {
  151|  87.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   124k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|   240k|    {
 1251|   240k|        return value();
 1252|   240k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   265k|    {
 1221|   265k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   265k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   265k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   265k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|   265k|    {
  155|   265k|        return m_value;
  156|   265k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  37.3k|    {
 1034|  37.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  37.3k|    {
  142|  37.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   124k|    {
 1191|   124k|        return has_value();
 1192|   124k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   162k|    {
  189|   162k|        return m_has_value;
  190|   162k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  37.3k|    {
 1274|  37.3k|        return std::addressof(value());
 1275|  37.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  37.3k|    {
 1221|  37.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  37.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  37.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  37.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  37.3k|    {
  155|  37.3k|        return m_value;
  156|  37.3k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|  24.9k|    {
 1263|  24.9k|        return std::move(value());
 1264|  24.9k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  87.2k|    {
 1078|  87.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  87.2k|    {
  151|  87.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   132k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  45.6k|    {
 1034|  45.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  45.6k|    {
  142|  45.6k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   132k|    {
 1191|   132k|        return has_value();
 1192|   132k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   178k|    {
  189|   178k|        return m_has_value;
  190|   178k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  45.6k|    {
 1274|  45.6k|        return std::addressof(value());
 1275|  45.6k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  45.6k|    {
 1221|  45.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  45.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  45.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  45.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  45.6k|    {
  155|  45.6k|        return m_value;
  156|  45.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  87.2k|    {
 1078|  87.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  87.2k|    {
  151|  87.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   132k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  45.6k|    {
 1034|  45.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  45.6k|    {
  142|  45.6k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   132k|    {
 1191|   132k|        return has_value();
 1192|   132k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   178k|    {
  189|   178k|        return m_has_value;
  190|   178k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  45.6k|    {
 1274|  45.6k|        return std::addressof(value());
 1275|  45.6k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  45.6k|    {
 1221|  45.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  45.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  45.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  45.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  45.6k|    {
  155|  45.6k|        return m_value;
  156|  45.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  87.2k|    {
 1078|  87.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  87.2k|    {
  151|  87.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   132k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  45.6k|    {
 1034|  45.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  45.6k|    {
  142|  45.6k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   132k|    {
 1191|   132k|        return has_value();
 1192|   132k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   178k|    {
  189|   178k|        return m_has_value;
  190|   178k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  45.6k|    {
 1274|  45.6k|        return std::addressof(value());
 1275|  45.6k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  45.6k|    {
 1221|  45.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  45.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  45.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  45.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  45.6k|    {
  155|  45.6k|        return m_value;
  156|  45.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  87.2k|    {
 1078|  87.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  87.2k|    {
  151|  87.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   132k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  45.6k|    {
 1034|  45.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  45.6k|    {
  142|  45.6k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   132k|    {
 1191|   132k|        return has_value();
 1192|   132k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   178k|    {
  189|   178k|        return m_has_value;
  190|   178k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  45.6k|    {
 1274|  45.6k|        return std::addressof(value());
 1275|  45.6k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  45.6k|    {
 1221|  45.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  45.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  45.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  45.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  45.6k|    {
  155|  45.6k|        return m_value;
  156|  45.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  87.2k|    {
 1078|  87.2k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  87.2k|    {
  151|  87.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   132k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  45.6k|    {
 1034|  45.6k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  45.6k|    {
  142|  45.6k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   132k|    {
 1191|   132k|        return has_value();
 1192|   132k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   178k|    {
  189|   178k|        return m_has_value;
  190|   178k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  45.6k|    {
 1274|  45.6k|        return std::addressof(value());
 1275|  45.6k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  45.6k|    {
 1221|  45.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  45.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  45.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  45.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  45.6k|    {
  155|  45.6k|        return m_value;
  156|  45.6k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  4.41M|    {
 1405|  4.41M|        return detail::transform_error_impl(std::move(*this),
 1406|  4.41M|                                            std::forward<F>(f));
 1407|  4.41M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  4.41M|{
  927|  4.41M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.41M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.41M|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.41M|            return result(*std::forward<Exp>(exp));
  931|  4.41M|        }
  932|       |
  933|  4.41M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.41M|        return result(unexpect, monostate{});
  935|  4.41M|    }
  936|  4.41M|    else {
  937|  4.41M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.41M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.41M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.38M, False: 26.9k]
  |  |  ------------------
  ------------------
  939|  4.41M|                   ? result(*std::forward<Exp>(exp))
  940|  4.41M|                   : result(unexpect,
  941|  26.9k|                            std::invoke(std::forward<F>(f),
  942|  26.9k|                                        std::forward<Exp>(exp).error()));
  943|  4.41M|    }
  944|  4.41M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  18.0M|    {
  189|  18.0M|        return m_has_value;
  190|  18.0M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  4.38M|    {
 1263|  4.38M|        return std::move(value());
 1264|  4.38M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  6.20M|    {
 1221|  6.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.20M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  6.20M|    {
  155|  6.20M|        return m_value;
  156|  6.20M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  17.5M|    {
 1034|  17.5M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  17.5M|    {
  142|  17.5M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  17.9M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  26.9k|    {
 1207|  26.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  26.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  26.9k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  28.7k|    {
  172|  28.7k|        return m_unexpected;
  173|  28.7k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   336k|    {
   72|   336k|        return m_unexpected;
   73|   336k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  26.9k|    {
 1088|  26.9k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   411k|    {
  151|   411k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  17.9M|    {
 1191|  17.9M|        return has_value();
 1192|  17.9M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  35.9M|    {
  189|  35.9M|        return m_has_value;
  190|  35.9M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   411k|    {
 1197|   411k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   411k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   411k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   411k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   411k|    {
  172|   411k|        return m_unexpected;
  173|   411k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   384k|    {
 1078|   384k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  14.5M|    {
 1263|  14.5M|        return std::move(value());
 1264|  14.5M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  17.5M|    {
 1221|  17.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  17.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  17.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  17.5M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  17.5M|    {
  155|  17.5M|        return m_value;
  156|  17.5M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|   612k|    {
   58|   612k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   612k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   612k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  1.64M|    {
 1078|  1.64M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  1.64M|    {
  151|  1.64M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  9.72M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  60.6k|    {
   58|  60.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  60.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  60.6k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  28.7k|    {
 1078|  28.7k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  28.7k|    {
  151|  28.7k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   168k|    {
   67|   168k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   168k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   168k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  11.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  11.7M|    {
 1034|  11.7M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  11.7M|    {
  142|  11.7M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  7.40M|    {
 1191|  7.40M|        return has_value();
 1192|  7.40M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.74k|    {
 1197|  1.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.74k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  55.2k|    {
   58|  55.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  55.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  55.2k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  53.2k|    {
 1078|  53.2k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  9.42M|    {
   72|  9.42M|        return m_unexpected;
   73|  9.42M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  53.2k|    {
  151|  53.2k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   270k|    {
   67|   270k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   270k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   270k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  19.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.81M|    {
 1251|  1.81M|        return value();
 1252|  1.81M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  3.36M|    {
 1034|  3.36M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  3.36M|    {
  142|  3.36M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  35.2M|    {
   58|  35.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  35.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  35.2M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  16.3M|    {
 1078|  16.3M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  35.2M|    {
   72|  35.2M|        return m_unexpected;
   73|  35.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  16.3M|    {
  151|  16.3M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  35.2M|    {
   67|  35.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  35.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  35.2M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  19.8M|    {
 1191|  19.8M|        return has_value();
 1192|  19.8M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  27.3M|    {
  189|  27.3M|        return m_has_value;
  190|  27.3M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  4.08M|    {
 1197|  4.08M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  4.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  4.08M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  4.08M|    {
  172|  4.08M|        return m_unexpected;
  173|  4.08M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  4.38M|    {
 1034|  4.38M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  4.38M|    {
  142|  4.38M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.38M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   107k|    {
   58|   107k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   107k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   107k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.43M|    {
 1251|  3.43M|        return value();
 1252|  3.43M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  3.43M|    {
 1221|  3.43M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.43M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  3.43M|    {
  155|  3.43M|        return m_value;
  156|  3.43M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  4.38M|    {
 1191|  4.38M|        return has_value();
 1192|  4.38M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  8.77M|    {
  189|  8.77M|        return m_has_value;
  190|  8.77M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.38M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  4.38M|    {
 1263|  4.38M|        return std::move(value());
 1264|  4.38M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  4.38M|    {
 1221|  4.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.38M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  4.38M|    {
  155|  4.38M|        return m_value;
  156|  4.38M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  69.2k|    {
 1034|  69.2k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  69.2k|    {
  142|  69.2k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  4.38M|    {
 1034|  4.38M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  4.38M|    {
  142|  4.38M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  4.38M|    {
 1405|  4.38M|        return detail::transform_error_impl(std::move(*this),
 1406|  4.38M|                                            std::forward<F>(f));
 1407|  4.38M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  4.38M|{
  927|  4.38M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  4.38M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  4.38M|        if (SCN_LIKELY(exp.has_value())) {
  930|  4.38M|            return result(*std::forward<Exp>(exp));
  931|  4.38M|        }
  932|       |
  933|  4.38M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  4.38M|        return result(unexpect, monostate{});
  935|  4.38M|    }
  936|  4.38M|    else {
  937|  4.38M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  4.38M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  4.38M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 4.38M, False: 0]
  |  |  ------------------
  ------------------
  939|  4.38M|                   ? result(*std::forward<Exp>(exp))
  940|  4.38M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  4.38M|    }
  944|  4.38M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  8.77M|    {
  189|  8.77M|        return m_has_value;
  190|  8.77M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  4.38M|    {
 1263|  4.38M|        return std::move(value());
 1264|  4.38M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  4.38M|    {
 1221|  4.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.38M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  4.38M|    {
  155|  4.38M|        return m_value;
  156|  4.38M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  4.38M|    {
 1034|  4.38M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  4.38M|    {
  142|  4.38M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.38M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  4.38M|    {
 1191|  4.38M|        return has_value();
 1192|  4.38M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  8.77M|    {
  189|  8.77M|        return m_has_value;
  190|  8.77M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  4.38M|    {
 1263|  4.38M|        return std::move(value());
 1264|  4.38M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  4.38M|    {
 1221|  4.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  4.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  4.38M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  4.38M|    {
  155|  4.38M|        return m_value;
  156|  4.38M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  11.7k|    {
 1078|  11.7k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  11.7k|    {
  312|  11.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  11.7k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  11.7k|    {
  373|  11.7k|        scn::detail::construct_at(unexpected_ptr(),
  374|  11.7k|                                  std::forward<Args>(args)...);
  375|  11.7k|        m_has_value = false;
  376|  11.7k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|   125k|{
  102|   125k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   125k|        T(std::forward<Args>(args)...);
  104|   125k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  35.2k|    {
  403|  35.2k|        return reinterpret_cast<unexpected<E>*>(
  404|  35.2k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  35.2k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  35.2k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   563k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   563k|    {
  317|   563k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 552k, False: 11.7k]
  ------------------
  318|   552k|            destroy_value();
  319|   552k|        }
  320|  11.7k|        else {
  321|  11.7k|            destroy_unexpected();
  322|  11.7k|        }
  323|   563k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.69M|    {
  361|  1.69M|        return m_has_value;
  362|  1.69M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   552k|    {
  380|   552k|        scn::detail::destroy_at(value_ptr());
  381|   552k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   552k|{
  108|   552k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   552k|        for (auto& elem : *p) {
  110|   552k|            scn::detail::destroy_at(std::addressof(elem));
  111|   552k|        }
  112|   552k|    }
  113|   552k|    else {
  114|   552k|        p->~T();
  115|   552k|    }
  116|   552k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.65M|    {
  390|  1.65M|        return reinterpret_cast<T*>(
  391|  1.65M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.65M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.65M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  11.7k|    {
  384|  11.7k|        scn::detail::destroy_at(unexpected_ptr());
  385|  11.7k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|   125k|{
  108|   125k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   125k|        for (auto& elem : *p) {
  110|   125k|            scn::detail::destroy_at(std::addressof(elem));
  111|   125k|        }
  112|   125k|    }
  113|   125k|    else {
  114|   125k|        p->~T();
  115|   125k|    }
  116|   125k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   552k|    {
 1034|   552k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   552k|    {
  303|   552k|        construct(std::forward<Args>(args)...);
  304|   552k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   552k|    {
  367|   552k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   552k|        m_has_value = true;
  369|   552k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   552k|{
  102|   552k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   552k|        T(std::forward<Args>(args)...);
  104|   552k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   563k|    {
 1191|   563k|        return has_value();
 1192|   563k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  11.7k|    {
 1197|  11.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  11.7k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  11.7k|    {
  344|  11.7k|        return *unexpected_ptr();
  345|  11.7k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   552k|    {
 1263|   552k|        return std::move(value());
 1264|   552k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   552k|    {
 1221|   552k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   552k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   552k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   552k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   552k|    {
  327|   552k|        return *value_ptr();
  328|   552k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.01M|    {
 1251|  3.01M|        return value();
 1252|  3.01M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   107k|    {
   58|   107k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   107k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   107k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  8.07M|    {
 1034|  8.07M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  8.07M|    {
  142|  8.07M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    366|    {
 1078|    366|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    366|    {
  151|    366|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.67M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.67M|    {
 1034|  1.67M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.67M|    {
  142|  1.67M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   368k|    {
 1405|   368k|        return detail::transform_error_impl(std::move(*this),
 1406|   368k|                                            std::forward<F>(f));
 1407|   368k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   368k|{
  927|   368k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   368k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   368k|        if (SCN_LIKELY(exp.has_value())) {
  930|   368k|            return result(*std::forward<Exp>(exp));
  931|   368k|        }
  932|       |
  933|   368k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   368k|        return result(unexpect, monostate{});
  935|   368k|    }
  936|   368k|    else {
  937|   368k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   368k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   368k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 368k, False: 66]
  |  |  ------------------
  ------------------
  939|   368k|                   ? result(*std::forward<Exp>(exp))
  940|   368k|                   : result(unexpect,
  941|     66|                            std::invoke(std::forward<F>(f),
  942|     66|                                        std::forward<Exp>(exp).error()));
  943|   368k|    }
  944|   368k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  2.75M|    {
  189|  2.75M|        return m_has_value;
  190|  2.75M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.07M|    {
 1263|  1.07M|        return std::move(value());
 1264|  1.07M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.07M|    {
 1221|  1.07M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.07M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.07M|    {
  155|  1.07M|        return m_value;
  156|  1.07M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   652k|    {
 1034|   652k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   652k|    {
  142|   652k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.05M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    366|    {
 1207|    366|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    366|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    366|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    366|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    366|    {
  172|    366|        return m_unexpected;
  173|    366|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   184k|    {
 1088|   184k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   397k|    {
  151|   397k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   595k|    {
 1191|   595k|        return has_value();
 1192|   595k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    300|    {
 1078|    300|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    600|    {
  151|    600|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.55M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.71M|    {
 1078|  1.71M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.71M|    {
  151|  1.71M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  2.24M|    {
 1191|  2.24M|        return has_value();
 1192|  2.24M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  3.94M|    {
  189|  3.94M|        return m_has_value;
  190|  3.94M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   369k|    {
 1197|   369k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   369k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   553k|    {
  172|   553k|        return m_unexpected;
  173|   553k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   368k|    {
 1034|   368k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   368k|    {
  142|   368k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   368k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   836k|    {
 1221|   836k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   836k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   836k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   836k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   836k|    {
  155|   836k|        return m_value;
  156|   836k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   368k|    {
 1191|   368k|        return has_value();
 1192|   368k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   737k|    {
  189|   737k|        return m_has_value;
  190|   737k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   368k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   368k|    {
 1263|   368k|        return std::move(value());
 1264|   368k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   368k|    {
 1221|   368k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   368k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   368k|    {
  155|   368k|        return m_value;
  156|   368k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   709k|    {
 1405|   709k|        return detail::transform_error_impl(std::move(*this),
 1406|   709k|                                            std::forward<F>(f));
 1407|   709k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   709k|{
  927|   709k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   709k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   709k|        if (SCN_LIKELY(exp.has_value())) {
  930|   709k|            return result(*std::forward<Exp>(exp));
  931|   709k|        }
  932|       |
  933|   709k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   709k|        return result(unexpect, monostate{});
  935|   709k|    }
  936|   709k|    else {
  937|   709k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   709k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   709k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 709k, False: 300]
  |  |  ------------------
  ------------------
  939|   709k|                   ? result(*std::forward<Exp>(exp))
  940|   709k|                   : result(unexpect,
  941|    300|                            std::invoke(std::forward<F>(f),
  942|    300|                                        std::forward<Exp>(exp).error()));
  943|   709k|    }
  944|   709k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   836k|    {
 1034|   836k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   836k|    {
  142|   836k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    300|    {
 1088|    300|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   836k|    {
 1263|   836k|        return std::move(value());
 1264|   836k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   368k|    {
 1034|   368k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   368k|    {
  142|   368k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   368k|    {
 1405|   368k|        return detail::transform_error_impl(std::move(*this),
 1406|   368k|                                            std::forward<F>(f));
 1407|   368k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   368k|{
  927|   368k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   368k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   368k|        if (SCN_LIKELY(exp.has_value())) {
  930|   368k|            return result(*std::forward<Exp>(exp));
  931|   368k|        }
  932|       |
  933|   368k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   368k|        return result(unexpect, monostate{});
  935|   368k|    }
  936|   368k|    else {
  937|   368k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   368k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   368k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 368k, False: 0]
  |  |  ------------------
  ------------------
  939|   368k|                   ? result(*std::forward<Exp>(exp))
  940|   368k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   368k|    }
  944|   368k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   737k|    {
  189|   737k|        return m_has_value;
  190|   737k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   368k|    {
 1263|   368k|        return std::move(value());
 1264|   368k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   368k|    {
 1221|   368k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   368k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   368k|    {
  155|   368k|        return m_value;
  156|   368k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   368k|    {
 1034|   368k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   368k|    {
  142|   368k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   368k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   368k|    {
 1191|   368k|        return has_value();
 1192|   368k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   737k|    {
  189|   737k|        return m_has_value;
  190|   737k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   368k|    {
 1263|   368k|        return std::move(value());
 1264|   368k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   368k|    {
 1221|   368k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   368k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   368k|    {
  155|   368k|        return m_value;
  156|   368k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   312k|    {
 1405|   312k|        return detail::transform_error_impl(std::move(*this),
 1406|   312k|                                            std::forward<F>(f));
 1407|   312k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   312k|{
  927|   312k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   312k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   312k|        if (SCN_LIKELY(exp.has_value())) {
  930|   312k|            return result(*std::forward<Exp>(exp));
  931|   312k|        }
  932|       |
  933|   312k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   312k|        return result(unexpect, monostate{});
  935|   312k|    }
  936|   312k|    else {
  937|   312k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   312k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   312k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 127k, False: 184k]
  |  |  ------------------
  ------------------
  939|   312k|                   ? result(*std::forward<Exp>(exp))
  940|   312k|                   : result(unexpect,
  941|   184k|                            std::invoke(std::forward<F>(f),
  942|   184k|                                        std::forward<Exp>(exp).error()));
  943|   312k|    }
  944|   312k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   184k|    {
 1207|   184k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   184k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   184k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   184k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   212k|    {
 1078|   212k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|  28.3k|    {
 1078|  28.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|  28.3k|    {
  312|  28.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  28.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|  28.3k|    {
  373|  28.3k|        scn::detail::construct_at(unexpected_ptr(),
  374|  28.3k|                                  std::forward<Args>(args)...);
  375|  28.3k|        m_has_value = false;
  376|  28.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  85.1k|    {
  403|  85.1k|        return reinterpret_cast<unexpected<E>*>(
  404|  85.1k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  85.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  85.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  56.7k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  56.7k|    {
  317|  56.7k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 28.3k, False: 28.3k]
  ------------------
  318|  28.3k|            destroy_value();
  319|  28.3k|        }
  320|  28.3k|        else {
  321|  28.3k|            destroy_unexpected();
  322|  28.3k|        }
  323|  56.7k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|   170k|    {
  361|   170k|        return m_has_value;
  362|   170k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  28.3k|    {
  380|  28.3k|        scn::detail::destroy_at(value_ptr());
  381|  28.3k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEEEvPT_:
  107|  28.3k|{
  108|  28.3k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  28.3k|        for (auto& elem : *p) {
  110|  28.3k|            scn::detail::destroy_at(std::addressof(elem));
  111|  28.3k|        }
  112|  28.3k|    }
  113|  28.3k|    else {
  114|  28.3k|        p->~T();
  115|  28.3k|    }
  116|  28.3k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  85.1k|    {
  390|  85.1k|        return reinterpret_cast<T*>(
  391|  85.1k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  85.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  85.1k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  28.3k|    {
  384|  28.3k|        scn::detail::destroy_at(unexpected_ptr());
  385|  28.3k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISE_vEEOT_:
 1033|  28.3k|    {
 1034|  28.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS3_10in_place_tEDpOT_:
  302|  28.3k|    {
  303|  28.3k|        construct(std::forward<Args>(args)...);
  304|  28.3k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9constructIJSE_EEEvDpOT_:
  366|  28.3k|    {
  367|  28.3k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  28.3k|        m_has_value = true;
  369|  28.3k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEEJSE_EEEPT_SG_DpOT0_:
  101|  28.3k|{
  102|  28.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  28.3k|        T(std::forward<Args>(args)...);
  104|  28.3k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  56.7k|    {
 1191|  56.7k|        return has_value();
 1192|  56.7k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|  28.3k|    {
 1197|  28.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  28.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  28.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  28.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  28.3k|    {
  344|  28.3k|        return *unexpected_ptr();
  345|  28.3k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1262|  28.3k|    {
 1263|  28.3k|        return std::move(value());
 1264|  28.3k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1220|  28.3k|    {
 1221|  28.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  28.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  28.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  28.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|  28.3k|    {
  327|  28.3k|        return *value_ptr();
  328|  28.3k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   113k|    {
 1251|   113k|        return value();
 1252|   113k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   652k|    {
 1221|   652k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   652k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   652k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   652k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.10M|    {
  189|  2.10M|        return m_has_value;
  190|  2.10M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   652k|    {
  155|   652k|        return m_value;
  156|   652k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.05M|    {
 1191|  1.05M|        return has_value();
 1192|  1.05M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   397k|    {
 1197|   397k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   397k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   397k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   397k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   397k|    {
  172|   397k|        return m_unexpected;
  173|   397k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   539k|    {
 1263|   539k|        return std::move(value());
 1264|   539k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   138k|    {
 1078|   138k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   138k|    {
  151|   138k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  18.3M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  18.2M|    {
 1034|  18.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  18.2M|    {
  142|  18.2M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  3.83M|    {
 1405|  3.83M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.83M|                                            std::forward<F>(f));
 1407|  3.83M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  3.83M|{
  927|  3.83M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.83M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.83M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.83M|            return result(*std::forward<Exp>(exp));
  931|  3.83M|        }
  932|       |
  933|  3.83M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.83M|        return result(unexpect, monostate{});
  935|  3.83M|    }
  936|  3.83M|    else {
  937|  3.83M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.83M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.83M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.80M, False: 29.6k]
  |  |  ------------------
  ------------------
  939|  3.83M|                   ? result(*std::forward<Exp>(exp))
  940|  3.83M|                   : result(unexpect,
  941|  29.6k|                            std::invoke(std::forward<F>(f),
  942|  29.6k|                                        std::forward<Exp>(exp).error()));
  943|  3.83M|    }
  944|  3.83M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  31.8M|    {
  189|  31.8M|        return m_has_value;
  190|  31.8M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  11.8M|    {
 1263|  11.8M|        return std::move(value());
 1264|  11.8M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  13.3M|    {
 1221|  13.3M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  13.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  13.3M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  13.3M|    {
  155|  13.3M|        return m_value;
  156|  13.3M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  15.0M|    {
 1034|  15.0M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  15.0M|    {
  142|  15.0M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  15.7M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   136k|    {
 1207|   136k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   136k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   138k|    {
  172|   138k|        return m_unexpected;
  173|   138k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  29.6k|    {
 1088|  29.6k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   727k|    {
  151|   727k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   698k|    {
 1078|   698k|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  6.39M|    {
 1191|  6.39M|        return has_value();
 1192|  6.39M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  2.06k|    {
 1197|  2.06k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.06k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   108k|    {
 1078|   108k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   215k|    {
  151|   215k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  25.2M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  1.50M|    {
 1251|  1.50M|        return value();
 1252|  1.50M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  2.79M|    {
 1034|  2.79M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  2.79M|    {
  142|  2.79M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  14.1M|    {
 1078|  14.1M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  14.1M|    {
  151|  14.1M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  25.2M|    {
 1191|  25.2M|        return has_value();
 1192|  25.2M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  39.7M|    {
  189|  39.7M|        return m_has_value;
  190|  39.7M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  3.66M|    {
 1197|  3.66M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  3.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  3.66M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  3.66M|    {
  172|  3.66M|        return m_unexpected;
  173|  3.66M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  3.80M|    {
 1034|  3.80M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  3.80M|    {
  142|  3.80M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.80M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.86M|    {
 1251|  2.86M|        return value();
 1252|  2.86M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  10.8M|    {
 1221|  10.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  10.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  10.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  10.8M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  10.8M|    {
  155|  10.8M|        return m_value;
  156|  10.8M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  3.80M|    {
 1191|  3.80M|        return has_value();
 1192|  3.80M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  7.60M|    {
  189|  7.60M|        return m_has_value;
  190|  7.60M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.80M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  3.80M|    {
 1263|  3.80M|        return std::move(value());
 1264|  3.80M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  3.80M|    {
 1221|  3.80M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.80M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  3.80M|    {
  155|  3.80M|        return m_value;
  156|  3.80M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  8.11M|    {
 1405|  8.11M|        return detail::transform_error_impl(std::move(*this),
 1406|  8.11M|                                            std::forward<F>(f));
 1407|  8.11M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  8.11M|{
  927|  8.11M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  8.11M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  8.11M|        if (SCN_LIKELY(exp.has_value())) {
  930|  8.11M|            return result(*std::forward<Exp>(exp));
  931|  8.11M|        }
  932|       |
  933|  8.11M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  8.11M|        return result(unexpect, monostate{});
  935|  8.11M|    }
  936|  8.11M|    else {
  937|  8.11M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  8.11M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  8.11M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 8.01M, False: 106k]
  |  |  ------------------
  ------------------
  939|  8.11M|                   ? result(*std::forward<Exp>(exp))
  940|  8.11M|                   : result(unexpect,
  941|   106k|                            std::invoke(std::forward<F>(f),
  942|   106k|                                        std::forward<Exp>(exp).error()));
  943|  8.11M|    }
  944|  8.11M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  8.07M|    {
 1034|  8.07M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  8.07M|    {
  142|  8.07M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   106k|    {
 1088|   106k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  8.01M|    {
 1263|  8.01M|        return std::move(value());
 1264|  8.01M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  3.80M|    {
 1034|  3.80M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.80M|    {
  142|  3.80M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  3.80M|    {
 1405|  3.80M|        return detail::transform_error_impl(std::move(*this),
 1406|  3.80M|                                            std::forward<F>(f));
 1407|  3.80M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  3.80M|{
  927|  3.80M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  3.80M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  3.80M|        if (SCN_LIKELY(exp.has_value())) {
  930|  3.80M|            return result(*std::forward<Exp>(exp));
  931|  3.80M|        }
  932|       |
  933|  3.80M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  3.80M|        return result(unexpect, monostate{});
  935|  3.80M|    }
  936|  3.80M|    else {
  937|  3.80M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  3.80M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  3.80M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.80M, False: 0]
  |  |  ------------------
  ------------------
  939|  3.80M|                   ? result(*std::forward<Exp>(exp))
  940|  3.80M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  3.80M|    }
  944|  3.80M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  7.60M|    {
  189|  7.60M|        return m_has_value;
  190|  7.60M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.80M|    {
 1263|  3.80M|        return std::move(value());
 1264|  3.80M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.80M|    {
 1221|  3.80M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.80M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  3.80M|    {
  155|  3.80M|        return m_value;
  156|  3.80M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  3.80M|    {
 1034|  3.80M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  3.80M|    {
  142|  3.80M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.80M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  3.80M|    {
 1191|  3.80M|        return has_value();
 1192|  3.80M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  7.60M|    {
  189|  7.60M|        return m_has_value;
  190|  7.60M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  3.80M|    {
 1263|  3.80M|        return std::move(value());
 1264|  3.80M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  3.80M|    {
 1221|  3.80M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  3.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  3.80M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  3.80M|    {
  155|  3.80M|        return m_value;
  156|  3.80M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  35.2k|    {
 1078|  35.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  35.2k|    {
  312|  35.2k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  35.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  35.2k|    {
  373|  35.2k|        scn::detail::construct_at(unexpected_ptr(),
  374|  35.2k|                                  std::forward<Args>(args)...);
  375|  35.2k|        m_has_value = false;
  376|  35.2k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   105k|    {
  403|   105k|        return reinterpret_cast<unexpected<E>*>(
  404|   105k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   105k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   105k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   487k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   487k|    {
  317|   487k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 452k, False: 35.2k]
  ------------------
  318|   452k|            destroy_value();
  319|   452k|        }
  320|  35.2k|        else {
  321|  35.2k|            destroy_unexpected();
  322|  35.2k|        }
  323|   487k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  1.46M|    {
  361|  1.46M|        return m_has_value;
  362|  1.46M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   452k|    {
  380|   452k|        scn::detail::destroy_at(value_ptr());
  381|   452k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   452k|{
  108|   452k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   452k|        for (auto& elem : *p) {
  110|   452k|            scn::detail::destroy_at(std::addressof(elem));
  111|   452k|        }
  112|   452k|    }
  113|   452k|    else {
  114|   452k|        p->~T();
  115|   452k|    }
  116|   452k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.35M|    {
  390|  1.35M|        return reinterpret_cast<T*>(
  391|  1.35M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.35M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.35M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  35.2k|    {
  384|  35.2k|        scn::detail::destroy_at(unexpected_ptr());
  385|  35.2k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   452k|    {
 1034|   452k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   452k|    {
  303|   452k|        construct(std::forward<Args>(args)...);
  304|   452k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   452k|    {
  367|   452k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   452k|        m_has_value = true;
  369|   452k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   452k|{
  102|   452k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   452k|        T(std::forward<Args>(args)...);
  104|   452k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   487k|    {
 1191|   487k|        return has_value();
 1192|   487k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  35.2k|    {
 1197|  35.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  35.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  35.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  35.2k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  35.2k|    {
  344|  35.2k|        return *unexpected_ptr();
  345|  35.2k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   452k|    {
 1263|   452k|        return std::move(value());
 1264|   452k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   452k|    {
 1221|   452k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   452k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   452k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   452k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   452k|    {
  327|   452k|        return *value_ptr();
  328|   452k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.47M|    {
 1251|  2.47M|        return value();
 1252|  2.47M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  15.0M|    {
 1221|  15.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  15.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  15.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  15.0M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  31.5M|    {
  189|  31.5M|        return m_has_value;
  190|  31.5M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  15.0M|    {
  155|  15.0M|        return m_value;
  156|  15.0M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  15.7M|    {
 1191|  15.7M|        return has_value();
 1192|  15.7M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|   727k|    {
 1197|   727k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   727k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   727k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   727k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   727k|    {
  172|   727k|        return m_unexpected;
  173|   727k|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  12.5M|    {
 1263|  12.5M|        return std::move(value());
 1264|  12.5M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   373k|    {
 1078|   373k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   689k|    {
  151|   689k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.81M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|  1.12M|    {
 1034|  1.12M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.12M|    {
  142|  1.12M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  1.81M|    {
 1191|  1.81M|        return has_value();
 1192|  1.81M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  3.63M|    {
  189|  3.63M|        return m_has_value;
  190|  3.63M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   689k|    {
 1197|   689k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   689k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   689k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   689k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   689k|    {
  172|   689k|        return m_unexpected;
  173|   689k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|   191k|    {
 1251|   191k|        return value();
 1252|   191k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.12M|    {
 1221|  1.12M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.12M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.12M|    {
  155|  1.12M|        return m_value;
  156|  1.12M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    428|    {
 1078|    428|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    428|    {
  151|    428|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.91M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  2.91M|    {
 1034|  2.91M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  2.91M|    {
  142|  2.91M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   639k|    {
 1405|   639k|        return detail::transform_error_impl(std::move(*this),
 1406|   639k|                                            std::forward<F>(f));
 1407|   639k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   639k|{
  927|   639k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   639k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   639k|        if (SCN_LIKELY(exp.has_value())) {
  930|   639k|            return result(*std::forward<Exp>(exp));
  931|   639k|        }
  932|       |
  933|   639k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   639k|        return result(unexpect, monostate{});
  935|   639k|    }
  936|   639k|    else {
  937|   639k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   639k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   639k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 639k, False: 130]
  |  |  ------------------
  ------------------
  939|   639k|                   ? result(*std::forward<Exp>(exp))
  940|   639k|                   : result(unexpect,
  941|    130|                            std::invoke(std::forward<F>(f),
  942|    130|                                        std::forward<Exp>(exp).error()));
  943|   639k|    }
  944|   639k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  4.79M|    {
  189|  4.79M|        return m_has_value;
  190|  4.79M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.87M|    {
 1263|  1.87M|        return std::move(value());
 1264|  1.87M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.87M|    {
 1221|  1.87M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.87M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.87M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.87M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  1.87M|    {
  155|  1.87M|        return m_value;
  156|  1.87M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    428|    {
 1207|    428|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    428|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    428|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    428|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    428|    {
  172|    428|        return m_unexpected;
  173|    428|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   315k|    {
 1088|   315k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|  1.03M|    {
 1191|  1.03M|        return has_value();
 1192|  1.03M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    298|    {
 1078|    298|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    596|    {
  151|    596|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  4.45M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  2.98M|    {
 1078|  2.98M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  2.98M|    {
  151|  2.98M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  3.91M|    {
 1191|  3.91M|        return has_value();
 1192|  3.91M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  6.86M|    {
  189|  6.86M|        return m_has_value;
  190|  6.86M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   639k|    {
 1197|   639k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   639k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   639k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   639k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   955k|    {
  172|   955k|        return m_unexpected;
  173|   955k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   639k|    {
 1034|   639k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   639k|    {
  142|   639k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   639k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.46M|    {
 1221|  1.46M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.46M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.46M|    {
  155|  1.46M|        return m_value;
  156|  1.46M|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   639k|    {
 1191|   639k|        return has_value();
 1192|   639k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|  1.27M|    {
  189|  1.27M|        return m_has_value;
  190|  1.27M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   639k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   639k|    {
 1263|   639k|        return std::move(value());
 1264|   639k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   639k|    {
 1221|   639k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   639k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   639k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   639k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   639k|    {
  155|   639k|        return m_value;
  156|   639k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|  1.23M|    {
 1405|  1.23M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.23M|                                            std::forward<F>(f));
 1407|  1.23M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  1.23M|{
  927|  1.23M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.23M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.23M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.23M|            return result(*std::forward<Exp>(exp));
  931|  1.23M|        }
  932|       |
  933|  1.23M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.23M|        return result(unexpect, monostate{});
  935|  1.23M|    }
  936|  1.23M|    else {
  937|  1.23M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.23M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.23M, False: 298]
  |  |  ------------------
  ------------------
  939|  1.23M|                   ? result(*std::forward<Exp>(exp))
  940|  1.23M|                   : result(unexpect,
  941|    298|                            std::invoke(std::forward<F>(f),
  942|    298|                                        std::forward<Exp>(exp).error()));
  943|  1.23M|    }
  944|  1.23M|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.46M|    {
 1034|  1.46M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.46M|    {
  142|  1.46M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    298|    {
 1088|    298|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.46M|    {
 1263|  1.46M|        return std::move(value());
 1264|  1.46M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   639k|    {
 1034|   639k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   639k|    {
  142|   639k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   639k|    {
 1405|   639k|        return detail::transform_error_impl(std::move(*this),
 1406|   639k|                                            std::forward<F>(f));
 1407|   639k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   639k|{
  927|   639k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   639k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   639k|        if (SCN_LIKELY(exp.has_value())) {
  930|   639k|            return result(*std::forward<Exp>(exp));
  931|   639k|        }
  932|       |
  933|   639k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   639k|        return result(unexpect, monostate{});
  935|   639k|    }
  936|   639k|    else {
  937|   639k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   639k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   639k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 639k, False: 0]
  |  |  ------------------
  ------------------
  939|   639k|                   ? result(*std::forward<Exp>(exp))
  940|   639k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   639k|    }
  944|   639k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  1.27M|    {
  189|  1.27M|        return m_has_value;
  190|  1.27M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   639k|    {
 1263|   639k|        return std::move(value());
 1264|   639k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   639k|    {
 1221|   639k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   639k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   639k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   639k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   639k|    {
  155|   639k|        return m_value;
  156|   639k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   639k|    {
 1034|   639k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   639k|    {
  142|   639k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   639k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   639k|    {
 1191|   639k|        return has_value();
 1192|   639k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.27M|    {
  189|  1.27M|        return m_has_value;
  190|  1.27M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   639k|    {
 1263|   639k|        return std::move(value());
 1264|   639k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   639k|    {
 1221|   639k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   639k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   639k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   639k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   639k|    {
  155|   639k|        return m_value;
  156|   639k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   539k|    {
 1405|   539k|        return detail::transform_error_impl(std::move(*this),
 1406|   539k|                                            std::forward<F>(f));
 1407|   539k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   539k|{
  927|   539k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   539k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   539k|        if (SCN_LIKELY(exp.has_value())) {
  930|   539k|            return result(*std::forward<Exp>(exp));
  931|   539k|        }
  932|       |
  933|   539k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   539k|        return result(unexpect, monostate{});
  935|   539k|    }
  936|   539k|    else {
  937|   539k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   539k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   539k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 224k, False: 315k]
  |  |  ------------------
  ------------------
  939|   539k|                   ? result(*std::forward<Exp>(exp))
  940|   539k|                   : result(unexpect,
  941|   315k|                            std::invoke(std::forward<F>(f),
  942|   315k|                                        std::forward<Exp>(exp).error()));
  943|   539k|    }
  944|   539k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   315k|    {
 1207|   315k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   315k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   315k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   315k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  49.8k|    {
 1078|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|  49.8k|    {
  312|  49.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|  49.8k|    {
  373|  49.8k|        scn::detail::construct_at(unexpected_ptr(),
  374|  49.8k|                                  std::forward<Args>(args)...);
  375|  49.8k|        m_has_value = false;
  376|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   149k|    {
  403|   149k|        return reinterpret_cast<unexpected<E>*>(
  404|   149k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   149k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   149k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  99.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  99.6k|    {
  317|  99.6k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 49.8k, False: 49.8k]
  ------------------
  318|  49.8k|            destroy_value();
  319|  49.8k|        }
  320|  49.8k|        else {
  321|  49.8k|            destroy_unexpected();
  322|  49.8k|        }
  323|  99.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   299k|    {
  361|   299k|        return m_has_value;
  362|   299k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|  49.8k|    {
  380|  49.8k|        scn::detail::destroy_at(value_ptr());
  381|  49.8k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEEEvPT_:
  107|  49.8k|{
  108|  49.8k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|  49.8k|        for (auto& elem : *p) {
  110|  49.8k|            scn::detail::destroy_at(std::addressof(elem));
  111|  49.8k|        }
  112|  49.8k|    }
  113|  49.8k|    else {
  114|  49.8k|        p->~T();
  115|  49.8k|    }
  116|  49.8k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|   149k|    {
  390|   149k|        return reinterpret_cast<T*>(
  391|   149k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|   149k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|   149k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  49.8k|    {
  384|  49.8k|        scn::detail::destroy_at(unexpected_ptr());
  385|  49.8k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  49.8k|    {
 1034|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS3_10in_place_tEDpOT_:
  302|  49.8k|    {
  303|  49.8k|        construct(std::forward<Args>(args)...);
  304|  49.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSH_EEEvDpOT_:
  366|  49.8k|    {
  367|  49.8k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|  49.8k|        m_has_value = true;
  369|  49.8k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEEJSH_EEEPT_SJ_DpOT0_:
  101|  49.8k|{
  102|  49.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|  49.8k|        T(std::forward<Args>(args)...);
  104|  49.8k|}
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  99.6k|    {
 1191|  99.6k|        return has_value();
 1192|  99.6k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  49.8k|    {
 1197|  49.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  49.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  49.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  49.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  49.8k|    {
  344|  49.8k|        return *unexpected_ptr();
  345|  49.8k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEdeISH_LPv0EEEOT_v:
 1262|  49.8k|    {
 1263|  49.8k|        return std::move(value());
 1264|  49.8k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  49.8k|    {
 1221|  49.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  49.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  49.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  49.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|  49.8k|    {
  327|  49.8k|        return *value_ptr();
  328|  49.8k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   938k|    {
 1263|   938k|        return std::move(value());
 1264|   938k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.73k|{
  200|  4.73k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.73k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.73k|{
  180|  4.73k|    return p;
  181|  4.73k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.73k|{
  200|  4.73k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.73k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  4.73k|{
  180|  4.73k|    return p;
  181|  4.73k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  4.73k|{
  200|  4.73k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  4.73k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  4.73k|{
  180|  4.73k|    return p;
  181|  4.73k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  15.3M|{
  200|  15.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  15.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  15.3M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  15.5M|{
  180|  15.5M|    return p;
  181|  15.5M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  8.92M|{
  200|  8.92M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  8.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  8.92M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  8.92M|{
  180|  8.92M|    return p;
  181|  8.92M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   255k|{
  200|   255k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   255k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  8.92M|{
  200|  8.92M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  8.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  8.92M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  9.37M|{
  180|  9.37M|    return p;
  181|  9.37M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   448k|{
  200|   448k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   448k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   448k|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  16.4k|    {
  242|  16.4k|        return static_cast<size_type>(m_end - m_ptr);
  243|  16.4k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  2.36k|    {
  181|  2.36k|        return m_ptr;
  182|  2.36k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  2.36k|    {
  185|  2.36k|        return m_end;
  186|  2.36k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.36k|    {
  238|  2.36k|        return m_ptr;
  239|  2.36k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.36k|    {
  120|  2.36k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  56.7k|    {
  181|  56.7k|        return m_ptr;
  182|  56.7k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  56.7k|    {
  185|  56.7k|        return m_end;
  186|  56.7k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.36k|    {
  120|  2.36k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|  99.6k|    {
  181|  99.6k|        return m_ptr;
  182|  99.6k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|  99.6k|    {
  185|  99.6k|        return m_end;
  186|  99.6k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.36k|    {
  120|  2.36k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  4.46M|    {
  120|  4.46M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  4.46M|    {
  238|  4.46M|        return m_ptr;
  239|  4.46M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  4.46M|    {
  242|  4.46M|        return static_cast<size_type>(m_end - m_ptr);
  243|  4.46M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  2.73M|{
   60|  2.73M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  2.73M|                                          const CharT*, const CharT*>) {
   62|  2.73M|        return {first, last};
   63|  2.73M|    }
   64|  2.73M|    else {
   65|  2.73M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  2.73M|    }
   67|  2.73M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  6.81M|{
   60|  6.81M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  6.81M|                                          const CharT*, const CharT*>) {
   62|  6.81M|        return {first, last};
   63|  6.81M|    }
   64|  6.81M|    else {
   65|  6.81M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  6.81M|    }
   67|  6.81M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  5.09M|{
   44|  5.09M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  5.09M|                                          decltype(first), decltype(last)> &&
   46|  5.09M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  5.09M|        return {first, last};
   48|  5.09M|    }
   49|  5.09M|    else {
   50|  5.09M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  5.09M|                                       to_address(first), to_address(last)))};
   52|  5.09M|    }
   53|  5.09M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  9.16M|{
   75|  9.16M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  9.16M|                      typename std::basic_string_view<CharT>::iterator,
   77|  9.16M|                      decltype(it)> &&
   78|  9.16M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  9.16M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  9.16M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  9.16M|        return it;
   81|  9.16M|    }
   82|  9.16M|    else {
   83|  9.16M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  9.16M|    }
   85|  9.16M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   368k|{
   54|   368k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   368k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   368k|        return true;
   57|   368k|    }
   58|   368k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   368k|                           ranges::iterator_t<Range>,
   60|   368k|                           typename detail::basic_scan_buffer<
   61|   368k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   368k|        auto beg = ranges::begin(r);
   63|   368k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 368k, False: 0]
  ------------------
   64|   368k|            return false;
   65|   368k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   368k|    else {
   79|   368k|        return false;
   80|   368k|    }
   81|   368k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   368k|{
  112|   368k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   368k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   368k|        return r;
  115|   368k|    }
  116|   368k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   368k|                           ranges::iterator_t<Range>,
  118|   368k|                           typename detail::basic_scan_buffer<
  119|   368k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   368k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   368k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   368k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   368k|                ranges::begin(r), ranges::end(r)));
  124|   368k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   368k|        }
  126|   368k|        else {
  127|   368k|            return ranges::begin(r).contiguous_segment();
  128|   368k|        }
  129|   368k|    }
  130|   368k|    else {
  131|   368k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   368k|    }
  133|   368k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   709k|{
  166|   709k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   709k|        return ranges_polyfill::usize(r);
  168|   709k|    }
  169|   709k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   709k|                           ranges::iterator_t<Range>,
  171|   709k|                           typename detail::basic_scan_buffer<
  172|   709k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   709k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   709k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   709k|                                       ranges::begin(r).position());
  176|   709k|        }
  177|   709k|        else {
  178|   709k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 709k, False: 0]
  ------------------
  179|   709k|                return static_cast<size_t>(
  180|   709k|                    ranges::begin(r).parent()->chars_available() -
  181|   709k|                    ranges::begin(r).position());
  182|   709k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   709k|        }
  185|   709k|    }
  186|   709k|    else {
  187|   709k|        return 0;
  188|   709k|    }
  189|   709k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   639k|{
   54|   639k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   639k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   639k|        return true;
   57|   639k|    }
   58|   639k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   639k|                           ranges::iterator_t<Range>,
   60|   639k|                           typename detail::basic_scan_buffer<
   61|   639k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   639k|        auto beg = ranges::begin(r);
   63|   639k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 639k, False: 0]
  ------------------
   64|   639k|            return false;
   65|   639k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   639k|    else {
   79|   639k|        return false;
   80|   639k|    }
   81|   639k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   639k|{
  112|   639k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   639k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   639k|        return r;
  115|   639k|    }
  116|   639k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   639k|                           ranges::iterator_t<Range>,
  118|   639k|                           typename detail::basic_scan_buffer<
  119|   639k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   639k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   639k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   639k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   639k|                ranges::begin(r), ranges::end(r)));
  124|   639k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   639k|        }
  126|   639k|        else {
  127|   639k|            return ranges::begin(r).contiguous_segment();
  128|   639k|        }
  129|   639k|    }
  130|   639k|    else {
  131|   639k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   639k|    }
  133|   639k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|  1.23M|{
  166|  1.23M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  1.23M|        return ranges_polyfill::usize(r);
  168|  1.23M|    }
  169|  1.23M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  1.23M|                           ranges::iterator_t<Range>,
  171|  1.23M|                           typename detail::basic_scan_buffer<
  172|  1.23M|                               detail::char_t<Range>>::forward_iterator>) {
  173|  1.23M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|  1.23M|            return static_cast<size_t>(ranges::end(r).position() -
  175|  1.23M|                                       ranges::begin(r).position());
  176|  1.23M|        }
  177|  1.23M|        else {
  178|  1.23M|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 1.23M, False: 0]
  ------------------
  179|  1.23M|                return static_cast<size_t>(
  180|  1.23M|                    ranges::begin(r).parent()->chars_available() -
  181|  1.23M|                    ranges::begin(r).position());
  182|  1.23M|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|  1.23M|        }
  185|  1.23M|    }
  186|  1.23M|    else {
  187|  1.23M|        return 0;
  188|  1.23M|    }
  189|  1.23M|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  4.39M|{
  235|  4.39M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  4.39M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  4.39M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  4.39M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  4.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  4.39M|    }
  240|  4.39M|    else {
  241|  4.39M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  4.39M|    }
  243|  4.39M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  4.39M|    {
   50|  4.39M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  14.3M|    {
   63|  14.3M|        return sv;
   64|  14.3M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.86M|{
  235|  2.86M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.86M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.86M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.86M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.86M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.86M|    }
  240|  2.86M|    else {
  241|  2.86M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.86M|    }
  243|  2.86M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.86M|    {
   50|  2.86M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|   255k|    {
  142|   255k|        return m_view;
  143|   255k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|   127k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   127k|{
  235|   127k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   127k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   127k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   127k|        return string_view_wrapper{SCN_FWD(range)};
  239|   127k|    }
  240|   127k|    else {
  241|   127k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   127k|    }
  243|   127k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   127k|    {
   97|   127k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   127k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   127k|    {
  181|   127k|        using value_t = ranges::range_value_t<Range>;
  182|   127k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   127k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   127k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   127k|            m_storage.reset();
  186|   127k|            m_view = string_view_type{ranges::data(range),
  187|   127k|                                      ranges_polyfill::usize(range)};
  188|   127k|        }
  189|   127k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   127k|                                          std::basic_string<CharT>>) {
  191|   127k|            m_storage.emplace(SCN_FWD(range));
  192|   127k|            m_view = string_view_type{*m_storage};
  193|   127k|        }
  194|   127k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   127k|                                          typename detail::basic_scan_buffer<
  196|   127k|                                              value_t>::forward_iterator> &&
  197|   127k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   127k|            auto beg_seg = range.begin().contiguous_segment();
  199|   127k|            auto end_seg = range.end().contiguous_segment();
  200|   127k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 127k, False: 54]
  |  |  ------------------
  ------------------
  201|   127k|                             detail::to_address(end_seg.end()))) {
  202|   127k|                auto& str = m_storage.emplace();
  203|   127k|                str.reserve(range.end().position() - range.begin().position());
  204|   127k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   127k|                m_view = string_view_type{str};
  206|   127k|                return;
  207|   127k|            }
  208|       |
  209|     54|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     54|                                                            end_seg.data());
  211|     54|            m_storage.reset();
  212|     54|        }
  213|   127k|        else {
  214|   127k|            auto& str = m_storage.emplace();
  215|   127k|            if constexpr (ranges::sized_range<Range>) {
  216|   127k|                str.reserve(ranges_polyfill::usize(range));
  217|   127k|            }
  218|   127k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   127k|                      std::back_inserter(str));
  220|   127k|            m_view = string_view_type{str};
  221|   127k|        }
  222|   127k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  2.50M|{
  235|  2.50M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  2.50M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  2.50M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  2.50M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  2.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  2.50M|    }
  240|  2.50M|    else {
  241|  2.50M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  2.50M|    }
  243|  2.50M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  2.50M|    {
   50|  2.50M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  4.73M|    {
   63|  4.73M|        return sv;
   64|  4.73M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|   440k|    {
  142|   440k|        return m_view;
  143|   440k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|   224k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|   224k|{
  235|   224k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|   224k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|   224k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|   224k|        return string_view_wrapper{SCN_FWD(range)};
  239|   224k|    }
  240|   224k|    else {
  241|   224k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|   224k|    }
  243|   224k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|   224k|    {
   97|   224k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|   224k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|   224k|    {
  181|   224k|        using value_t = ranges::range_value_t<Range>;
  182|   224k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|   224k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|   224k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|   224k|            m_storage.reset();
  186|   224k|            m_view = string_view_type{ranges::data(range),
  187|   224k|                                      ranges_polyfill::usize(range)};
  188|   224k|        }
  189|   224k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|   224k|                                          std::basic_string<CharT>>) {
  191|   224k|            m_storage.emplace(SCN_FWD(range));
  192|   224k|            m_view = string_view_type{*m_storage};
  193|   224k|        }
  194|   224k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|   224k|                                          typename detail::basic_scan_buffer<
  196|   224k|                                              value_t>::forward_iterator> &&
  197|   224k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|   224k|            auto beg_seg = range.begin().contiguous_segment();
  199|   224k|            auto end_seg = range.end().contiguous_segment();
  200|   224k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 224k, False: 54]
  |  |  ------------------
  ------------------
  201|   224k|                             detail::to_address(end_seg.end()))) {
  202|   224k|                auto& str = m_storage.emplace();
  203|   224k|                str.reserve(range.end().position() - range.begin().position());
  204|   224k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|   224k|                m_view = string_view_type{str};
  206|   224k|                return;
  207|   224k|            }
  208|       |
  209|     54|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     54|                                                            end_seg.data());
  211|     54|            m_storage.reset();
  212|     54|        }
  213|   224k|        else {
  214|   224k|            auto& str = m_storage.emplace();
  215|   224k|            if constexpr (ranges::sized_range<Range>) {
  216|   224k|                str.reserve(ranges_polyfill::usize(range));
  217|   224k|            }
  218|   224k|            std::copy(ranges::begin(range), ranges::end(range),
  219|   224k|                      std::back_inserter(str));
  220|   224k|            m_view = string_view_type{str};
  221|   224k|        }
  222|   224k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  19.0M|{
   97|  19.0M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  19.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30.4k, False: 19.0M]
  |  |  ------------------
  ------------------
   98|  30.4k|        return eof_error::eof;
   99|  30.4k|    }
  100|  19.0M|    return eof_error::good;
  101|  19.0M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  19.0M|{
   91|  19.0M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  19.0M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  19.0M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  19.0M|    {
   84|  19.0M|        return begin == end;
   85|  19.0M|    }
   86|  19.0M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  1.33M|{
   97|  1.33M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 66, False: 1.33M]
  |  |  ------------------
  ------------------
   98|     66|        return eof_error::eof;
   99|     66|    }
  100|  1.33M|    return eof_error::good;
  101|  1.33M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  1.33M|{
   91|  1.33M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  1.33M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  1.33M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  1.33M|    {
   84|  1.33M|        return begin == end;
   85|  1.33M|    }
   86|  1.33M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  16.5M|{
   97|  16.5M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  16.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 33.7k, False: 16.5M]
  |  |  ------------------
  ------------------
   98|  33.7k|        return eof_error::eof;
   99|  33.7k|    }
  100|  16.5M|    return eof_error::good;
  101|  16.5M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  16.5M|{
   91|  16.5M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  16.5M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  16.5M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  16.5M|    {
   84|  16.5M|        return begin == end;
   85|  16.5M|    }
   86|  16.5M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  2.31M|{
   97|  2.31M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  2.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 130, False: 2.31M]
  |  |  ------------------
  ------------------
   98|    130|        return eof_error::eof;
   99|    130|    }
  100|  2.31M|    return eof_error::good;
  101|  2.31M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  2.31M|{
   91|  2.31M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  2.31M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  2.31M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.31M|    {
   84|  2.31M|        return begin == end;
   85|  2.31M|    }
   86|  2.31M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  4.75M|{
  128|  4.75M|    return find_classic_impl(
  129|  4.75M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  4.75M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  4.75M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  4.83M|{
   31|  4.83M|    static_assert(sizeof(*source.data()) == 1);
   32|  4.83M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  4.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  4.83M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  4.83M|    return has_byte_greater(word, 127) != 0;
   37|  4.83M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  4.75M|{
   44|  4.75M|    auto it = source.begin();
   45|       |
   46|  4.83M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 4.83M, False: 4.56k]
  ------------------
   47|  4.83M|        auto sv =
   48|  4.83M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  4.83M|                .substr(0, 8);
   50|       |
   51|  4.83M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 4.60M, False: 230k]
  ------------------
   52|  4.60M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  4.60M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  4.60M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 4.52M, False: 73.7k]
  ------------------
   55|  4.52M|                break;
   56|  4.52M|            }
   57|  73.7k|            continue;
   58|  4.60M|        }
   59|       |
   60|   268k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 266k, False: 1.88k]
  ------------------
   61|   266k|            auto tmp =
   62|   266k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   266k|            auto res = get_next_code_point(tmp);
   64|   266k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 228k, False: 38.1k]
  ------------------
   65|   228k|                return it;
   66|   228k|            }
   67|  38.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  38.1k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  38.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  38.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  38.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  38.1k|        }
   71|   230k|    }
   72|       |
   73|  4.53M|    return detail::make_string_view_iterator(source, it);
   74|  4.75M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  9.34M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   266k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  4.39M|{
  300|  4.39M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  4.39M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  4.39M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  4.39M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  4.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  4.39M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  4.39M|        return ranges::next(ranges::begin(range),
  306|  4.39M|                            ranges::distance(buf.view().begin(), it));
  307|  4.39M|    }
  308|  4.39M|    else {
  309|  4.39M|        auto it = ranges::begin(range);
  310|       |
  311|  4.39M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  4.39M|            auto seg = get_contiguous_beginning(range);
  313|  4.39M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  4.39M|                seg_it != seg.end()) {
  315|  4.39M|                return ranges_polyfill::batch_next(
  316|  4.39M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  4.39M|            }
  318|  4.39M|            ranges_polyfill::batch_next(it, seg.size());
  319|  4.39M|        }
  320|       |
  321|  4.39M|        return read_while_code_point(
  322|  4.39M|            SCN_FWD(range),
  323|  4.39M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  4.39M|    }
  325|  4.39M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  4.38M|{
  459|  4.38M|    auto it = read_code_unit(range);
  460|  4.38M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  4.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.38M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  8.67M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 8.67M, False: 4.08M]
  ------------------
  465|  8.67M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 296k, False: 8.37M]
  ------------------
  466|   296k|            return *it;
  467|   296k|        }
  468|  8.67M|    }
  469|       |
  470|  4.08M|    return unexpected(parse_error::error);
  471|  4.38M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   937k|{
  482|   937k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 821k, False: 116k]
  ------------------
  483|   821k|        return ranges::begin(range);
  484|   821k|    }
  485|   116k|    return *result;
  486|   937k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  9.43M|{
  418|  9.43M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  9.43M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  9.43M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  9.43M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 51.4k, False: 9.38M]
  ------------------
  423|  51.4k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  51.4k|        }
  425|  9.38M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 9.31M, False: 69.2k]
  ------------------
  426|  9.31M|            return unexpected(parse_error::error);
  427|  9.31M|        }
  428|  69.2k|        return ranges::next(ranges::begin(range), str.size());
  429|  9.38M|    }
  430|  9.43M|    else {
  431|  9.43M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  9.43M|            if (ch < 'A' || ch > 'Z') {
  433|  9.43M|                return ch;
  434|  9.43M|            }
  435|  9.43M|            return static_cast<char_type>(ch +
  436|  9.43M|                                          static_cast<char_type>('a' - 'A'));
  437|  9.43M|        };
  438|       |
  439|  9.43M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  9.43M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  9.43M|        if (SCN_UNLIKELY(!std::equal(
  443|  9.43M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  9.43M|                    return ascii_tolower(a) ==
  445|  9.43M|                           static_cast<detail::char_t<Range>>(b);
  446|  9.43M|                }))) {
  447|  9.43M|            return unexpected(parse_error::error);
  448|  9.43M|        }
  449|       |
  450|  9.43M|        return it;
  451|  9.43M|    }
  452|  9.43M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  9.38M|{
  407|  9.38M|    unsigned char running_diff{0};
  408|  28.1M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 18.7M, False: 9.38M]
  ------------------
  409|  18.7M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  18.7M|    }
  411|  9.38M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 63.9k, False: 9.31M]
  |  Branch (411:33): [True: 5.30k, False: 9.31M]
  ------------------
  412|  9.38M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  3.01M|{
  332|  3.01M|    auto it = read_code_unit(range);
  333|  3.01M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.74k, False: 3.01M]
  |  |  ------------------
  ------------------
  334|  1.74k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.74k|    }
  336|       |
  337|  3.01M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  3.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.49M, False: 1.51M]
  |  |  ------------------
  ------------------
  338|  3.01M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.49M|        return unexpected(parse_error::error);
  340|  1.49M|    }
  341|       |
  342|  1.51M|    return *it;
  343|  3.01M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   368k|{
  300|   368k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   368k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   368k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   368k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   368k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   368k|        return ranges::next(ranges::begin(range),
  306|   368k|                            ranges::distance(buf.view().begin(), it));
  307|   368k|    }
  308|   368k|    else {
  309|   368k|        auto it = ranges::begin(range);
  310|       |
  311|   368k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   368k|            auto seg = get_contiguous_beginning(range);
  313|   368k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   368k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 368k, False: 0]
  ------------------
  315|   368k|                return ranges_polyfill::batch_next(
  316|   368k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   368k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   368k|    }
  325|   368k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   368k|{
  459|   368k|    auto it = read_code_unit(range);
  460|   368k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   737k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 737k, False: 368k]
  ------------------
  465|   737k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 737k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   737k|    }
  469|       |
  470|   368k|    return unexpected(parse_error::error);
  471|   368k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   113k|{
  482|   113k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 113k, False: 0]
  ------------------
  483|   113k|        return ranges::begin(range);
  484|   113k|    }
  485|      0|    return *result;
  486|   113k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   709k|{
  418|   709k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   709k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   709k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   709k|        if (ranges::size(range) < str.size()) {
  423|   709k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   709k|        }
  425|   709k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   709k|            return unexpected(parse_error::error);
  427|   709k|        }
  428|   709k|        return ranges::next(ranges::begin(range), str.size());
  429|   709k|    }
  430|   709k|    else {
  431|   709k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   709k|            if (ch < 'A' || ch > 'Z') {
  433|   709k|                return ch;
  434|   709k|            }
  435|   709k|            return static_cast<char_type>(ch +
  436|   709k|                                          static_cast<char_type>('a' - 'A'));
  437|   709k|        };
  438|       |
  439|   709k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   709k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   709k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   709k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 300, False: 709k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    300|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    300|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    300|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    300|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    300|    }                                                  \
  |  |  |  |   70|   709k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   709k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   709k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   709k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 709k, False: 0]
  |  |  ------------------
  ------------------
  443|   709k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   709k|                    return ascii_tolower(a) ==
  445|   709k|                           static_cast<detail::char_t<Range>>(b);
  446|   709k|                }))) {
  447|   709k|            return unexpected(parse_error::error);
  448|   709k|        }
  449|       |
  450|      0|        return it;
  451|   709k|    }
  452|   709k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   709k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   709k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 709k, False: 0]
  |  Branch (432:29): [True: 0, False: 0]
  ------------------
  433|   709k|                return ch;
  434|   709k|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|   709k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   226k|{
  332|   226k|    auto it = read_code_unit(range);
  333|   226k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 226k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   226k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 226k, False: 0]
  |  |  ------------------
  ------------------
  338|   226k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   226k|        return unexpected(parse_error::error);
  340|   226k|    }
  341|       |
  342|      0|    return *it;
  343|   226k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   312k|{
  159|   312k|    auto it = read_while_code_unit(range, pred);
  160|   312k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 184k, False: 127k]
  ------------------
  161|   184k|        return unexpected(parse_error::error);
  162|   184k|    }
  163|   127k|    return it;
  164|   312k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   312k|{
  139|   312k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   312k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   312k|{
  131|   312k|    return ranges::find_if(range, pred);
  132|   312k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  3.80M|{
  300|  3.80M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  3.80M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  3.80M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  3.80M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  3.80M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  3.80M|        return ranges::next(ranges::begin(range),
  306|  3.80M|                            ranges::distance(buf.view().begin(), it));
  307|  3.80M|    }
  308|  3.80M|    else {
  309|  3.80M|        auto it = ranges::begin(range);
  310|       |
  311|  3.80M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  3.80M|            auto seg = get_contiguous_beginning(range);
  313|  3.80M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  3.80M|                seg_it != seg.end()) {
  315|  3.80M|                return ranges_polyfill::batch_next(
  316|  3.80M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  3.80M|            }
  318|  3.80M|            ranges_polyfill::batch_next(it, seg.size());
  319|  3.80M|        }
  320|       |
  321|  3.80M|        return read_while_code_point(
  322|  3.80M|            SCN_FWD(range),
  ------------------
  |  |  248|  3.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  3.80M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  3.80M|    }
  325|  3.80M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  3.80M|{
  264|  3.80M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  3.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  3.80M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  3.80M|{
  231|  3.80M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  3.80M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  3.80M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  3.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  3.80M|    }
  235|  3.80M|    else {
  236|  3.80M|        auto it = ranges::begin(range);
  237|  3.80M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  3.80M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  3.80M|            seg_it != seg.end()) {
  241|  3.80M|            return ranges_polyfill::batch_next(
  242|  3.80M|                it, ranges::distance(seg.begin(), seg_it));
  243|  3.80M|        }
  244|       |
  245|  3.80M|        while (it != ranges::end(range)) {
  246|  3.80M|            const auto [iter, value] =
  247|  3.80M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  3.80M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  3.80M|            if (pred(cp)) {
  250|  3.80M|                return it;
  251|  3.80M|            }
  252|  3.80M|            it = iter;
  253|  3.80M|        }
  254|       |
  255|  3.80M|        return it;
  256|  3.80M|    }
  257|  3.80M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  3.80M|{
  178|  3.80M|    static_assert(ranges::contiguous_range<Range> &&
  179|  3.80M|                  ranges::sized_range<Range>);
  180|       |
  181|  3.80M|    std::array<char32_t, 16> cp_buf{};
  182|  3.80M|    std::array<uint8_t, 16> idx_buf{};
  183|  3.80M|    auto it = ranges::begin(range);
  184|  3.82M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 3.82M, False: 6.18k]
  ------------------
  185|  3.82M|        auto chunk_begin = it;
  186|  3.82M|        size_t code_point_count = 0;
  187|  3.82M|        uint8_t code_unit_idx = 0;
  188|  61.3M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 57.9M, False: 3.41M]
  |  Branch (188:52): [True: 57.5M, False: 401k]
  ------------------
  189|  57.5M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 57.5M, False: 0]
  ------------------
  190|  57.5M|                idx_buf[code_point_count] = code_unit_idx;
  191|  57.5M|                ++code_point_count;
  192|  57.5M|            }
  193|  57.5M|            ++it;
  194|  57.5M|            ++code_unit_idx;
  195|  57.5M|        }
  196|       |
  197|  3.82M|        auto input = detail::make_string_view_from_pointers(
  198|  3.82M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  3.82M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  3.82M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  3.82M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  3.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.82M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  7.86M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 7.84M, False: 20.7k]
  ------------------
  217|  7.84M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 3.80M, False: 4.04M]
  ------------------
  218|  3.80M|                return chunk_begin + idx_buf[i];
  219|  3.80M|            }
  220|  7.84M|        }
  221|  3.82M|    }
  222|       |
  223|  6.18k|    return it;
  224|  3.80M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  7.84M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  3.80M|{
  459|  3.80M|    auto it = read_code_unit(range);
  460|  3.80M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  3.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.80M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  7.52M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 7.52M, False: 3.55M]
  ------------------
  465|  7.52M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 242k, False: 7.27M]
  ------------------
  466|   242k|            return *it;
  467|   242k|        }
  468|  7.52M|    }
  469|       |
  470|  3.55M|    return unexpected(parse_error::error);
  471|  3.80M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|   845k|{
  482|   845k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 748k, False: 96.7k]
  ------------------
  483|   748k|        return ranges::begin(range);
  484|   748k|    }
  485|  96.7k|    return *result;
  486|   845k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  8.11M|{
  418|  8.11M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  8.11M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  8.11M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  8.11M|        if (ranges::size(range) < str.size()) {
  423|  8.11M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  8.11M|        }
  425|  8.11M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  8.11M|            return unexpected(parse_error::error);
  427|  8.11M|        }
  428|  8.11M|        return ranges::next(ranges::begin(range), str.size());
  429|  8.11M|    }
  430|  8.11M|    else {
  431|  8.11M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  8.11M|            if (ch < 'A' || ch > 'Z') {
  433|  8.11M|                return ch;
  434|  8.11M|            }
  435|  8.11M|            return static_cast<char_type>(ch +
  436|  8.11M|                                          static_cast<char_type>('a' - 'A'));
  437|  8.11M|        };
  438|       |
  439|  8.11M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  8.11M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.11M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.11M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 106k, False: 8.01M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   106k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   106k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   106k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   106k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   106k|    }                                                  \
  |  |  |  |   70|  8.11M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  8.01M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  8.01M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  8.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.94M, False: 64.6k]
  |  |  ------------------
  ------------------
  443|  8.01M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  8.01M|                    return ascii_tolower(a) ==
  445|  8.01M|                           static_cast<detail::char_t<Range>>(b);
  446|  8.01M|                }))) {
  447|  7.94M|            return unexpected(parse_error::error);
  448|  7.94M|        }
  449|       |
  450|  64.6k|        return it;
  451|  8.01M|    }
  452|  8.11M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  12.0M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  12.0M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 11.5M, False: 484k]
  |  Branch (432:29): [True: 444k, False: 39.3k]
  ------------------
  433|  12.0M|                return ch;
  434|  12.0M|            }
  435|  39.3k|            return static_cast<char_type>(ch +
  436|  39.3k|                                          static_cast<char_type>('a' - 'A'));
  437|  12.0M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  2.59M|{
  332|  2.59M|    auto it = read_code_unit(range);
  333|  2.59M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  2.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.06k, False: 2.58M]
  |  |  ------------------
  ------------------
  334|  2.06k|        return unexpected(make_eof_parse_error(it.error()));
  335|  2.06k|    }
  336|       |
  337|  2.58M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  2.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.32M, False: 1.26M]
  |  |  ------------------
  ------------------
  338|  2.58M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.32M|        return unexpected(parse_error::error);
  340|  1.32M|    }
  341|       |
  342|  1.26M|    return *it;
  343|  2.58M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   639k|{
  178|   639k|    static_assert(ranges::contiguous_range<Range> &&
  179|   639k|                  ranges::sized_range<Range>);
  180|       |
  181|   639k|    std::array<char32_t, 16> cp_buf{};
  182|   639k|    std::array<uint8_t, 16> idx_buf{};
  183|   639k|    auto it = ranges::begin(range);
  184|   639k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 639k, False: 0]
  ------------------
  185|   639k|        auto chunk_begin = it;
  186|   639k|        size_t code_point_count = 0;
  187|   639k|        uint8_t code_unit_idx = 0;
  188|  1.27M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 1.27M, False: 0]
  |  Branch (188:52): [True: 639k, False: 639k]
  ------------------
  189|   639k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 639k, False: 0]
  ------------------
  190|   639k|                idx_buf[code_point_count] = code_unit_idx;
  191|   639k|                ++code_point_count;
  192|   639k|            }
  193|   639k|            ++it;
  194|   639k|            ++code_unit_idx;
  195|   639k|        }
  196|       |
  197|   639k|        auto input = detail::make_string_view_from_pointers(
  198|   639k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   639k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   639k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   639k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 639k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   639k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 639k, False: 0]
  ------------------
  217|   639k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 639k, False: 0]
  ------------------
  218|   639k|                return chunk_begin + idx_buf[i];
  219|   639k|            }
  220|   639k|        }
  221|   639k|    }
  222|       |
  223|      0|    return it;
  224|   639k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   639k|{
  300|   639k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   639k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   639k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   639k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   639k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   639k|        return ranges::next(ranges::begin(range),
  306|   639k|                            ranges::distance(buf.view().begin(), it));
  307|   639k|    }
  308|   639k|    else {
  309|   639k|        auto it = ranges::begin(range);
  310|       |
  311|   639k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   639k|            auto seg = get_contiguous_beginning(range);
  313|   639k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   639k|                seg_it != seg.end()) {
  315|   639k|                return ranges_polyfill::batch_next(
  316|   639k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   639k|            }
  318|   639k|            ranges_polyfill::batch_next(it, seg.size());
  319|   639k|        }
  320|       |
  321|   639k|        return read_while_code_point(
  322|   639k|            SCN_FWD(range),
  ------------------
  |  |  248|   639k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   639k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   639k|    }
  325|   639k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   639k|{
  264|   639k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   639k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   639k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   639k|{
  231|   639k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   639k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   639k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   639k|    }
  235|   639k|    else {
  236|   639k|        auto it = ranges::begin(range);
  237|   639k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   639k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   639k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 639k, False: 0]
  ------------------
  241|   639k|            return ranges_polyfill::batch_next(
  242|   639k|                it, ranges::distance(seg.begin(), seg_it));
  243|   639k|        }
  244|       |
  245|      0|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      0|            const auto [iter, value] =
  247|      0|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|      0|            const auto cp = decode_code_point_exhaustive(value.view());
  249|      0|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 0, False: 0]
  ------------------
  250|      0|                return it;
  251|      0|            }
  252|      0|            it = iter;
  253|      0|        }
  254|       |
  255|      0|        return it;
  256|      0|    }
  257|   639k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   639k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   639k|{
  459|   639k|    auto it = read_code_unit(range);
  460|   639k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 639k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  1.27M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 1.27M, False: 639k]
  ------------------
  465|  1.27M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 1.27M]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  1.27M|    }
  469|       |
  470|   639k|    return unexpected(parse_error::error);
  471|   639k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   191k|{
  482|   191k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 191k, False: 0]
  ------------------
  483|   191k|        return ranges::begin(range);
  484|   191k|    }
  485|      0|    return *result;
  486|   191k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|  1.23M|{
  418|  1.23M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  1.23M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  1.23M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  1.23M|        if (ranges::size(range) < str.size()) {
  423|  1.23M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  1.23M|        }
  425|  1.23M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  1.23M|            return unexpected(parse_error::error);
  427|  1.23M|        }
  428|  1.23M|        return ranges::next(ranges::begin(range), str.size());
  429|  1.23M|    }
  430|  1.23M|    else {
  431|  1.23M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.23M|            if (ch < 'A' || ch > 'Z') {
  433|  1.23M|                return ch;
  434|  1.23M|            }
  435|  1.23M|            return static_cast<char_type>(ch +
  436|  1.23M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.23M|        };
  438|       |
  439|  1.23M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  1.23M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.23M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.23M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 298, False: 1.23M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    298|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    298|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    298|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    298|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    298|    }                                                  \
  |  |  |  |   70|  1.23M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  1.23M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  1.23M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.23M, False: 0]
  |  |  ------------------
  ------------------
  443|  1.23M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  1.23M|                    return ascii_tolower(a) ==
  445|  1.23M|                           static_cast<detail::char_t<Range>>(b);
  446|  1.23M|                }))) {
  447|  1.23M|            return unexpected(parse_error::error);
  448|  1.23M|        }
  449|       |
  450|      0|        return it;
  451|  1.23M|    }
  452|  1.23M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|  1.23M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.23M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 672k, False: 564k]
  |  Branch (432:29): [True: 564k, False: 0]
  ------------------
  433|  1.23M|                return ch;
  434|  1.23M|            }
  435|      0|            return static_cast<char_type>(ch +
  436|      0|                                          static_cast<char_type>('a' - 'A'));
  437|  1.23M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   398k|{
  332|   398k|    auto it = read_code_unit(range);
  333|   398k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   398k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 398k, False: 0]
  |  |  ------------------
  ------------------
  338|   398k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   398k|        return unexpected(parse_error::error);
  340|   398k|    }
  341|       |
  342|      0|    return *it;
  343|   398k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   539k|{
  159|   539k|    auto it = read_while_code_unit(range, pred);
  160|   539k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 315k, False: 224k]
  ------------------
  161|   315k|        return unexpected(parse_error::error);
  162|   315k|    }
  163|   224k|    return it;
  164|   539k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   539k|{
  139|   539k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   539k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   539k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   539k|{
  131|   539k|    return ranges::find_if(range, pred);
  132|   539k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  7.40M|{
   36|  7.40M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  7.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.74k, False: 7.39M]
  |  |  ------------------
  ------------------
   37|  1.74k|        return unexpected(e);
   38|  1.74k|    }
   39|       |
   40|  7.39M|    return ranges::next(ranges::begin(range));
   41|  7.40M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   595k|{
   36|   595k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 595k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   595k|    return ranges::next(ranges::begin(range));
   41|   595k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   709k|{
   48|   709k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   709k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   709k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   709k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   709k|        const auto sz = ranges::ssize(range);
   52|   709k|        if (sz < count) {
   53|   709k|            return unexpected(eof_error::eof);
   54|   709k|        }
   55|       |
   56|   709k|        return ranges::next(ranges::begin(range), count);
   57|   709k|    }
   58|   709k|    else {
   59|   709k|        auto it = ranges::begin(range);
   60|   709k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 709k, False: 300]
  ------------------
   61|   709k|            return ranges_polyfill::batch_next(it, count);
   62|   709k|        }
   63|       |
   64|    600|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 600, False: 0]
  ------------------
   65|    600|             ++i, (void)++it) {
   66|    600|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 300, False: 300]
  ------------------
   67|    300|                return unexpected(eof_error::eof);
   68|    300|            }
   69|    600|        }
   70|       |
   71|      0|        return it;
   72|    300|    }
   73|   709k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  6.39M|{
   36|  6.39M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.06k, False: 6.38M]
  |  |  ------------------
  ------------------
   37|  2.06k|        return unexpected(e);
   38|  2.06k|    }
   39|       |
   40|  6.38M|    return ranges::next(ranges::begin(range));
   41|  6.39M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  8.11M|{
   48|  8.11M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  8.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  8.11M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  8.11M|        const auto sz = ranges::ssize(range);
   52|  8.11M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 106k, False: 8.01M]
  ------------------
   53|   106k|            return unexpected(eof_error::eof);
   54|   106k|        }
   55|       |
   56|  8.01M|        return ranges::next(ranges::begin(range), count);
   57|  8.11M|    }
   58|  8.11M|    else {
   59|  8.11M|        auto it = ranges::begin(range);
   60|  8.11M|        if (guaranteed_minimum_size(range) >= count) {
   61|  8.11M|            return ranges_polyfill::batch_next(it, count);
   62|  8.11M|        }
   63|       |
   64|  8.11M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  8.11M|             ++i, (void)++it) {
   66|  8.11M|            if (it == ranges::end(range)) {
   67|  8.11M|                return unexpected(eof_error::eof);
   68|  8.11M|            }
   69|  8.11M|        }
   70|       |
   71|  8.11M|        return it;
   72|  8.11M|    }
   73|  8.11M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|  1.03M|{
   36|  1.03M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  1.03M|    return ranges::next(ranges::begin(range));
   41|  1.03M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|  1.23M|{
   48|  1.23M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  1.23M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  1.23M|        const auto sz = ranges::ssize(range);
   52|  1.23M|        if (sz < count) {
   53|  1.23M|            return unexpected(eof_error::eof);
   54|  1.23M|        }
   55|       |
   56|  1.23M|        return ranges::next(ranges::begin(range), count);
   57|  1.23M|    }
   58|  1.23M|    else {
   59|  1.23M|        auto it = ranges::begin(range);
   60|  1.23M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 1.23M, False: 298]
  ------------------
   61|  1.23M|            return ranges_polyfill::batch_next(it, count);
   62|  1.23M|        }
   63|       |
   64|    596|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 596, False: 0]
  ------------------
   65|    596|             ++i, (void)++it) {
   66|    596|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 298, False: 298]
  ------------------
   67|    298|                return unexpected(eof_error::eof);
   68|    298|            }
   69|    596|        }
   70|       |
   71|      0|        return it;
   72|    298|    }
   73|  1.23M|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  4.44M|{
   33|  4.44M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  4.44M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|  1.20M|{
   39|  1.20M|    static_assert(std::is_same_v<Locale, std::locale>);
   40|  1.20M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 604k, False: 604k]
  ------------------
   41|  1.20M|                    : std::locale{};
   42|  1.20M|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   620k|    {
  112|   620k|        auto stdloc = loc.get<std::locale>();
  113|   620k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   620k|        grouping = numpunct.grouping();
  115|   620k|        thousands_sep =
  116|   620k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 620k]
  ------------------
  117|   620k|        decimal_point = numpunct.decimal_point();
  118|   620k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   620k|{
   49|   620k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 620k, False: 0]
  ------------------
   50|   620k|        return std::use_facet<Facet>(stdloc);
   51|   620k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   620k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   587k|    {
  112|   587k|        auto stdloc = loc.get<std::locale>();
  113|   587k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   587k|        grouping = numpunct.grouping();
  115|   587k|        thousands_sep =
  116|   587k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 587k]
  ------------------
  117|   587k|        decimal_point = numpunct.decimal_point();
  118|   587k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   587k|{
   49|   587k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 587k, False: 0]
  ------------------
   50|   587k|        return std::use_facet<Facet>(stdloc);
   51|   587k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   587k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  4.39M|{
   46|  4.39M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 4.39M, False: 0]
  ------------------
   47|  4.39M|        auto it = read_while_classic_space(range);
   48|  4.39M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  4.39M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.56k, False: 4.38M]
  |  |  ------------------
  ------------------
   50|  4.56k|            return unexpected(e);
   51|  4.56k|        }
   52|       |
   53|  4.38M|        return it;
   54|  4.39M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  4.39M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  4.78M|    {
  126|  4.78M|        return true;
  127|  4.78M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   368k|{
   46|   368k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 368k, False: 0]
  ------------------
   47|   368k|        auto it = read_while_classic_space(range);
   48|   368k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   368k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   368k|        return it;
   54|   368k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   368k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  3.46M|    {
  131|  3.46M|        reader_error_handler eh{};
  132|  3.46M|        get_derived().check_specs_impl(specs, eh);
  133|  3.46M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  3.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.46M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  3.46M|        return {};
  137|  3.46M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  3.46M|    {
  142|  3.46M|        return static_cast<Derived&>(*this);
  143|  3.46M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  6.73M|    {
   35|  6.73M|        return m_msg == nullptr;
   36|  6.73M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  3.80M|{
   46|  3.80M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 3.80M, False: 0]
  ------------------
   47|  3.80M|        auto it = read_while_classic_space(range);
   48|  3.80M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  3.80M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.18k, False: 3.80M]
  |  |  ------------------
  ------------------
   50|  6.18k|            return unexpected(e);
   51|  6.18k|        }
   52|       |
   53|  3.80M|        return it;
   54|  3.80M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  3.80M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  4.47M|    {
  126|  4.47M|        return true;
  127|  4.47M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  3.26M|    {
  131|  3.26M|        reader_error_handler eh{};
  132|  3.26M|        get_derived().check_specs_impl(specs, eh);
  133|  3.26M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.26M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  3.26M|        return {};
  137|  3.26M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  3.26M|    {
  142|  3.26M|        return static_cast<Derived&>(*this);
  143|  3.26M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   639k|{
   46|   639k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 639k, False: 0]
  ------------------
   47|   639k|        auto it = read_while_classic_space(range);
   48|   639k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   639k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 639k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   639k|        return it;
   54|   639k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   639k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   488k|{
  218|   488k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   488k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   488k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   488k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   488k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   488k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   488k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   488k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   488k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   488k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   488k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   488k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   488k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 16.2k, False: 472k]
  ------------------
  224|  16.2k|        SCN_UNLIKELY_ATTR
  225|  16.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  16.2k|                                     "Invalid integer value");
  227|  16.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   472k|    auto start = source.data();
  231|   472k|    const auto end = source.data() + source.size();
  232|   472k|    {
  233|  1.05M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.03M, False: 11.1k]
  ------------------
  234|  1.03M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 461k, False: 578k]
  ------------------
  235|   461k|                break;
  236|   461k|            }
  237|  1.03M|        }
  238|   472k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   933k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 87.0k, False: 385k]
  |  |  |  Branch (153:45): [True: 11.1k, False: 461k]
  |  |  |  Branch (153:45): [True: 75.8k, False: 385k]
  |  |  ------------------
  ------------------
  239|  87.0k|            value = 0;
  240|  87.0k|            return ranges::next(source.begin(),
  241|  87.0k|                                ranges::distance(source.data(), start));
  242|  87.0k|        }
  243|   472k|    }
  244|       |
  245|   385k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   385k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 278k, False: 106k]
  ------------------
  247|   278k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.36k, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.36k|    }                                                  \
  |  |  |  |   70|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   271k|                             detail::make_string_view_from_pointers(start, end),
  249|   271k|                             value, sign == sign_type::minus_sign));
  250|   271k|            return ranges::next(source.begin(),
  251|   271k|                                ranges::distance(source.data(), ptr));
  252|   278k|        }
  253|   385k|    }
  254|       |
  255|   106k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.56k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.56k|    }                                                  \
  |  |  |  |   70|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   100k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   100k|                     base, sign == sign_type::minus_sign));
  258|   100k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   106k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   448k|{
  218|   448k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   448k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   448k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   448k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   448k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   448k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   448k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   448k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   448k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   448k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   448k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   448k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   448k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 41.6k, False: 407k]
  ------------------
  224|  41.6k|        SCN_UNLIKELY_ATTR
  225|  41.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  41.6k|                                     "Invalid integer value");
  227|  41.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   407k|    auto start = source.data();
  231|   407k|    const auto end = source.data() + source.size();
  232|   407k|    {
  233|   893k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 883k, False: 10.2k]
  ------------------
  234|   883k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 397k, False: 486k]
  ------------------
  235|   397k|                break;
  236|   397k|            }
  237|   883k|        }
  238|   407k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   804k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 76.0k, False: 331k]
  |  |  |  Branch (153:45): [True: 10.2k, False: 397k]
  |  |  |  Branch (153:45): [True: 65.8k, False: 331k]
  |  |  ------------------
  ------------------
  239|  76.0k|            value = 0;
  240|  76.0k|            return ranges::next(source.begin(),
  241|  76.0k|                                ranges::distance(source.data(), start));
  242|  76.0k|        }
  243|   407k|    }
  244|       |
  245|   331k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   331k|        if (base == 10) {
  247|   331k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   331k|                             detail::make_string_view_from_pointers(start, end),
  249|   331k|                             value, sign == sign_type::minus_sign));
  250|   331k|            return ranges::next(source.begin(),
  251|   331k|                                ranges::distance(source.data(), ptr));
  252|   331k|        }
  253|   331k|    }
  254|       |
  255|   331k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   331k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   331k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   331k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.1k, False: 312k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.1k|    }                                                  \
  |  |  |  |   70|   331k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   312k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   312k|                     base, sign == sign_type::minus_sign));
  258|   312k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   331k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   708k|{
  218|   708k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   708k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   708k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   708k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   708k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   708k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   708k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   708k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   708k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   708k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   708k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   708k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   708k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 21.2k, False: 687k]
  ------------------
  224|  21.2k|        SCN_UNLIKELY_ATTR
  225|  21.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  21.2k|                                     "Invalid integer value");
  227|  21.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   687k|    auto start = source.data();
  231|   687k|    const auto end = source.data() + source.size();
  232|   687k|    {
  233|  1.42M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.41M, False: 16.3k]
  ------------------
  234|  1.41M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 671k, False: 742k]
  ------------------
  235|   671k|                break;
  236|   671k|            }
  237|  1.41M|        }
  238|   687k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 140k, False: 546k]
  |  |  |  Branch (153:45): [True: 16.3k, False: 671k]
  |  |  |  Branch (153:45): [True: 124k, False: 546k]
  |  |  ------------------
  ------------------
  239|   140k|            value = 0;
  240|   140k|            return ranges::next(source.begin(),
  241|   140k|                                ranges::distance(source.data(), start));
  242|   140k|        }
  243|   687k|    }
  244|       |
  245|   546k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   546k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 365k, False: 180k]
  ------------------
  247|   365k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   365k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   365k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   365k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.79k, False: 363k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.79k|    }                                                  \
  |  |  |  |   70|   365k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   363k|                             detail::make_string_view_from_pointers(start, end),
  249|   363k|                             value, sign == sign_type::minus_sign));
  250|   363k|            return ranges::next(source.begin(),
  251|   363k|                                ranges::distance(source.data(), ptr));
  252|   365k|        }
  253|   546k|    }
  254|       |
  255|   180k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   180k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   180k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   180k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.14k, False: 178k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.14k|    }                                                  \
  |  |  |  |   70|   180k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   178k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   178k|                     base, sign == sign_type::minus_sign));
  258|   178k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   180k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   633k|{
  218|   633k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   633k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   633k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   633k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   633k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   633k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   633k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   633k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   633k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   633k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   633k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   633k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   633k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 44.9k, False: 588k]
  ------------------
  224|  44.9k|        SCN_UNLIKELY_ATTR
  225|  44.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  44.9k|                                     "Invalid integer value");
  227|  44.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   588k|    auto start = source.data();
  231|   588k|    const auto end = source.data() + source.size();
  232|   588k|    {
  233|  1.21M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.20M, False: 14.6k]
  ------------------
  234|  1.20M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 574k, False: 630k]
  ------------------
  235|   574k|                break;
  236|   574k|            }
  237|  1.20M|        }
  238|   588k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 121k, False: 467k]
  |  |  |  Branch (153:45): [True: 14.6k, False: 574k]
  |  |  |  Branch (153:45): [True: 107k, False: 467k]
  |  |  ------------------
  ------------------
  239|   121k|            value = 0;
  240|   121k|            return ranges::next(source.begin(),
  241|   121k|                                ranges::distance(source.data(), start));
  242|   121k|        }
  243|   588k|    }
  244|       |
  245|   467k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   467k|        if (base == 10) {
  247|   467k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   467k|                             detail::make_string_view_from_pointers(start, end),
  249|   467k|                             value, sign == sign_type::minus_sign));
  250|   467k|            return ranges::next(source.begin(),
  251|   467k|                                ranges::distance(source.data(), ptr));
  252|   467k|        }
  253|   467k|    }
  254|       |
  255|   467k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   467k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   467k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   467k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   467k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.79k, False: 463k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.79k|    }                                                  \
  |  |  |  |   70|   467k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   463k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   463k|                     base, sign == sign_type::minus_sign));
  258|   463k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   467k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   722k|{
  218|   722k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   722k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   722k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   722k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   722k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 22.5k, False: 700k]
  ------------------
  224|  22.5k|        SCN_UNLIKELY_ATTR
  225|  22.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  22.5k|                                     "Invalid integer value");
  227|  22.5k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   700k|    auto start = source.data();
  231|   700k|    const auto end = source.data() + source.size();
  232|   700k|    {
  233|  1.45M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.43M, False: 16.6k]
  ------------------
  234|  1.43M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 683k, False: 755k]
  ------------------
  235|   683k|                break;
  236|   683k|            }
  237|  1.43M|        }
  238|   700k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 142k, False: 557k]
  |  |  |  Branch (153:45): [True: 16.6k, False: 683k]
  |  |  |  Branch (153:45): [True: 126k, False: 557k]
  |  |  ------------------
  ------------------
  239|   142k|            value = 0;
  240|   142k|            return ranges::next(source.begin(),
  241|   142k|                                ranges::distance(source.data(), start));
  242|   142k|        }
  243|   700k|    }
  244|       |
  245|   557k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   557k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 372k, False: 184k]
  ------------------
  247|   372k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   372k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   372k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   372k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.63k, False: 371k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.63k|    }                                                  \
  |  |  |  |   70|   372k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   371k|                             detail::make_string_view_from_pointers(start, end),
  249|   371k|                             value, sign == sign_type::minus_sign));
  250|   371k|            return ranges::next(source.begin(),
  251|   371k|                                ranges::distance(source.data(), ptr));
  252|   372k|        }
  253|   557k|    }
  254|       |
  255|   184k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   184k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   184k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   184k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.19k, False: 183k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.19k|    }                                                  \
  |  |  |  |   70|   184k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   183k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   183k|                     base, sign == sign_type::minus_sign));
  258|   183k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   184k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   643k|{
  218|   643k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   643k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   643k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   643k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   643k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 45.8k, False: 597k]
  ------------------
  224|  45.8k|        SCN_UNLIKELY_ATTR
  225|  45.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  45.8k|                                     "Invalid integer value");
  227|  45.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   597k|    auto start = source.data();
  231|   597k|    const auto end = source.data() + source.size();
  232|   597k|    {
  233|  1.23M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.22M, False: 14.7k]
  ------------------
  234|  1.22M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 582k, False: 641k]
  ------------------
  235|   582k|                break;
  236|   582k|            }
  237|  1.22M|        }
  238|   597k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 122k, False: 474k]
  |  |  |  Branch (153:45): [True: 14.7k, False: 582k]
  |  |  |  Branch (153:45): [True: 107k, False: 474k]
  |  |  ------------------
  ------------------
  239|   122k|            value = 0;
  240|   122k|            return ranges::next(source.begin(),
  241|   122k|                                ranges::distance(source.data(), start));
  242|   122k|        }
  243|   597k|    }
  244|       |
  245|   474k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   474k|        if (base == 10) {
  247|   474k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   474k|                             detail::make_string_view_from_pointers(start, end),
  249|   474k|                             value, sign == sign_type::minus_sign));
  250|   474k|            return ranges::next(source.begin(),
  251|   474k|                                ranges::distance(source.data(), ptr));
  252|   474k|        }
  253|   474k|    }
  254|       |
  255|   474k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   474k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   474k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   474k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.23k, False: 472k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.23k|    }                                                  \
  |  |  |  |   70|   474k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   472k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   472k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   472k|                     base, sign == sign_type::minus_sign));
  258|   472k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   474k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   472k|{
  218|   472k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   472k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   472k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   472k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   472k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   472k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   472k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   472k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   472k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   472k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   472k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   472k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   472k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 13.4k, False: 459k]
  ------------------
  224|  13.4k|        SCN_UNLIKELY_ATTR
  225|  13.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  13.4k|                                     "Invalid integer value");
  227|  13.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   459k|    auto start = source.data();
  231|   459k|    const auto end = source.data() + source.size();
  232|   459k|    {
  233|  1.06M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.05M, False: 12.3k]
  ------------------
  234|  1.05M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 446k, False: 610k]
  ------------------
  235|   446k|                break;
  236|   446k|            }
  237|  1.05M|        }
  238|   459k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   905k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 101k, False: 357k]
  |  |  |  Branch (153:45): [True: 12.3k, False: 446k]
  |  |  |  Branch (153:45): [True: 88.7k, False: 357k]
  |  |  ------------------
  ------------------
  239|   101k|            value = 0;
  240|   101k|            return ranges::next(source.begin(),
  241|   101k|                                ranges::distance(source.data(), start));
  242|   101k|        }
  243|   459k|    }
  244|       |
  245|   357k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   357k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 244k, False: 113k]
  ------------------
  247|   244k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   244k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   244k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   244k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.00k, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.00k|    }                                                  \
  |  |  |  |   70|   244k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   240k|                             detail::make_string_view_from_pointers(start, end),
  249|   240k|                             value, sign == sign_type::minus_sign));
  250|   240k|            return ranges::next(source.begin(),
  251|   240k|                                ranges::distance(source.data(), ptr));
  252|   244k|        }
  253|   357k|    }
  254|       |
  255|   113k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.89k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.89k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.89k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.89k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.89k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.89k|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   110k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   110k|                     base, sign == sign_type::minus_sign));
  258|   110k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   113k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   439k|{
  218|   439k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   439k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   439k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   439k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   439k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   439k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   439k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   439k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   439k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   439k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   439k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   439k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   439k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 39.6k, False: 399k]
  ------------------
  224|  39.6k|        SCN_UNLIKELY_ATTR
  225|  39.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  39.6k|                                     "Invalid integer value");
  227|  39.6k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   399k|    auto start = source.data();
  231|   399k|    const auto end = source.data() + source.size();
  232|   399k|    {
  233|   916k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 905k, False: 11.2k]
  ------------------
  234|   905k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 388k, False: 516k]
  ------------------
  235|   388k|                break;
  236|   388k|            }
  237|   905k|        }
  238|   399k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   788k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 89.3k, False: 310k]
  |  |  |  Branch (153:45): [True: 11.2k, False: 388k]
  |  |  |  Branch (153:45): [True: 78.0k, False: 310k]
  |  |  ------------------
  ------------------
  239|  89.3k|            value = 0;
  240|  89.3k|            return ranges::next(source.begin(),
  241|  89.3k|                                ranges::distance(source.data(), start));
  242|  89.3k|        }
  243|   399k|    }
  244|       |
  245|   310k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   310k|        if (base == 10) {
  247|   310k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   310k|                             detail::make_string_view_from_pointers(start, end),
  249|   310k|                             value, sign == sign_type::minus_sign));
  250|   310k|            return ranges::next(source.begin(),
  251|   310k|                                ranges::distance(source.data(), ptr));
  252|   310k|        }
  253|   310k|    }
  254|       |
  255|   310k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   310k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.60k, False: 304k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.60k|    }                                                  \
  |  |  |  |   70|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   304k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   304k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   304k|                     base, sign == sign_type::minus_sign));
  258|   304k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   310k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   584k|{
  218|   584k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   584k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   584k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   584k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   584k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   584k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   584k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   584k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   584k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   584k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   584k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   584k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   584k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 15.3k, False: 569k]
  ------------------
  224|  15.3k|        SCN_UNLIKELY_ATTR
  225|  15.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  15.3k|                                     "Invalid integer value");
  227|  15.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   569k|    auto start = source.data();
  231|   569k|    const auto end = source.data() + source.size();
  232|   569k|    {
  233|  1.25M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.23M, False: 14.5k]
  ------------------
  234|  1.23M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 554k, False: 684k]
  ------------------
  235|   554k|                break;
  236|   554k|            }
  237|  1.23M|        }
  238|   569k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 125k, False: 443k]
  |  |  |  Branch (153:45): [True: 14.5k, False: 554k]
  |  |  |  Branch (153:45): [True: 111k, False: 443k]
  |  |  ------------------
  ------------------
  239|   125k|            value = 0;
  240|   125k|            return ranges::next(source.begin(),
  241|   125k|                                ranges::distance(source.data(), start));
  242|   125k|        }
  243|   569k|    }
  244|       |
  245|   443k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   443k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 298k, False: 145k]
  ------------------
  247|   298k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.41k, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.41k|    }                                                  \
  |  |  |  |   70|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   297k|                             detail::make_string_view_from_pointers(start, end),
  249|   297k|                             value, sign == sign_type::minus_sign));
  250|   297k|            return ranges::next(source.begin(),
  251|   297k|                                ranges::distance(source.data(), ptr));
  252|   298k|        }
  253|   443k|    }
  254|       |
  255|   145k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.17k, False: 144k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.17k|    }                                                  \
  |  |  |  |   70|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   144k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   144k|                     base, sign == sign_type::minus_sign));
  258|   144k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   145k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   531k|{
  218|   531k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   531k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   531k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   531k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   531k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   531k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   531k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   531k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   531k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   531k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   531k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   531k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   531k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 41.0k, False: 490k]
  ------------------
  224|  41.0k|        SCN_UNLIKELY_ATTR
  225|  41.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  41.0k|                                     "Invalid integer value");
  227|  41.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   490k|    auto start = source.data();
  231|   490k|    const auto end = source.data() + source.size();
  232|   490k|    {
  233|  1.06M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.05M, False: 12.9k]
  ------------------
  234|  1.05M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 477k, False: 578k]
  ------------------
  235|   477k|                break;
  236|   477k|            }
  237|  1.05M|        }
  238|   490k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   968k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 108k, False: 382k]
  |  |  |  Branch (153:45): [True: 12.9k, False: 477k]
  |  |  |  Branch (153:45): [True: 95.5k, False: 382k]
  |  |  ------------------
  ------------------
  239|   108k|            value = 0;
  240|   108k|            return ranges::next(source.begin(),
  241|   108k|                                ranges::distance(source.data(), start));
  242|   108k|        }
  243|   490k|    }
  244|       |
  245|   382k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   382k|        if (base == 10) {
  247|   382k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   382k|                             detail::make_string_view_from_pointers(start, end),
  249|   382k|                             value, sign == sign_type::minus_sign));
  250|   382k|            return ranges::next(source.begin(),
  251|   382k|                                ranges::distance(source.data(), ptr));
  252|   382k|        }
  253|   382k|    }
  254|       |
  255|   382k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   382k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   382k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   382k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   382k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.15k, False: 379k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.15k|    }                                                  \
  |  |  |  |   70|   382k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   379k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   379k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   379k|                     base, sign == sign_type::minus_sign));
  258|   379k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   382k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   589k|{
  218|   589k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   589k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   589k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   589k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   589k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   589k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   589k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   589k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   589k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   589k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   589k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   589k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   589k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 15.7k, False: 573k]
  ------------------
  224|  15.7k|        SCN_UNLIKELY_ATTR
  225|  15.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  15.7k|                                     "Invalid integer value");
  227|  15.7k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   573k|    auto start = source.data();
  231|   573k|    const auto end = source.data() + source.size();
  232|   573k|    {
  233|  1.26M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.24M, False: 14.7k]
  ------------------
  234|  1.24M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 558k, False: 688k]
  ------------------
  235|   558k|                break;
  236|   558k|            }
  237|  1.24M|        }
  238|   573k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 126k, False: 446k]
  |  |  |  Branch (153:45): [True: 14.7k, False: 558k]
  |  |  |  Branch (153:45): [True: 111k, False: 446k]
  |  |  ------------------
  ------------------
  239|   126k|            value = 0;
  240|   126k|            return ranges::next(source.begin(),
  241|   126k|                                ranges::distance(source.data(), start));
  242|   126k|        }
  243|   573k|    }
  244|       |
  245|   446k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   446k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 300k, False: 146k]
  ------------------
  247|   300k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   300k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   300k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   300k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 710, False: 299k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    710|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    710|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    710|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    710|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    710|    }                                                  \
  |  |  |  |   70|   300k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   299k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   299k|                             detail::make_string_view_from_pointers(start, end),
  249|   299k|                             value, sign == sign_type::minus_sign));
  250|   299k|            return ranges::next(source.begin(),
  251|   299k|                                ranges::distance(source.data(), ptr));
  252|   300k|        }
  253|   446k|    }
  254|       |
  255|   146k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 633, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    633|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    633|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    633|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    633|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    633|    }                                                  \
  |  |  |  |   70|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   145k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   145k|                     base, sign == sign_type::minus_sign));
  258|   145k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   146k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   534k|{
  218|   534k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   534k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   534k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   534k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   534k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   534k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   534k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   534k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   534k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   534k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   534k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   534k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   534k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 41.2k, False: 493k]
  ------------------
  224|  41.2k|        SCN_UNLIKELY_ATTR
  225|  41.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  41.2k|                                     "Invalid integer value");
  227|  41.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   493k|    auto start = source.data();
  231|   493k|    const auto end = source.data() + source.size();
  232|   493k|    {
  233|  1.07M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.06M, False: 12.9k]
  ------------------
  234|  1.06M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 480k, False: 580k]
  ------------------
  235|   480k|                break;
  236|   480k|            }
  237|  1.06M|        }
  238|   493k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   973k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 108k, False: 384k]
  |  |  |  Branch (153:45): [True: 12.9k, False: 480k]
  |  |  |  Branch (153:45): [True: 95.8k, False: 384k]
  |  |  ------------------
  ------------------
  239|   108k|            value = 0;
  240|   108k|            return ranges::next(source.begin(),
  241|   108k|                                ranges::distance(source.data(), start));
  242|   108k|        }
  243|   493k|    }
  244|       |
  245|   384k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   384k|        if (base == 10) {
  247|   384k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   384k|                             detail::make_string_view_from_pointers(start, end),
  249|   384k|                             value, sign == sign_type::minus_sign));
  250|   384k|            return ranges::next(source.begin(),
  251|   384k|                                ranges::distance(source.data(), ptr));
  252|   384k|        }
  253|   384k|    }
  254|       |
  255|   384k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   384k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   384k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   384k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.07k, False: 383k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.07k|    }                                                  \
  |  |  |  |   70|   384k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   383k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   383k|                     base, sign == sign_type::minus_sign));
  258|   383k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   384k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   716k|{
  126|   716k|    auto max_digits = maxdigits_u64(base);
  127|   716k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.19k, False: 713k]
  ------------------
  128|  3.19k|        return true;
  129|  3.19k|    }
  130|   713k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 715, False: 712k]
  |  Branch (130:39): [True: 96, False: 619]
  ------------------
  131|     96|        return true;
  132|     96|    }
  133|   713k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   713k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 29.7k, False: 683k]
  ------------------
  135|   713k|                      static_cast<uint64_t>(is_negative)) {
  136|  29.7k|            SCN_UNLIKELY_ATTR
  137|  29.7k|            return true;
  138|  29.7k|        }
  139|   713k|    }
  140|       |
  141|   683k|    return false;
  142|   713k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  5.08M|{
   96|  5.08M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  5.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  5.08M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  5.33k|{
  116|  5.33k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  5.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  5.33k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   683k|{
  147|   683k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 76.3k, False: 607k]
  ------------------
  148|  76.3k|        SCN_MSVC_PUSH
  149|  76.3k|        SCN_MSVC_IGNORE(4146)
  150|  76.3k|        return static_cast<T>(
  151|  76.3k|            -std::numeric_limits<T>::max() -
  152|  76.3k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  76.3k|        SCN_MSVC_POP
  154|  76.3k|    }
  155|       |
  156|   607k|    return static_cast<T>(u64val);
  157|   683k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|  1.01M|{
  126|  1.01M|    auto max_digits = maxdigits_u64(base);
  127|  1.01M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.58k, False: 1.00M]
  ------------------
  128|  3.58k|        return true;
  129|  3.58k|    }
  130|  1.00M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.02k, False: 1.00M]
  |  Branch (130:39): [True: 98, False: 927]
  ------------------
  131|     98|        return true;
  132|     98|    }
  133|  1.00M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.00M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 5.04k, False: 1.00M]
  ------------------
  135|  1.00M|                      static_cast<uint64_t>(is_negative)) {
  136|  5.04k|            SCN_UNLIKELY_ATTR
  137|  5.04k|            return true;
  138|  5.04k|        }
  139|  1.00M|    }
  140|       |
  141|  1.00M|    return false;
  142|  1.00M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|  1.00M|{
  147|  1.00M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 94.2k, False: 910k]
  ------------------
  148|  94.2k|        SCN_MSVC_PUSH
  149|  94.2k|        SCN_MSVC_IGNORE(4146)
  150|  94.2k|        return static_cast<T>(
  151|  94.2k|            -std::numeric_limits<T>::max() -
  152|  94.2k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  94.2k|        SCN_MSVC_POP
  154|  94.2k|    }
  155|       |
  156|   910k|    return static_cast<T>(u64val);
  157|  1.00M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|  1.03M|{
  126|  1.03M|    auto max_digits = maxdigits_u64(base);
  127|  1.03M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 4.08k, False: 1.02M]
  ------------------
  128|  4.08k|        return true;
  129|  4.08k|    }
  130|  1.02M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.40k, False: 1.02M]
  |  Branch (130:39): [True: 98, False: 1.30k]
  ------------------
  131|     98|        return true;
  132|     98|    }
  133|  1.02M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.02M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 879, False: 1.02M]
  ------------------
  135|  1.02M|                      static_cast<uint64_t>(is_negative)) {
  136|    879|            SCN_UNLIKELY_ATTR
  137|    879|            return true;
  138|    879|        }
  139|  1.02M|    }
  140|       |
  141|  1.02M|    return false;
  142|  1.02M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|  1.02M|{
  147|  1.02M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 97.4k, False: 929k]
  ------------------
  148|  97.4k|        SCN_MSVC_PUSH
  149|  97.4k|        SCN_MSVC_IGNORE(4146)
  150|  97.4k|        return static_cast<T>(
  151|  97.4k|            -std::numeric_limits<T>::max() -
  152|  97.4k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|  97.4k|        SCN_MSVC_POP
  154|  97.4k|    }
  155|       |
  156|   929k|    return static_cast<T>(u64val);
  157|  1.02M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   668k|{
  126|   668k|    auto max_digits = maxdigits_u64(base);
  127|   668k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.99k, False: 666k]
  ------------------
  128|  1.99k|        return true;
  129|  1.99k|    }
  130|   666k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 487, False: 665k]
  |  Branch (130:39): [True: 72, False: 415]
  ------------------
  131|     72|        return true;
  132|     72|    }
  133|   666k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   666k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 10.4k, False: 655k]
  ------------------
  135|   666k|                      static_cast<uint64_t>(is_negative)) {
  136|  10.4k|            SCN_UNLIKELY_ATTR
  137|  10.4k|            return true;
  138|  10.4k|        }
  139|   666k|    }
  140|       |
  141|   655k|    return false;
  142|   666k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   655k|{
  147|   655k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 655k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   655k|    return static_cast<T>(u64val);
  157|   655k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   825k|{
  126|   825k|    auto max_digits = maxdigits_u64(base);
  127|   825k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.28k, False: 823k]
  ------------------
  128|  2.28k|        return true;
  129|  2.28k|    }
  130|   823k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 687, False: 822k]
  |  Branch (130:39): [True: 72, False: 615]
  ------------------
  131|     72|        return true;
  132|     72|    }
  133|   823k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   823k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 2.39k, False: 821k]
  ------------------
  135|   823k|                      static_cast<uint64_t>(is_negative)) {
  136|  2.39k|            SCN_UNLIKELY_ATTR
  137|  2.39k|            return true;
  138|  2.39k|        }
  139|   823k|    }
  140|       |
  141|   821k|    return false;
  142|   823k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   821k|{
  147|   821k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 821k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   821k|    return static_cast<T>(u64val);
  157|   821k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|   831k|{
  126|   831k|    auto max_digits = maxdigits_u64(base);
  127|   831k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.34k, False: 828k]
  ------------------
  128|  2.34k|        return true;
  129|  2.34k|    }
  130|   828k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 1.01k, False: 827k]
  |  Branch (130:39): [True: 72, False: 945]
  ------------------
  131|     72|        return true;
  132|     72|    }
  133|   828k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   828k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 828k]
  ------------------
  135|   828k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   828k|    }
  140|       |
  141|   828k|    return false;
  142|   828k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   828k|{
  147|   828k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 828k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   828k|    return static_cast<T>(u64val);
  157|   828k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|  1.45M|{
   34|  1.45M|    uint64_t val{};
   35|  1.45M|    std::memcpy(&val, input, sizeof(uint64_t));
   36|  1.45M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  542|  1.45M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (542:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|  1.45M|    return val;
   40|  1.45M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  68.6k|{
   44|  68.6k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  68.6k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  68.6k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  68.6k|    word -= 0x3030303030303030;
   48|  68.6k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  68.6k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  68.6k|    return static_cast<uint32_t>(word);
   51|  68.6k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|  1.38M|{
   55|  1.38M|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|  1.38M|              0x8080808080808080));
   57|  1.38M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   278k|{
  164|   278k|    uint64_t u64val{};
  165|   278k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   278k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   278k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   278k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.36k, False: 271k]
  |  |  ------------------
  ------------------
  170|   278k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  7.36k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  7.36k|                                     "Integer overflow");
  173|  7.36k|    }
  174|       |
  175|   271k|    val = store_result<T>(u64val, is_negative);
  176|   271k|    return ptr;
  177|   278k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  1.86M|{
   76|  1.86M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  4.43M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 3.91M, False: 513k]
  ------------------
   79|  3.91M|        const auto digit = char_to_int(*begin);
   80|  3.91M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 1.34M, False: 2.57M]
  ------------------
   81|  1.34M|            break;
   82|  1.34M|        }
   83|  2.57M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  2.57M|        ++begin;
   85|  2.57M|    }
   86|       |
   87|  1.86M|    return begin;
   88|  1.86M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  1.86M|{
   63|  1.86M|    while (
   64|  1.92M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 1.38M, False: 546k]
  ------------------
   65|  1.92M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 68.6k, False: 1.31M]
  ------------------
   66|  68.6k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  68.6k|                                      get_eight_digits_word(p));
   68|  68.6k|        p += 8;
   69|  68.6k|    }
   70|  1.86M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   106k|{
  185|   106k|    uint64_t u64val{};
  186|   106k|    const CharT* begin = input.data();
  187|   106k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   314k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 294k, False: 19.3k]
  ------------------
  190|   294k|        const auto digit = char_to_int(*begin);
  191|   294k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 87.3k, False: 207k]
  ------------------
  192|  87.3k|            break;
  193|  87.3k|        }
  194|   207k|        u64val =
  195|   207k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   207k|        ++begin;
  197|   207k|    }
  198|       |
  199|   106k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   106k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.56k, False: 100k]
  |  |  ------------------
  ------------------
  201|   106k|                                               is_negative))) {
  202|  6.56k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  6.56k|                                     "Integer overflow");
  204|  6.56k|    }
  205|       |
  206|   100k|    val = store_result<T>(u64val, is_negative);
  207|   100k|    return begin;
  208|   106k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   331k|{
  185|   331k|    uint64_t u64val{};
  186|   331k|    const CharT* begin = input.data();
  187|   331k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   936k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 831k, False: 104k]
  ------------------
  190|   831k|        const auto digit = char_to_int(*begin);
  191|   831k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 226k, False: 605k]
  ------------------
  192|   226k|            break;
  193|   226k|        }
  194|   605k|        u64val =
  195|   605k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   605k|        ++begin;
  197|   605k|    }
  198|       |
  199|   331k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   331k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   331k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 19.1k, False: 312k]
  |  |  ------------------
  ------------------
  201|   331k|                                               is_negative))) {
  202|  19.1k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  19.1k|                                     "Integer overflow");
  204|  19.1k|    }
  205|       |
  206|   312k|    val = store_result<T>(u64val, is_negative);
  207|   312k|    return begin;
  208|   331k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   365k|{
  164|   365k|    uint64_t u64val{};
  165|   365k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   365k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   365k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   365k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.79k, False: 363k]
  |  |  ------------------
  ------------------
  170|   365k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.79k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.79k|                                     "Integer overflow");
  173|  2.79k|    }
  174|       |
  175|   363k|    val = store_result<T>(u64val, is_negative);
  176|   363k|    return ptr;
  177|   365k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   180k|{
  185|   180k|    uint64_t u64val{};
  186|   180k|    const CharT* begin = input.data();
  187|   180k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   507k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 484k, False: 23.4k]
  ------------------
  190|   484k|        const auto digit = char_to_int(*begin);
  191|   484k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 156k, False: 327k]
  ------------------
  192|   156k|            break;
  193|   156k|        }
  194|   327k|        u64val =
  195|   327k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   327k|        ++begin;
  197|   327k|    }
  198|       |
  199|   180k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   180k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   180k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.14k, False: 178k]
  |  |  ------------------
  ------------------
  201|   180k|                                               is_negative))) {
  202|  2.14k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.14k|                                     "Integer overflow");
  204|  2.14k|    }
  205|       |
  206|   178k|    val = store_result<T>(u64val, is_negative);
  207|   178k|    return begin;
  208|   180k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   467k|{
  185|   467k|    uint64_t u64val{};
  186|   467k|    const CharT* begin = input.data();
  187|   467k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.30M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.17M, False: 123k]
  ------------------
  190|  1.17M|        const auto digit = char_to_int(*begin);
  191|  1.17M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 343k, False: 833k]
  ------------------
  192|   343k|            break;
  193|   343k|        }
  194|   833k|        u64val =
  195|   833k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   833k|        ++begin;
  197|   833k|    }
  198|       |
  199|   467k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   467k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   467k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.79k, False: 463k]
  |  |  ------------------
  ------------------
  201|   467k|                                               is_negative))) {
  202|  3.79k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.79k|                                     "Integer overflow");
  204|  3.79k|    }
  205|       |
  206|   463k|    val = store_result<T>(u64val, is_negative);
  207|   463k|    return begin;
  208|   467k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   372k|{
  164|   372k|    uint64_t u64val{};
  165|   372k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   372k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   372k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   372k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.63k, False: 371k]
  |  |  ------------------
  ------------------
  170|   372k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.63k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.63k|                                     "Integer overflow");
  173|  1.63k|    }
  174|       |
  175|   371k|    val = store_result<T>(u64val, is_negative);
  176|   371k|    return ptr;
  177|   372k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   184k|{
  185|   184k|    uint64_t u64val{};
  186|   184k|    const CharT* begin = input.data();
  187|   184k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   531k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 507k, False: 24.1k]
  ------------------
  190|   507k|        const auto digit = char_to_int(*begin);
  191|   507k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 160k, False: 346k]
  ------------------
  192|   160k|            break;
  193|   160k|        }
  194|   346k|        u64val =
  195|   346k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   346k|        ++begin;
  197|   346k|    }
  198|       |
  199|   184k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   184k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.19k, False: 183k]
  |  |  ------------------
  ------------------
  201|   184k|                                               is_negative))) {
  202|  1.19k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.19k|                                     "Integer overflow");
  204|  1.19k|    }
  205|       |
  206|   183k|    val = store_result<T>(u64val, is_negative);
  207|   183k|    return begin;
  208|   184k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   474k|{
  185|   474k|    uint64_t u64val{};
  186|   474k|    const CharT* begin = input.data();
  187|   474k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.34M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.21M, False: 125k]
  ------------------
  190|  1.21M|        const auto digit = char_to_int(*begin);
  191|  1.21M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 349k, False: 866k]
  ------------------
  192|   349k|            break;
  193|   349k|        }
  194|   866k|        u64val =
  195|   866k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   866k|        ++begin;
  197|   866k|    }
  198|       |
  199|   474k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   474k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   474k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.23k, False: 472k]
  |  |  ------------------
  ------------------
  201|   474k|                                               is_negative))) {
  202|  2.23k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.23k|                                     "Integer overflow");
  204|  2.23k|    }
  205|       |
  206|   472k|    val = store_result<T>(u64val, is_negative);
  207|   472k|    return begin;
  208|   474k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   244k|{
  164|   244k|    uint64_t u64val{};
  165|   244k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   244k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   244k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   244k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.00k, False: 240k]
  |  |  ------------------
  ------------------
  170|   244k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  4.00k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  4.00k|                                     "Integer overflow");
  173|  4.00k|    }
  174|       |
  175|   240k|    val = store_result<T>(u64val, is_negative);
  176|   240k|    return ptr;
  177|   244k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   113k|{
  185|   113k|    uint64_t u64val{};
  186|   113k|    const CharT* begin = input.data();
  187|   113k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   305k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 286k, False: 18.4k]
  ------------------
  190|   286k|        const auto digit = char_to_int(*begin);
  191|   286k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 95.0k, False: 191k]
  ------------------
  192|  95.0k|            break;
  193|  95.0k|        }
  194|   191k|        u64val =
  195|   191k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   191k|        ++begin;
  197|   191k|    }
  198|       |
  199|   113k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   113k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.89k, False: 110k]
  |  |  ------------------
  ------------------
  201|   113k|                                               is_negative))) {
  202|  2.89k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.89k|                                     "Integer overflow");
  204|  2.89k|    }
  205|       |
  206|   110k|    val = store_result<T>(u64val, is_negative);
  207|   110k|    return begin;
  208|   113k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   310k|{
  185|   310k|    uint64_t u64val{};
  186|   310k|    const CharT* begin = input.data();
  187|   310k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   841k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 743k, False: 98.0k]
  ------------------
  190|   743k|        const auto digit = char_to_int(*begin);
  191|   743k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 212k, False: 531k]
  ------------------
  192|   212k|            break;
  193|   212k|        }
  194|   531k|        u64val =
  195|   531k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   531k|        ++begin;
  197|   531k|    }
  198|       |
  199|   310k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   310k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.60k, False: 304k]
  |  |  ------------------
  ------------------
  201|   310k|                                               is_negative))) {
  202|  5.60k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  5.60k|                                     "Integer overflow");
  204|  5.60k|    }
  205|       |
  206|   304k|    val = store_result<T>(u64val, is_negative);
  207|   304k|    return begin;
  208|   310k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   298k|{
  164|   298k|    uint64_t u64val{};
  165|   298k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   298k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   298k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   298k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.41k, False: 297k]
  |  |  ------------------
  ------------------
  170|   298k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.41k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.41k|                                     "Integer overflow");
  173|  1.41k|    }
  174|       |
  175|   297k|    val = store_result<T>(u64val, is_negative);
  176|   297k|    return ptr;
  177|   298k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   145k|{
  185|   145k|    uint64_t u64val{};
  186|   145k|    const CharT* begin = input.data();
  187|   145k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   394k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 373k, False: 20.5k]
  ------------------
  190|   373k|        const auto digit = char_to_int(*begin);
  191|   373k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 124k, False: 249k]
  ------------------
  192|   124k|            break;
  193|   124k|        }
  194|   249k|        u64val =
  195|   249k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   249k|        ++begin;
  197|   249k|    }
  198|       |
  199|   145k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   145k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.17k, False: 144k]
  |  |  ------------------
  ------------------
  201|   145k|                                               is_negative))) {
  202|  1.17k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.17k|                                     "Integer overflow");
  204|  1.17k|    }
  205|       |
  206|   144k|    val = store_result<T>(u64val, is_negative);
  207|   144k|    return begin;
  208|   145k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   382k|{
  185|   382k|    uint64_t u64val{};
  186|   382k|    const CharT* begin = input.data();
  187|   382k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.04M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 932k, False: 107k]
  ------------------
  190|   932k|        const auto digit = char_to_int(*begin);
  191|   932k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 274k, False: 657k]
  ------------------
  192|   274k|            break;
  193|   274k|        }
  194|   657k|        u64val =
  195|   657k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   657k|        ++begin;
  197|   657k|    }
  198|       |
  199|   382k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   382k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   382k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.15k, False: 379k]
  |  |  ------------------
  ------------------
  201|   382k|                                               is_negative))) {
  202|  2.15k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.15k|                                     "Integer overflow");
  204|  2.15k|    }
  205|       |
  206|   379k|    val = store_result<T>(u64val, is_negative);
  207|   379k|    return begin;
  208|   382k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   300k|{
  164|   300k|    uint64_t u64val{};
  165|   300k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   300k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   300k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   300k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 710, False: 299k]
  |  |  ------------------
  ------------------
  170|   300k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    710|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    710|                                     "Integer overflow");
  173|    710|    }
  174|       |
  175|   299k|    val = store_result<T>(u64val, is_negative);
  176|   299k|    return ptr;
  177|   300k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   146k|{
  185|   146k|    uint64_t u64val{};
  186|   146k|    const CharT* begin = input.data();
  187|   146k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   402k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 381k, False: 20.6k]
  ------------------
  190|   381k|        const auto digit = char_to_int(*begin);
  191|   381k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 125k, False: 255k]
  ------------------
  192|   125k|            break;
  193|   125k|        }
  194|   255k|        u64val =
  195|   255k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   255k|        ++begin;
  197|   255k|    }
  198|       |
  199|   146k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   146k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 633, False: 145k]
  |  |  ------------------
  ------------------
  201|   146k|                                               is_negative))) {
  202|    633|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    633|                                     "Integer overflow");
  204|    633|    }
  205|       |
  206|   145k|    val = store_result<T>(u64val, is_negative);
  207|   145k|    return begin;
  208|   146k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   384k|{
  185|   384k|    uint64_t u64val{};
  186|   384k|    const CharT* begin = input.data();
  187|   384k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.05M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 945k, False: 108k]
  ------------------
  190|   945k|        const auto digit = char_to_int(*begin);
  191|   945k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 276k, False: 669k]
  ------------------
  192|   276k|            break;
  193|   276k|        }
  194|   669k|        u64val =
  195|   669k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   669k|        ++begin;
  197|   669k|    }
  198|       |
  199|   384k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   384k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   384k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.07k, False: 383k]
  |  |  ------------------
  ------------------
  201|   384k|                                               is_negative))) {
  202|  1.07k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.07k|                                     "Integer overflow");
  204|  1.07k|    }
  205|       |
  206|   383k|    val = store_result<T>(u64val, is_negative);
  207|   383k|    return begin;
  208|   384k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   176k|    {
  324|   176k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   176k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   176k|        return read_default_with_base(range, value, 0);
  326|   176k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   176k|    {
  287|   176k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   176k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   176k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   176k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 176k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   176k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   176k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   176k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   176k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   176k|                return unexpected_scan_error(
  293|   176k|                    scan_error::invalid_scanned_value,
  294|   176k|                    "Unexpected '-' sign when parsing an "
  295|   176k|                    "unsigned value");
  296|   176k|            }
  297|   176k|        }
  298|       |
  299|   176k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 51.3k, False: 125k]
  ------------------
  300|  51.3k|            value = T{0};
  301|  51.3k|            return std::next(prefix_result.iterator);
  302|  51.3k|        }
  303|       |
  304|   250k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 81, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     81|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     81|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     81|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     81|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     81|    }                                                  \
  |  |  |  |   70|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   250k|                                     ranges::subrange{prefix_result.iterator,
  306|   250k|                                                      ranges::end(range)},
  307|   250k|                                     prefix_result.parsed_base));
  308|       |
  309|   250k|        auto buf = make_contiguous_buffer(
  310|   250k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   250k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.20k, False: 118k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.20k|    }                                                  \
  |  |  |  |   70|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   118k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   118k|                                    prefix_result.parsed_base));
  314|       |
  315|   118k|        return ranges_polyfill::batch_next(
  316|   118k|            prefix_result.iterator,
  317|   118k|            ranges::distance(buf.view().begin(), result_it));
  318|   250k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  4.38M|{
  121|  4.38M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  4.38M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.38M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.38M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.38M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.38M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  4.38M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  4.38M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  4.38M|        parse_integer_base_prefix(
  126|  4.38M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  4.38M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 1.51M, False: 2.86M]
  ------------------
  129|  1.51M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.43k, False: 1.51M]
  ------------------
  130|  1.51M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 926k, False: 590k]
  ------------------
  131|   928k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   928k|                digits_begin_it, ranges::begin(range));
  133|   928k|        }
  134|   590k|        else {
  135|   590k|            parsed_zero = false;
  136|   590k|        }
  137|  1.51M|    }
  138|  2.86M|    else {
  139|  2.86M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.23k, False: 2.86M]
  ------------------
  140|  2.86M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 122k, False: 2.73M]
  ------------------
  141|   128k|            digits_begin_it = base_prefix_begin_it;
  142|   128k|        }
  143|  2.86M|    }
  144|       |
  145|  4.38M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 4.08M, False: 296k]
  ------------------
  146|  4.08M|        sign = sign_type::plus_sign;
  147|  4.08M|    }
  148|  4.38M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  4.38M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  4.38M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  4.38M|{
   88|  4.38M|    switch (base) {
   89|  87.3k|        case 2:
  ------------------
  |  Branch (89:9): [True: 87.3k, False: 4.29M]
  ------------------
   90|       |            // allow 0b/0B
   91|  87.3k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  87.3k|                    false};
   93|       |
   94|   221k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 221k, False: 4.16M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   221k|            bool zero_parsed = false;
   97|   221k|            auto it = apply_opt(
   98|   221k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   221k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   628k|        case 16:
  ------------------
  |  Branch (102:9): [True: 628k, False: 3.75M]
  ------------------
  103|       |            // allow 0x/0X
  104|   628k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   628k|                    false};
  106|       |
  107|  2.85M|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.85M, False: 1.53M]
  ------------------
  108|       |            // detect base
  109|  2.85M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   595k|        default:
  ------------------
  |  Branch (111:9): [True: 595k, False: 3.79M]
  ------------------
  112|       |            // no base prefix allowed
  113|   595k|            return {ranges::begin(range), base, false};
  114|  4.38M|    }
  115|  4.38M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.90M|{
   38|  2.90M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.90M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  3.04M|{
   53|  3.04M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 27.0k, False: 3.01M]
  ------------------
   54|  27.0k|        return *r;
   55|  27.0k|    }
   56|       |
   57|  3.01M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 1.51M, False: 1.49M]
  ------------------
   58|  1.51M|        zero_parsed = true;
   59|  1.51M|        return *r;
   60|  1.51M|    }
   61|       |
   62|  1.49M|    return unexpected(parse_error::error);
   63|  3.01M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  3.48M|{
   45|  3.48M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  3.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  3.48M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.85M|{
   69|  2.85M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 31.4k, False: 2.82M]
  ------------------
   70|  31.4k|        return {*r, 16, false};
   71|  31.4k|    }
   72|  2.82M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 2.15k, False: 2.81M]
  ------------------
   73|  2.15k|        return {*r, 2, false};
   74|  2.15k|    }
   75|  2.81M|    {
   76|  2.81M|        bool zero_parsed{false};
   77|  2.81M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 1.43M, False: 1.38M]
  ------------------
   78|  1.43M|            return {*r, 8, zero_parsed};
   79|  1.43M|        }
   80|  2.81M|    }
   81|  1.38M|    return {ranges::begin(range), 10, false};
   82|  2.81M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  2.86M|{
  156|  2.86M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  2.86M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  2.86M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.72k, False: 2.86M]
  |  |  ------------------
  ------------------
  160|  1.72k|            return unexpected_scan_error(
  161|  1.72k|                scan_error::invalid_scanned_value,
  162|  1.72k|                "Failed to parse integer: No digits found");
  163|  1.72k|        }
  164|  2.86M|        return ranges::end(range);
  165|  2.86M|    }
  166|  2.86M|    else {
  167|  2.86M|        return read_while1_code_unit(
  168|  2.86M|                   range, [&](char_type ch)
  169|  2.86M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  2.86M|            .transform_error(map_parse_error_to_scan_error(
  171|  2.86M|                scan_error::invalid_scanned_value,
  172|  2.86M|                "Failed to parse integer: No digits found"));
  173|  2.86M|    }
  174|  2.86M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   236k|    {
  324|   236k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   236k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   236k|        return read_default_with_base(range, value, 0);
  326|   236k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   236k|    {
  287|   236k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 236k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   236k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   236k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   236k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   236k|                return unexpected_scan_error(
  293|   236k|                    scan_error::invalid_scanned_value,
  294|   236k|                    "Unexpected '-' sign when parsing an "
  295|   236k|                    "unsigned value");
  296|   236k|            }
  297|   236k|        }
  298|       |
  299|   236k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 70.9k, False: 165k]
  ------------------
  300|  70.9k|            value = T{0};
  301|  70.9k|            return std::next(prefix_result.iterator);
  302|  70.9k|        }
  303|       |
  304|   330k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 147, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    147|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    147|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    147|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    147|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    147|    }                                                  \
  |  |  |  |   70|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   330k|                                     ranges::subrange{prefix_result.iterator,
  306|   330k|                                                      ranges::end(range)},
  307|   330k|                                     prefix_result.parsed_base));
  308|       |
  309|   330k|        auto buf = make_contiguous_buffer(
  310|   330k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   330k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   165k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.44k, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.44k|    }                                                  \
  |  |  |  |   70|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   159k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   159k|                                    prefix_result.parsed_base));
  314|       |
  315|   159k|        return ranges_polyfill::batch_next(
  316|   159k|            prefix_result.iterator,
  317|   159k|            ranges::distance(buf.view().begin(), result_it));
  318|   330k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   240k|    {
  324|   240k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   240k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   240k|        return read_default_with_base(range, value, 0);
  326|   240k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   240k|    {
  287|   240k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   240k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   240k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   240k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   240k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   240k|                return unexpected_scan_error(
  293|   240k|                    scan_error::invalid_scanned_value,
  294|   240k|                    "Unexpected '-' sign when parsing an "
  295|   240k|                    "unsigned value");
  296|   240k|            }
  297|   240k|        }
  298|       |
  299|   240k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 71.4k, False: 168k]
  ------------------
  300|  71.4k|            value = T{0};
  301|  71.4k|            return std::next(prefix_result.iterator);
  302|  71.4k|        }
  303|       |
  304|   337k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 156, False: 168k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    156|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    156|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    156|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    156|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    156|    }                                                  \
  |  |  |  |   70|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   337k|                                     ranges::subrange{prefix_result.iterator,
  306|   337k|                                                      ranges::end(range)},
  307|   337k|                                     prefix_result.parsed_base));
  308|       |
  309|   337k|        auto buf = make_contiguous_buffer(
  310|   337k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   337k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.30k, False: 163k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.30k|    }                                                  \
  |  |  |  |   70|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   163k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   163k|                                    prefix_result.parsed_base));
  314|       |
  315|   163k|        return ranges_polyfill::batch_next(
  316|   163k|            prefix_result.iterator,
  317|   163k|            ranges::distance(buf.view().begin(), result_it));
  318|   337k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   168k|    {
  324|   168k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   168k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   168k|        return read_default_with_base(range, value, 0);
  326|   168k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   168k|    {
  287|   168k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 168k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   168k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   168k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   168k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.30k, False: 166k]
  ------------------
  292|  2.30k|                return unexpected_scan_error(
  293|  2.30k|                    scan_error::invalid_scanned_value,
  294|  2.30k|                    "Unexpected '-' sign when parsing an "
  295|  2.30k|                    "unsigned value");
  296|  2.30k|            }
  297|   168k|        }
  298|       |
  299|   166k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 52.5k, False: 114k]
  ------------------
  300|  52.5k|            value = T{0};
  301|  52.5k|            return std::next(prefix_result.iterator);
  302|  52.5k|        }
  303|       |
  304|   228k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 33, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     33|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     33|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     33|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     33|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     33|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   228k|                                     ranges::subrange{prefix_result.iterator,
  306|   228k|                                                      ranges::end(range)},
  307|   228k|                                     prefix_result.parsed_base));
  308|       |
  309|   228k|        auto buf = make_contiguous_buffer(
  310|   228k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   228k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.97k, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.97k|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   110k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   110k|                                    prefix_result.parsed_base));
  314|       |
  315|   110k|        return ranges_polyfill::batch_next(
  316|   110k|            prefix_result.iterator,
  317|   110k|            ranges::distance(buf.view().begin(), result_it));
  318|   228k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   199k|    {
  324|   199k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   199k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   199k|        return read_default_with_base(range, value, 0);
  326|   199k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   199k|    {
  287|   199k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   199k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   199k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   199k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 199k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   199k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   199k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   199k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   199k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.45k, False: 196k]
  ------------------
  292|  2.45k|                return unexpected_scan_error(
  293|  2.45k|                    scan_error::invalid_scanned_value,
  294|  2.45k|                    "Unexpected '-' sign when parsing an "
  295|  2.45k|                    "unsigned value");
  296|  2.45k|            }
  297|   199k|        }
  298|       |
  299|   196k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 62.2k, False: 134k]
  ------------------
  300|  62.2k|            value = T{0};
  301|  62.2k|            return std::next(prefix_result.iterator);
  302|  62.2k|        }
  303|       |
  304|   269k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 60, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     60|    }                                                  \
  |  |  |  |   70|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   269k|                                     ranges::subrange{prefix_result.iterator,
  306|   269k|                                                      ranges::end(range)},
  307|   269k|                                     prefix_result.parsed_base));
  308|       |
  309|   269k|        auto buf = make_contiguous_buffer(
  310|   269k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   269k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.49k, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.49k|    }                                                  \
  |  |  |  |   70|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   131k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   131k|                                    prefix_result.parsed_base));
  314|       |
  315|   131k|        return ranges_polyfill::batch_next(
  316|   131k|            prefix_result.iterator,
  317|   131k|            ranges::distance(buf.view().begin(), result_it));
  318|   269k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   200k|    {
  324|   200k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   200k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   200k|        return read_default_with_base(range, value, 0);
  326|   200k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   200k|    {
  287|   200k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   200k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   200k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   200k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 200k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   200k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   200k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   200k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   200k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.58k, False: 198k]
  ------------------
  292|  2.58k|                return unexpected_scan_error(
  293|  2.58k|                    scan_error::invalid_scanned_value,
  294|  2.58k|                    "Unexpected '-' sign when parsing an "
  295|  2.58k|                    "unsigned value");
  296|  2.58k|            }
  297|   200k|        }
  298|       |
  299|   198k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 62.6k, False: 135k]
  ------------------
  300|  62.6k|            value = T{0};
  301|  62.6k|            return std::next(prefix_result.iterator);
  302|  62.6k|        }
  303|       |
  304|   270k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 60, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     60|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     60|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     60|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     60|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     60|    }                                                  \
  |  |  |  |   70|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   270k|                                     ranges::subrange{prefix_result.iterator,
  306|   270k|                                                      ranges::end(range)},
  307|   270k|                                     prefix_result.parsed_base));
  308|       |
  309|   270k|        auto buf = make_contiguous_buffer(
  310|   270k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   270k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.27k, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.27k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.27k|    }                                                  \
  |  |  |  |   70|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   132k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   132k|                                    prefix_result.parsed_base));
  314|       |
  315|   132k|        return ranges_polyfill::batch_next(
  316|   132k|            prefix_result.iterator,
  317|   132k|            ranges::distance(buf.view().begin(), result_it));
  318|   270k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   563k|{
  185|   563k|    std::basic_string<CharT> output;
  186|   563k|    std::string thsep_indices;
  187|   563k|    auto it = ranges::begin(range);
  188|   563k|    bool digit_matched = false;
  189|  2.31M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 2.31M, False: 5.23k]
  ------------------
  190|  2.31M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 76.9k, False: 2.23M]
  ------------------
  191|  76.9k|            thsep_indices.push_back(static_cast<char>(
  192|  76.9k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  76.9k|        }
  194|  2.23M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 558k, False: 1.67M]
  ------------------
  195|   558k|            break;
  196|   558k|        }
  197|  1.67M|        else {
  198|  1.67M|            output.push_back(*it);
  199|  1.67M|            digit_matched = true;
  200|  1.67M|        }
  201|  2.31M|    }
  202|   563k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 11.7k, False: 552k]
  |  |  ------------------
  ------------------
  203|  11.7k|        return unexpected_scan_error(
  204|  11.7k|            scan_error::invalid_scanned_value,
  205|  11.7k|            "Failed to parse integer: No digits found");
  206|  11.7k|    }
  207|   552k|    return std::tuple{it, output, thsep_indices};
  208|   563k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  14.1k|    {
  324|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  14.1k|        return read_default_with_base(range, value, 0);
  326|  14.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  14.1k|    {
  287|  14.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  14.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  14.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  14.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  14.1k|                return unexpected_scan_error(
  293|  14.1k|                    scan_error::invalid_scanned_value,
  294|  14.1k|                    "Unexpected '-' sign when parsing an "
  295|  14.1k|                    "unsigned value");
  296|  14.1k|            }
  297|  14.1k|        }
  298|       |
  299|  14.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 14.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  21.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.09k, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.09k|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  21.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  21.2k|                                                      ranges::end(range)},
  307|  21.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  21.2k|        auto buf = make_contiguous_buffer(
  310|  21.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  21.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  7.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  7.09k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  7.09k|                                    prefix_result.parsed_base));
  314|       |
  315|  7.09k|        return ranges_polyfill::batch_next(
  316|  7.09k|            prefix_result.iterator,
  317|  7.09k|            ranges::distance(buf.view().begin(), result_it));
  318|  21.2k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   368k|{
  121|   368k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   368k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   368k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   368k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 368k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   368k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   368k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   368k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   368k|        parse_integer_base_prefix(
  126|   368k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   368k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 368k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   368k|    else {
  139|   368k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 368k]
  ------------------
  140|   368k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 212k, False: 156k]
  ------------------
  141|   212k|            digits_begin_it = base_prefix_begin_it;
  142|   212k|        }
  143|   368k|    }
  144|       |
  145|   368k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 368k, False: 0]
  ------------------
  146|   368k|        sign = sign_type::plus_sign;
  147|   368k|    }
  148|   368k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   368k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   368k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   368k|{
   88|   368k|    switch (base) {
   89|  28.3k|        case 2:
  ------------------
  |  Branch (89:9): [True: 28.3k, False: 340k]
  ------------------
   90|       |            // allow 0b/0B
   91|  28.3k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  28.3k|                    false};
   93|       |
   94|  28.3k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 28.3k, False: 340k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  28.3k|            bool zero_parsed = false;
   97|  28.3k|            auto it = apply_opt(
   98|  28.3k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  28.3k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  56.7k|        case 16:
  ------------------
  |  Branch (102:9): [True: 56.7k, False: 312k]
  ------------------
  103|       |            // allow 0x/0X
  104|  56.7k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  56.7k|                    false};
  106|       |
  107|   198k|        case 0:
  ------------------
  |  Branch (107:9): [True: 198k, False: 170k]
  ------------------
  108|       |            // detect base
  109|   198k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  56.7k|        default:
  ------------------
  |  Branch (111:9): [True: 56.7k, False: 312k]
  ------------------
  112|       |            // no base prefix allowed
  113|  56.7k|            return {ranges::begin(range), base, false};
  114|   368k|    }
  115|   368k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   226k|{
   38|   226k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   226k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   226k|{
   53|   226k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 226k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   226k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 226k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   226k|    return unexpected(parse_error::error);
   63|   226k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   255k|{
   45|   255k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   255k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   198k|{
   69|   198k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 198k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   198k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 198k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   198k|    {
   76|   198k|        bool zero_parsed{false};
   77|   198k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 198k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   198k|    }
   81|   198k|    return {ranges::begin(range), 10, false};
   82|   198k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   312k|{
  156|   312k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   312k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   312k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   312k|            return unexpected_scan_error(
  161|   312k|                scan_error::invalid_scanned_value,
  162|   312k|                "Failed to parse integer: No digits found");
  163|   312k|        }
  164|   312k|        return ranges::end(range);
  165|   312k|    }
  166|   312k|    else {
  167|   312k|        return read_while1_code_unit(
  168|   312k|                   range, [&](char_type ch)
  169|   312k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   312k|            .transform_error(map_parse_error_to_scan_error(
  171|   312k|                scan_error::invalid_scanned_value,
  172|   312k|                "Failed to parse integer: No digits found"));
  173|   312k|    }
  174|   312k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   439k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  14.1k|    {
  324|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  14.1k|        return read_default_with_base(range, value, 0);
  326|  14.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  14.1k|    {
  287|  14.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  14.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  14.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  14.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  14.1k|                return unexpected_scan_error(
  293|  14.1k|                    scan_error::invalid_scanned_value,
  294|  14.1k|                    "Unexpected '-' sign when parsing an "
  295|  14.1k|                    "unsigned value");
  296|  14.1k|            }
  297|  14.1k|        }
  298|       |
  299|  14.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 14.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  21.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.09k, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.09k|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  21.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  21.2k|                                                      ranges::end(range)},
  307|  21.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  21.2k|        auto buf = make_contiguous_buffer(
  310|  21.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  21.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  7.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  7.09k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  7.09k|                                    prefix_result.parsed_base));
  314|       |
  315|  7.09k|        return ranges_polyfill::batch_next(
  316|  7.09k|            prefix_result.iterator,
  317|  7.09k|            ranges::distance(buf.view().begin(), result_it));
  318|  21.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  14.1k|    {
  324|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  14.1k|        return read_default_with_base(range, value, 0);
  326|  14.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  14.1k|    {
  287|  14.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  14.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  14.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  14.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  14.1k|                return unexpected_scan_error(
  293|  14.1k|                    scan_error::invalid_scanned_value,
  294|  14.1k|                    "Unexpected '-' sign when parsing an "
  295|  14.1k|                    "unsigned value");
  296|  14.1k|            }
  297|  14.1k|        }
  298|       |
  299|  14.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 14.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  21.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.09k, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.09k|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  21.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  21.2k|                                                      ranges::end(range)},
  307|  21.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  21.2k|        auto buf = make_contiguous_buffer(
  310|  21.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  21.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  7.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  7.09k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  7.09k|                                    prefix_result.parsed_base));
  314|       |
  315|  7.09k|        return ranges_polyfill::batch_next(
  316|  7.09k|            prefix_result.iterator,
  317|  7.09k|            ranges::distance(buf.view().begin(), result_it));
  318|  21.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  14.1k|    {
  324|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  14.1k|        return read_default_with_base(range, value, 0);
  326|  14.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  14.1k|    {
  287|  14.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  14.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  14.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  14.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 14.1k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  14.1k|        }
  298|       |
  299|  14.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 14.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  21.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.09k, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.09k|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  21.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  21.2k|                                                      ranges::end(range)},
  307|  21.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  21.2k|        auto buf = make_contiguous_buffer(
  310|  21.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  21.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  7.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  7.09k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  7.09k|                                    prefix_result.parsed_base));
  314|       |
  315|  7.09k|        return ranges_polyfill::batch_next(
  316|  7.09k|            prefix_result.iterator,
  317|  7.09k|            ranges::distance(buf.view().begin(), result_it));
  318|  21.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  14.1k|    {
  324|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  14.1k|        return read_default_with_base(range, value, 0);
  326|  14.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  14.1k|    {
  287|  14.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  14.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  14.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  14.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 14.1k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  14.1k|        }
  298|       |
  299|  14.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 14.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  21.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.09k, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.09k|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  21.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  21.2k|                                                      ranges::end(range)},
  307|  21.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  21.2k|        auto buf = make_contiguous_buffer(
  310|  21.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  21.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  7.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  7.09k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  7.09k|                                    prefix_result.parsed_base));
  314|       |
  315|  7.09k|        return ranges_polyfill::batch_next(
  316|  7.09k|            prefix_result.iterator,
  317|  7.09k|            ranges::distance(buf.view().begin(), result_it));
  318|  21.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  14.1k|    {
  324|  14.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  14.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  14.1k|        return read_default_with_base(range, value, 0);
  326|  14.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  14.1k|    {
  287|  14.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  14.1k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  14.1k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  14.1k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 14.1k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  14.1k|        }
  298|       |
  299|  14.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 14.1k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  21.2k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.09k, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.09k|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  21.2k|                                     ranges::subrange{prefix_result.iterator,
  306|  21.2k|                                                      ranges::end(range)},
  307|  21.2k|                                     prefix_result.parsed_base));
  308|       |
  309|  21.2k|        auto buf = make_contiguous_buffer(
  310|  21.2k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  21.2k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  7.09k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  7.09k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  7.09k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  7.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 7.09k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  7.09k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  7.09k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  7.09k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  7.09k|                                    prefix_result.parsed_base));
  314|       |
  315|  7.09k|        return ranges_polyfill::batch_next(
  316|  7.09k|            prefix_result.iterator,
  317|  7.09k|            ranges::distance(buf.view().begin(), result_it));
  318|  21.2k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  56.7k|{
  185|  56.7k|    std::basic_string<CharT> output;
  186|  56.7k|    std::string thsep_indices;
  187|  56.7k|    auto it = ranges::begin(range);
  188|  56.7k|    bool digit_matched = false;
  189|  85.1k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 85.1k, False: 12]
  ------------------
  190|  85.1k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 85.1k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  85.1k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 56.7k, False: 28.3k]
  ------------------
  195|  56.7k|            break;
  196|  56.7k|        }
  197|  28.3k|        else {
  198|  28.3k|            output.push_back(*it);
  199|  28.3k|            digit_matched = true;
  200|  28.3k|        }
  201|  85.1k|    }
  202|  56.7k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.3k, False: 28.3k]
  |  |  ------------------
  ------------------
  203|  28.3k|        return unexpected_scan_error(
  204|  28.3k|            scan_error::invalid_scanned_value,
  205|  28.3k|            "Failed to parse integer: No digits found");
  206|  28.3k|    }
  207|  28.3k|    return std::tuple{it, output, thsep_indices};
  208|  56.7k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  3.46M|    {
  280|  3.46M|        detail::check_int_type_specs(specs, eh);
  281|  3.46M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   418k|    {
  335|   418k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   418k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   418k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   418k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 418k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   418k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   418k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   418k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 36.5k, False: 381k]
  ------------------
  339|  36.5k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  36.5k|                return unexpected_scan_error(
  341|  36.5k|                    scan_error::invalid_scanned_value,
  342|  36.5k|                    "Unexpected '-' sign when parsing an "
  343|  36.5k|                    "unsigned value");
  344|  36.5k|            }
  345|  36.5k|            else {
  346|  36.5k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 36.5k]
  ------------------
  347|  36.5k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  36.5k|            }
  353|  36.5k|        }
  354|       |
  355|   418k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 78.6k, False: 339k]
  ------------------
  356|  78.6k|            value = T{0};
  357|  78.6k|            return std::next(prefix_result.iterator);
  358|  78.6k|        }
  359|       |
  360|   339k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   339k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 255k, False: 83.8k]
  |  |  ------------------
  ------------------
  361|   255k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 174, False: 255k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    174|    }                                                  \
  |  |  |  |   70|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   255k|                    parse_integer_digits_without_thsep(
  363|   255k|                        ranges::subrange{prefix_result.iterator,
  364|   255k|                                         ranges::end(range)},
  365|   255k|                        prefix_result.parsed_base));
  366|       |
  367|   255k|            auto buf = make_contiguous_buffer(
  368|   255k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   255k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   255k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   255k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   255k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   255k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.8k, False: 233k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.8k|    }                                                  \
  |  |  |  |   70|   255k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   233k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   233k|                                        prefix_result.parsed_base));
  372|       |
  373|   233k|            return ranges_polyfill::batch_next(
  374|   233k|                prefix_result.iterator,
  375|   233k|                ranges::distance(buf.view().begin(), result_it));
  376|   255k|        }
  377|       |
  378|  83.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  83.8k|            localized_number_formatting_options<CharT>{loc};
  383|  83.8k|#endif
  384|       |
  385|  83.8k|        SCN_TRY(
  ------------------
  |  |   71|  83.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.69k, False: 82.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.69k|    }                                                  \
  |  |  |  |   70|  83.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  82.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  82.1k|            parse_digits_result,
  387|  82.1k|            parse_integer_digits_with_thsep(
  388|  82.1k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  82.1k|                prefix_result.parsed_base, locale_options));
  390|  82.1k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  82.1k|            parse_digits_result;
  392|       |
  393|  82.1k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 928, False: 81.1k]
  ------------------
  394|    928|            if (auto e = check_thsep_grouping(
  395|    928|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    928|                    thsep_indices, locale_options.grouping);
  397|    928|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    928|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 360, False: 568]
  |  |  ------------------
  ------------------
  398|    360|                return unexpected(e);
  399|    360|            }
  400|    928|        }
  401|       |
  402|  81.7k|        auto nothsep_source_view =
  403|  81.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  81.7k|        SCN_TRY(
  ------------------
  |  |   71|  81.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  81.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  81.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  81.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.12k, False: 79.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.12k|    }                                                  \
  |  |  |  |   70|  81.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  79.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  79.6k|            nothsep_source_it,
  406|  79.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  79.6k|                                prefix_result.parsed_base));
  408|       |
  409|  79.6k|        return ranges_polyfill::batch_next(
  410|  79.6k|            prefix_result.iterator,
  411|  79.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  79.6k|                ranges::ssize(thsep_indices));
  413|  81.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   626k|    {
  335|   626k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   626k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   626k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   626k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   626k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 626k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   626k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   626k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   626k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   626k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 42.5k, False: 584k]
  ------------------
  339|  42.5k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  42.5k|                return unexpected_scan_error(
  341|  42.5k|                    scan_error::invalid_scanned_value,
  342|  42.5k|                    "Unexpected '-' sign when parsing an "
  343|  42.5k|                    "unsigned value");
  344|  42.5k|            }
  345|  42.5k|            else {
  346|  42.5k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 42.5k]
  ------------------
  347|  42.5k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  42.5k|            }
  353|  42.5k|        }
  354|       |
  355|   626k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 105k, False: 520k]
  ------------------
  356|   105k|            value = T{0};
  357|   105k|            return std::next(prefix_result.iterator);
  358|   105k|        }
  359|       |
  360|   520k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   520k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 410k, False: 110k]
  |  |  ------------------
  ------------------
  361|   410k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   410k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   410k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   410k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   410k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 328, False: 410k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    328|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    328|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    328|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    328|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    328|    }                                                  \
  |  |  |  |   70|   410k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   410k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   410k|                    parse_integer_digits_without_thsep(
  363|   410k|                        ranges::subrange{prefix_result.iterator,
  364|   410k|                                         ranges::end(range)},
  365|   410k|                        prefix_result.parsed_base));
  366|       |
  367|   410k|            auto buf = make_contiguous_buffer(
  368|   410k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   410k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   410k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   410k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   410k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   410k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.9k, False: 390k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.9k|    }                                                  \
  |  |  |  |   70|   410k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   390k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   390k|                                        prefix_result.parsed_base));
  372|       |
  373|   390k|            return ranges_polyfill::batch_next(
  374|   390k|                prefix_result.iterator,
  375|   390k|                ranges::distance(buf.view().begin(), result_it));
  376|   410k|        }
  377|       |
  378|   110k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   110k|            localized_number_formatting_options<CharT>{loc};
  383|   110k|#endif
  384|       |
  385|   110k|        SCN_TRY(
  ------------------
  |  |   71|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.49k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.49k|    }                                                  \
  |  |  |  |   70|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   107k|            parse_digits_result,
  387|   107k|            parse_integer_digits_with_thsep(
  388|   107k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   107k|                prefix_result.parsed_base, locale_options));
  390|   107k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   107k|            parse_digits_result;
  392|       |
  393|   107k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.02k, False: 106k]
  ------------------
  394|  1.02k|            if (auto e = check_thsep_grouping(
  395|  1.02k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.02k|                    thsep_indices, locale_options.grouping);
  397|  1.02k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.02k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 460, False: 568]
  |  |  ------------------
  ------------------
  398|    460|                return unexpected(e);
  399|    460|            }
  400|  1.02k|        }
  401|       |
  402|   107k|        auto nothsep_source_view =
  403|   107k|            std::basic_string_view<CharT>{nothsep_source};
  404|   107k|        SCN_TRY(
  ------------------
  |  |   71|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 762, False: 106k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    762|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    762|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    762|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    762|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    762|    }                                                  \
  |  |  |  |   70|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   106k|            nothsep_source_it,
  406|   106k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   106k|                                prefix_result.parsed_base));
  408|       |
  409|   106k|        return ranges_polyfill::batch_next(
  410|   106k|            prefix_result.iterator,
  411|   106k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   106k|                ranges::ssize(thsep_indices));
  413|   107k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   638k|    {
  335|   638k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   638k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   638k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   638k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   638k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 638k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   638k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   638k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   638k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   638k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 43.6k, False: 594k]
  ------------------
  339|  43.6k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  43.6k|                return unexpected_scan_error(
  341|  43.6k|                    scan_error::invalid_scanned_value,
  342|  43.6k|                    "Unexpected '-' sign when parsing an "
  343|  43.6k|                    "unsigned value");
  344|  43.6k|            }
  345|  43.6k|            else {
  346|  43.6k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 43.6k]
  ------------------
  347|  43.6k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  43.6k|            }
  353|  43.6k|        }
  354|       |
  355|   638k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 106k, False: 531k]
  ------------------
  356|   106k|            value = T{0};
  357|   106k|            return std::next(prefix_result.iterator);
  358|   106k|        }
  359|       |
  360|   531k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   531k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 419k, False: 112k]
  |  |  ------------------
  ------------------
  361|   419k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   419k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   419k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   419k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 356, False: 418k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    356|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    356|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    356|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    356|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    356|    }                                                  \
  |  |  |  |   70|   419k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   418k|                    parse_integer_digits_without_thsep(
  363|   418k|                        ranges::subrange{prefix_result.iterator,
  364|   418k|                                         ranges::end(range)},
  365|   418k|                        prefix_result.parsed_base));
  366|       |
  367|   418k|            auto buf = make_contiguous_buffer(
  368|   418k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   418k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   418k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   418k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   418k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   418k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 19.6k, False: 399k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  19.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  19.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  19.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  19.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  19.6k|    }                                                  \
  |  |  |  |   70|   418k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   399k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   399k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   399k|                                        prefix_result.parsed_base));
  372|       |
  373|   399k|            return ranges_polyfill::batch_next(
  374|   399k|                prefix_result.iterator,
  375|   399k|                ranges::distance(buf.view().begin(), result_it));
  376|   418k|        }
  377|       |
  378|   112k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   112k|            localized_number_formatting_options<CharT>{loc};
  383|   112k|#endif
  384|       |
  385|   112k|        SCN_TRY(
  ------------------
  |  |   71|   112k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   112k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   112k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.69k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.69k|    }                                                  \
  |  |  |  |   70|   112k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   109k|            parse_digits_result,
  387|   109k|            parse_integer_digits_with_thsep(
  388|   109k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   109k|                prefix_result.parsed_base, locale_options));
  390|   109k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   109k|            parse_digits_result;
  392|       |
  393|   109k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 1.07k, False: 108k]
  ------------------
  394|  1.07k|            if (auto e = check_thsep_grouping(
  395|  1.07k|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|  1.07k|                    thsep_indices, locale_options.grouping);
  397|  1.07k|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.07k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 504, False: 570]
  |  |  ------------------
  ------------------
  398|    504|                return unexpected(e);
  399|    504|            }
  400|  1.07k|        }
  401|       |
  402|   109k|        auto nothsep_source_view =
  403|   109k|            std::basic_string_view<CharT>{nothsep_source};
  404|   109k|        SCN_TRY(
  ------------------
  |  |   71|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 424, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    424|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    424|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    424|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    424|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    424|    }                                                  \
  |  |  |  |   70|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   109k|            nothsep_source_it,
  406|   109k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   109k|                                prefix_result.parsed_base));
  408|       |
  409|   109k|        return ranges_polyfill::batch_next(
  410|   109k|            prefix_result.iterator,
  411|   109k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   109k|                ranges::ssize(thsep_indices));
  413|   109k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   421k|    {
  335|   421k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   421k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   421k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   421k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 421k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   421k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   421k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   421k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.19k, False: 413k]
  ------------------
  339|  8.19k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.19k|                return unexpected_scan_error(
  341|  8.19k|                    scan_error::invalid_scanned_value,
  342|  8.19k|                    "Unexpected '-' sign when parsing an "
  343|  8.19k|                    "unsigned value");
  344|  8.19k|            }
  345|  8.19k|            else {
  346|  8.19k|                if (specs.type ==
  347|  8.19k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.19k|                    return unexpected_scan_error(
  349|  8.19k|                        scan_error::invalid_scanned_value,
  350|  8.19k|                        "'u'-option disallows negative values");
  351|  8.19k|                }
  352|  8.19k|            }
  353|  8.19k|        }
  354|       |
  355|   413k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 79.3k, False: 334k]
  ------------------
  356|  79.3k|            value = T{0};
  357|  79.3k|            return std::next(prefix_result.iterator);
  358|  79.3k|        }
  359|       |
  360|   334k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   334k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 257k, False: 76.4k]
  |  |  ------------------
  ------------------
  361|   257k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   257k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   257k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   257k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 68, False: 257k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     68|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     68|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     68|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     68|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     68|    }                                                  \
  |  |  |  |   70|   257k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   257k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   257k|                    parse_integer_digits_without_thsep(
  363|   257k|                        ranges::subrange{prefix_result.iterator,
  364|   257k|                                         ranges::end(range)},
  365|   257k|                        prefix_result.parsed_base));
  366|       |
  367|   257k|            auto buf = make_contiguous_buffer(
  368|   257k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   257k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   257k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   257k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   257k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   257k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 15.3k, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  15.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  15.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  15.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  15.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  15.3k|    }                                                  \
  |  |  |  |   70|   257k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   242k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   242k|                                        prefix_result.parsed_base));
  372|       |
  373|   242k|            return ranges_polyfill::batch_next(
  374|   242k|                prefix_result.iterator,
  375|   242k|                ranges::distance(buf.view().begin(), result_it));
  376|   257k|        }
  377|       |
  378|  76.4k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  76.4k|            localized_number_formatting_options<CharT>{loc};
  383|  76.4k|#endif
  384|       |
  385|  76.4k|        SCN_TRY(
  ------------------
  |  |   71|  76.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  76.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  76.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  76.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.44k, False: 74.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.44k|    }                                                  \
  |  |  |  |   70|  76.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  74.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  74.9k|            parse_digits_result,
  387|  74.9k|            parse_integer_digits_with_thsep(
  388|  74.9k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  74.9k|                prefix_result.parsed_base, locale_options));
  390|  74.9k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  74.9k|            parse_digits_result;
  392|       |
  393|  74.9k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 770, False: 74.2k]
  ------------------
  394|    770|            if (auto e = check_thsep_grouping(
  395|    770|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    770|                    thsep_indices, locale_options.grouping);
  397|    770|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    770|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 218, False: 552]
  |  |  ------------------
  ------------------
  398|    218|                return unexpected(e);
  399|    218|            }
  400|    770|        }
  401|       |
  402|  74.7k|        auto nothsep_source_view =
  403|  74.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  74.7k|        SCN_TRY(
  ------------------
  |  |   71|  74.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 988, False: 73.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    988|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    988|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    988|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    988|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    988|    }                                                  \
  |  |  |  |   70|  74.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  73.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  73.7k|            nothsep_source_it,
  406|  73.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  73.7k|                                prefix_result.parsed_base));
  408|       |
  409|  73.7k|        return ranges_polyfill::batch_next(
  410|  73.7k|            prefix_result.iterator,
  411|  73.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  73.7k|                ranges::ssize(thsep_indices));
  413|  74.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   527k|    {
  335|   527k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   527k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   527k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   527k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   527k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 527k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   527k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   527k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   527k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   527k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.63k, False: 518k]
  ------------------
  339|  8.63k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.63k|                return unexpected_scan_error(
  341|  8.63k|                    scan_error::invalid_scanned_value,
  342|  8.63k|                    "Unexpected '-' sign when parsing an "
  343|  8.63k|                    "unsigned value");
  344|  8.63k|            }
  345|  8.63k|            else {
  346|  8.63k|                if (specs.type ==
  347|  8.63k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.63k|                    return unexpected_scan_error(
  349|  8.63k|                        scan_error::invalid_scanned_value,
  350|  8.63k|                        "'u'-option disallows negative values");
  351|  8.63k|                }
  352|  8.63k|            }
  353|  8.63k|        }
  354|       |
  355|   518k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 92.3k, False: 426k]
  ------------------
  356|  92.3k|            value = T{0};
  357|  92.3k|            return std::next(prefix_result.iterator);
  358|  92.3k|        }
  359|       |
  360|   426k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   426k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 336k, False: 90.0k]
  |  |  ------------------
  ------------------
  361|   336k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   336k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   336k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   336k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 130, False: 336k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    130|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    130|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    130|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    130|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    130|    }                                                  \
  |  |  |  |   70|   336k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   336k|                    parse_integer_digits_without_thsep(
  363|   336k|                        ranges::subrange{prefix_result.iterator,
  364|   336k|                                         ranges::end(range)},
  365|   336k|                        prefix_result.parsed_base));
  366|       |
  367|   336k|            auto buf = make_contiguous_buffer(
  368|   336k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   336k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   336k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   336k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   336k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   336k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 14.0k, False: 322k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.0k|    }                                                  \
  |  |  |  |   70|   336k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   322k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   322k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   322k|                                        prefix_result.parsed_base));
  372|       |
  373|   322k|            return ranges_polyfill::batch_next(
  374|   322k|                prefix_result.iterator,
  375|   322k|                ranges::distance(buf.view().begin(), result_it));
  376|   336k|        }
  377|       |
  378|  90.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  90.0k|            localized_number_formatting_options<CharT>{loc};
  383|  90.0k|#endif
  384|       |
  385|  90.0k|        SCN_TRY(
  ------------------
  |  |   71|  90.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  90.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  90.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  90.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.68k, False: 88.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.68k|    }                                                  \
  |  |  |  |   70|  90.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  88.3k|            parse_digits_result,
  387|  88.3k|            parse_integer_digits_with_thsep(
  388|  88.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  88.3k|                prefix_result.parsed_base, locale_options));
  390|  88.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  88.3k|            parse_digits_result;
  392|       |
  393|  88.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 812, False: 87.5k]
  ------------------
  394|    812|            if (auto e = check_thsep_grouping(
  395|    812|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    812|                    thsep_indices, locale_options.grouping);
  397|    812|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    812|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 260, False: 552]
  |  |  ------------------
  ------------------
  398|    260|                return unexpected(e);
  399|    260|            }
  400|    812|        }
  401|       |
  402|  88.1k|        auto nothsep_source_view =
  403|  88.1k|            std::basic_string_view<CharT>{nothsep_source};
  404|  88.1k|        SCN_TRY(
  ------------------
  |  |   71|  88.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  88.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 402, False: 87.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    402|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    402|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    402|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    402|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    402|    }                                                  \
  |  |  |  |   70|  88.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  87.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  87.7k|            nothsep_source_it,
  406|  87.7k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  87.7k|                                prefix_result.parsed_base));
  408|       |
  409|  87.7k|        return ranges_polyfill::batch_next(
  410|  87.7k|            prefix_result.iterator,
  411|  87.7k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  87.7k|                ranges::ssize(thsep_indices));
  413|  88.1k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   531k|    {
  335|   531k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   531k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   531k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   531k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   531k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 531k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   531k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   531k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   531k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   531k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.01k, False: 522k]
  ------------------
  339|  9.01k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.01k|                return unexpected_scan_error(
  341|  9.01k|                    scan_error::invalid_scanned_value,
  342|  9.01k|                    "Unexpected '-' sign when parsing an "
  343|  9.01k|                    "unsigned value");
  344|  9.01k|            }
  345|  9.01k|            else {
  346|  9.01k|                if (specs.type ==
  347|  9.01k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.01k|                    return unexpected_scan_error(
  349|  9.01k|                        scan_error::invalid_scanned_value,
  350|  9.01k|                        "'u'-option disallows negative values");
  351|  9.01k|                }
  352|  9.01k|            }
  353|  9.01k|        }
  354|       |
  355|   522k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 92.8k, False: 430k]
  ------------------
  356|  92.8k|            value = T{0};
  357|  92.8k|            return std::next(prefix_result.iterator);
  358|  92.8k|        }
  359|       |
  360|   430k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   430k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 339k, False: 90.6k]
  |  |  ------------------
  ------------------
  361|   339k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 130, False: 339k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    130|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    130|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    130|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    130|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    130|    }                                                  \
  |  |  |  |   70|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   339k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   339k|                    parse_integer_digits_without_thsep(
  363|   339k|                        ranges::subrange{prefix_result.iterator,
  364|   339k|                                         ranges::end(range)},
  365|   339k|                        prefix_result.parsed_base));
  366|       |
  367|   339k|            auto buf = make_contiguous_buffer(
  368|   339k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   339k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.6k, False: 325k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.6k|    }                                                  \
  |  |  |  |   70|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   325k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   325k|                                        prefix_result.parsed_base));
  372|       |
  373|   325k|            return ranges_polyfill::batch_next(
  374|   325k|                prefix_result.iterator,
  375|   325k|                ranges::distance(buf.view().begin(), result_it));
  376|   339k|        }
  377|       |
  378|  90.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  90.6k|            localized_number_formatting_options<CharT>{loc};
  383|  90.6k|#endif
  384|       |
  385|  90.6k|        SCN_TRY(
  ------------------
  |  |   71|  90.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  90.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  90.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  90.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.74k, False: 88.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.74k|    }                                                  \
  |  |  |  |   70|  90.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  88.8k|            parse_digits_result,
  387|  88.8k|            parse_integer_digits_with_thsep(
  388|  88.8k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  88.8k|                prefix_result.parsed_base, locale_options));
  390|  88.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  88.8k|            parse_digits_result;
  392|       |
  393|  88.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 816, False: 88.0k]
  ------------------
  394|    816|            if (auto e = check_thsep_grouping(
  395|    816|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    816|                    thsep_indices, locale_options.grouping);
  397|    816|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    816|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 262, False: 554]
  |  |  ------------------
  ------------------
  398|    262|                return unexpected(e);
  399|    262|            }
  400|    816|        }
  401|       |
  402|  88.6k|        auto nothsep_source_view =
  403|  88.6k|            std::basic_string_view<CharT>{nothsep_source};
  404|  88.6k|        SCN_TRY(
  ------------------
  |  |   71|  88.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  88.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 186, False: 88.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    186|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    186|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    186|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    186|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    186|    }                                                  \
  |  |  |  |   70|  88.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  88.4k|            nothsep_source_it,
  406|  88.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  88.4k|                                prefix_result.parsed_base));
  408|       |
  409|  88.4k|        return ranges_polyfill::batch_next(
  410|  88.4k|            prefix_result.iterator,
  411|  88.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  88.4k|                ranges::ssize(thsep_indices));
  413|  88.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.2k|    {
  335|  47.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  47.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 37.8k, False: 9.45k]
  |  |  ------------------
  ------------------
  361|  37.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.6k, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.6k|    }                                                  \
  |  |  |  |   70|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  14.1k|                    parse_integer_digits_without_thsep(
  363|  14.1k|                        ranges::subrange{prefix_result.iterator,
  364|  14.1k|                                         ranges::end(range)},
  365|  14.1k|                        prefix_result.parsed_base));
  366|       |
  367|  14.1k|            auto buf = make_contiguous_buffer(
  368|  14.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  14.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  14.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  14.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  14.1k|            return ranges_polyfill::batch_next(
  374|  14.1k|                prefix_result.iterator,
  375|  14.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  14.1k|        }
  377|       |
  378|  9.45k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  9.45k|            localized_number_formatting_options<CharT>{loc};
  383|  9.45k|#endif
  384|       |
  385|  9.45k|        SCN_TRY(
  ------------------
  |  |   71|  9.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.72k, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.72k|    }                                                  \
  |  |  |  |   70|  9.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.73k|            parse_digits_result,
  387|  4.73k|            parse_integer_digits_with_thsep(
  388|  4.73k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.73k|                prefix_result.parsed_base, locale_options));
  390|  4.73k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.73k|            parse_digits_result;
  392|       |
  393|  4.73k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.73k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.73k|        auto nothsep_source_view =
  403|  4.73k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.73k|        SCN_TRY(
  ------------------
  |  |   71|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.73k|            nothsep_source_it,
  406|  4.73k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.73k|                                prefix_result.parsed_base));
  408|       |
  409|  4.73k|        return ranges_polyfill::batch_next(
  410|  4.73k|            prefix_result.iterator,
  411|  4.73k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.73k|                ranges::ssize(thsep_indices));
  413|  4.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.2k|    {
  335|  47.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  47.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 37.8k, False: 9.45k]
  |  |  ------------------
  ------------------
  361|  37.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.6k, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.6k|    }                                                  \
  |  |  |  |   70|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  14.1k|                    parse_integer_digits_without_thsep(
  363|  14.1k|                        ranges::subrange{prefix_result.iterator,
  364|  14.1k|                                         ranges::end(range)},
  365|  14.1k|                        prefix_result.parsed_base));
  366|       |
  367|  14.1k|            auto buf = make_contiguous_buffer(
  368|  14.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  14.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  14.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  14.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  14.1k|            return ranges_polyfill::batch_next(
  374|  14.1k|                prefix_result.iterator,
  375|  14.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  14.1k|        }
  377|       |
  378|  9.45k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  9.45k|            localized_number_formatting_options<CharT>{loc};
  383|  9.45k|#endif
  384|       |
  385|  9.45k|        SCN_TRY(
  ------------------
  |  |   71|  9.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.72k, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.72k|    }                                                  \
  |  |  |  |   70|  9.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.73k|            parse_digits_result,
  387|  4.73k|            parse_integer_digits_with_thsep(
  388|  4.73k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.73k|                prefix_result.parsed_base, locale_options));
  390|  4.73k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.73k|            parse_digits_result;
  392|       |
  393|  4.73k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.73k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.73k|        auto nothsep_source_view =
  403|  4.73k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.73k|        SCN_TRY(
  ------------------
  |  |   71|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.73k|            nothsep_source_it,
  406|  4.73k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.73k|                                prefix_result.parsed_base));
  408|       |
  409|  4.73k|        return ranges_polyfill::batch_next(
  410|  4.73k|            prefix_result.iterator,
  411|  4.73k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.73k|                ranges::ssize(thsep_indices));
  413|  4.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.2k|    {
  335|  47.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  47.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 37.8k, False: 9.45k]
  |  |  ------------------
  ------------------
  361|  37.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.6k, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.6k|    }                                                  \
  |  |  |  |   70|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  14.1k|                    parse_integer_digits_without_thsep(
  363|  14.1k|                        ranges::subrange{prefix_result.iterator,
  364|  14.1k|                                         ranges::end(range)},
  365|  14.1k|                        prefix_result.parsed_base));
  366|       |
  367|  14.1k|            auto buf = make_contiguous_buffer(
  368|  14.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  14.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  14.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  14.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  14.1k|            return ranges_polyfill::batch_next(
  374|  14.1k|                prefix_result.iterator,
  375|  14.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  14.1k|        }
  377|       |
  378|  9.45k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  9.45k|            localized_number_formatting_options<CharT>{loc};
  383|  9.45k|#endif
  384|       |
  385|  9.45k|        SCN_TRY(
  ------------------
  |  |   71|  9.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.72k, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.72k|    }                                                  \
  |  |  |  |   70|  9.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.73k|            parse_digits_result,
  387|  4.73k|            parse_integer_digits_with_thsep(
  388|  4.73k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.73k|                prefix_result.parsed_base, locale_options));
  390|  4.73k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.73k|            parse_digits_result;
  392|       |
  393|  4.73k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.73k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.73k|        auto nothsep_source_view =
  403|  4.73k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.73k|        SCN_TRY(
  ------------------
  |  |   71|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.73k|            nothsep_source_it,
  406|  4.73k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.73k|                                prefix_result.parsed_base));
  408|       |
  409|  4.73k|        return ranges_polyfill::batch_next(
  410|  4.73k|            prefix_result.iterator,
  411|  4.73k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.73k|                ranges::ssize(thsep_indices));
  413|  4.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.2k|    {
  335|  47.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  47.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 37.8k, False: 9.45k]
  |  |  ------------------
  ------------------
  361|  37.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.6k, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.6k|    }                                                  \
  |  |  |  |   70|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  14.1k|                    parse_integer_digits_without_thsep(
  363|  14.1k|                        ranges::subrange{prefix_result.iterator,
  364|  14.1k|                                         ranges::end(range)},
  365|  14.1k|                        prefix_result.parsed_base));
  366|       |
  367|  14.1k|            auto buf = make_contiguous_buffer(
  368|  14.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  14.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  14.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  14.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  14.1k|            return ranges_polyfill::batch_next(
  374|  14.1k|                prefix_result.iterator,
  375|  14.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  14.1k|        }
  377|       |
  378|  9.45k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  9.45k|            localized_number_formatting_options<CharT>{loc};
  383|  9.45k|#endif
  384|       |
  385|  9.45k|        SCN_TRY(
  ------------------
  |  |   71|  9.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.72k, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.72k|    }                                                  \
  |  |  |  |   70|  9.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.73k|            parse_digits_result,
  387|  4.73k|            parse_integer_digits_with_thsep(
  388|  4.73k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.73k|                prefix_result.parsed_base, locale_options));
  390|  4.73k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.73k|            parse_digits_result;
  392|       |
  393|  4.73k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.73k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.73k|        auto nothsep_source_view =
  403|  4.73k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.73k|        SCN_TRY(
  ------------------
  |  |   71|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.73k|            nothsep_source_it,
  406|  4.73k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.73k|                                prefix_result.parsed_base));
  408|       |
  409|  4.73k|        return ranges_polyfill::batch_next(
  410|  4.73k|            prefix_result.iterator,
  411|  4.73k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.73k|                ranges::ssize(thsep_indices));
  413|  4.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.2k|    {
  335|  47.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  47.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 37.8k, False: 9.45k]
  |  |  ------------------
  ------------------
  361|  37.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.6k, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.6k|    }                                                  \
  |  |  |  |   70|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  14.1k|                    parse_integer_digits_without_thsep(
  363|  14.1k|                        ranges::subrange{prefix_result.iterator,
  364|  14.1k|                                         ranges::end(range)},
  365|  14.1k|                        prefix_result.parsed_base));
  366|       |
  367|  14.1k|            auto buf = make_contiguous_buffer(
  368|  14.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  14.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  14.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  14.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  14.1k|            return ranges_polyfill::batch_next(
  374|  14.1k|                prefix_result.iterator,
  375|  14.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  14.1k|        }
  377|       |
  378|  9.45k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  9.45k|            localized_number_formatting_options<CharT>{loc};
  383|  9.45k|#endif
  384|       |
  385|  9.45k|        SCN_TRY(
  ------------------
  |  |   71|  9.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.72k, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.72k|    }                                                  \
  |  |  |  |   70|  9.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.73k|            parse_digits_result,
  387|  4.73k|            parse_integer_digits_with_thsep(
  388|  4.73k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.73k|                prefix_result.parsed_base, locale_options));
  390|  4.73k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.73k|            parse_digits_result;
  392|       |
  393|  4.73k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.73k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.73k|        auto nothsep_source_view =
  403|  4.73k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.73k|        SCN_TRY(
  ------------------
  |  |   71|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.73k|            nothsep_source_it,
  406|  4.73k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.73k|                                prefix_result.parsed_base));
  408|       |
  409|  4.73k|        return ranges_polyfill::batch_next(
  410|  4.73k|            prefix_result.iterator,
  411|  4.73k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.73k|                ranges::ssize(thsep_indices));
  413|  4.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  47.2k|    {
  335|  47.2k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  47.2k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  47.2k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 47.2k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  47.2k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 47.2k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  47.2k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  47.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 37.8k, False: 9.45k]
  |  |  ------------------
  ------------------
  361|  37.8k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  37.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  37.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.6k, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.6k|    }                                                  \
  |  |  |  |   70|  37.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  14.1k|                    parse_integer_digits_without_thsep(
  363|  14.1k|                        ranges::subrange{prefix_result.iterator,
  364|  14.1k|                                         ranges::end(range)},
  365|  14.1k|                        prefix_result.parsed_base));
  366|       |
  367|  14.1k|            auto buf = make_contiguous_buffer(
  368|  14.1k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  14.1k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  14.1k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  14.1k|                                        prefix_result.parsed_base));
  372|       |
  373|  14.1k|            return ranges_polyfill::batch_next(
  374|  14.1k|                prefix_result.iterator,
  375|  14.1k|                ranges::distance(buf.view().begin(), result_it));
  376|  14.1k|        }
  377|       |
  378|  9.45k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  9.45k|            localized_number_formatting_options<CharT>{loc};
  383|  9.45k|#endif
  384|       |
  385|  9.45k|        SCN_TRY(
  ------------------
  |  |   71|  9.45k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  9.45k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  9.45k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  9.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.72k, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.72k|    }                                                  \
  |  |  |  |   70|  9.45k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  4.73k|            parse_digits_result,
  387|  4.73k|            parse_integer_digits_with_thsep(
  388|  4.73k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  4.73k|                prefix_result.parsed_base, locale_options));
  390|  4.73k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  4.73k|            parse_digits_result;
  392|       |
  393|  4.73k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 4.73k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  4.73k|        auto nothsep_source_view =
  403|  4.73k|            std::basic_string_view<CharT>{nothsep_source};
  404|  4.73k|        SCN_TRY(
  ------------------
  |  |   71|  4.73k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  4.73k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  4.73k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  4.73k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 4.73k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  4.73k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  4.73k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  4.73k|            nothsep_source_it,
  406|  4.73k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  4.73k|                                prefix_result.parsed_base));
  408|       |
  409|  4.73k|        return ranges_polyfill::batch_next(
  410|  4.73k|            prefix_result.iterator,
  411|  4.73k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  4.73k|                ranges::ssize(thsep_indices));
  413|  4.73k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   152k|    {
  324|   152k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   152k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   152k|        return read_default_with_base(range, value, 0);
  326|   152k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   152k|    {
  287|   152k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   152k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   152k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   152k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   152k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   152k|                return unexpected_scan_error(
  293|   152k|                    scan_error::invalid_scanned_value,
  294|   152k|                    "Unexpected '-' sign when parsing an "
  295|   152k|                    "unsigned value");
  296|   152k|            }
  297|   152k|        }
  298|       |
  299|   152k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 43.3k, False: 108k]
  ------------------
  300|  43.3k|            value = T{0};
  301|  43.3k|            return std::next(prefix_result.iterator);
  302|  43.3k|        }
  303|       |
  304|   217k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 99, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     99|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     99|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     99|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     99|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     99|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   217k|                                     ranges::subrange{prefix_result.iterator,
  306|   217k|                                                      ranges::end(range)},
  307|   217k|                                     prefix_result.parsed_base));
  308|       |
  309|   217k|        auto buf = make_contiguous_buffer(
  310|   217k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   217k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   108k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   108k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   108k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 11.4k, False: 97.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  11.4k|    }                                                  \
  |  |  |  |   70|   108k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  97.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  97.3k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  97.3k|                                    prefix_result.parsed_base));
  314|       |
  315|  97.3k|        return ranges_polyfill::batch_next(
  316|  97.3k|            prefix_result.iterator,
  317|  97.3k|            ranges::distance(buf.view().begin(), result_it));
  318|   217k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  3.80M|{
  121|  3.80M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  3.80M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  3.80M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  3.80M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  3.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 3.80M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  3.80M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  3.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  3.80M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  3.80M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  3.80M|        parse_integer_base_prefix(
  126|  3.80M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  3.80M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 1.26M, False: 2.53M]
  ------------------
  129|  1.26M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.59k, False: 1.26M]
  ------------------
  130|  1.26M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 777k, False: 483k]
  ------------------
  131|   780k|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|   780k|                digits_begin_it, ranges::begin(range));
  133|   780k|        }
  134|   483k|        else {
  135|   483k|            parsed_zero = false;
  136|   483k|        }
  137|  1.26M|    }
  138|  2.53M|    else {
  139|  2.53M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 5.77k, False: 2.53M]
  ------------------
  140|  2.53M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 294k, False: 2.23M]
  ------------------
  141|   300k|            digits_begin_it = base_prefix_begin_it;
  142|   300k|        }
  143|  2.53M|    }
  144|       |
  145|  3.80M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 3.55M, False: 242k]
  ------------------
  146|  3.55M|        sign = sign_type::plus_sign;
  147|  3.55M|    }
  148|  3.80M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  3.80M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  3.80M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  3.80M|{
   88|  3.80M|    switch (base) {
   89|  99.3k|        case 2:
  ------------------
  |  Branch (89:9): [True: 99.3k, False: 3.70M]
  ------------------
   90|       |            // allow 0b/0B
   91|  99.3k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  99.3k|                    false};
   93|       |
   94|   203k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 203k, False: 3.59M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   203k|            bool zero_parsed = false;
   97|   203k|            auto it = apply_opt(
   98|   203k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   203k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   542k|        case 16:
  ------------------
  |  Branch (102:9): [True: 542k, False: 3.25M]
  ------------------
  103|       |            // allow 0x/0X
  104|   542k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   542k|                    false};
  106|       |
  107|  2.44M|        case 0:
  ------------------
  |  Branch (107:9): [True: 2.44M, False: 1.35M]
  ------------------
  108|       |            // detect base
  109|  2.44M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   510k|        default:
  ------------------
  |  Branch (111:9): [True: 510k, False: 3.29M]
  ------------------
  112|       |            // no base prefix allowed
  113|   510k|            return {ranges::begin(range), base, false};
  114|  3.80M|    }
  115|  3.80M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  2.51M|{
   38|  2.51M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  2.51M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  2.61M|{
   53|  2.61M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 26.1k, False: 2.59M]
  ------------------
   54|  26.1k|        return *r;
   55|  26.1k|    }
   56|       |
   57|  2.59M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 1.26M, False: 1.32M]
  ------------------
   58|  1.26M|        zero_parsed = true;
   59|  1.26M|        return *r;
   60|  1.26M|    }
   61|       |
   62|  1.32M|    return unexpected(parse_error::error);
   63|  2.59M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  2.98M|{
   45|  2.98M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  2.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  2.98M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  2.44M|{
   69|  2.44M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 28.7k, False: 2.41M]
  ------------------
   70|  28.7k|        return {*r, 16, false};
   71|  28.7k|    }
   72|  2.41M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 1.98k, False: 2.41M]
  ------------------
   73|  1.98k|        return {*r, 2, false};
   74|  1.98k|    }
   75|  2.41M|    {
   76|  2.41M|        bool zero_parsed{false};
   77|  2.41M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 1.20M, False: 1.21M]
  ------------------
   78|  1.20M|            return {*r, 8, zero_parsed};
   79|  1.20M|        }
   80|  2.41M|    }
   81|  1.21M|    return {ranges::begin(range), 10, false};
   82|  2.41M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  2.50M|{
  156|  2.50M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  2.50M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  2.50M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  2.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.03k, False: 2.50M]
  |  |  ------------------
  ------------------
  160|  2.03k|            return unexpected_scan_error(
  161|  2.03k|                scan_error::invalid_scanned_value,
  162|  2.03k|                "Failed to parse integer: No digits found");
  163|  2.03k|        }
  164|  2.50M|        return ranges::end(range);
  165|  2.50M|    }
  166|  2.50M|    else {
  167|  2.50M|        return read_while1_code_unit(
  168|  2.50M|                   range, [&](char_type ch)
  169|  2.50M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  2.50M|            .transform_error(map_parse_error_to_scan_error(
  171|  2.50M|                scan_error::invalid_scanned_value,
  172|  2.50M|                "Failed to parse integer: No digits found"));
  173|  2.50M|    }
  174|  2.50M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   202k|    {
  324|   202k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   202k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   202k|        return read_default_with_base(range, value, 0);
  326|   202k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   202k|    {
  287|   202k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   202k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   202k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   202k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 202k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   202k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   202k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   202k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   202k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   202k|                return unexpected_scan_error(
  293|   202k|                    scan_error::invalid_scanned_value,
  294|   202k|                    "Unexpected '-' sign when parsing an "
  295|   202k|                    "unsigned value");
  296|   202k|            }
  297|   202k|        }
  298|       |
  299|   202k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 59.6k, False: 142k]
  ------------------
  300|  59.6k|            value = T{0};
  301|  59.6k|            return std::next(prefix_result.iterator);
  302|  59.6k|        }
  303|       |
  304|   284k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 165, False: 142k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    165|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    165|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    165|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    165|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    165|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   284k|                                     ranges::subrange{prefix_result.iterator,
  306|   284k|                                                      ranges::end(range)},
  307|   284k|                                     prefix_result.parsed_base));
  308|       |
  309|   284k|        auto buf = make_contiguous_buffer(
  310|   284k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   284k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.7k, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.7k|    }                                                  \
  |  |  |  |   70|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   131k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   131k|                                    prefix_result.parsed_base));
  314|       |
  315|   131k|        return ranges_polyfill::batch_next(
  316|   131k|            prefix_result.iterator,
  317|   131k|            ranges::distance(buf.view().begin(), result_it));
  318|   284k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   204k|    {
  324|   204k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   204k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   204k|        return read_default_with_base(range, value, 0);
  326|   204k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   204k|    {
  287|   204k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   204k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   204k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   204k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   204k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 204k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   204k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   204k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   204k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   204k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   204k|                return unexpected_scan_error(
  293|   204k|                    scan_error::invalid_scanned_value,
  294|   204k|                    "Unexpected '-' sign when parsing an "
  295|   204k|                    "unsigned value");
  296|   204k|            }
  297|   204k|        }
  298|       |
  299|   204k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 60.0k, False: 144k]
  ------------------
  300|  60.0k|            value = T{0};
  301|  60.0k|            return std::next(prefix_result.iterator);
  302|  60.0k|        }
  303|       |
  304|   289k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   144k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   144k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   144k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 174, False: 144k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    174|    }                                                  \
  |  |  |  |   70|   144k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   289k|                                     ranges::subrange{prefix_result.iterator,
  306|   289k|                                                      ranges::end(range)},
  307|   289k|                                     prefix_result.parsed_base));
  308|       |
  309|   289k|        auto buf = make_contiguous_buffer(
  310|   289k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   289k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   144k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   144k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   144k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 10.5k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  10.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  10.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  10.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  10.5k|    }                                                  \
  |  |  |  |   70|   144k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   133k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   133k|                                    prefix_result.parsed_base));
  314|       |
  315|   133k|        return ranges_polyfill::batch_next(
  316|   133k|            prefix_result.iterator,
  317|   133k|            ranges::distance(buf.view().begin(), result_it));
  318|   289k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   146k|    {
  324|   146k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   146k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   146k|        return read_default_with_base(range, value, 0);
  326|   146k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   146k|    {
  287|   146k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   146k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   146k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   146k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.74k, False: 144k]
  ------------------
  292|  1.74k|                return unexpected_scan_error(
  293|  1.74k|                    scan_error::invalid_scanned_value,
  294|  1.74k|                    "Unexpected '-' sign when parsing an "
  295|  1.74k|                    "unsigned value");
  296|  1.74k|            }
  297|   146k|        }
  298|       |
  299|   144k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 44.1k, False: 100k]
  ------------------
  300|  44.1k|            value = T{0};
  301|  44.1k|            return std::next(prefix_result.iterator);
  302|  44.1k|        }
  303|       |
  304|   200k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     39|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     39|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     39|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     39|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     39|    }                                                  \
  |  |  |  |   70|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   200k|                                     ranges::subrange{prefix_result.iterator,
  306|   200k|                                                      ranges::end(range)},
  307|   200k|                                     prefix_result.parsed_base));
  308|       |
  309|   200k|        auto buf = make_contiguous_buffer(
  310|   200k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   200k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.82k, False: 90.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.82k|    }                                                  \
  |  |  |  |   70|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  90.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  90.2k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  90.2k|                                    prefix_result.parsed_base));
  314|       |
  315|  90.2k|        return ranges_polyfill::batch_next(
  316|  90.2k|            prefix_result.iterator,
  317|  90.2k|            ranges::distance(buf.view().begin(), result_it));
  318|   200k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   170k|    {
  324|   170k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   170k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   170k|        return read_default_with_base(range, value, 0);
  326|   170k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   170k|    {
  287|   170k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   170k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   170k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   170k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 170k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   170k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   170k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   170k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   170k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.84k, False: 168k]
  ------------------
  292|  1.84k|                return unexpected_scan_error(
  293|  1.84k|                    scan_error::invalid_scanned_value,
  294|  1.84k|                    "Unexpected '-' sign when parsing an "
  295|  1.84k|                    "unsigned value");
  296|  1.84k|            }
  297|   170k|        }
  298|       |
  299|   168k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 52.2k, False: 116k]
  ------------------
  300|  52.2k|            value = T{0};
  301|  52.2k|            return std::next(prefix_result.iterator);
  302|  52.2k|        }
  303|       |
  304|   232k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 66, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     66|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   232k|                                     ranges::subrange{prefix_result.iterator,
  306|   232k|                                                      ranges::end(range)},
  307|   232k|                                     prefix_result.parsed_base));
  308|       |
  309|   232k|        auto buf = make_contiguous_buffer(
  310|   232k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   232k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.38k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.38k|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   107k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   107k|                                    prefix_result.parsed_base));
  314|       |
  315|   107k|        return ranges_polyfill::batch_next(
  316|   107k|            prefix_result.iterator,
  317|   107k|            ranges::distance(buf.view().begin(), result_it));
  318|   232k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   171k|    {
  324|   171k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   171k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   171k|        return read_default_with_base(range, value, 0);
  326|   171k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   171k|    {
  287|   171k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   171k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   171k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   171k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 171k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   171k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   171k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   171k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   171k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 1.96k, False: 169k]
  ------------------
  292|  1.96k|                return unexpected_scan_error(
  293|  1.96k|                    scan_error::invalid_scanned_value,
  294|  1.96k|                    "Unexpected '-' sign when parsing an "
  295|  1.96k|                    "unsigned value");
  296|  1.96k|            }
  297|   171k|        }
  298|       |
  299|   169k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 52.4k, False: 117k]
  ------------------
  300|  52.4k|            value = T{0};
  301|  52.4k|            return std::next(prefix_result.iterator);
  302|  52.4k|        }
  303|       |
  304|   234k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 66, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     66|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     66|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     66|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     66|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     66|    }                                                  \
  |  |  |  |   70|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   234k|                                     ranges::subrange{prefix_result.iterator,
  306|   234k|                                                      ranges::end(range)},
  307|   234k|                                     prefix_result.parsed_base));
  308|       |
  309|   234k|        auto buf = make_contiguous_buffer(
  310|   234k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   234k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.17k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.17k|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   107k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   107k|                                    prefix_result.parsed_base));
  314|       |
  315|   107k|        return ranges_polyfill::batch_next(
  316|   107k|            prefix_result.iterator,
  317|   107k|            ranges::distance(buf.view().begin(), result_it));
  318|   234k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   487k|{
  185|   487k|    std::basic_string<CharT> output;
  186|   487k|    std::string thsep_indices;
  187|   487k|    auto it = ranges::begin(range);
  188|   487k|    bool digit_matched = false;
  189|  1.93M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.93M, False: 5.59k]
  ------------------
  190|  1.93M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 67.6k, False: 1.86M]
  ------------------
  191|  67.6k|            thsep_indices.push_back(static_cast<char>(
  192|  67.6k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  67.6k|        }
  194|  1.86M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 482k, False: 1.38M]
  ------------------
  195|   482k|            break;
  196|   482k|        }
  197|  1.38M|        else {
  198|  1.38M|            output.push_back(*it);
  199|  1.38M|            digit_matched = true;
  200|  1.38M|        }
  201|  1.93M|    }
  202|   487k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   487k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 35.2k, False: 452k]
  |  |  ------------------
  ------------------
  203|  35.2k|        return unexpected_scan_error(
  204|  35.2k|            scan_error::invalid_scanned_value,
  205|  35.2k|            "Failed to parse integer: No digits found");
  206|  35.2k|    }
  207|   452k|    return std::tuple{it, output, thsep_indices};
  208|   487k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  3.26M|    {
  280|  3.26M|        detail::check_int_type_specs(specs, eh);
  281|  3.26M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   367k|    {
  335|   367k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   367k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   367k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   367k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   367k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 367k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   367k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   367k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   367k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 30.4k, False: 336k]
  ------------------
  339|  30.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  30.4k|                return unexpected_scan_error(
  341|  30.4k|                    scan_error::invalid_scanned_value,
  342|  30.4k|                    "Unexpected '-' sign when parsing an "
  343|  30.4k|                    "unsigned value");
  344|  30.4k|            }
  345|  30.4k|            else {
  346|  30.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 30.4k]
  ------------------
  347|  30.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  30.4k|            }
  353|  30.4k|        }
  354|       |
  355|   367k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 66.3k, False: 300k]
  ------------------
  356|  66.3k|            value = T{0};
  357|  66.3k|            return std::next(prefix_result.iterator);
  358|  66.3k|        }
  359|       |
  360|   300k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   300k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 228k, False: 72.8k]
  |  |  ------------------
  ------------------
  361|   228k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   228k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   228k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   228k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 234, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    234|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    234|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    234|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    234|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    234|    }                                                  \
  |  |  |  |   70|   228k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   227k|                    parse_integer_digits_without_thsep(
  363|   227k|                        ranges::subrange{prefix_result.iterator,
  364|   227k|                                         ranges::end(range)},
  365|   227k|                        prefix_result.parsed_base));
  366|       |
  367|   227k|            auto buf = make_contiguous_buffer(
  368|   227k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   227k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   227k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 39.3k, False: 188k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  39.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  39.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  39.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  39.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  39.3k|    }                                                  \
  |  |  |  |   70|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   188k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   188k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   188k|                                        prefix_result.parsed_base));
  372|       |
  373|   188k|            return ranges_polyfill::batch_next(
  374|   188k|                prefix_result.iterator,
  375|   188k|                ranges::distance(buf.view().begin(), result_it));
  376|   227k|        }
  377|       |
  378|  72.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  72.8k|            localized_number_formatting_options<CharT>{loc};
  383|  72.8k|#endif
  384|       |
  385|  72.8k|        SCN_TRY(
  ------------------
  |  |   71|  72.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  72.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  72.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  72.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.70k, False: 67.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.70k|    }                                                  \
  |  |  |  |   70|  72.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  67.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  67.0k|            parse_digits_result,
  387|  67.0k|            parse_integer_digits_with_thsep(
  388|  67.0k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  67.0k|                prefix_result.parsed_base, locale_options));
  390|  67.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  67.0k|            parse_digits_result;
  392|       |
  393|  67.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 806, False: 66.2k]
  ------------------
  394|    806|            if (auto e = check_thsep_grouping(
  395|    806|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    806|                    thsep_indices, locale_options.grouping);
  397|    806|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    806|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 332, False: 474]
  |  |  ------------------
  ------------------
  398|    332|                return unexpected(e);
  399|    332|            }
  400|    806|        }
  401|       |
  402|  66.7k|        auto nothsep_source_view =
  403|  66.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  66.7k|        SCN_TRY(
  ------------------
  |  |   71|  66.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.66k, False: 65.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.66k|    }                                                  \
  |  |  |  |   70|  66.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  65.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  65.1k|            nothsep_source_it,
  406|  65.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  65.1k|                                prefix_result.parsed_base));
  408|       |
  409|  65.1k|        return ranges_polyfill::batch_next(
  410|  65.1k|            prefix_result.iterator,
  411|  65.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  65.1k|                ranges::ssize(thsep_indices));
  413|  66.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   542k|    {
  335|   542k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   542k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   542k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   542k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   542k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 542k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   542k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   542k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   542k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   542k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 35.7k, False: 506k]
  ------------------
  339|  35.7k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  35.7k|                return unexpected_scan_error(
  341|  35.7k|                    scan_error::invalid_scanned_value,
  342|  35.7k|                    "Unexpected '-' sign when parsing an "
  343|  35.7k|                    "unsigned value");
  344|  35.7k|            }
  345|  35.7k|            else {
  346|  35.7k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 35.7k]
  ------------------
  347|  35.7k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  35.7k|            }
  353|  35.7k|        }
  354|       |
  355|   542k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 89.0k, False: 452k]
  ------------------
  356|  89.0k|            value = T{0};
  357|  89.0k|            return std::next(prefix_result.iterator);
  358|  89.0k|        }
  359|       |
  360|   452k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   452k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 357k, False: 95.1k]
  |  |  ------------------
  ------------------
  361|   357k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   357k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   357k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   357k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 388, False: 357k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    388|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    388|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    388|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    388|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    388|    }                                                  \
  |  |  |  |   70|   357k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   357k|                    parse_integer_digits_without_thsep(
  363|   357k|                        ranges::subrange{prefix_result.iterator,
  364|   357k|                                         ranges::end(range)},
  365|   357k|                        prefix_result.parsed_base));
  366|       |
  367|   357k|            auto buf = make_contiguous_buffer(
  368|   357k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   357k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   357k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   357k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   357k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 37.5k, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  37.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  37.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  37.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  37.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  37.5k|    }                                                  \
  |  |  |  |   70|   357k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   319k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   319k|                                        prefix_result.parsed_base));
  372|       |
  373|   319k|            return ranges_polyfill::batch_next(
  374|   319k|                prefix_result.iterator,
  375|   319k|                ranges::distance(buf.view().begin(), result_it));
  376|   357k|        }
  377|       |
  378|  95.1k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  95.1k|            localized_number_formatting_options<CharT>{loc};
  383|  95.1k|#endif
  384|       |
  385|  95.1k|        SCN_TRY(
  ------------------
  |  |   71|  95.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  95.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  95.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  95.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.23k, False: 88.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.23k|    }                                                  \
  |  |  |  |   70|  95.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  88.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  88.8k|            parse_digits_result,
  387|  88.8k|            parse_integer_digits_with_thsep(
  388|  88.8k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  88.8k|                prefix_result.parsed_base, locale_options));
  390|  88.8k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  88.8k|            parse_digits_result;
  392|       |
  393|  88.8k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 890, False: 88.0k]
  ------------------
  394|    890|            if (auto e = check_thsep_grouping(
  395|    890|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    890|                    thsep_indices, locale_options.grouping);
  397|    890|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    890|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 416, False: 474]
  |  |  ------------------
  ------------------
  398|    416|                return unexpected(e);
  399|    416|            }
  400|    890|        }
  401|       |
  402|  88.4k|        auto nothsep_source_view =
  403|  88.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  88.4k|        SCN_TRY(
  ------------------
  |  |   71|  88.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  88.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  88.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  88.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 582, False: 87.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    582|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    582|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    582|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    582|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    582|    }                                                  \
  |  |  |  |   70|  88.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  87.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  87.8k|            nothsep_source_it,
  406|  87.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  87.8k|                                prefix_result.parsed_base));
  408|       |
  409|  87.8k|        return ranges_polyfill::batch_next(
  410|  87.8k|            prefix_result.iterator,
  411|  87.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  87.8k|                ranges::ssize(thsep_indices));
  413|  88.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   550k|    {
  335|   550k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   550k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   550k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   550k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   550k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 550k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   550k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   550k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   550k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   550k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 36.5k, False: 513k]
  ------------------
  339|  36.5k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  36.5k|                return unexpected_scan_error(
  341|  36.5k|                    scan_error::invalid_scanned_value,
  342|  36.5k|                    "Unexpected '-' sign when parsing an "
  343|  36.5k|                    "unsigned value");
  344|  36.5k|            }
  345|  36.5k|            else {
  346|  36.5k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 36.5k]
  ------------------
  347|  36.5k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  36.5k|            }
  353|  36.5k|        }
  354|       |
  355|   550k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 89.5k, False: 460k]
  ------------------
  356|  89.5k|            value = T{0};
  357|  89.5k|            return std::next(prefix_result.iterator);
  358|  89.5k|        }
  359|       |
  360|   460k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   460k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 363k, False: 96.5k]
  |  |  ------------------
  ------------------
  361|   363k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   363k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   363k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   363k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 416, False: 363k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    416|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    416|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    416|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    416|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    416|    }                                                  \
  |  |  |  |   70|   363k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   363k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   363k|                    parse_integer_digits_without_thsep(
  363|   363k|                        ranges::subrange{prefix_result.iterator,
  364|   363k|                                         ranges::end(range)},
  365|   363k|                        prefix_result.parsed_base));
  366|       |
  367|   363k|            auto buf = make_contiguous_buffer(
  368|   363k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   363k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   363k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   363k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   363k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   363k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 37.1k, False: 326k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  37.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  37.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  37.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  37.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  37.1k|    }                                                  \
  |  |  |  |   70|   363k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   326k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   326k|                                        prefix_result.parsed_base));
  372|       |
  373|   326k|            return ranges_polyfill::batch_next(
  374|   326k|                prefix_result.iterator,
  375|   326k|                ranges::distance(buf.view().begin(), result_it));
  376|   363k|        }
  377|       |
  378|  96.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  96.5k|            localized_number_formatting_options<CharT>{loc};
  383|  96.5k|#endif
  384|       |
  385|  96.5k|        SCN_TRY(
  ------------------
  |  |   71|  96.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.37k, False: 90.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.37k|    }                                                  \
  |  |  |  |   70|  96.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  90.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  90.2k|            parse_digits_result,
  387|  90.2k|            parse_integer_digits_with_thsep(
  388|  90.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  90.2k|                prefix_result.parsed_base, locale_options));
  390|  90.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  90.2k|            parse_digits_result;
  392|       |
  393|  90.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 908, False: 89.3k]
  ------------------
  394|    908|            if (auto e = check_thsep_grouping(
  395|    908|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    908|                    thsep_indices, locale_options.grouping);
  397|    908|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    908|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 432, False: 476]
  |  |  ------------------
  ------------------
  398|    432|                return unexpected(e);
  399|    432|            }
  400|    908|        }
  401|       |
  402|  89.7k|        auto nothsep_source_view =
  403|  89.7k|            std::basic_string_view<CharT>{nothsep_source};
  404|  89.7k|        SCN_TRY(
  ------------------
  |  |   71|  89.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  89.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  89.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  89.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 336, False: 89.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    336|    }                                                  \
  |  |  |  |   70|  89.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  89.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  89.4k|            nothsep_source_it,
  406|  89.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  89.4k|                                prefix_result.parsed_base));
  408|       |
  409|  89.4k|        return ranges_polyfill::batch_next(
  410|  89.4k|            prefix_result.iterator,
  411|  89.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  89.4k|                ranges::ssize(thsep_indices));
  413|  89.7k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   372k|    {
  335|   372k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   372k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   372k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   372k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 372k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   372k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   372k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   372k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.13k, False: 366k]
  ------------------
  339|  6.13k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.13k|                return unexpected_scan_error(
  341|  6.13k|                    scan_error::invalid_scanned_value,
  342|  6.13k|                    "Unexpected '-' sign when parsing an "
  343|  6.13k|                    "unsigned value");
  344|  6.13k|            }
  345|  6.13k|            else {
  346|  6.13k|                if (specs.type ==
  347|  6.13k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.13k|                    return unexpected_scan_error(
  349|  6.13k|                        scan_error::invalid_scanned_value,
  350|  6.13k|                        "'u'-option disallows negative values");
  351|  6.13k|                }
  352|  6.13k|            }
  353|  6.13k|        }
  354|       |
  355|   366k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 66.7k, False: 299k]
  ------------------
  356|  66.7k|            value = T{0};
  357|  66.7k|            return std::next(prefix_result.iterator);
  358|  66.7k|        }
  359|       |
  360|   299k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   299k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 232k, False: 67.0k]
  |  |  ------------------
  ------------------
  361|   232k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   232k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 88, False: 232k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     88|    }                                                  \
  |  |  |  |   70|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   232k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   232k|                    parse_integer_digits_without_thsep(
  363|   232k|                        ranges::subrange{prefix_result.iterator,
  364|   232k|                                         ranges::end(range)},
  365|   232k|                        prefix_result.parsed_base));
  366|       |
  367|   232k|            auto buf = make_contiguous_buffer(
  368|   232k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   232k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   232k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   232k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   232k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 34.6k, False: 197k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  34.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  34.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  34.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  34.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  34.6k|    }                                                  \
  |  |  |  |   70|   232k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   197k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   197k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   197k|                                        prefix_result.parsed_base));
  372|       |
  373|   197k|            return ranges_polyfill::batch_next(
  374|   197k|                prefix_result.iterator,
  375|   197k|                ranges::distance(buf.view().begin(), result_it));
  376|   232k|        }
  377|       |
  378|  67.0k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  67.0k|            localized_number_formatting_options<CharT>{loc};
  383|  67.0k|#endif
  384|       |
  385|  67.0k|        SCN_TRY(
  ------------------
  |  |   71|  67.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  67.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  67.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  67.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.51k, False: 61.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.51k|    }                                                  \
  |  |  |  |   70|  67.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  61.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  61.5k|            parse_digits_result,
  387|  61.5k|            parse_integer_digits_with_thsep(
  388|  61.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  61.5k|                prefix_result.parsed_base, locale_options));
  390|  61.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  61.5k|            parse_digits_result;
  392|       |
  393|  61.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 674, False: 60.8k]
  ------------------
  394|    674|            if (auto e = check_thsep_grouping(
  395|    674|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    674|                    thsep_indices, locale_options.grouping);
  397|    674|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    674|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 216, False: 458]
  |  |  ------------------
  ------------------
  398|    216|                return unexpected(e);
  399|    216|            }
  400|    674|        }
  401|       |
  402|  61.2k|        auto nothsep_source_view =
  403|  61.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  61.2k|        SCN_TRY(
  ------------------
  |  |   71|  61.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  61.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  61.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  61.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 818, False: 60.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    818|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    818|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    818|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    818|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    818|    }                                                  \
  |  |  |  |   70|  61.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  60.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  60.4k|            nothsep_source_it,
  406|  60.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  60.4k|                                prefix_result.parsed_base));
  408|       |
  409|  60.4k|        return ranges_polyfill::batch_next(
  410|  60.4k|            prefix_result.iterator,
  411|  60.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  60.4k|                ranges::ssize(thsep_indices));
  413|  61.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   459k|    {
  335|   459k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   459k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   459k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   459k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   459k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 459k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   459k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   459k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   459k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.45k, False: 453k]
  ------------------
  339|  6.45k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.45k|                return unexpected_scan_error(
  341|  6.45k|                    scan_error::invalid_scanned_value,
  342|  6.45k|                    "Unexpected '-' sign when parsing an "
  343|  6.45k|                    "unsigned value");
  344|  6.45k|            }
  345|  6.45k|            else {
  346|  6.45k|                if (specs.type ==
  347|  6.45k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.45k|                    return unexpected_scan_error(
  349|  6.45k|                        scan_error::invalid_scanned_value,
  350|  6.45k|                        "'u'-option disallows negative values");
  351|  6.45k|                }
  352|  6.45k|            }
  353|  6.45k|        }
  354|       |
  355|   453k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 77.6k, False: 375k]
  ------------------
  356|  77.6k|            value = T{0};
  357|  77.6k|            return std::next(prefix_result.iterator);
  358|  77.6k|        }
  359|       |
  360|   375k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   375k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 297k, False: 77.8k]
  |  |  ------------------
  ------------------
  361|   297k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 150, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    150|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    150|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    150|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    150|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    150|    }                                                  \
  |  |  |  |   70|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   297k|                    parse_integer_digits_without_thsep(
  363|   297k|                        ranges::subrange{prefix_result.iterator,
  364|   297k|                                         ranges::end(range)},
  365|   297k|                        prefix_result.parsed_base));
  366|       |
  367|   297k|            auto buf = make_contiguous_buffer(
  368|   297k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   297k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 33.4k, False: 264k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  33.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  33.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  33.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  33.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  33.4k|    }                                                  \
  |  |  |  |   70|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   264k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   264k|                                        prefix_result.parsed_base));
  372|       |
  373|   264k|            return ranges_polyfill::batch_next(
  374|   264k|                prefix_result.iterator,
  375|   264k|                ranges::distance(buf.view().begin(), result_it));
  376|   297k|        }
  377|       |
  378|  77.8k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  77.8k|            localized_number_formatting_options<CharT>{loc};
  383|  77.8k|#endif
  384|       |
  385|  77.8k|        SCN_TRY(
  ------------------
  |  |   71|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.68k, False: 72.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.68k|    }                                                  \
  |  |  |  |   70|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  72.2k|            parse_digits_result,
  387|  72.2k|            parse_integer_digits_with_thsep(
  388|  72.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  72.2k|                prefix_result.parsed_base, locale_options));
  390|  72.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  72.2k|            parse_digits_result;
  392|       |
  393|  72.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 708, False: 71.4k]
  ------------------
  394|    708|            if (auto e = check_thsep_grouping(
  395|    708|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    708|                    thsep_indices, locale_options.grouping);
  397|    708|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 250, False: 458]
  |  |  ------------------
  ------------------
  398|    250|                return unexpected(e);
  399|    250|            }
  400|    708|        }
  401|       |
  402|  71.9k|        auto nothsep_source_view =
  403|  71.9k|            std::basic_string_view<CharT>{nothsep_source};
  404|  71.9k|        SCN_TRY(
  ------------------
  |  |   71|  71.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  71.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  71.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  71.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 338, False: 71.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    338|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    338|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    338|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    338|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    338|    }                                                  \
  |  |  |  |   70|  71.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  71.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  71.6k|            nothsep_source_it,
  406|  71.6k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  71.6k|                                prefix_result.parsed_base));
  408|       |
  409|  71.6k|        return ranges_polyfill::batch_next(
  410|  71.6k|            prefix_result.iterator,
  411|  71.6k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  71.6k|                ranges::ssize(thsep_indices));
  413|  71.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   462k|    {
  335|   462k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   462k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   462k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   462k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   462k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 462k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   462k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   462k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   462k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   462k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 6.79k, False: 455k]
  ------------------
  339|  6.79k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  6.79k|                return unexpected_scan_error(
  341|  6.79k|                    scan_error::invalid_scanned_value,
  342|  6.79k|                    "Unexpected '-' sign when parsing an "
  343|  6.79k|                    "unsigned value");
  344|  6.79k|            }
  345|  6.79k|            else {
  346|  6.79k|                if (specs.type ==
  347|  6.79k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  6.79k|                    return unexpected_scan_error(
  349|  6.79k|                        scan_error::invalid_scanned_value,
  350|  6.79k|                        "'u'-option disallows negative values");
  351|  6.79k|                }
  352|  6.79k|            }
  353|  6.79k|        }
  354|       |
  355|   455k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 77.9k, False: 377k]
  ------------------
  356|  77.9k|            value = T{0};
  357|  77.9k|            return std::next(prefix_result.iterator);
  358|  77.9k|        }
  359|       |
  360|   377k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   377k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 299k, False: 78.2k]
  |  |  ------------------
  ------------------
  361|   299k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   299k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   299k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   299k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 150, False: 299k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    150|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    150|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    150|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    150|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    150|    }                                                  \
  |  |  |  |   70|   299k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   299k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   299k|                    parse_integer_digits_without_thsep(
  363|   299k|                        ranges::subrange{prefix_result.iterator,
  364|   299k|                                         ranges::end(range)},
  365|   299k|                        prefix_result.parsed_base));
  366|       |
  367|   299k|            auto buf = make_contiguous_buffer(
  368|   299k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   299k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   299k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   299k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   299k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 33.0k, False: 266k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  33.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  33.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  33.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  33.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  33.0k|    }                                                  \
  |  |  |  |   70|   299k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   266k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   266k|                                        prefix_result.parsed_base));
  372|       |
  373|   266k|            return ranges_polyfill::batch_next(
  374|   266k|                prefix_result.iterator,
  375|   266k|                ranges::distance(buf.view().begin(), result_it));
  376|   299k|        }
  377|       |
  378|  78.2k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  78.2k|            localized_number_formatting_options<CharT>{loc};
  383|  78.2k|#endif
  384|       |
  385|  78.2k|        SCN_TRY(
  ------------------
  |  |   71|  78.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  78.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.74k, False: 72.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.74k|    }                                                  \
  |  |  |  |   70|  78.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  72.5k|            parse_digits_result,
  387|  72.5k|            parse_integer_digits_with_thsep(
  388|  72.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  72.5k|                prefix_result.parsed_base, locale_options));
  390|  72.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  72.5k|            parse_digits_result;
  392|       |
  393|  72.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 708, False: 71.8k]
  ------------------
  394|    708|            if (auto e = check_thsep_grouping(
  395|    708|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    708|                    thsep_indices, locale_options.grouping);
  397|    708|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    708|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 250, False: 458]
  |  |  ------------------
  ------------------
  398|    250|                return unexpected(e);
  399|    250|            }
  400|    708|        }
  401|       |
  402|  72.2k|        auto nothsep_source_view =
  403|  72.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  72.2k|        SCN_TRY(
  ------------------
  |  |   71|  72.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  72.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  72.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  72.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 146, False: 72.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    146|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    146|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    146|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    146|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    146|    }                                                  \
  |  |  |  |   70|  72.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  72.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  72.1k|            nothsep_source_it,
  406|  72.1k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  72.1k|                                prefix_result.parsed_base));
  408|       |
  409|  72.1k|        return ranges_polyfill::batch_next(
  410|  72.1k|            prefix_result.iterator,
  411|  72.1k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  72.1k|                ranges::ssize(thsep_indices));
  413|  72.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  24.9k|    {
  324|  24.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  24.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  24.9k|        return read_default_with_base(range, value, 0);
  326|  24.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  24.9k|    {
  287|  24.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  24.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  24.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  24.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  24.9k|                return unexpected_scan_error(
  293|  24.9k|                    scan_error::invalid_scanned_value,
  294|  24.9k|                    "Unexpected '-' sign when parsing an "
  295|  24.9k|                    "unsigned value");
  296|  24.9k|            }
  297|  24.9k|        }
  298|       |
  299|  24.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 24.9k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  37.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.4k, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.4k|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  37.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  37.3k|                                                      ranges::end(range)},
  307|  37.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  37.3k|        auto buf = make_contiguous_buffer(
  310|  37.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  37.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  12.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  12.4k|                                    prefix_result.parsed_base));
  314|       |
  315|  12.4k|        return ranges_polyfill::batch_next(
  316|  12.4k|            prefix_result.iterator,
  317|  12.4k|            ranges::distance(buf.view().begin(), result_it));
  318|  37.3k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   639k|{
  121|   639k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   639k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   639k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   639k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 639k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   639k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   639k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   639k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   639k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   639k|        parse_integer_base_prefix(
  126|   639k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   639k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 639k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   639k|    else {
  139|   639k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 639k]
  ------------------
  140|   639k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 365k, False: 274k]
  ------------------
  141|   365k|            digits_begin_it = base_prefix_begin_it;
  142|   365k|        }
  143|   639k|    }
  144|       |
  145|   639k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 639k, False: 0]
  ------------------
  146|   639k|        sign = sign_type::plus_sign;
  147|   639k|    }
  148|   639k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   639k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   639k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   639k|{
   88|   639k|    switch (base) {
   89|  49.8k|        case 2:
  ------------------
  |  Branch (89:9): [True: 49.8k, False: 589k]
  ------------------
   90|       |            // allow 0b/0B
   91|  49.8k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  49.8k|                    false};
   93|       |
   94|  49.8k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 49.8k, False: 589k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  49.8k|            bool zero_parsed = false;
   97|  49.8k|            auto it = apply_opt(
   98|  49.8k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  49.8k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  91.3k|        case 16:
  ------------------
  |  Branch (102:9): [True: 91.3k, False: 548k]
  ------------------
  103|       |            // allow 0x/0X
  104|  91.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  91.3k|                    false};
  106|       |
  107|   348k|        case 0:
  ------------------
  |  Branch (107:9): [True: 348k, False: 290k]
  ------------------
  108|       |            // detect base
  109|   348k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  99.6k|        default:
  ------------------
  |  Branch (111:9): [True: 99.6k, False: 539k]
  ------------------
  112|       |            // no base prefix allowed
  113|  99.6k|            return {ranges::begin(range), base, false};
  114|   639k|    }
  115|   639k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   398k|{
   38|   398k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   398k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   398k|{
   53|   398k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 398k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   398k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 398k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   398k|    return unexpected(parse_error::error);
   63|   398k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   440k|{
   45|   440k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   440k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   348k|{
   69|   348k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 348k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   348k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 348k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   348k|    {
   76|   348k|        bool zero_parsed{false};
   77|   348k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 348k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   348k|    }
   81|   348k|    return {ranges::begin(range), 10, false};
   82|   348k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   539k|{
  156|   539k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   539k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   539k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   539k|            return unexpected_scan_error(
  161|   539k|                scan_error::invalid_scanned_value,
  162|   539k|                "Failed to parse integer: No digits found");
  163|   539k|        }
  164|   539k|        return ranges::end(range);
  165|   539k|    }
  166|   539k|    else {
  167|   539k|        return read_while1_code_unit(
  168|   539k|                   range, [&](char_type ch)
  169|   539k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   539k|            .transform_error(map_parse_error_to_scan_error(
  171|   539k|                scan_error::invalid_scanned_value,
  172|   539k|                "Failed to parse integer: No digits found"));
  173|   539k|    }
  174|   539k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|   988k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  24.9k|    {
  324|  24.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  24.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  24.9k|        return read_default_with_base(range, value, 0);
  326|  24.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  24.9k|    {
  287|  24.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  24.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  24.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  24.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  24.9k|                return unexpected_scan_error(
  293|  24.9k|                    scan_error::invalid_scanned_value,
  294|  24.9k|                    "Unexpected '-' sign when parsing an "
  295|  24.9k|                    "unsigned value");
  296|  24.9k|            }
  297|  24.9k|        }
  298|       |
  299|  24.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 24.9k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  37.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.4k, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.4k|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  37.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  37.3k|                                                      ranges::end(range)},
  307|  37.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  37.3k|        auto buf = make_contiguous_buffer(
  310|  37.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  37.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  12.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  12.4k|                                    prefix_result.parsed_base));
  314|       |
  315|  12.4k|        return ranges_polyfill::batch_next(
  316|  12.4k|            prefix_result.iterator,
  317|  12.4k|            ranges::distance(buf.view().begin(), result_it));
  318|  37.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  24.9k|    {
  324|  24.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  24.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  24.9k|        return read_default_with_base(range, value, 0);
  326|  24.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  24.9k|    {
  287|  24.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  24.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  24.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  24.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  24.9k|                return unexpected_scan_error(
  293|  24.9k|                    scan_error::invalid_scanned_value,
  294|  24.9k|                    "Unexpected '-' sign when parsing an "
  295|  24.9k|                    "unsigned value");
  296|  24.9k|            }
  297|  24.9k|        }
  298|       |
  299|  24.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 24.9k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  37.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.4k, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.4k|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  37.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  37.3k|                                                      ranges::end(range)},
  307|  37.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  37.3k|        auto buf = make_contiguous_buffer(
  310|  37.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  37.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  12.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  12.4k|                                    prefix_result.parsed_base));
  314|       |
  315|  12.4k|        return ranges_polyfill::batch_next(
  316|  12.4k|            prefix_result.iterator,
  317|  12.4k|            ranges::distance(buf.view().begin(), result_it));
  318|  37.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  24.9k|    {
  324|  24.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  24.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  24.9k|        return read_default_with_base(range, value, 0);
  326|  24.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  24.9k|    {
  287|  24.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  24.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  24.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  24.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 24.9k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  24.9k|        }
  298|       |
  299|  24.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 24.9k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  37.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.4k, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.4k|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  37.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  37.3k|                                                      ranges::end(range)},
  307|  37.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  37.3k|        auto buf = make_contiguous_buffer(
  310|  37.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  37.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  12.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  12.4k|                                    prefix_result.parsed_base));
  314|       |
  315|  12.4k|        return ranges_polyfill::batch_next(
  316|  12.4k|            prefix_result.iterator,
  317|  12.4k|            ranges::distance(buf.view().begin(), result_it));
  318|  37.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  24.9k|    {
  324|  24.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  24.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  24.9k|        return read_default_with_base(range, value, 0);
  326|  24.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  24.9k|    {
  287|  24.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  24.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  24.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  24.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 24.9k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  24.9k|        }
  298|       |
  299|  24.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 24.9k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  37.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.4k, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.4k|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  37.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  37.3k|                                                      ranges::end(range)},
  307|  37.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  37.3k|        auto buf = make_contiguous_buffer(
  310|  37.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  37.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  12.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  12.4k|                                    prefix_result.parsed_base));
  314|       |
  315|  12.4k|        return ranges_polyfill::batch_next(
  316|  12.4k|            prefix_result.iterator,
  317|  12.4k|            ranges::distance(buf.view().begin(), result_it));
  318|  37.3k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  24.9k|    {
  324|  24.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  24.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  24.9k|        return read_default_with_base(range, value, 0);
  326|  24.9k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  24.9k|    {
  287|  24.9k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  24.9k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  24.9k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  24.9k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 24.9k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  24.9k|        }
  298|       |
  299|  24.9k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 24.9k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  37.3k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.4k, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.4k|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  37.3k|                                     ranges::subrange{prefix_result.iterator,
  306|  37.3k|                                                      ranges::end(range)},
  307|  37.3k|                                     prefix_result.parsed_base));
  308|       |
  309|  37.3k|        auto buf = make_contiguous_buffer(
  310|  37.3k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  37.3k|        SCN_TRY(result_it,
  ------------------
  |  |   71|  12.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  12.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  12.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  12.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|  12.4k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|  12.4k|                                    prefix_result.parsed_base));
  314|       |
  315|  12.4k|        return ranges_polyfill::batch_next(
  316|  12.4k|            prefix_result.iterator,
  317|  12.4k|            ranges::distance(buf.view().begin(), result_it));
  318|  37.3k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  99.6k|{
  185|  99.6k|    std::basic_string<CharT> output;
  186|  99.6k|    std::string thsep_indices;
  187|  99.6k|    auto it = ranges::begin(range);
  188|  99.6k|    bool digit_matched = false;
  189|   199k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 199k, False: 24]
  ------------------
  190|   199k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 199k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|   199k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 99.6k, False: 99.6k]
  ------------------
  195|  99.6k|            break;
  196|  99.6k|        }
  197|  99.6k|        else {
  198|  99.6k|            output.push_back(*it);
  199|  99.6k|            digit_matched = true;
  200|  99.6k|        }
  201|   199k|    }
  202|  99.6k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  99.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 49.8k, False: 49.8k]
  |  |  ------------------
  ------------------
  203|  49.8k|        return unexpected_scan_error(
  204|  49.8k|            scan_error::invalid_scanned_value,
  205|  49.8k|            "Failed to parse integer: No digits found");
  206|  49.8k|    }
  207|  49.8k|    return std::tuple{it, output, thsep_indices};
  208|  99.6k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  74.7k|    {
  335|  74.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  74.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 74.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  74.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  74.7k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  74.7k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 74.7k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  74.7k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 74.7k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  74.7k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  74.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 58.1k, False: 16.6k]
  |  |  ------------------
  ------------------
  361|  58.1k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  58.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  58.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  58.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  58.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 33.2k, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  33.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  33.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  33.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  33.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  33.2k|    }                                                  \
  |  |  |  |   70|  58.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  24.9k|                    parse_integer_digits_without_thsep(
  363|  24.9k|                        ranges::subrange{prefix_result.iterator,
  364|  24.9k|                                         ranges::end(range)},
  365|  24.9k|                        prefix_result.parsed_base));
  366|       |
  367|  24.9k|            auto buf = make_contiguous_buffer(
  368|  24.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  24.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.30k, False: 16.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.30k|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  16.6k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  16.6k|                                        prefix_result.parsed_base));
  372|       |
  373|  16.6k|            return ranges_polyfill::batch_next(
  374|  16.6k|                prefix_result.iterator,
  375|  16.6k|                ranges::distance(buf.view().begin(), result_it));
  376|  24.9k|        }
  377|       |
  378|  16.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  16.6k|            localized_number_formatting_options<CharT>{loc};
  383|  16.6k|#endif
  384|       |
  385|  16.6k|        SCN_TRY(
  ------------------
  |  |   71|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.30k, False: 8.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.30k|    }                                                  \
  |  |  |  |   70|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  8.30k|            parse_digits_result,
  387|  8.30k|            parse_integer_digits_with_thsep(
  388|  8.30k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  8.30k|                prefix_result.parsed_base, locale_options));
  390|  8.30k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  8.30k|            parse_digits_result;
  392|       |
  393|  8.30k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 8.30k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  8.30k|        auto nothsep_source_view =
  403|  8.30k|            std::basic_string_view<CharT>{nothsep_source};
  404|  8.30k|        SCN_TRY(
  ------------------
  |  |   71|  8.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  8.30k|            nothsep_source_it,
  406|  8.30k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  8.30k|                                prefix_result.parsed_base));
  408|       |
  409|  8.30k|        return ranges_polyfill::batch_next(
  410|  8.30k|            prefix_result.iterator,
  411|  8.30k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  8.30k|                ranges::ssize(thsep_indices));
  413|  8.30k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  83.0k|    {
  335|  83.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  83.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  83.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 83.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  83.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 83.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  83.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  83.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 66.4k, False: 16.6k]
  |  |  ------------------
  ------------------
  361|  66.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  66.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 41.5k, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  41.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  41.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  41.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  41.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  41.5k|    }                                                  \
  |  |  |  |   70|  66.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  24.9k|                    parse_integer_digits_without_thsep(
  363|  24.9k|                        ranges::subrange{prefix_result.iterator,
  364|  24.9k|                                         ranges::end(range)},
  365|  24.9k|                        prefix_result.parsed_base));
  366|       |
  367|  24.9k|            auto buf = make_contiguous_buffer(
  368|  24.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  24.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  24.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  24.9k|                                        prefix_result.parsed_base));
  372|       |
  373|  24.9k|            return ranges_polyfill::batch_next(
  374|  24.9k|                prefix_result.iterator,
  375|  24.9k|                ranges::distance(buf.view().begin(), result_it));
  376|  24.9k|        }
  377|       |
  378|  16.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  16.6k|            localized_number_formatting_options<CharT>{loc};
  383|  16.6k|#endif
  384|       |
  385|  16.6k|        SCN_TRY(
  ------------------
  |  |   71|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.30k, False: 8.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.30k|    }                                                  \
  |  |  |  |   70|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  8.30k|            parse_digits_result,
  387|  8.30k|            parse_integer_digits_with_thsep(
  388|  8.30k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  8.30k|                prefix_result.parsed_base, locale_options));
  390|  8.30k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  8.30k|            parse_digits_result;
  392|       |
  393|  8.30k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 8.30k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  8.30k|        auto nothsep_source_view =
  403|  8.30k|            std::basic_string_view<CharT>{nothsep_source};
  404|  8.30k|        SCN_TRY(
  ------------------
  |  |   71|  8.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  8.30k|            nothsep_source_it,
  406|  8.30k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  8.30k|                                prefix_result.parsed_base));
  408|       |
  409|  8.30k|        return ranges_polyfill::batch_next(
  410|  8.30k|            prefix_result.iterator,
  411|  8.30k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  8.30k|                ranges::ssize(thsep_indices));
  413|  8.30k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  83.0k|    {
  335|  83.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  83.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  83.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 83.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  83.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 83.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  83.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  83.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 66.4k, False: 16.6k]
  |  |  ------------------
  ------------------
  361|  66.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  66.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 41.5k, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  41.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  41.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  41.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  41.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  41.5k|    }                                                  \
  |  |  |  |   70|  66.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  24.9k|                    parse_integer_digits_without_thsep(
  363|  24.9k|                        ranges::subrange{prefix_result.iterator,
  364|  24.9k|                                         ranges::end(range)},
  365|  24.9k|                        prefix_result.parsed_base));
  366|       |
  367|  24.9k|            auto buf = make_contiguous_buffer(
  368|  24.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  24.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  24.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  24.9k|                                        prefix_result.parsed_base));
  372|       |
  373|  24.9k|            return ranges_polyfill::batch_next(
  374|  24.9k|                prefix_result.iterator,
  375|  24.9k|                ranges::distance(buf.view().begin(), result_it));
  376|  24.9k|        }
  377|       |
  378|  16.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  16.6k|            localized_number_formatting_options<CharT>{loc};
  383|  16.6k|#endif
  384|       |
  385|  16.6k|        SCN_TRY(
  ------------------
  |  |   71|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.30k, False: 8.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.30k|    }                                                  \
  |  |  |  |   70|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  8.30k|            parse_digits_result,
  387|  8.30k|            parse_integer_digits_with_thsep(
  388|  8.30k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  8.30k|                prefix_result.parsed_base, locale_options));
  390|  8.30k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  8.30k|            parse_digits_result;
  392|       |
  393|  8.30k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 8.30k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  8.30k|        auto nothsep_source_view =
  403|  8.30k|            std::basic_string_view<CharT>{nothsep_source};
  404|  8.30k|        SCN_TRY(
  ------------------
  |  |   71|  8.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  8.30k|            nothsep_source_it,
  406|  8.30k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  8.30k|                                prefix_result.parsed_base));
  408|       |
  409|  8.30k|        return ranges_polyfill::batch_next(
  410|  8.30k|            prefix_result.iterator,
  411|  8.30k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  8.30k|                ranges::ssize(thsep_indices));
  413|  8.30k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  83.0k|    {
  335|  83.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  83.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  83.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 83.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  83.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 83.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  83.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  83.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 66.4k, False: 16.6k]
  |  |  ------------------
  ------------------
  361|  66.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  66.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 41.5k, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  41.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  41.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  41.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  41.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  41.5k|    }                                                  \
  |  |  |  |   70|  66.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  24.9k|                    parse_integer_digits_without_thsep(
  363|  24.9k|                        ranges::subrange{prefix_result.iterator,
  364|  24.9k|                                         ranges::end(range)},
  365|  24.9k|                        prefix_result.parsed_base));
  366|       |
  367|  24.9k|            auto buf = make_contiguous_buffer(
  368|  24.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  24.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  24.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  24.9k|                                        prefix_result.parsed_base));
  372|       |
  373|  24.9k|            return ranges_polyfill::batch_next(
  374|  24.9k|                prefix_result.iterator,
  375|  24.9k|                ranges::distance(buf.view().begin(), result_it));
  376|  24.9k|        }
  377|       |
  378|  16.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  16.6k|            localized_number_formatting_options<CharT>{loc};
  383|  16.6k|#endif
  384|       |
  385|  16.6k|        SCN_TRY(
  ------------------
  |  |   71|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.30k, False: 8.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.30k|    }                                                  \
  |  |  |  |   70|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  8.30k|            parse_digits_result,
  387|  8.30k|            parse_integer_digits_with_thsep(
  388|  8.30k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  8.30k|                prefix_result.parsed_base, locale_options));
  390|  8.30k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  8.30k|            parse_digits_result;
  392|       |
  393|  8.30k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 8.30k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  8.30k|        auto nothsep_source_view =
  403|  8.30k|            std::basic_string_view<CharT>{nothsep_source};
  404|  8.30k|        SCN_TRY(
  ------------------
  |  |   71|  8.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  8.30k|            nothsep_source_it,
  406|  8.30k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  8.30k|                                prefix_result.parsed_base));
  408|       |
  409|  8.30k|        return ranges_polyfill::batch_next(
  410|  8.30k|            prefix_result.iterator,
  411|  8.30k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  8.30k|                ranges::ssize(thsep_indices));
  413|  8.30k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  83.0k|    {
  335|  83.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  83.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  83.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 83.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  83.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 83.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  83.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  83.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 66.4k, False: 16.6k]
  |  |  ------------------
  ------------------
  361|  66.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  66.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 41.5k, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  41.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  41.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  41.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  41.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  41.5k|    }                                                  \
  |  |  |  |   70|  66.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  24.9k|                    parse_integer_digits_without_thsep(
  363|  24.9k|                        ranges::subrange{prefix_result.iterator,
  364|  24.9k|                                         ranges::end(range)},
  365|  24.9k|                        prefix_result.parsed_base));
  366|       |
  367|  24.9k|            auto buf = make_contiguous_buffer(
  368|  24.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  24.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  24.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  24.9k|                                        prefix_result.parsed_base));
  372|       |
  373|  24.9k|            return ranges_polyfill::batch_next(
  374|  24.9k|                prefix_result.iterator,
  375|  24.9k|                ranges::distance(buf.view().begin(), result_it));
  376|  24.9k|        }
  377|       |
  378|  16.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  16.6k|            localized_number_formatting_options<CharT>{loc};
  383|  16.6k|#endif
  384|       |
  385|  16.6k|        SCN_TRY(
  ------------------
  |  |   71|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.30k, False: 8.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.30k|    }                                                  \
  |  |  |  |   70|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  8.30k|            parse_digits_result,
  387|  8.30k|            parse_integer_digits_with_thsep(
  388|  8.30k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  8.30k|                prefix_result.parsed_base, locale_options));
  390|  8.30k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  8.30k|            parse_digits_result;
  392|       |
  393|  8.30k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 8.30k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  8.30k|        auto nothsep_source_view =
  403|  8.30k|            std::basic_string_view<CharT>{nothsep_source};
  404|  8.30k|        SCN_TRY(
  ------------------
  |  |   71|  8.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  8.30k|            nothsep_source_it,
  406|  8.30k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  8.30k|                                prefix_result.parsed_base));
  408|       |
  409|  8.30k|        return ranges_polyfill::batch_next(
  410|  8.30k|            prefix_result.iterator,
  411|  8.30k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  8.30k|                ranges::ssize(thsep_indices));
  413|  8.30k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  83.0k|    {
  335|  83.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  83.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  83.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 83.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  83.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 83.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  83.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  83.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 66.4k, False: 16.6k]
  |  |  ------------------
  ------------------
  361|  66.4k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  66.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  66.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  66.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  66.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 41.5k, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  41.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  41.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  41.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  41.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  41.5k|    }                                                  \
  |  |  |  |   70|  66.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  24.9k|                    parse_integer_digits_without_thsep(
  363|  24.9k|                        ranges::subrange{prefix_result.iterator,
  364|  24.9k|                                         ranges::end(range)},
  365|  24.9k|                        prefix_result.parsed_base));
  366|       |
  367|  24.9k|            auto buf = make_contiguous_buffer(
  368|  24.9k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  24.9k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  24.9k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  24.9k|                                        prefix_result.parsed_base));
  372|       |
  373|  24.9k|            return ranges_polyfill::batch_next(
  374|  24.9k|                prefix_result.iterator,
  375|  24.9k|                ranges::distance(buf.view().begin(), result_it));
  376|  24.9k|        }
  377|       |
  378|  16.6k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  16.6k|            localized_number_formatting_options<CharT>{loc};
  383|  16.6k|#endif
  384|       |
  385|  16.6k|        SCN_TRY(
  ------------------
  |  |   71|  16.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.30k, False: 8.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.30k|    }                                                  \
  |  |  |  |   70|  16.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  8.30k|            parse_digits_result,
  387|  8.30k|            parse_integer_digits_with_thsep(
  388|  8.30k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  8.30k|                prefix_result.parsed_base, locale_options));
  390|  8.30k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  8.30k|            parse_digits_result;
  392|       |
  393|  8.30k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 8.30k]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|  8.30k|        auto nothsep_source_view =
  403|  8.30k|            std::basic_string_view<CharT>{nothsep_source};
  404|  8.30k|        SCN_TRY(
  ------------------
  |  |   71|  8.30k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.30k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.30k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.30k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.30k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.30k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  8.30k|            nothsep_source_it,
  406|  8.30k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  8.30k|                                prefix_result.parsed_base));
  408|       |
  409|  8.30k|        return ranges_polyfill::batch_next(
  410|  8.30k|            prefix_result.iterator,
  411|  8.30k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  8.30k|                ranges::ssize(thsep_indices));
  413|  8.30k|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  4.38M|{
   69|  4.38M|    auto r = read_one_of_code_unit(range, "+-");
   70|  4.38M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 4.08M, False: 296k]
  ------------------
   71|  4.08M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 4.08M, False: 0]
  ------------------
   72|  4.08M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  4.08M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  4.08M|    }
   76|       |
   77|   296k|    auto& it = *r;
   78|   296k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 196k, False: 100k]
  ------------------
   79|   196k|        return std::pair{it, sign_type::minus_sign};
   80|   196k|    }
   81|   100k|    return std::pair{it, sign_type::plus_sign};
   82|   296k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  39.7M|{
   51|  39.7M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  39.7M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  5.42k|{
  140|  5.42k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  5.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  5.42k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.06k, False: 3.36k]
  ------------------
  143|  2.06k|        SCN_UNLIKELY_ATTR
  144|  2.06k|        return {scan_error::invalid_scanned_value,
  145|  2.06k|                "Invalid thousands separator grouping"};
  146|  2.06k|    }
  147|       |
  148|  3.36k|    return {};
  149|  5.42k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  5.42k|{
  101|  5.42k|    transform_thsep_indices(
  102|  5.42k|        thsep_indices,
  103|  5.42k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  5.42k|    auto thsep_it = thsep_indices.rbegin();
  106|  5.42k|    for (auto grouping_it = grouping.begin();
  107|  5.42k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 5.42k]
  |  Branch (107:10): [True: 0, False: 5.42k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  5.42k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  5.42k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  5.42k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  67.9k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 63.3k, False: 4.58k]
  ------------------
  119|  63.3k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 846, False: 62.4k]
  ------------------
  120|    846|            return false;
  121|    846|        }
  122|  63.3k|    }
  123|       |
  124|  4.58k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 4.58k, False: 0]
  ------------------
  125|  4.58k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.21k, False: 3.36k]
  ------------------
  126|  1.21k|            return false;
  127|  1.21k|        }
  128|  4.58k|    }
  129|       |
  130|  3.36k|    SCN_CLANG_POP
  131|       |
  132|  3.36k|    return true;
  133|  4.58k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  10.1k|{
   87|   146k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 136k, False: 10.1k]
  ------------------
   88|   136k|         ++thsep_it) {
   89|   136k|        const auto tmp = *thsep_it;
   90|   136k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|   136k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|   136k|    }
   93|  10.1k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  10.1k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   368k|{
   69|   368k|    auto r = read_one_of_code_unit(range, "+-");
   70|   368k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 368k, False: 0]
  ------------------
   71|   368k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 368k, False: 0]
  ------------------
   72|   368k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   368k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   368k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  3.80M|{
   69|  3.80M|    auto r = read_one_of_code_unit(range, "+-");
   70|  3.80M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 3.55M, False: 242k]
  ------------------
   71|  3.55M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 3.55M, False: 0]
  ------------------
   72|  3.55M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  3.55M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  3.55M|    }
   76|       |
   77|   242k|    auto& it = *r;
   78|   242k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 161k, False: 81.0k]
  ------------------
   79|   161k|        return std::pair{it, sign_type::minus_sign};
   80|   161k|    }
   81|  81.0k|    return std::pair{it, sign_type::plus_sign};
   82|   242k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  19.4M|{
   55|  19.4M|#if WCHAR_MIN < 0
   56|  19.4M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 19.4M, False: 22.3k]
  |  Branch (56:20): [True: 19.0M, False: 395k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  19.0M|        return char_to_int(static_cast<char>(ch));
   61|  19.0M|    }
   62|   418k|    return 255;
   63|  19.4M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  4.69k|{
  140|  4.69k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  4.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  4.69k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 1.89k, False: 2.79k]
  ------------------
  143|  1.89k|        SCN_UNLIKELY_ATTR
  144|  1.89k|        return {scan_error::invalid_scanned_value,
  145|  1.89k|                "Invalid thousands separator grouping"};
  146|  1.89k|    }
  147|       |
  148|  2.79k|    return {};
  149|  4.69k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  4.69k|{
  101|  4.69k|    transform_thsep_indices(
  102|  4.69k|        thsep_indices,
  103|  4.69k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  4.69k|    auto thsep_it = thsep_indices.rbegin();
  106|  4.69k|    for (auto grouping_it = grouping.begin();
  107|  4.69k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 4.69k]
  |  Branch (107:10): [True: 0, False: 4.69k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  4.69k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  4.69k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  4.69k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  59.5k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 55.5k, False: 3.98k]
  ------------------
  119|  55.5k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 712, False: 54.8k]
  ------------------
  120|    712|            return false;
  121|    712|        }
  122|  55.5k|    }
  123|       |
  124|  3.98k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 3.98k, False: 0]
  ------------------
  125|  3.98k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.18k, False: 2.79k]
  ------------------
  126|  1.18k|            return false;
  127|  1.18k|        }
  128|  3.98k|    }
  129|       |
  130|  2.79k|    SCN_CLANG_POP
  131|       |
  132|  2.79k|    return true;
  133|  3.98k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   639k|{
   69|   639k|    auto r = read_one_of_code_unit(range, "+-");
   70|   639k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 639k, False: 0]
  ------------------
   71|   639k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 639k, False: 0]
  ------------------
   72|   639k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   639k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   639k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   177k|    {
  122|   177k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   177k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   177k|                          basic_contiguous_scan_context<char_type>>) {
  126|   177k|            auto rd = make_reader<T, char_type>();
  127|   177k|            return impl(rd, range, value);
  128|   177k|        }
  129|   177k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   177k|            auto rd = make_reader<T, char_type>();
  131|   177k|            if (!is_segment_contiguous(range)) {
  132|   177k|                return impl(rd, range, value);
  133|   177k|            }
  134|   177k|            auto crange = get_as_contiguous(range);
  135|   177k|            SCN_TRY(it, impl(rd, crange, value));
  136|   177k|            return ranges_polyfill::batch_next(
  137|   177k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   177k|        }
  139|   177k|        else {
  140|   177k|            SCN_EXPECT(false);
  141|   177k|            SCN_UNREACHABLE;
  142|   177k|        }
  143|   177k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   177k|    {
  112|   177k|        SCN_TRY(it,
  ------------------
  |  |   71|   177k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   177k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   177k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 813, False: 176k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    813|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    813|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    813|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    813|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    813|    }                                                  \
  |  |  |  |   70|   177k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   176k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   176k|                    .transform_error(make_eof_scan_error));
  115|   176k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   176k|                               loc);
  117|   177k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  4.41M|{
   43|  4.41M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  4.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 22.4k, False: 4.39M]
  |  |  ------------------
  ------------------
   44|  22.4k|        return unexpected(e);
   45|  22.4k|    }
   46|       |
   47|  4.39M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 4.39M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  4.39M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  4.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  4.39M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   237k|    {
  122|   237k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   237k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   237k|                          basic_contiguous_scan_context<char_type>>) {
  126|   237k|            auto rd = make_reader<T, char_type>();
  127|   237k|            return impl(rd, range, value);
  128|   237k|        }
  129|   237k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   237k|            auto rd = make_reader<T, char_type>();
  131|   237k|            if (!is_segment_contiguous(range)) {
  132|   237k|                return impl(rd, range, value);
  133|   237k|            }
  134|   237k|            auto crange = get_as_contiguous(range);
  135|   237k|            SCN_TRY(it, impl(rd, crange, value));
  136|   237k|            return ranges_polyfill::batch_next(
  137|   237k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   237k|        }
  139|   237k|        else {
  140|   237k|            SCN_EXPECT(false);
  141|   237k|            SCN_UNREACHABLE;
  142|   237k|        }
  143|   237k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   237k|    {
  112|   237k|        SCN_TRY(it,
  ------------------
  |  |   71|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.50k, False: 236k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.50k|    }                                                  \
  |  |  |  |   70|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   236k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   236k|                    .transform_error(make_eof_scan_error));
  115|   236k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   236k|                               loc);
  117|   237k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   241k|    {
  122|   241k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   241k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   241k|                          basic_contiguous_scan_context<char_type>>) {
  126|   241k|            auto rd = make_reader<T, char_type>();
  127|   241k|            return impl(rd, range, value);
  128|   241k|        }
  129|   241k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   241k|            auto rd = make_reader<T, char_type>();
  131|   241k|            if (!is_segment_contiguous(range)) {
  132|   241k|                return impl(rd, range, value);
  133|   241k|            }
  134|   241k|            auto crange = get_as_contiguous(range);
  135|   241k|            SCN_TRY(it, impl(rd, crange, value));
  136|   241k|            return ranges_polyfill::batch_next(
  137|   241k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   241k|        }
  139|   241k|        else {
  140|   241k|            SCN_EXPECT(false);
  141|   241k|            SCN_UNREACHABLE;
  142|   241k|        }
  143|   241k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   241k|    {
  112|   241k|        SCN_TRY(it,
  ------------------
  |  |   71|   241k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   241k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   241k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.63k, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.63k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.63k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.63k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.63k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.63k|    }                                                  \
  |  |  |  |   70|   241k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   240k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   240k|                    .transform_error(make_eof_scan_error));
  115|   240k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   240k|                               loc);
  117|   241k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   169k|    {
  122|   169k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   169k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   169k|                          basic_contiguous_scan_context<char_type>>) {
  126|   169k|            auto rd = make_reader<T, char_type>();
  127|   169k|            return impl(rd, range, value);
  128|   169k|        }
  129|   169k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   169k|            auto rd = make_reader<T, char_type>();
  131|   169k|            if (!is_segment_contiguous(range)) {
  132|   169k|                return impl(rd, range, value);
  133|   169k|            }
  134|   169k|            auto crange = get_as_contiguous(range);
  135|   169k|            SCN_TRY(it, impl(rd, crange, value));
  136|   169k|            return ranges_polyfill::batch_next(
  137|   169k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   169k|        }
  139|   169k|        else {
  140|   169k|            SCN_EXPECT(false);
  141|   169k|            SCN_UNREACHABLE;
  142|   169k|        }
  143|   169k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   169k|    {
  112|   169k|        SCN_TRY(it,
  ------------------
  |  |   71|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 783, False: 168k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    783|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    783|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    783|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    783|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    783|    }                                                  \
  |  |  |  |   70|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   168k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   168k|                    .transform_error(make_eof_scan_error));
  115|   168k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   168k|                               loc);
  117|   169k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   200k|    {
  122|   200k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   200k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   200k|                          basic_contiguous_scan_context<char_type>>) {
  126|   200k|            auto rd = make_reader<T, char_type>();
  127|   200k|            return impl(rd, range, value);
  128|   200k|        }
  129|   200k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   200k|            auto rd = make_reader<T, char_type>();
  131|   200k|            if (!is_segment_contiguous(range)) {
  132|   200k|                return impl(rd, range, value);
  133|   200k|            }
  134|   200k|            auto crange = get_as_contiguous(range);
  135|   200k|            SCN_TRY(it, impl(rd, crange, value));
  136|   200k|            return ranges_polyfill::batch_next(
  137|   200k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   200k|        }
  139|   200k|        else {
  140|   200k|            SCN_EXPECT(false);
  141|   200k|            SCN_UNREACHABLE;
  142|   200k|        }
  143|   200k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   200k|    {
  112|   200k|        SCN_TRY(it,
  ------------------
  |  |   71|   200k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   200k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   200k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.09k, False: 199k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.09k|    }                                                  \
  |  |  |  |   70|   200k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   199k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   199k|                    .transform_error(make_eof_scan_error));
  115|   199k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   199k|                               loc);
  117|   200k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   201k|    {
  122|   201k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   201k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   201k|                          basic_contiguous_scan_context<char_type>>) {
  126|   201k|            auto rd = make_reader<T, char_type>();
  127|   201k|            return impl(rd, range, value);
  128|   201k|        }
  129|   201k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   201k|            auto rd = make_reader<T, char_type>();
  131|   201k|            if (!is_segment_contiguous(range)) {
  132|   201k|                return impl(rd, range, value);
  133|   201k|            }
  134|   201k|            auto crange = get_as_contiguous(range);
  135|   201k|            SCN_TRY(it, impl(rd, crange, value));
  136|   201k|            return ranges_polyfill::batch_next(
  137|   201k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   201k|        }
  139|   201k|        else {
  140|   201k|            SCN_EXPECT(false);
  141|   201k|            SCN_UNREACHABLE;
  142|   201k|        }
  143|   201k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   201k|    {
  112|   201k|        SCN_TRY(it,
  ------------------
  |  |   71|   201k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   201k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   201k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.17k, False: 200k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.17k|    }                                                  \
  |  |  |  |   70|   201k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   200k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   200k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   200k|                    .transform_error(make_eof_scan_error));
  115|   200k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   200k|                               loc);
  117|   201k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  14.1k|    {
  122|  14.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  14.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  14.1k|            auto rd = make_reader<T, char_type>();
  127|  14.1k|            return impl(rd, range, value);
  128|  14.1k|        }
  129|  14.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  14.1k|            auto rd = make_reader<T, char_type>();
  131|  14.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 14.1k, False: 0]
  ------------------
  132|  14.1k|                return impl(rd, range, value);
  133|  14.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  14.1k|        else {
  140|  14.1k|            SCN_EXPECT(false);
  141|  14.1k|            SCN_UNREACHABLE;
  142|  14.1k|        }
  143|  14.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  14.1k|    {
  112|  14.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  14.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  14.1k|                    .transform_error(make_eof_scan_error));
  115|  14.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  14.1k|                               loc);
  117|  14.1k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   368k|{
   43|   368k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 66, False: 368k]
  |  |  ------------------
  ------------------
   44|     66|        return unexpected(e);
   45|     66|    }
   46|       |
   47|   368k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 368k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   368k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   368k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   368k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  14.1k|    {
  122|  14.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  14.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  14.1k|            auto rd = make_reader<T, char_type>();
  127|  14.1k|            return impl(rd, range, value);
  128|  14.1k|        }
  129|  14.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  14.1k|            auto rd = make_reader<T, char_type>();
  131|  14.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 14.1k, False: 0]
  ------------------
  132|  14.1k|                return impl(rd, range, value);
  133|  14.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  14.1k|        else {
  140|  14.1k|            SCN_EXPECT(false);
  141|  14.1k|            SCN_UNREACHABLE;
  142|  14.1k|        }
  143|  14.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  14.1k|    {
  112|  14.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  14.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  14.1k|                    .transform_error(make_eof_scan_error));
  115|  14.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  14.1k|                               loc);
  117|  14.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  14.1k|    {
  122|  14.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  14.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  14.1k|            auto rd = make_reader<T, char_type>();
  127|  14.1k|            return impl(rd, range, value);
  128|  14.1k|        }
  129|  14.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  14.1k|            auto rd = make_reader<T, char_type>();
  131|  14.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 14.1k, False: 0]
  ------------------
  132|  14.1k|                return impl(rd, range, value);
  133|  14.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  14.1k|        else {
  140|  14.1k|            SCN_EXPECT(false);
  141|  14.1k|            SCN_UNREACHABLE;
  142|  14.1k|        }
  143|  14.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  14.1k|    {
  112|  14.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  14.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  14.1k|                    .transform_error(make_eof_scan_error));
  115|  14.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  14.1k|                               loc);
  117|  14.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  14.1k|    {
  122|  14.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  14.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  14.1k|            auto rd = make_reader<T, char_type>();
  127|  14.1k|            return impl(rd, range, value);
  128|  14.1k|        }
  129|  14.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  14.1k|            auto rd = make_reader<T, char_type>();
  131|  14.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 14.1k, False: 0]
  ------------------
  132|  14.1k|                return impl(rd, range, value);
  133|  14.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  14.1k|        else {
  140|  14.1k|            SCN_EXPECT(false);
  141|  14.1k|            SCN_UNREACHABLE;
  142|  14.1k|        }
  143|  14.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  14.1k|    {
  112|  14.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  14.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  14.1k|                    .transform_error(make_eof_scan_error));
  115|  14.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  14.1k|                               loc);
  117|  14.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  14.1k|    {
  122|  14.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  14.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  14.1k|            auto rd = make_reader<T, char_type>();
  127|  14.1k|            return impl(rd, range, value);
  128|  14.1k|        }
  129|  14.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  14.1k|            auto rd = make_reader<T, char_type>();
  131|  14.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 14.1k, False: 0]
  ------------------
  132|  14.1k|                return impl(rd, range, value);
  133|  14.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  14.1k|        else {
  140|  14.1k|            SCN_EXPECT(false);
  141|  14.1k|            SCN_UNREACHABLE;
  142|  14.1k|        }
  143|  14.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  14.1k|    {
  112|  14.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  14.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  14.1k|                    .transform_error(make_eof_scan_error));
  115|  14.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  14.1k|                               loc);
  117|  14.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  14.1k|    {
  122|  14.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  14.1k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  14.1k|            auto rd = make_reader<T, char_type>();
  127|  14.1k|            return impl(rd, range, value);
  128|  14.1k|        }
  129|  14.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  14.1k|            auto rd = make_reader<T, char_type>();
  131|  14.1k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 14.1k, False: 0]
  ------------------
  132|  14.1k|                return impl(rd, range, value);
  133|  14.1k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  14.1k|        else {
  140|  14.1k|            SCN_EXPECT(false);
  141|  14.1k|            SCN_UNREACHABLE;
  142|  14.1k|        }
  143|  14.1k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  14.1k|    {
  112|  14.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  14.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  14.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  14.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  14.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3, False: 14.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      3|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      3|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      3|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      3|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      3|    }                                                  \
  |  |  |  |   70|  14.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  14.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  14.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  14.1k|                    .transform_error(make_eof_scan_error));
  115|  14.1k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  14.1k|                               loc);
  117|  14.1k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   420k|    {
  223|   420k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   420k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   420k|                          basic_contiguous_scan_context<char_type>>) {
  227|   420k|            auto rd = make_reader<T, char_type>();
  228|   420k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   420k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 420k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   420k|            return impl(rd, range, value);
  233|   420k|        }
  234|   420k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   420k|            auto rd = make_reader<T, char_type>();
  236|   420k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   420k|                return unexpected(e);
  238|   420k|            }
  239|       |
  240|   420k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   420k|                return impl(rd, range, value);
  242|   420k|            }
  243|       |
  244|   420k|            auto crange = get_as_contiguous(range);
  245|   420k|            SCN_TRY(it, impl(rd, crange, value));
  246|   420k|            return ranges_polyfill::batch_next(
  247|   420k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   420k|        }
  249|   420k|        else {
  250|   420k|            SCN_EXPECT(false);
  251|   420k|            SCN_UNREACHABLE;
  252|   420k|        }
  253|   420k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   420k|    {
  205|   420k|        SCN_TRY(it,
  ------------------
  |  |   71|   420k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   420k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   420k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   420k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.20k, False: 418k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.20k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.20k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.20k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.20k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.20k|    }                                                  \
  |  |  |  |   70|   420k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   418k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   418k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   418k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   418k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   418k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 418k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   418k|        return rd.read_specs(subr, specs, value, loc);
  218|   418k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   630k|    {
  223|   630k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   630k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   630k|                          basic_contiguous_scan_context<char_type>>) {
  227|   630k|            auto rd = make_reader<T, char_type>();
  228|   630k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 630k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   630k|            return impl(rd, range, value);
  233|   630k|        }
  234|   630k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   630k|            auto rd = make_reader<T, char_type>();
  236|   630k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   630k|                return unexpected(e);
  238|   630k|            }
  239|       |
  240|   630k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   630k|                return impl(rd, range, value);
  242|   630k|            }
  243|       |
  244|   630k|            auto crange = get_as_contiguous(range);
  245|   630k|            SCN_TRY(it, impl(rd, crange, value));
  246|   630k|            return ranges_polyfill::batch_next(
  247|   630k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   630k|        }
  249|   630k|        else {
  250|   630k|            SCN_EXPECT(false);
  251|   630k|            SCN_UNREACHABLE;
  252|   630k|        }
  253|   630k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   630k|    {
  205|   630k|        SCN_TRY(it,
  ------------------
  |  |   71|   630k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   630k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   630k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.34k, False: 626k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.34k|    }                                                  \
  |  |  |  |   70|   630k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   626k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   626k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   626k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   626k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   626k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 626k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   626k|        return rd.read_specs(subr, specs, value, loc);
  218|   626k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|   643k|    {
  223|   643k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   643k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   643k|                          basic_contiguous_scan_context<char_type>>) {
  227|   643k|            auto rd = make_reader<T, char_type>();
  228|   643k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   643k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 643k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   643k|            return impl(rd, range, value);
  233|   643k|        }
  234|   643k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   643k|            auto rd = make_reader<T, char_type>();
  236|   643k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   643k|                return unexpected(e);
  238|   643k|            }
  239|       |
  240|   643k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   643k|                return impl(rd, range, value);
  242|   643k|            }
  243|       |
  244|   643k|            auto crange = get_as_contiguous(range);
  245|   643k|            SCN_TRY(it, impl(rd, crange, value));
  246|   643k|            return ranges_polyfill::batch_next(
  247|   643k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   643k|        }
  249|   643k|        else {
  250|   643k|            SCN_EXPECT(false);
  251|   643k|            SCN_UNREACHABLE;
  252|   643k|        }
  253|   643k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   643k|    {
  205|   643k|        SCN_TRY(it,
  ------------------
  |  |   71|   643k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   643k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   643k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   643k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.74k, False: 638k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.74k|    }                                                  \
  |  |  |  |   70|   643k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   638k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   638k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   638k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   638k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   638k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 638k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   638k|        return rd.read_specs(subr, specs, value, loc);
  218|   638k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   423k|    {
  223|   423k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   423k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   423k|                          basic_contiguous_scan_context<char_type>>) {
  227|   423k|            auto rd = make_reader<T, char_type>();
  228|   423k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 423k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   423k|            return impl(rd, range, value);
  233|   423k|        }
  234|   423k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   423k|            auto rd = make_reader<T, char_type>();
  236|   423k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   423k|                return unexpected(e);
  238|   423k|            }
  239|       |
  240|   423k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   423k|                return impl(rd, range, value);
  242|   423k|            }
  243|       |
  244|   423k|            auto crange = get_as_contiguous(range);
  245|   423k|            SCN_TRY(it, impl(rd, crange, value));
  246|   423k|            return ranges_polyfill::batch_next(
  247|   423k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   423k|        }
  249|   423k|        else {
  250|   423k|            SCN_EXPECT(false);
  251|   423k|            SCN_UNREACHABLE;
  252|   423k|        }
  253|   423k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   423k|    {
  205|   423k|        SCN_TRY(it,
  ------------------
  |  |   71|   423k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   423k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   423k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.09k, False: 421k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.09k|    }                                                  \
  |  |  |  |   70|   423k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   421k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   421k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   421k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   421k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 421k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   421k|        return rd.read_specs(subr, specs, value, loc);
  218|   421k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   530k|    {
  223|   530k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   530k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   530k|                          basic_contiguous_scan_context<char_type>>) {
  227|   530k|            auto rd = make_reader<T, char_type>();
  228|   530k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   530k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 530k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   530k|            return impl(rd, range, value);
  233|   530k|        }
  234|   530k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   530k|            auto rd = make_reader<T, char_type>();
  236|   530k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   530k|                return unexpected(e);
  238|   530k|            }
  239|       |
  240|   530k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   530k|                return impl(rd, range, value);
  242|   530k|            }
  243|       |
  244|   530k|            auto crange = get_as_contiguous(range);
  245|   530k|            SCN_TRY(it, impl(rd, crange, value));
  246|   530k|            return ranges_polyfill::batch_next(
  247|   530k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   530k|        }
  249|   530k|        else {
  250|   530k|            SCN_EXPECT(false);
  251|   530k|            SCN_UNREACHABLE;
  252|   530k|        }
  253|   530k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   530k|    {
  205|   530k|        SCN_TRY(it,
  ------------------
  |  |   71|   530k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   530k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   530k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   530k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.19k, False: 527k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.19k|    }                                                  \
  |  |  |  |   70|   530k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   527k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   527k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   527k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   527k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   527k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 527k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   527k|        return rd.read_specs(subr, specs, value, loc);
  218|   527k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   535k|    {
  223|   535k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   535k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   535k|                          basic_contiguous_scan_context<char_type>>) {
  227|   535k|            auto rd = make_reader<T, char_type>();
  228|   535k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 535k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   535k|            return impl(rd, range, value);
  233|   535k|        }
  234|   535k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   535k|            auto rd = make_reader<T, char_type>();
  236|   535k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   535k|                return unexpected(e);
  238|   535k|            }
  239|       |
  240|   535k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   535k|                return impl(rd, range, value);
  242|   535k|            }
  243|       |
  244|   535k|            auto crange = get_as_contiguous(range);
  245|   535k|            SCN_TRY(it, impl(rd, crange, value));
  246|   535k|            return ranges_polyfill::batch_next(
  247|   535k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   535k|        }
  249|   535k|        else {
  250|   535k|            SCN_EXPECT(false);
  251|   535k|            SCN_UNREACHABLE;
  252|   535k|        }
  253|   535k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   535k|    {
  205|   535k|        SCN_TRY(it,
  ------------------
  |  |   71|   535k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   535k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   535k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.41k, False: 531k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.41k|    }                                                  \
  |  |  |  |   70|   535k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   531k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   531k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   531k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   531k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   531k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 531k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   531k|        return rd.read_specs(subr, specs, value, loc);
  218|   531k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  47.3k|    {
  223|  47.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.3k|            auto rd = make_reader<T, char_type>();
  228|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.3k|                return unexpected(e);
  230|  47.3k|            }
  231|       |
  232|  47.3k|            return impl(rd, range, value);
  233|  47.3k|        }
  234|  47.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.3k|            auto rd = make_reader<T, char_type>();
  236|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.3k|                return impl(rd, range, value);
  242|  47.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.3k|        else {
  250|  47.3k|            SCN_EXPECT(false);
  251|  47.3k|            SCN_UNREACHABLE;
  252|  47.3k|        }
  253|  47.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.3k|    {
  205|  47.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|  47.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  47.3k|    {
  223|  47.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.3k|            auto rd = make_reader<T, char_type>();
  228|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.3k|                return unexpected(e);
  230|  47.3k|            }
  231|       |
  232|  47.3k|            return impl(rd, range, value);
  233|  47.3k|        }
  234|  47.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.3k|            auto rd = make_reader<T, char_type>();
  236|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.3k|                return impl(rd, range, value);
  242|  47.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.3k|        else {
  250|  47.3k|            SCN_EXPECT(false);
  251|  47.3k|            SCN_UNREACHABLE;
  252|  47.3k|        }
  253|  47.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.3k|    {
  205|  47.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|  47.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  47.3k|    {
  223|  47.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.3k|            auto rd = make_reader<T, char_type>();
  228|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.3k|                return unexpected(e);
  230|  47.3k|            }
  231|       |
  232|  47.3k|            return impl(rd, range, value);
  233|  47.3k|        }
  234|  47.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.3k|            auto rd = make_reader<T, char_type>();
  236|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.3k|                return impl(rd, range, value);
  242|  47.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.3k|        else {
  250|  47.3k|            SCN_EXPECT(false);
  251|  47.3k|            SCN_UNREACHABLE;
  252|  47.3k|        }
  253|  47.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.3k|    {
  205|  47.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|  47.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  47.3k|    {
  223|  47.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.3k|            auto rd = make_reader<T, char_type>();
  228|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.3k|                return unexpected(e);
  230|  47.3k|            }
  231|       |
  232|  47.3k|            return impl(rd, range, value);
  233|  47.3k|        }
  234|  47.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.3k|            auto rd = make_reader<T, char_type>();
  236|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.3k|                return impl(rd, range, value);
  242|  47.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.3k|        else {
  250|  47.3k|            SCN_EXPECT(false);
  251|  47.3k|            SCN_UNREACHABLE;
  252|  47.3k|        }
  253|  47.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.3k|    {
  205|  47.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|  47.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  47.3k|    {
  223|  47.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.3k|            auto rd = make_reader<T, char_type>();
  228|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.3k|                return unexpected(e);
  230|  47.3k|            }
  231|       |
  232|  47.3k|            return impl(rd, range, value);
  233|  47.3k|        }
  234|  47.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.3k|            auto rd = make_reader<T, char_type>();
  236|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.3k|                return impl(rd, range, value);
  242|  47.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.3k|        else {
  250|  47.3k|            SCN_EXPECT(false);
  251|  47.3k|            SCN_UNREACHABLE;
  252|  47.3k|        }
  253|  47.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.3k|    {
  205|  47.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|  47.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.2k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  47.3k|    {
  223|  47.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  47.3k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  47.3k|            auto rd = make_reader<T, char_type>();
  228|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  47.3k|                return unexpected(e);
  230|  47.3k|            }
  231|       |
  232|  47.3k|            return impl(rd, range, value);
  233|  47.3k|        }
  234|  47.3k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  47.3k|            auto rd = make_reader<T, char_type>();
  236|  47.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 47.3k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  47.3k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 47.3k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  47.3k|                return impl(rd, range, value);
  242|  47.3k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  47.3k|        else {
  250|  47.3k|            SCN_EXPECT(false);
  251|  47.3k|            SCN_UNREACHABLE;
  252|  47.3k|        }
  253|  47.3k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  47.3k|    {
  205|  47.3k|        SCN_TRY(it,
  ------------------
  |  |   71|  47.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  47.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  47.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8, False: 47.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      8|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      8|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      8|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      8|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      8|    }                                                  \
  |  |  |  |   70|  47.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  47.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  47.2k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  47.2k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  47.2k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  47.2k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 47.2k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  47.2k|        return rd.read_specs(subr, specs, value, loc);
  218|  47.2k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   153k|    {
  122|   153k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   153k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   153k|                          basic_contiguous_scan_context<char_type>>) {
  126|   153k|            auto rd = make_reader<T, char_type>();
  127|   153k|            return impl(rd, range, value);
  128|   153k|        }
  129|   153k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   153k|            auto rd = make_reader<T, char_type>();
  131|   153k|            if (!is_segment_contiguous(range)) {
  132|   153k|                return impl(rd, range, value);
  133|   153k|            }
  134|   153k|            auto crange = get_as_contiguous(range);
  135|   153k|            SCN_TRY(it, impl(rd, crange, value));
  136|   153k|            return ranges_polyfill::batch_next(
  137|   153k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   153k|        }
  139|   153k|        else {
  140|   153k|            SCN_EXPECT(false);
  141|   153k|            SCN_UNREACHABLE;
  142|   153k|        }
  143|   153k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   153k|    {
  112|   153k|        SCN_TRY(it,
  ------------------
  |  |   71|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 903, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    903|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    903|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    903|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    903|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    903|    }                                                  \
  |  |  |  |   70|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   152k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   152k|                    .transform_error(make_eof_scan_error));
  115|   152k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   152k|                               loc);
  117|   153k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  3.83M|{
   43|  3.83M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 23.4k, False: 3.80M]
  |  |  ------------------
  ------------------
   44|  23.4k|        return unexpected(e);
   45|  23.4k|    }
   46|       |
   47|  3.80M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 3.80M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  3.80M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  3.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  3.80M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   203k|    {
  122|   203k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   203k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   203k|                          basic_contiguous_scan_context<char_type>>) {
  126|   203k|            auto rd = make_reader<T, char_type>();
  127|   203k|            return impl(rd, range, value);
  128|   203k|        }
  129|   203k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   203k|            auto rd = make_reader<T, char_type>();
  131|   203k|            if (!is_segment_contiguous(range)) {
  132|   203k|                return impl(rd, range, value);
  133|   203k|            }
  134|   203k|            auto crange = get_as_contiguous(range);
  135|   203k|            SCN_TRY(it, impl(rd, crange, value));
  136|   203k|            return ranges_polyfill::batch_next(
  137|   203k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   203k|        }
  139|   203k|        else {
  140|   203k|            SCN_EXPECT(false);
  141|   203k|            SCN_UNREACHABLE;
  142|   203k|        }
  143|   203k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   203k|    {
  112|   203k|        SCN_TRY(it,
  ------------------
  |  |   71|   203k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   203k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   203k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   203k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.59k, False: 202k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.59k|    }                                                  \
  |  |  |  |   70|   203k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   202k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   202k|                    .transform_error(make_eof_scan_error));
  115|   202k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   202k|                               loc);
  117|   203k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   206k|    {
  122|   206k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   206k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   206k|                          basic_contiguous_scan_context<char_type>>) {
  126|   206k|            auto rd = make_reader<T, char_type>();
  127|   206k|            return impl(rd, range, value);
  128|   206k|        }
  129|   206k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   206k|            auto rd = make_reader<T, char_type>();
  131|   206k|            if (!is_segment_contiguous(range)) {
  132|   206k|                return impl(rd, range, value);
  133|   206k|            }
  134|   206k|            auto crange = get_as_contiguous(range);
  135|   206k|            SCN_TRY(it, impl(rd, crange, value));
  136|   206k|            return ranges_polyfill::batch_next(
  137|   206k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   206k|        }
  139|   206k|        else {
  140|   206k|            SCN_EXPECT(false);
  141|   206k|            SCN_UNREACHABLE;
  142|   206k|        }
  143|   206k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   206k|    {
  112|   206k|        SCN_TRY(it,
  ------------------
  |  |   71|   206k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   206k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   206k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.73k, False: 204k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.73k|    }                                                  \
  |  |  |  |   70|   206k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   204k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   204k|                    .transform_error(make_eof_scan_error));
  115|   204k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   204k|                               loc);
  117|   206k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|   146k|    {
  122|   146k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   146k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   146k|                          basic_contiguous_scan_context<char_type>>) {
  126|   146k|            auto rd = make_reader<T, char_type>();
  127|   146k|            return impl(rd, range, value);
  128|   146k|        }
  129|   146k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   146k|            auto rd = make_reader<T, char_type>();
  131|   146k|            if (!is_segment_contiguous(range)) {
  132|   146k|                return impl(rd, range, value);
  133|   146k|            }
  134|   146k|            auto crange = get_as_contiguous(range);
  135|   146k|            SCN_TRY(it, impl(rd, crange, value));
  136|   146k|            return ranges_polyfill::batch_next(
  137|   146k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   146k|        }
  139|   146k|        else {
  140|   146k|            SCN_EXPECT(false);
  141|   146k|            SCN_UNREACHABLE;
  142|   146k|        }
  143|   146k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   146k|    {
  112|   146k|        SCN_TRY(it,
  ------------------
  |  |   71|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 861, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    861|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    861|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    861|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    861|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    861|    }                                                  \
  |  |  |  |   70|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   146k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   146k|                    .transform_error(make_eof_scan_error));
  115|   146k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   146k|                               loc);
  117|   146k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   171k|    {
  122|   171k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   171k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   171k|                          basic_contiguous_scan_context<char_type>>) {
  126|   171k|            auto rd = make_reader<T, char_type>();
  127|   171k|            return impl(rd, range, value);
  128|   171k|        }
  129|   171k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   171k|            auto rd = make_reader<T, char_type>();
  131|   171k|            if (!is_segment_contiguous(range)) {
  132|   171k|                return impl(rd, range, value);
  133|   171k|            }
  134|   171k|            auto crange = get_as_contiguous(range);
  135|   171k|            SCN_TRY(it, impl(rd, crange, value));
  136|   171k|            return ranges_polyfill::batch_next(
  137|   171k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   171k|        }
  139|   171k|        else {
  140|   171k|            SCN_EXPECT(false);
  141|   171k|            SCN_UNREACHABLE;
  142|   171k|        }
  143|   171k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   171k|    {
  112|   171k|        SCN_TRY(it,
  ------------------
  |  |   71|   171k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   171k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   171k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.17k, False: 170k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.17k|    }                                                  \
  |  |  |  |   70|   171k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   170k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   170k|                    .transform_error(make_eof_scan_error));
  115|   170k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   170k|                               loc);
  117|   171k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   172k|    {
  122|   172k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   172k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   172k|                          basic_contiguous_scan_context<char_type>>) {
  126|   172k|            auto rd = make_reader<T, char_type>();
  127|   172k|            return impl(rd, range, value);
  128|   172k|        }
  129|   172k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   172k|            auto rd = make_reader<T, char_type>();
  131|   172k|            if (!is_segment_contiguous(range)) {
  132|   172k|                return impl(rd, range, value);
  133|   172k|            }
  134|   172k|            auto crange = get_as_contiguous(range);
  135|   172k|            SCN_TRY(it, impl(rd, crange, value));
  136|   172k|            return ranges_polyfill::batch_next(
  137|   172k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   172k|        }
  139|   172k|        else {
  140|   172k|            SCN_EXPECT(false);
  141|   172k|            SCN_UNREACHABLE;
  142|   172k|        }
  143|   172k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   172k|    {
  112|   172k|        SCN_TRY(it,
  ------------------
  |  |   71|   172k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   172k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   172k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.25k, False: 171k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.25k|    }                                                  \
  |  |  |  |   70|   172k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   171k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   171k|                    .transform_error(make_eof_scan_error));
  115|   171k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   171k|                               loc);
  117|   172k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   369k|    {
  223|   369k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   369k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   369k|                          basic_contiguous_scan_context<char_type>>) {
  227|   369k|            auto rd = make_reader<T, char_type>();
  228|   369k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 369k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   369k|            return impl(rd, range, value);
  233|   369k|        }
  234|   369k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   369k|            auto rd = make_reader<T, char_type>();
  236|   369k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   369k|                return unexpected(e);
  238|   369k|            }
  239|       |
  240|   369k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   369k|                return impl(rd, range, value);
  242|   369k|            }
  243|       |
  244|   369k|            auto crange = get_as_contiguous(range);
  245|   369k|            SCN_TRY(it, impl(rd, crange, value));
  246|   369k|            return ranges_polyfill::batch_next(
  247|   369k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   369k|        }
  249|   369k|        else {
  250|   369k|            SCN_EXPECT(false);
  251|   369k|            SCN_UNREACHABLE;
  252|   369k|        }
  253|   369k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   369k|    {
  205|   369k|        SCN_TRY(it,
  ------------------
  |  |   71|   369k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   369k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   369k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.57k, False: 367k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.57k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.57k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.57k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.57k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.57k|    }                                                  \
  |  |  |  |   70|   369k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   367k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   367k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   367k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   367k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 367k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   367k|        return rd.read_specs(subr, specs, value, loc);
  218|   367k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   546k|    {
  223|   546k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   546k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   546k|                          basic_contiguous_scan_context<char_type>>) {
  227|   546k|            auto rd = make_reader<T, char_type>();
  228|   546k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   546k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 546k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   546k|            return impl(rd, range, value);
  233|   546k|        }
  234|   546k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   546k|            auto rd = make_reader<T, char_type>();
  236|   546k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   546k|                return unexpected(e);
  238|   546k|            }
  239|       |
  240|   546k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   546k|                return impl(rd, range, value);
  242|   546k|            }
  243|       |
  244|   546k|            auto crange = get_as_contiguous(range);
  245|   546k|            SCN_TRY(it, impl(rd, crange, value));
  246|   546k|            return ranges_polyfill::batch_next(
  247|   546k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   546k|        }
  249|   546k|        else {
  250|   546k|            SCN_EXPECT(false);
  251|   546k|            SCN_UNREACHABLE;
  252|   546k|        }
  253|   546k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   546k|    {
  205|   546k|        SCN_TRY(it,
  ------------------
  |  |   71|   546k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   546k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   546k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   546k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.73k, False: 542k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.73k|    }                                                  \
  |  |  |  |   70|   546k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   542k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   542k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   542k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   542k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   542k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 542k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   542k|        return rd.read_specs(subr, specs, value, loc);
  218|   542k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   555k|    {
  223|   555k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   555k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   555k|                          basic_contiguous_scan_context<char_type>>) {
  227|   555k|            auto rd = make_reader<T, char_type>();
  228|   555k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 555k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   555k|            return impl(rd, range, value);
  233|   555k|        }
  234|   555k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   555k|            auto rd = make_reader<T, char_type>();
  236|   555k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   555k|                return unexpected(e);
  238|   555k|            }
  239|       |
  240|   555k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   555k|                return impl(rd, range, value);
  242|   555k|            }
  243|       |
  244|   555k|            auto crange = get_as_contiguous(range);
  245|   555k|            SCN_TRY(it, impl(rd, crange, value));
  246|   555k|            return ranges_polyfill::batch_next(
  247|   555k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   555k|        }
  249|   555k|        else {
  250|   555k|            SCN_EXPECT(false);
  251|   555k|            SCN_UNREACHABLE;
  252|   555k|        }
  253|   555k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   555k|    {
  205|   555k|        SCN_TRY(it,
  ------------------
  |  |   71|   555k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   555k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   555k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   555k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.12k, False: 550k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.12k|    }                                                  \
  |  |  |  |   70|   555k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   550k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   550k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   550k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   550k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   550k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 550k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   550k|        return rd.read_specs(subr, specs, value, loc);
  218|   550k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   374k|    {
  223|   374k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   374k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   374k|                          basic_contiguous_scan_context<char_type>>) {
  227|   374k|            auto rd = make_reader<T, char_type>();
  228|   374k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   374k|            return impl(rd, range, value);
  233|   374k|        }
  234|   374k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   374k|            auto rd = make_reader<T, char_type>();
  236|   374k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   374k|                return unexpected(e);
  238|   374k|            }
  239|       |
  240|   374k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   374k|                return impl(rd, range, value);
  242|   374k|            }
  243|       |
  244|   374k|            auto crange = get_as_contiguous(range);
  245|   374k|            SCN_TRY(it, impl(rd, crange, value));
  246|   374k|            return ranges_polyfill::batch_next(
  247|   374k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   374k|        }
  249|   374k|        else {
  250|   374k|            SCN_EXPECT(false);
  251|   374k|            SCN_UNREACHABLE;
  252|   374k|        }
  253|   374k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   374k|    {
  205|   374k|        SCN_TRY(it,
  ------------------
  |  |   71|   374k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   374k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   374k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.42k, False: 372k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.42k|    }                                                  \
  |  |  |  |   70|   374k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   372k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   372k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   372k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   372k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 372k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   372k|        return rd.read_specs(subr, specs, value, loc);
  218|   372k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   463k|    {
  223|   463k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   463k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   463k|                          basic_contiguous_scan_context<char_type>>) {
  227|   463k|            auto rd = make_reader<T, char_type>();
  228|   463k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 463k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   463k|            return impl(rd, range, value);
  233|   463k|        }
  234|   463k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   463k|            auto rd = make_reader<T, char_type>();
  236|   463k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   463k|                return unexpected(e);
  238|   463k|            }
  239|       |
  240|   463k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   463k|                return impl(rd, range, value);
  242|   463k|            }
  243|       |
  244|   463k|            auto crange = get_as_contiguous(range);
  245|   463k|            SCN_TRY(it, impl(rd, crange, value));
  246|   463k|            return ranges_polyfill::batch_next(
  247|   463k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   463k|        }
  249|   463k|        else {
  250|   463k|            SCN_EXPECT(false);
  251|   463k|            SCN_UNREACHABLE;
  252|   463k|        }
  253|   463k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   463k|    {
  205|   463k|        SCN_TRY(it,
  ------------------
  |  |   71|   463k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   463k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   463k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.52k, False: 459k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.52k|    }                                                  \
  |  |  |  |   70|   463k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   459k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   459k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   459k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   459k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   459k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 459k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   459k|        return rd.read_specs(subr, specs, value, loc);
  218|   459k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   466k|    {
  223|   466k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   466k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   466k|                          basic_contiguous_scan_context<char_type>>) {
  227|   466k|            auto rd = make_reader<T, char_type>();
  228|   466k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 466k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   466k|            return impl(rd, range, value);
  233|   466k|        }
  234|   466k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   466k|            auto rd = make_reader<T, char_type>();
  236|   466k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   466k|                return unexpected(e);
  238|   466k|            }
  239|       |
  240|   466k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   466k|                return impl(rd, range, value);
  242|   466k|            }
  243|       |
  244|   466k|            auto crange = get_as_contiguous(range);
  245|   466k|            SCN_TRY(it, impl(rd, crange, value));
  246|   466k|            return ranges_polyfill::batch_next(
  247|   466k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   466k|        }
  249|   466k|        else {
  250|   466k|            SCN_EXPECT(false);
  251|   466k|            SCN_UNREACHABLE;
  252|   466k|        }
  253|   466k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   466k|    {
  205|   466k|        SCN_TRY(it,
  ------------------
  |  |   71|   466k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   466k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   466k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.74k, False: 462k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.74k|    }                                                  \
  |  |  |  |   70|   466k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   462k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   462k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   462k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   462k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   462k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 462k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   462k|        return rd.read_specs(subr, specs, value, loc);
  218|   462k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  24.9k|    {
  122|  24.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.9k|            auto rd = make_reader<T, char_type>();
  127|  24.9k|            return impl(rd, range, value);
  128|  24.9k|        }
  129|  24.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.9k|            auto rd = make_reader<T, char_type>();
  131|  24.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.9k, False: 0]
  ------------------
  132|  24.9k|                return impl(rd, range, value);
  133|  24.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.9k|        else {
  140|  24.9k|            SCN_EXPECT(false);
  141|  24.9k|            SCN_UNREACHABLE;
  142|  24.9k|        }
  143|  24.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.9k|    {
  112|  24.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.9k|                    .transform_error(make_eof_scan_error));
  115|  24.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.9k|                               loc);
  117|  24.9k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   639k|{
   43|   639k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 130, False: 639k]
  |  |  ------------------
  ------------------
   44|    130|        return unexpected(e);
   45|    130|    }
   46|       |
   47|   639k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 639k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   639k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   639k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   639k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  24.9k|    {
  122|  24.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.9k|            auto rd = make_reader<T, char_type>();
  127|  24.9k|            return impl(rd, range, value);
  128|  24.9k|        }
  129|  24.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.9k|            auto rd = make_reader<T, char_type>();
  131|  24.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.9k, False: 0]
  ------------------
  132|  24.9k|                return impl(rd, range, value);
  133|  24.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.9k|        else {
  140|  24.9k|            SCN_EXPECT(false);
  141|  24.9k|            SCN_UNREACHABLE;
  142|  24.9k|        }
  143|  24.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.9k|    {
  112|  24.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.9k|                    .transform_error(make_eof_scan_error));
  115|  24.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.9k|                               loc);
  117|  24.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  24.9k|    {
  122|  24.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.9k|            auto rd = make_reader<T, char_type>();
  127|  24.9k|            return impl(rd, range, value);
  128|  24.9k|        }
  129|  24.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.9k|            auto rd = make_reader<T, char_type>();
  131|  24.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.9k, False: 0]
  ------------------
  132|  24.9k|                return impl(rd, range, value);
  133|  24.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.9k|        else {
  140|  24.9k|            SCN_EXPECT(false);
  141|  24.9k|            SCN_UNREACHABLE;
  142|  24.9k|        }
  143|  24.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.9k|    {
  112|  24.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.9k|                    .transform_error(make_eof_scan_error));
  115|  24.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.9k|                               loc);
  117|  24.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  24.9k|    {
  122|  24.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.9k|            auto rd = make_reader<T, char_type>();
  127|  24.9k|            return impl(rd, range, value);
  128|  24.9k|        }
  129|  24.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.9k|            auto rd = make_reader<T, char_type>();
  131|  24.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.9k, False: 0]
  ------------------
  132|  24.9k|                return impl(rd, range, value);
  133|  24.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.9k|        else {
  140|  24.9k|            SCN_EXPECT(false);
  141|  24.9k|            SCN_UNREACHABLE;
  142|  24.9k|        }
  143|  24.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.9k|    {
  112|  24.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.9k|                    .transform_error(make_eof_scan_error));
  115|  24.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.9k|                               loc);
  117|  24.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  24.9k|    {
  122|  24.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.9k|            auto rd = make_reader<T, char_type>();
  127|  24.9k|            return impl(rd, range, value);
  128|  24.9k|        }
  129|  24.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.9k|            auto rd = make_reader<T, char_type>();
  131|  24.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.9k, False: 0]
  ------------------
  132|  24.9k|                return impl(rd, range, value);
  133|  24.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.9k|        else {
  140|  24.9k|            SCN_EXPECT(false);
  141|  24.9k|            SCN_UNREACHABLE;
  142|  24.9k|        }
  143|  24.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.9k|    {
  112|  24.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.9k|                    .transform_error(make_eof_scan_error));
  115|  24.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.9k|                               loc);
  117|  24.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  24.9k|    {
  122|  24.9k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.9k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.9k|            auto rd = make_reader<T, char_type>();
  127|  24.9k|            return impl(rd, range, value);
  128|  24.9k|        }
  129|  24.9k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.9k|            auto rd = make_reader<T, char_type>();
  131|  24.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.9k, False: 0]
  ------------------
  132|  24.9k|                return impl(rd, range, value);
  133|  24.9k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.9k|        else {
  140|  24.9k|            SCN_EXPECT(false);
  141|  24.9k|            SCN_UNREACHABLE;
  142|  24.9k|        }
  143|  24.9k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.9k|    {
  112|  24.9k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 24.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|  24.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.9k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.9k|                    .transform_error(make_eof_scan_error));
  115|  24.9k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.9k|                               loc);
  117|  24.9k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  74.7k|    {
  223|  74.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  74.7k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  74.7k|            auto rd = make_reader<T, char_type>();
  228|  74.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  74.7k|                return unexpected(e);
  230|  74.7k|            }
  231|       |
  232|  74.7k|            return impl(rd, range, value);
  233|  74.7k|        }
  234|  74.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  74.7k|            auto rd = make_reader<T, char_type>();
  236|  74.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 74.7k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  74.7k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 74.7k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  74.7k|                return impl(rd, range, value);
  242|  74.7k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  74.7k|        else {
  250|  74.7k|            SCN_EXPECT(false);
  251|  74.7k|            SCN_UNREACHABLE;
  252|  74.7k|        }
  253|  74.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  74.7k|    {
  205|  74.7k|        SCN_TRY(it,
  ------------------
  |  |   71|  74.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  74.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  74.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 14, False: 74.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     14|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     14|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     14|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     14|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     14|    }                                                  \
  |  |  |  |   70|  74.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  74.7k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  74.7k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  74.7k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  74.7k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 74.7k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  74.7k|        return rd.read_specs(subr, specs, value, loc);
  218|  74.7k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  83.0k|    {
  223|  83.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  83.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  83.0k|            auto rd = make_reader<T, char_type>();
  228|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  83.0k|                return unexpected(e);
  230|  83.0k|            }
  231|       |
  232|  83.0k|            return impl(rd, range, value);
  233|  83.0k|        }
  234|  83.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  83.0k|            auto rd = make_reader<T, char_type>();
  236|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  83.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 83.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  83.0k|                return impl(rd, range, value);
  242|  83.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  83.0k|        else {
  250|  83.0k|            SCN_EXPECT(false);
  251|  83.0k|            SCN_UNREACHABLE;
  252|  83.0k|        }
  253|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  83.0k|    {
  205|  83.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     16|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  83.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  83.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  83.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  83.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 83.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  83.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  83.0k|    {
  223|  83.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  83.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  83.0k|            auto rd = make_reader<T, char_type>();
  228|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  83.0k|                return unexpected(e);
  230|  83.0k|            }
  231|       |
  232|  83.0k|            return impl(rd, range, value);
  233|  83.0k|        }
  234|  83.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  83.0k|            auto rd = make_reader<T, char_type>();
  236|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  83.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 83.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  83.0k|                return impl(rd, range, value);
  242|  83.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  83.0k|        else {
  250|  83.0k|            SCN_EXPECT(false);
  251|  83.0k|            SCN_UNREACHABLE;
  252|  83.0k|        }
  253|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  83.0k|    {
  205|  83.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     16|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  83.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  83.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  83.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  83.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 83.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  83.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  83.0k|    {
  223|  83.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  83.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  83.0k|            auto rd = make_reader<T, char_type>();
  228|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  83.0k|                return unexpected(e);
  230|  83.0k|            }
  231|       |
  232|  83.0k|            return impl(rd, range, value);
  233|  83.0k|        }
  234|  83.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  83.0k|            auto rd = make_reader<T, char_type>();
  236|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  83.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 83.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  83.0k|                return impl(rd, range, value);
  242|  83.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  83.0k|        else {
  250|  83.0k|            SCN_EXPECT(false);
  251|  83.0k|            SCN_UNREACHABLE;
  252|  83.0k|        }
  253|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  83.0k|    {
  205|  83.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     16|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  83.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  83.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  83.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  83.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 83.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  83.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  83.0k|    {
  223|  83.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  83.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  83.0k|            auto rd = make_reader<T, char_type>();
  228|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  83.0k|                return unexpected(e);
  230|  83.0k|            }
  231|       |
  232|  83.0k|            return impl(rd, range, value);
  233|  83.0k|        }
  234|  83.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  83.0k|            auto rd = make_reader<T, char_type>();
  236|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  83.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 83.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  83.0k|                return impl(rd, range, value);
  242|  83.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  83.0k|        else {
  250|  83.0k|            SCN_EXPECT(false);
  251|  83.0k|            SCN_UNREACHABLE;
  252|  83.0k|        }
  253|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  83.0k|    {
  205|  83.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     16|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  83.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  83.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  83.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  83.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 83.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  83.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  83.0k|    {
  223|  83.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  83.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  83.0k|            auto rd = make_reader<T, char_type>();
  228|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  83.0k|                return unexpected(e);
  230|  83.0k|            }
  231|       |
  232|  83.0k|            return impl(rd, range, value);
  233|  83.0k|        }
  234|  83.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  83.0k|            auto rd = make_reader<T, char_type>();
  236|  83.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 83.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  83.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 83.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  83.0k|                return impl(rd, range, value);
  242|  83.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  83.0k|        else {
  250|  83.0k|            SCN_EXPECT(false);
  251|  83.0k|            SCN_UNREACHABLE;
  252|  83.0k|        }
  253|  83.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  83.0k|    {
  205|  83.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  83.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  83.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  83.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  83.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16, False: 83.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     16|    }                                                  \
  |  |  |  |   70|  83.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  83.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  83.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  83.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  83.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 83.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  83.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  83.0k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   378k|{
  110|   378k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   378k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   266k|{
  263|   266k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   266k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.68k, False: 260k]
  |  |  ------------------
  ------------------
  267|  5.68k|        return {get_start_of_next_code_point(input),
  268|  5.68k|                detail::invalid_code_point};
  269|  5.68k|    }
  270|   260k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|   260k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 157k, False: 103k]
  |  |  ------------------
  ------------------
  271|   157k|        return {input.end(), detail::invalid_code_point};
  272|   157k|    }
  273|       |
  274|   103k|    constexpr auto enc = get_encoding<CharT>();
  275|   103k|    std::size_t result{1};
  276|   103k|    char32_t output{};
  277|   103k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|   103k|        result = simdutf::convert_utf8_to_utf32(
  279|   103k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|   103k|    }
  281|   103k|    else if constexpr (enc == encoding::utf16) {
  282|   103k|        result = simdutf::convert_utf16_to_utf32(
  283|   103k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|   103k|    }
  285|   103k|    else if constexpr (enc == encoding::utf32) {
  286|   103k|        SCN_EXPECT(len == 1);
  287|   103k|        output = static_cast<char32_t>(input[0]);
  288|   103k|    }
  289|       |
  290|   103k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.74k, False: 96.5k]
  |  |  ------------------
  ------------------
  291|  6.74k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  6.74k|                detail::invalid_code_point};
  293|  6.74k|    }
  294|       |
  295|  96.5k|    return {input.begin() + len, output};
  296|   103k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  12.4k|{
  248|  12.4k|    auto it = input.begin();
  249|   114k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 112k, False: 1.99k]
  ------------------
  250|   112k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 10.4k, False: 101k]
  ------------------
  251|  10.4k|            break;
  252|  10.4k|        }
  253|   112k|    }
  254|       |
  255|  12.4k|    return it;
  256|  12.4k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  58.2M|{
  110|  58.2M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  58.2M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  4.46M|{
  449|  4.46M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 4.46M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  4.46M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  4.46M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  4.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  4.46M|                    input.size() * sizeof(SourceCharT));
  457|  4.46M|        return input.size();
  458|  4.46M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  8.74M|{
   29|       |    // Pattern_White_Space property
   30|  8.74M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 8.73M, False: 17.4k]
  |  Branch (30:27): [True: 4.02M, False: 4.70M]
  ------------------
   31|  8.74M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 46.9k, False: 4.67M]
  ------------------
   32|  8.74M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 4.30k, False: 4.67M]
  ------------------
   33|  8.74M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 654, False: 4.67M]
  ------------------
   34|  8.74M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 570, False: 4.67M]
  ------------------
   35|  8.74M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 1.33k, False: 4.66M]
  ------------------
   36|  8.74M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 4.66M]
  ------------------
   37|  8.74M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  9.34M|{
   58|  9.34M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  9.34M|        static_cast<unsigned char>(ch))];
   60|  9.34M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  4.83M|{
   92|  4.83M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  4.83M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  3.26M|    {
   57|  3.26M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  9.46M|    {
   61|  9.46M|        return m_current;
   62|  9.46M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  6.19M|    {
   66|  6.19M|        return m_range.end();
   67|  6.19M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  3.01M|    {
   81|  3.01M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  3.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  3.01M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  3.01M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 3.01M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  3.01M|        }
   87|  3.01M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  3.01M|    static_cast<    \
  |  |  247|  3.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  3.01M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  3.18M|    {
   71|  3.18M|        return ranges::subrange{begin(), end()};
   72|  3.18M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  2.92M|    {
   57|  2.92M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  8.17M|    {
   61|  8.17M|        return m_current;
   62|  8.17M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  5.25M|    {
   66|  5.25M|        return m_range.end();
   67|  5.25M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  2.47M|    {
   81|  2.47M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  2.47M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.47M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  2.47M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  2.47M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 2.47M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  2.47M|        }
   87|  2.47M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  2.47M|    static_cast<    \
  |  |  247|  2.47M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  2.47M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  2.77M|    {
   71|  2.77M|        return ranges::subrange{begin(), end()};
   72|  2.77M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   879k|    {
  205|   879k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   879k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   879k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   312k|    {
  196|   312k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   439k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   439k|              cvref<T> obj = *get<T>(fn);
  187|   439k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   439k|                  obj(static_cast<decltype(args)>(args)...);
  189|   439k|              }
  190|   439k|              else {
  191|   439k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   439k|              }
  193|   439k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   439k|    {
  126|   439k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   439k|            return static_cast<T*>(s.m_cp);
  128|   439k|        }
  129|   439k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   439k|            return static_cast<T*>(s.m_p);
  131|   439k|        }
  132|   439k|        else {
  133|   439k|            return reinterpret_cast<T*>(s.m_fp);
  134|   439k|        }
  135|   439k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   312k|        {
  104|   312k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  16.9M|    {
  205|  16.9M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  16.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  16.9M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  4.44M|    {
  196|  4.44M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  8.48M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  8.48M|              cvref<T> obj = *get<T>(fn);
  187|  8.48M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  8.48M|                  obj(static_cast<decltype(args)>(args)...);
  189|  8.48M|              }
  190|  8.48M|              else {
  191|  8.48M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  8.48M|              }
  193|  8.48M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  8.48M|    {
  126|  8.48M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  8.48M|            return static_cast<T*>(s.m_cp);
  128|  8.48M|        }
  129|  8.48M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  8.48M|            return static_cast<T*>(s.m_p);
  131|  8.48M|        }
  132|  8.48M|        else {
  133|  8.48M|            return reinterpret_cast<T*>(s.m_fp);
  134|  8.48M|        }
  135|  8.48M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  4.44M|        {
  104|  4.44M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   312k|    {
  196|   312k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   439k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   439k|              cvref<T> obj = *get<T>(fn);
  187|   439k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   439k|                  obj(static_cast<decltype(args)>(args)...);
  189|   439k|              }
  190|   439k|              else {
  191|   439k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   439k|              }
  193|   439k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   439k|    {
  126|   439k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   439k|            return static_cast<T*>(s.m_cp);
  128|   439k|        }
  129|   439k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   439k|            return static_cast<T*>(s.m_p);
  131|   439k|        }
  132|   439k|        else {
  133|   439k|            return reinterpret_cast<T*>(s.m_fp);
  134|   439k|        }
  135|   439k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   312k|        {
  104|   312k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  3.80M|    {
  196|  3.80M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  7.84M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  7.84M|              cvref<T> obj = *get<T>(fn);
  187|  7.84M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  7.84M|                  obj(static_cast<decltype(args)>(args)...);
  189|  7.84M|              }
  190|  7.84M|              else {
  191|  7.84M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  7.84M|              }
  193|  7.84M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  7.84M|    {
  126|  7.84M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  7.84M|            return static_cast<T*>(s.m_cp);
  128|  7.84M|        }
  129|  7.84M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  7.84M|            return static_cast<T*>(s.m_p);
  131|  7.84M|        }
  132|  7.84M|        else {
  133|  7.84M|            return reinterpret_cast<T*>(s.m_fp);
  134|  7.84M|        }
  135|  7.84M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  3.80M|        {
  104|  3.80M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  1.97M|    {
  205|  1.97M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  1.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  1.97M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   539k|    {
  196|   539k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|   988k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   988k|              cvref<T> obj = *get<T>(fn);
  187|   988k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   988k|                  obj(static_cast<decltype(args)>(args)...);
  189|   988k|              }
  190|   988k|              else {
  191|   988k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   988k|              }
  193|   988k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|   988k|    {
  126|   988k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   988k|            return static_cast<T*>(s.m_cp);
  128|   988k|        }
  129|   988k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   988k|            return static_cast<T*>(s.m_p);
  131|   988k|        }
  132|   988k|        else {
  133|   988k|            return reinterpret_cast<T*>(s.m_fp);
  134|   988k|        }
  135|   988k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   539k|        {
  104|   539k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   639k|    {
  196|   639k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   639k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   639k|              cvref<T> obj = *get<T>(fn);
  187|   639k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   639k|                  obj(static_cast<decltype(args)>(args)...);
  189|   639k|              }
  190|   639k|              else {
  191|   639k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   639k|              }
  193|   639k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   639k|    {
  126|   639k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   639k|            return static_cast<T*>(s.m_cp);
  128|   639k|        }
  129|   639k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   639k|            return static_cast<T*>(s.m_p);
  131|   639k|        }
  132|   639k|        else {
  133|   639k|            return reinterpret_cast<T*>(s.m_fp);
  134|   639k|        }
  135|   639k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   639k|        {
  104|   639k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   539k|    {
  196|   539k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|   988k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   988k|              cvref<T> obj = *get<T>(fn);
  187|   988k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   988k|                  obj(static_cast<decltype(args)>(args)...);
  189|   988k|              }
  190|   988k|              else {
  191|   988k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   988k|              }
  193|   988k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|   988k|    {
  126|   988k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   988k|            return static_cast<T*>(s.m_cp);
  128|   988k|        }
  129|   988k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   988k|            return static_cast<T*>(s.m_p);
  131|   988k|        }
  132|   988k|        else {
  133|   988k|            return reinterpret_cast<T*>(s.m_fp);
  134|   988k|        }
  135|   988k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   539k|        {
  104|   539k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  56.8k|{
   44|  56.8k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  56.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  56.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  56.8k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  39.2M|{
   30|  39.2M|    return e != eof_error::good;
   31|  39.2M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   162k|{
   91|   162k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   162k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  9.65M|    {
   69|  9.65M|        return a.m_code == b.m_code;
   70|  9.65M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  45.0M|    {
   55|  45.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  45.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  45.0M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   500k|    return [code, msg](parse_error err) {
  115|   500k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   500k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   500k|{
  100|   500k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 500k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   500k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 500k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   500k|    return scan_error{code, msg};
  109|   500k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   852k|{
  114|   852k|    return [code, msg](parse_error err) {
  115|   852k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   852k|    };
  117|   852k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  2.04M|{
  587|  2.04M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  2.04M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   212k|{
  595|   212k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   212k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   212k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 70.9k, False: 141k]
  |  |  ------------------
  ------------------
  597|  70.9k|        source.sync(*n);
  598|  70.9k|    }
  599|   141k|    else {
  600|   141k|        source.sync_all();
  601|   141k|    }
  602|   212k|    return n;
  603|   212k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  1.81M|{
  611|  1.81M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  1.81M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   369k|{
  619|   369k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   369k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   369k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 120k, False: 249k]
  |  |  ------------------
  ------------------
  621|   120k|        source.sync(*n);
  622|   120k|    }
  623|   249k|    else {
  624|   249k|        source.sync_all();
  625|   249k|    }
  626|   369k|    return n;
  627|   369k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  2.04M|{
  544|  2.04M|    return vscan_internal(source, format, args);
  545|  2.04M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   212k|{
  550|   212k|    auto n = vscan_internal(source, format, args);
  551|   212k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   212k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 70.9k, False: 141k]
  |  |  ------------------
  ------------------
  552|  70.9k|        source.sync(*n);
  553|  70.9k|    }
  554|   141k|    else {
  555|   141k|        source.sync_all();
  556|   141k|    }
  557|   212k|    return n;
  558|   212k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  1.81M|{
  564|  1.81M|    return vscan_internal(source, format, args);
  565|  1.81M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   369k|{
  570|   369k|    auto n = vscan_internal(source, format, args);
  571|   369k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   369k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 120k, False: 249k]
  |  |  ------------------
  ------------------
  572|   120k|        source.sync(*n);
  573|   120k|    }
  574|   249k|    else {
  575|   249k|        source.sync_all();
  576|   249k|    }
  577|   369k|    return n;
  578|   369k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   409k|{
  654|   409k|    return vscan_value_internal(source, arg);
  655|   409k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  28.3k|{
  659|  28.3k|    auto n = vscan_value_internal(source, arg);
  660|  28.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  28.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 14.1k, False: 14.1k]
  |  |  ------------------
  ------------------
  661|  14.1k|        source.sync(*n);
  662|  14.1k|    }
  663|  14.1k|    else {
  664|  14.1k|        source.sync_all();
  665|  14.1k|    }
  666|  28.3k|    return n;
  667|  28.3k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   351k|{
  673|   351k|    return vscan_value_internal(source, arg);
  674|   351k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  49.8k|{
  679|  49.8k|    auto n = vscan_value_internal(source, arg);
  680|  49.8k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  49.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 24.9k, False: 24.9k]
  |  |  ------------------
  ------------------
  681|  24.9k|        source.sync(*n);
  682|  24.9k|    }
  683|  24.9k|    else {
  684|  24.9k|        source.sync_all();
  685|  24.9k|    }
  686|  49.8k|    return n;
  687|  49.8k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   425k|{
  476|   425k|    const auto argcount = args.size();
  477|   425k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 56.7k, False: 368k]
  |  Branch (477:60): [True: 56.7k, False: 0]
  ------------------
  478|  56.7k|        auto arg = args.get(0);
  479|  56.7k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  56.7k|    static_cast<    \
  |  |  247|  56.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  56.7k|    }
  481|       |
  482|   368k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 368k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   368k|    SCN_UNLIKELY_ATTR
  490|   368k|    {
  491|   368k|        auto handler = format_handler<false, CharT>{
  492|   368k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   368k|    static_cast<    \
  |  |  247|   368k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   368k|    static_cast<    \
  |  |  247|   368k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   368k|        return vscan_parse_format_string(format, handler);
  494|   368k|    }
  495|   368k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  4.51M|{
   36|  4.51M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 3.63M, False: 876k]
  ------------------
   37|  3.63M|        return false;
   38|  3.63M|    }
   39|   876k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 876k, False: 0]
  |  Branch (39:39): [True: 876k, False: 0]
  ------------------
   40|  4.51M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  85.1k|{
   69|  85.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 85.1k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  85.1k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  85.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 85.1k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  85.1k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  85.1k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  85.1k|    static_cast<    \
  |  |  247|  85.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  85.1k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  85.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 42.5k, False: 42.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  42.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  42.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  42.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  42.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  42.5k|    }                                                  \
  |  |  |  |   70|  85.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  42.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  42.5k|    return it.position();
   86|  85.1k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  3.26M|    {
  314|  3.26M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  7.20M|    {
  133|  7.20M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  7.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.20M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  7.20M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  3.26M|    {
  264|  3.26M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  3.26M|{
  441|  3.26M|    const auto beg = handler.get_ctx().begin();
  442|  3.26M|    detail::parse_format_string<false>(format, handler);
  443|  3.26M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 255k, False: 3.01M]
  |  |  ------------------
  ------------------
  444|   255k|        return unexpected(handler.error);
  445|   255k|    }
  446|  3.01M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  3.26M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  22.2M|    {
  425|  22.2M|        return ctx.get();
  426|  22.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  22.2M|    {
  268|  22.2M|        return contiguous_ctx;
  269|  22.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  6.28M|    {
  318|  6.28M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 6.28M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  6.28M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  3.26M|{
   92|  3.26M|    auto arg = ctx.arg(id);
   93|  3.26M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  3.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 3.26M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  3.26M|    return arg;
   97|  3.26M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  7.20M|    {
  208|  7.20M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  7.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.20M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  7.20M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  7.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.20M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  7.20M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  7.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.20M, False: 0]
  |  |  ------------------
  ------------------
  218|  7.20M|            visited_args_lower64 |= (1ull << id);
  219|  7.20M|            return;
  220|  7.20M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  7.20M|    {
  193|  7.20M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  7.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.20M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  7.20M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  7.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 7.20M, False: 0]
  |  |  ------------------
  ------------------
  199|  7.20M|            return (visited_args_lower64 >> id) & 1ull;
  200|  7.20M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  7.20M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|   938k|    {
  177|   938k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|   938k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 938k, False: 0]
  |  |  ------------------
  ------------------
  178|   938k|            error = err;
  179|   938k|        }
  180|   938k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  3.26M|    {
  347|  3.26M|        return parse_ctx.next_arg_id();
  348|  3.26M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  3.26M|    {
  388|  3.26M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  3.26M|        set_arg_as_visited(arg_id);
  390|       |
  391|  3.26M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 3.26M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  3.26M|        auto specs = detail::format_specs{};
  401|  3.26M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  3.26M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  3.26M|            arg.type()};
  404|       |
  405|  3.26M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  3.26M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 3.26M]
  |  Branch (406:29): [True: 56.7k, False: 3.21M]
  ------------------
  407|  56.7k|            SCN_UNLIKELY_ATTR
  408|  56.7k|            on_error("Missing '}' in format string");
  409|  56.7k|            return parse_ctx.begin();
  410|  56.7k|        }
  411|  3.21M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  3.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.3k, False: 3.18M]
  |  |  ------------------
  ------------------
  412|  28.3k|            return parse_ctx.begin();
  413|  28.3k|        }
  414|  3.18M|        parse_ctx.advance_to(begin);
  415|       |
  416|  3.18M|        on_visit_scan_arg(
  417|  3.18M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  3.18M|                                           get_ctx().locale()},
  419|  3.18M|            arg);
  420|  3.18M|        return parse_ctx.begin();
  421|  3.21M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  3.26M|    {
  112|  3.26M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  3.18M|    {
  359|  3.18M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 3.18M]
  |  Branch (359:23): [True: 0, False: 3.18M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  3.18M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  3.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  3.18M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  3.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 170k, False: 3.01M]
  |  |  ------------------
  ------------------
  366|   170k|            on_error(r.error());
  367|   170k|        }
  368|  3.01M|        else {
  369|  3.01M|            get_ctx().advance_to(*r);
  370|  3.01M|        }
  371|  3.18M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|   782k|    {
  172|   782k|        SCN_UNLIKELY_ATTR
  173|   782k|        error = scan_error{scan_error::invalid_format_string, msg};
  174|   782k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  7.20M|    {
  140|  7.20M|        {
  141|  7.20M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 7.20M]
  ------------------
  142|  7.20M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 7.20M]
  ------------------
  143|  7.20M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  7.20M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  7.20M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 7.20M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  7.20M|        }
  150|       |
  151|  7.20M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 7.20M, False: 0]
  ------------------
  152|  7.20M|            return;
  153|  7.20M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  7.20M|    {
  188|  7.20M|        return error;
  189|  7.20M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  21.1M|    {
  184|  21.1M|        return static_cast<bool>(error);
  185|  21.1M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   368k|    {
  314|   368k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   368k|    {
  241|   368k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   368k|{
  441|   368k|    const auto beg = handler.get_ctx().begin();
  442|   368k|    detail::parse_format_string<false>(format, handler);
  443|   368k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 255k, False: 113k]
  |  |  ------------------
  ------------------
  444|   255k|        return unexpected(handler.error);
  445|   255k|    }
  446|   113k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   368k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  1.90M|    {
  425|  1.90M|        return ctx.get();
  426|  1.90M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  1.90M|    {
  245|  1.90M|        return ctx;
  246|  1.90M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   482k|    {
  318|   482k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 482k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   482k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   368k|{
   92|   368k|    auto arg = ctx.arg(id);
   93|   368k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   368k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 368k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   368k|    return arg;
   97|   368k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   368k|    {
  347|   368k|        return parse_ctx.next_arg_id();
  348|   368k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   368k|    {
  388|   368k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   368k|        set_arg_as_visited(arg_id);
  390|       |
  391|   368k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 368k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   368k|        auto specs = detail::format_specs{};
  401|   368k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   368k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   368k|            arg.type()};
  404|       |
  405|   368k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   368k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 368k]
  |  Branch (406:29): [True: 56.7k, False: 312k]
  ------------------
  407|  56.7k|            SCN_UNLIKELY_ATTR
  408|  56.7k|            on_error("Missing '}' in format string");
  409|  56.7k|            return parse_ctx.begin();
  410|  56.7k|        }
  411|   312k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 28.3k, False: 283k]
  |  |  ------------------
  ------------------
  412|  28.3k|            return parse_ctx.begin();
  413|  28.3k|        }
  414|   283k|        parse_ctx.advance_to(begin);
  415|       |
  416|   283k|        on_visit_scan_arg(
  417|   283k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   283k|                                           get_ctx().locale()},
  419|   283k|            arg);
  420|   283k|        return parse_ctx.begin();
  421|   312k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   368k|    {
  112|   368k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   283k|    {
  359|   283k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 283k]
  |  Branch (359:23): [True: 0, False: 283k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   283k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   283k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 170k, False: 113k]
  |  |  ------------------
  ------------------
  366|   170k|            on_error(r.error());
  367|   170k|        }
  368|   113k|        else {
  369|   113k|            get_ctx().advance_to(*r);
  370|   113k|        }
  371|   283k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  4.08M|{
  456|  4.08M|    const auto argcount = args.size();
  457|  4.08M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 819k, False: 3.26M]
  |  Branch (457:60): [True: 819k, False: 0]
  ------------------
  458|   819k|        auto arg = args.get(0);
  459|   819k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   819k|    static_cast<    \
  |  |  247|   819k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   819k|    }
  461|       |
  462|  3.26M|    auto handler = format_handler<true, CharT>{
  463|  3.26M|        ranges::subrange<const CharT*>{source.data(),
  464|  3.26M|                                       source.data() + source.size()},
  465|  3.26M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.26M|    static_cast<    \
  |  |  247|  3.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  3.26M|    static_cast<    \
  |  |  247|  3.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  3.26M|    return vscan_parse_format_string(format, handler);
  467|  4.08M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.22M|{
   49|  1.22M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.22M|    auto reader =
   55|  1.22M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.22M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.22M|                                           source.data() + source.size()},
   58|  1.22M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.22M|    static_cast<    \
  |  |  247|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.22M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.22M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.22M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.22M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 42.5k, False: 1.18M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  42.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  42.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  42.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  42.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  42.5k|    }                                                  \
  |  |  |  |   70|  1.22M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.18M|    return ranges::distance(source.data(), it);
   61|  1.22M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  3.62M|{
  456|  3.62M|    const auto argcount = args.size();
  457|  3.62M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 703k, False: 2.92M]
  |  Branch (457:60): [True: 703k, False: 0]
  ------------------
  458|   703k|        auto arg = args.get(0);
  459|   703k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|   703k|    static_cast<    \
  |  |  247|   703k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|   703k|    }
  461|       |
  462|  2.92M|    auto handler = format_handler<true, CharT>{
  463|  2.92M|        ranges::subrange<const CharT*>{source.data(),
  464|  2.92M|                                       source.data() + source.size()},
  465|  2.92M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.92M|    static_cast<    \
  |  |  247|  2.92M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  2.92M|    static_cast<    \
  |  |  247|  2.92M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  2.92M|    return vscan_parse_format_string(format, handler);
  467|  3.62M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  4.36M|{
   36|  4.36M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 3.56M, False: 802k]
  ------------------
   37|  3.56M|        return false;
   38|  3.56M|    }
   39|   802k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 802k, False: 0]
  |  Branch (39:39): [True: 802k, False: 0]
  ------------------
   40|  4.36M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.05M|{
   49|  1.05M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.05M|    auto reader =
   55|  1.05M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.05M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.05M|                                           source.data() + source.size()},
   58|  1.05M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.05M|    static_cast<    \
  |  |  247|  1.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.05M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.05M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.05M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.05M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 74.7k, False: 979k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  74.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  74.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  74.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  74.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  74.7k|    }                                                  \
  |  |  |  |   70|  1.05M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   979k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|   979k|    return ranges::distance(source.data(), it);
   61|  1.05M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  2.92M|    {
  314|  2.92M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  2.92M|    {
  264|  2.92M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  2.92M|{
  441|  2.92M|    const auto beg = handler.get_ctx().begin();
  442|  2.92M|    detail::parse_format_string<false>(format, handler);
  443|  2.92M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 448k, False: 2.47M]
  |  |  ------------------
  ------------------
  444|   448k|        return unexpected(handler.error);
  445|   448k|    }
  446|  2.47M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  2.92M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  19.2M|    {
  425|  19.2M|        return ctx.get();
  426|  19.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  19.2M|    {
  268|  19.2M|        return contiguous_ctx;
  269|  19.2M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  5.40M|    {
  318|  5.40M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 5.40M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  5.40M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  2.92M|{
   92|  2.92M|    auto arg = ctx.arg(id);
   93|  2.92M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  2.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.92M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  2.92M|    return arg;
   97|  2.92M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  2.92M|    {
  347|  2.92M|        return parse_ctx.next_arg_id();
  348|  2.92M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  2.92M|    {
  388|  2.92M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  2.92M|        set_arg_as_visited(arg_id);
  390|       |
  391|  2.92M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 2.92M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  2.92M|        auto specs = detail::format_specs{};
  401|  2.92M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  2.92M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  2.92M|            arg.type()};
  404|       |
  405|  2.92M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  2.92M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 2.92M]
  |  Branch (406:29): [True: 99.6k, False: 2.82M]
  ------------------
  407|  99.6k|            SCN_UNLIKELY_ATTR
  408|  99.6k|            on_error("Missing '}' in format string");
  409|  99.6k|            return parse_ctx.begin();
  410|  99.6k|        }
  411|  2.82M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  2.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 49.8k, False: 2.77M]
  |  |  ------------------
  ------------------
  412|  49.8k|            return parse_ctx.begin();
  413|  49.8k|        }
  414|  2.77M|        parse_ctx.advance_to(begin);
  415|       |
  416|  2.77M|        on_visit_scan_arg(
  417|  2.77M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  2.77M|                                           get_ctx().locale()},
  419|  2.77M|            arg);
  420|  2.77M|        return parse_ctx.begin();
  421|  2.82M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  2.92M|    {
  112|  2.92M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  2.77M|    {
  359|  2.77M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 2.77M]
  |  Branch (359:23): [True: 0, False: 2.77M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  2.77M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  2.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  2.77M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  2.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 299k, False: 2.47M]
  |  |  ------------------
  ------------------
  366|   299k|            on_error(r.error());
  367|   299k|        }
  368|  2.47M|        else {
  369|  2.47M|            get_ctx().advance_to(*r);
  370|  2.47M|        }
  371|  2.77M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   739k|{
  476|   739k|    const auto argcount = args.size();
  477|   739k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 99.6k, False: 639k]
  |  Branch (477:60): [True: 99.6k, False: 0]
  ------------------
  478|  99.6k|        auto arg = args.get(0);
  479|  99.6k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  99.6k|    static_cast<    \
  |  |  247|  99.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  99.6k|    }
  481|       |
  482|   639k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 639k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   639k|    SCN_UNLIKELY_ATTR
  490|   639k|    {
  491|   639k|        auto handler = format_handler<false, CharT>{
  492|   639k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   639k|    static_cast<    \
  |  |  247|   639k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   639k|    static_cast<    \
  |  |  247|   639k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   639k|        return vscan_parse_format_string(format, handler);
  494|   639k|    }
  495|   639k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|   149k|{
   69|   149k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|   149k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|   149k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|   149k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|   149k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|   149k|    static_cast<    \
  |  |  247|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|   149k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   149k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   149k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   149k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 74.7k, False: 74.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  74.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  74.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  74.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  74.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  74.7k|    }                                                  \
  |  |  |  |   70|   149k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  74.7k|    return it.position();
   86|   149k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   639k|    {
  314|   639k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   639k|    {
  241|   639k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   639k|{
  441|   639k|    const auto beg = handler.get_ctx().begin();
  442|   639k|    detail::parse_format_string<false>(format, handler);
  443|   639k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 448k, False: 191k]
  |  |  ------------------
  ------------------
  444|   448k|        return unexpected(handler.error);
  445|   448k|    }
  446|   191k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   639k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  3.28M|    {
  425|  3.28M|        return ctx.get();
  426|  3.28M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  3.28M|    {
  245|  3.28M|        return ctx;
  246|  3.28M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|   830k|    {
  318|   830k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 830k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   830k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   639k|{
   92|   639k|    auto arg = ctx.arg(id);
   93|   639k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 639k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   639k|    return arg;
   97|   639k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   639k|    {
  347|   639k|        return parse_ctx.next_arg_id();
  348|   639k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   639k|    {
  388|   639k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   639k|        set_arg_as_visited(arg_id);
  390|       |
  391|   639k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 639k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   639k|        auto specs = detail::format_specs{};
  401|   639k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   639k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   639k|            arg.type()};
  404|       |
  405|   639k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   639k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 639k]
  |  Branch (406:29): [True: 99.6k, False: 540k]
  ------------------
  407|  99.6k|            SCN_UNLIKELY_ATTR
  408|  99.6k|            on_error("Missing '}' in format string");
  409|  99.6k|            return parse_ctx.begin();
  410|  99.6k|        }
  411|   540k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   540k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 49.8k, False: 490k]
  |  |  ------------------
  ------------------
  412|  49.8k|            return parse_ctx.begin();
  413|  49.8k|        }
  414|   490k|        parse_ctx.advance_to(begin);
  415|       |
  416|   490k|        on_visit_scan_arg(
  417|   490k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   490k|                                           get_ctx().locale()},
  419|   490k|            arg);
  420|   490k|        return parse_ctx.begin();
  421|   540k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   639k|    {
  112|   639k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   490k|    {
  359|   490k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 490k]
  |  Branch (359:23): [True: 0, False: 490k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   490k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   490k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   490k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 299k, False: 191k]
  |  |  ------------------
  ------------------
  366|   299k|            on_error(r.error());
  367|   299k|        }
  368|   191k|        else {
  369|   191k|            get_ctx().advance_to(*r);
  370|   191k|        }
  371|   490k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   409k|{
  502|   409k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   409k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  28.3k|{
  502|  28.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  28.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   351k|{
  502|   351k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   351k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  49.8k|{
  502|  49.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  49.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  49.8k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   51|  2.36k|{
   52|  2.36k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|      0|    string_buffer.resize(data.size());
   56|  2.36k|    std::copy(data.begin(), data.end(),
   57|  2.36k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  2.36k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  2.36k|    const auto wsv_reinterpret_size =
   62|  2.36k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 115, False: 2.25k]
  ------------------
   63|  2.36k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  2.36k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   65|  2.36k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  2.36k|    std::wstring_view wsv_transcoded;
   69|  2.36k|    if (simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (69:9): [True: 1.78k, False: 576]
  ------------------
   70|  1.78k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (70:23): [Folded - Ignored]
  ------------------
   71|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   72|      0|            wstring_buffer_transcoded_wide.resize(size);
   73|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   74|      0|                sv.data(), sv.size(),
   75|      0|                reinterpret_cast<char16_t*>(
   76|      0|                    wstring_buffer_transcoded_wide.data()));
   77|      0|        }
   78|  1.78k|        else {
   79|  1.78k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   80|  1.78k|            wstring_buffer_transcoded_wide.resize(size);
   81|  1.78k|            (void)simdutf::convert_valid_utf8_to_utf32(
   82|  1.78k|                sv.data(), sv.size(),
   83|  1.78k|                reinterpret_cast<char32_t*>(
   84|  1.78k|                    wstring_buffer_transcoded_wide.data()));
   85|  1.78k|        }
   86|  1.78k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   87|  1.78k|    }
   88|       |
   89|  2.36k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   90|  2.36k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.36k|{
  140|  2.36k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.36k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.36k|    buf.resize(sizeof...(Args));
  143|  2.36k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.36k|    return {buf.data(), buf.size()};
  145|  2.36k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  125|  2.36k|{
  126|  2.36k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.36k|        return format_string_view_buffer;
  128|  2.36k|    }
  129|  2.36k|    else {
  130|  2.36k|        return wformat_string_view_buffer;
  131|  2.36k|    }
  132|  2.36k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  2.36k|{
  200|  2.36k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  2.36k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  2.36k|                                   format_strings);
  203|  2.36k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.36k|{
  151|       |    // Regular scan
  152|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 23.6k, False: 2.36k]
  ------------------
  153|  23.6k|        auto it = scn::ranges::begin(source);
  154|   276k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   276k|            auto result = scn::scan<T>(
  156|   276k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   276k|                scn::runtime_format(f));
  158|   276k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 23.6k, False: 252k]
  ------------------
  159|  23.6k|                break;
  160|  23.6k|            }
  161|   252k|            it = result->begin();
  162|   252k|        }
  163|  23.6k|    }
  164|       |
  165|       |    // scan localized
  166|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 23.6k, False: 2.36k]
  ------------------
  167|  23.6k|        auto it = scn::ranges::begin(source);
  168|   276k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   276k|            auto result = scn::scan<T>(
  170|   276k|                global_locale,
  171|   276k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   276k|                scn::runtime_format(f));
  173|   276k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 23.6k, False: 252k]
  ------------------
  174|  23.6k|                break;
  175|  23.6k|            }
  176|   252k|            it = result->begin();
  177|   252k|        }
  178|  23.6k|    }
  179|       |
  180|       |    // scan_value
  181|  2.36k|    {
  182|  2.36k|        auto it = scn::ranges::begin(source);
  183|  59.1k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  59.1k|            auto result = scn::scan_value<T>(
  185|  59.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  59.1k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.36k, False: 56.7k]
  ------------------
  187|  2.36k|                break;
  188|  2.36k|            }
  189|  56.7k|            it = result->begin();
  190|  56.7k|        }
  191|  2.36k|    }
  192|  2.36k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.36k|{
  151|       |    // Regular scan
  152|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 23.6k, False: 2.36k]
  ------------------
  153|  23.6k|        auto it = scn::ranges::begin(source);
  154|   275k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   275k|            auto result = scn::scan<T>(
  156|   275k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   275k|                scn::runtime_format(f));
  158|   275k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 23.6k, False: 251k]
  ------------------
  159|  23.6k|                break;
  160|  23.6k|            }
  161|   251k|            it = result->begin();
  162|   251k|        }
  163|  23.6k|    }
  164|       |
  165|       |    // scan localized
  166|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 23.6k, False: 2.36k]
  ------------------
  167|  23.6k|        auto it = scn::ranges::begin(source);
  168|   275k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   275k|            auto result = scn::scan<T>(
  170|   275k|                global_locale,
  171|   275k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   275k|                scn::runtime_format(f));
  173|   275k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 23.6k, False: 251k]
  ------------------
  174|  23.6k|                break;
  175|  23.6k|            }
  176|   251k|            it = result->begin();
  177|   251k|        }
  178|  23.6k|    }
  179|       |
  180|       |    // scan_value
  181|  2.36k|    {
  182|  2.36k|        auto it = scn::ranges::begin(source);
  183|  56.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  56.5k|            auto result = scn::scan_value<T>(
  185|  56.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  56.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.36k, False: 54.2k]
  ------------------
  187|  2.36k|                break;
  188|  2.36k|            }
  189|  54.2k|            it = result->begin();
  190|  54.2k|        }
  191|  2.36k|    }
  192|  2.36k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.36k|{
  151|       |    // Regular scan
  152|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 23.6k, False: 2.36k]
  ------------------
  153|  23.6k|        auto it = scn::ranges::begin(source);
  154|   401k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   401k|            auto result = scn::scan<T>(
  156|   401k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   401k|                scn::runtime_format(f));
  158|   401k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 23.6k, False: 378k]
  ------------------
  159|  23.6k|                break;
  160|  23.6k|            }
  161|   378k|            it = result->begin();
  162|   378k|        }
  163|  23.6k|    }
  164|       |
  165|       |    // scan localized
  166|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 23.6k, False: 2.36k]
  ------------------
  167|  23.6k|        auto it = scn::ranges::begin(source);
  168|   401k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   401k|            auto result = scn::scan<T>(
  170|   401k|                global_locale,
  171|   401k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   401k|                scn::runtime_format(f));
  173|   401k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 23.6k, False: 378k]
  ------------------
  174|  23.6k|                break;
  175|  23.6k|            }
  176|   378k|            it = result->begin();
  177|   378k|        }
  178|  23.6k|    }
  179|       |
  180|       |    // scan_value
  181|  2.36k|    {
  182|  2.36k|        auto it = scn::ranges::begin(source);
  183|  79.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  79.2k|            auto result = scn::scan_value<T>(
  185|  79.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  79.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.36k, False: 76.8k]
  ------------------
  187|  2.36k|                break;
  188|  2.36k|            }
  189|  76.8k|            it = result->begin();
  190|  76.8k|        }
  191|  2.36k|    }
  192|  2.36k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.36k|{
  151|       |    // Regular scan
  152|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 23.6k, False: 2.36k]
  ------------------
  153|  23.6k|        auto it = scn::ranges::begin(source);
  154|   339k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   339k|            auto result = scn::scan<T>(
  156|   339k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   339k|                scn::runtime_format(f));
  158|   339k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 23.6k, False: 315k]
  ------------------
  159|  23.6k|                break;
  160|  23.6k|            }
  161|   315k|            it = result->begin();
  162|   315k|        }
  163|  23.6k|    }
  164|       |
  165|       |    // scan localized
  166|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 23.6k, False: 2.36k]
  ------------------
  167|  23.6k|        auto it = scn::ranges::begin(source);
  168|   339k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   339k|            auto result = scn::scan<T>(
  170|   339k|                global_locale,
  171|   339k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   339k|                scn::runtime_format(f));
  173|   339k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 23.6k, False: 315k]
  ------------------
  174|  23.6k|                break;
  175|  23.6k|            }
  176|   315k|            it = result->begin();
  177|   315k|        }
  178|  23.6k|    }
  179|       |
  180|       |    // scan_value
  181|  2.36k|    {
  182|  2.36k|        auto it = scn::ranges::begin(source);
  183|  66.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  66.8k|            auto result = scn::scan_value<T>(
  185|  66.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  66.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.36k, False: 64.4k]
  ------------------
  187|  2.36k|                break;
  188|  2.36k|            }
  189|  64.4k|            it = result->begin();
  190|  64.4k|        }
  191|  2.36k|    }
  192|  2.36k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.36k|{
  151|       |    // Regular scan
  152|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 23.6k, False: 2.36k]
  ------------------
  153|  23.6k|        auto it = scn::ranges::begin(source);
  154|   409k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   409k|            auto result = scn::scan<T>(
  156|   409k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   409k|                scn::runtime_format(f));
  158|   409k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 23.6k, False: 385k]
  ------------------
  159|  23.6k|                break;
  160|  23.6k|            }
  161|   385k|            it = result->begin();
  162|   385k|        }
  163|  23.6k|    }
  164|       |
  165|       |    // scan localized
  166|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 23.6k, False: 2.36k]
  ------------------
  167|  23.6k|        auto it = scn::ranges::begin(source);
  168|   409k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   409k|            auto result = scn::scan<T>(
  170|   409k|                global_locale,
  171|   409k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   409k|                scn::runtime_format(f));
  173|   409k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 23.6k, False: 385k]
  ------------------
  174|  23.6k|                break;
  175|  23.6k|            }
  176|   385k|            it = result->begin();
  177|   385k|        }
  178|  23.6k|    }
  179|       |
  180|       |    // scan_value
  181|  2.36k|    {
  182|  2.36k|        auto it = scn::ranges::begin(source);
  183|  80.6k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  80.6k|            auto result = scn::scan_value<T>(
  185|  80.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  80.6k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.36k, False: 78.2k]
  ------------------
  187|  2.36k|                break;
  188|  2.36k|            }
  189|  78.2k|            it = result->begin();
  190|  78.2k|        }
  191|  2.36k|    }
  192|  2.36k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  2.36k|{
  151|       |    // Regular scan
  152|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 23.6k, False: 2.36k]
  ------------------
  153|  23.6k|        auto it = scn::ranges::begin(source);
  154|   342k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   342k|            auto result = scn::scan<T>(
  156|   342k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   342k|                scn::runtime_format(f));
  158|   342k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 23.6k, False: 318k]
  ------------------
  159|  23.6k|                break;
  160|  23.6k|            }
  161|   318k|            it = result->begin();
  162|   318k|        }
  163|  23.6k|    }
  164|       |
  165|       |    // scan localized
  166|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 23.6k, False: 2.36k]
  ------------------
  167|  23.6k|        auto it = scn::ranges::begin(source);
  168|   342k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   342k|            auto result = scn::scan<T>(
  170|   342k|                global_locale,
  171|   342k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   342k|                scn::runtime_format(f));
  173|   342k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 23.6k, False: 318k]
  ------------------
  174|  23.6k|                break;
  175|  23.6k|            }
  176|   318k|            it = result->begin();
  177|   318k|        }
  178|  23.6k|    }
  179|       |
  180|       |    // scan_value
  181|  2.36k|    {
  182|  2.36k|        auto it = scn::ranges::begin(source);
  183|  67.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  67.2k|            auto result = scn::scan_value<T>(
  185|  67.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  67.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.36k, False: 64.9k]
  ------------------
  187|  2.36k|                break;
  188|  2.36k|            }
  189|  64.9k|            it = result->begin();
  190|  64.9k|        }
  191|  2.36k|    }
  192|  2.36k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.36k|{
  151|       |    // Regular scan
  152|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 23.6k, False: 2.36k]
  ------------------
  153|  23.6k|        auto it = scn::ranges::begin(source);
  154|  35.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  35.4k|            auto result = scn::scan<T>(
  156|  35.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  35.4k|                scn::runtime_format(f));
  158|  35.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 23.6k, False: 11.8k]
  ------------------
  159|  23.6k|                break;
  160|  23.6k|            }
  161|  11.8k|            it = result->begin();
  162|  11.8k|        }
  163|  23.6k|    }
  164|       |
  165|       |    // scan localized
  166|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 23.6k, False: 2.36k]
  ------------------
  167|  23.6k|        auto it = scn::ranges::begin(source);
  168|  35.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  35.4k|            auto result = scn::scan<T>(
  170|  35.4k|                global_locale,
  171|  35.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  35.4k|                scn::runtime_format(f));
  173|  35.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 23.6k, False: 11.8k]
  ------------------
  174|  23.6k|                break;
  175|  23.6k|            }
  176|  11.8k|            it = result->begin();
  177|  11.8k|        }
  178|  23.6k|    }
  179|       |
  180|       |    // scan_value
  181|  2.36k|    {
  182|  2.36k|        auto it = scn::ranges::begin(source);
  183|  4.73k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.73k|            auto result = scn::scan_value<T>(
  185|  4.73k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.73k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.36k, False: 2.36k]
  ------------------
  187|  2.36k|                break;
  188|  2.36k|            }
  189|  2.36k|            it = result->begin();
  190|  2.36k|        }
  191|  2.36k|    }
  192|  2.36k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.36k|{
  151|       |    // Regular scan
  152|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 23.6k, False: 2.36k]
  ------------------
  153|  23.6k|        auto it = scn::ranges::begin(source);
  154|  35.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  35.4k|            auto result = scn::scan<T>(
  156|  35.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  35.4k|                scn::runtime_format(f));
  158|  35.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 23.6k, False: 11.8k]
  ------------------
  159|  23.6k|                break;
  160|  23.6k|            }
  161|  11.8k|            it = result->begin();
  162|  11.8k|        }
  163|  23.6k|    }
  164|       |
  165|       |    // scan localized
  166|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 23.6k, False: 2.36k]
  ------------------
  167|  23.6k|        auto it = scn::ranges::begin(source);
  168|  35.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  35.4k|            auto result = scn::scan<T>(
  170|  35.4k|                global_locale,
  171|  35.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  35.4k|                scn::runtime_format(f));
  173|  35.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 23.6k, False: 11.8k]
  ------------------
  174|  23.6k|                break;
  175|  23.6k|            }
  176|  11.8k|            it = result->begin();
  177|  11.8k|        }
  178|  23.6k|    }
  179|       |
  180|       |    // scan_value
  181|  2.36k|    {
  182|  2.36k|        auto it = scn::ranges::begin(source);
  183|  4.73k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.73k|            auto result = scn::scan_value<T>(
  185|  4.73k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.73k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.36k, False: 2.36k]
  ------------------
  187|  2.36k|                break;
  188|  2.36k|            }
  189|  2.36k|            it = result->begin();
  190|  2.36k|        }
  191|  2.36k|    }
  192|  2.36k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.36k|{
  151|       |    // Regular scan
  152|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 23.6k, False: 2.36k]
  ------------------
  153|  23.6k|        auto it = scn::ranges::begin(source);
  154|  35.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  35.4k|            auto result = scn::scan<T>(
  156|  35.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  35.4k|                scn::runtime_format(f));
  158|  35.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 23.6k, False: 11.8k]
  ------------------
  159|  23.6k|                break;
  160|  23.6k|            }
  161|  11.8k|            it = result->begin();
  162|  11.8k|        }
  163|  23.6k|    }
  164|       |
  165|       |    // scan localized
  166|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 23.6k, False: 2.36k]
  ------------------
  167|  23.6k|        auto it = scn::ranges::begin(source);
  168|  35.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  35.4k|            auto result = scn::scan<T>(
  170|  35.4k|                global_locale,
  171|  35.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  35.4k|                scn::runtime_format(f));
  173|  35.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 23.6k, False: 11.8k]
  ------------------
  174|  23.6k|                break;
  175|  23.6k|            }
  176|  11.8k|            it = result->begin();
  177|  11.8k|        }
  178|  23.6k|    }
  179|       |
  180|       |    // scan_value
  181|  2.36k|    {
  182|  2.36k|        auto it = scn::ranges::begin(source);
  183|  4.73k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.73k|            auto result = scn::scan_value<T>(
  185|  4.73k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.73k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.36k, False: 2.36k]
  ------------------
  187|  2.36k|                break;
  188|  2.36k|            }
  189|  2.36k|            it = result->begin();
  190|  2.36k|        }
  191|  2.36k|    }
  192|  2.36k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.36k|{
  151|       |    // Regular scan
  152|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 23.6k, False: 2.36k]
  ------------------
  153|  23.6k|        auto it = scn::ranges::begin(source);
  154|  35.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  35.4k|            auto result = scn::scan<T>(
  156|  35.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  35.4k|                scn::runtime_format(f));
  158|  35.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 23.6k, False: 11.8k]
  ------------------
  159|  23.6k|                break;
  160|  23.6k|            }
  161|  11.8k|            it = result->begin();
  162|  11.8k|        }
  163|  23.6k|    }
  164|       |
  165|       |    // scan localized
  166|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 23.6k, False: 2.36k]
  ------------------
  167|  23.6k|        auto it = scn::ranges::begin(source);
  168|  35.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  35.4k|            auto result = scn::scan<T>(
  170|  35.4k|                global_locale,
  171|  35.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  35.4k|                scn::runtime_format(f));
  173|  35.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 23.6k, False: 11.8k]
  ------------------
  174|  23.6k|                break;
  175|  23.6k|            }
  176|  11.8k|            it = result->begin();
  177|  11.8k|        }
  178|  23.6k|    }
  179|       |
  180|       |    // scan_value
  181|  2.36k|    {
  182|  2.36k|        auto it = scn::ranges::begin(source);
  183|  4.73k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.73k|            auto result = scn::scan_value<T>(
  185|  4.73k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.73k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.36k, False: 2.36k]
  ------------------
  187|  2.36k|                break;
  188|  2.36k|            }
  189|  2.36k|            it = result->begin();
  190|  2.36k|        }
  191|  2.36k|    }
  192|  2.36k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.36k|{
  151|       |    // Regular scan
  152|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 23.6k, False: 2.36k]
  ------------------
  153|  23.6k|        auto it = scn::ranges::begin(source);
  154|  35.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  35.4k|            auto result = scn::scan<T>(
  156|  35.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  35.4k|                scn::runtime_format(f));
  158|  35.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 23.6k, False: 11.8k]
  ------------------
  159|  23.6k|                break;
  160|  23.6k|            }
  161|  11.8k|            it = result->begin();
  162|  11.8k|        }
  163|  23.6k|    }
  164|       |
  165|       |    // scan localized
  166|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 23.6k, False: 2.36k]
  ------------------
  167|  23.6k|        auto it = scn::ranges::begin(source);
  168|  35.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  35.4k|            auto result = scn::scan<T>(
  170|  35.4k|                global_locale,
  171|  35.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  35.4k|                scn::runtime_format(f));
  173|  35.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 23.6k, False: 11.8k]
  ------------------
  174|  23.6k|                break;
  175|  23.6k|            }
  176|  11.8k|            it = result->begin();
  177|  11.8k|        }
  178|  23.6k|    }
  179|       |
  180|       |    // scan_value
  181|  2.36k|    {
  182|  2.36k|        auto it = scn::ranges::begin(source);
  183|  4.73k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.73k|            auto result = scn::scan_value<T>(
  185|  4.73k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.73k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.36k, False: 2.36k]
  ------------------
  187|  2.36k|                break;
  188|  2.36k|            }
  189|  2.36k|            it = result->begin();
  190|  2.36k|        }
  191|  2.36k|    }
  192|  2.36k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  2.36k|{
  151|       |    // Regular scan
  152|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 23.6k, False: 2.36k]
  ------------------
  153|  23.6k|        auto it = scn::ranges::begin(source);
  154|  35.4k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  35.4k|            auto result = scn::scan<T>(
  156|  35.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  35.4k|                scn::runtime_format(f));
  158|  35.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 23.6k, False: 11.8k]
  ------------------
  159|  23.6k|                break;
  160|  23.6k|            }
  161|  11.8k|            it = result->begin();
  162|  11.8k|        }
  163|  23.6k|    }
  164|       |
  165|       |    // scan localized
  166|  23.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 23.6k, False: 2.36k]
  ------------------
  167|  23.6k|        auto it = scn::ranges::begin(source);
  168|  35.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  35.4k|            auto result = scn::scan<T>(
  170|  35.4k|                global_locale,
  171|  35.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  35.4k|                scn::runtime_format(f));
  173|  35.4k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 23.6k, False: 11.8k]
  ------------------
  174|  23.6k|                break;
  175|  23.6k|            }
  176|  11.8k|            it = result->begin();
  177|  11.8k|        }
  178|  23.6k|    }
  179|       |
  180|       |    // scan_value
  181|  2.36k|    {
  182|  2.36k|        auto it = scn::ranges::begin(source);
  183|  4.73k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  4.73k|            auto result = scn::scan_value<T>(
  185|  4.73k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  4.73k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 2.36k, False: 2.36k]
  ------------------
  187|  2.36k|                break;
  188|  2.36k|            }
  189|  2.36k|            it = result->begin();
  190|  2.36k|        }
  191|  2.36k|    }
  192|  2.36k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  108|  2.36k|{
  109|  2.36k|    using char_type = ranges::range_value_t<Source>;
  110|  2.36k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  2.36k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  2.36k|              std::back_inserter(deque));
  113|  2.36k|    return deque;
  114|  2.36k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   97|  2.36k|{
   98|  2.36k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  2.36k|        return noncontiguous_buffer;
  100|  2.36k|    }
  101|  2.36k|    else {
  102|  2.36k|        return wnoncontiguous_buffer;
  103|  2.36k|    }
  104|  2.36k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  139|  2.36k|{
  140|  2.36k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  141|  2.36k|    auto& buf = get_format_string_view_buffer<CharT>();
  142|  2.36k|    buf.resize(sizeof...(Args));
  143|  2.36k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  144|  2.36k|    return {buf.data(), buf.size()};
  145|  2.36k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  125|  2.36k|{
  126|  2.36k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (126:19): [Folded - Ignored]
  ------------------
  127|  2.36k|        return format_string_view_buffer;
  128|  2.36k|    }
  129|  2.36k|    else {
  130|  2.36k|        return wformat_string_view_buffer;
  131|  2.36k|    }
  132|  2.36k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  199|  4.15k|{
  200|  4.15k|    do_basic_run_for_source<CharT>(data, format_strings);
  201|  4.15k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  202|  4.15k|                                   format_strings);
  203|  4.15k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.15k|{
  151|       |    // Regular scan
  152|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 41.5k, False: 4.15k]
  ------------------
  153|  41.5k|        auto it = scn::ranges::begin(source);
  154|   248k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   248k|            auto result = scn::scan<T>(
  156|   248k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   248k|                scn::runtime_format(f));
  158|   248k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 41.5k, False: 206k]
  ------------------
  159|  41.5k|                break;
  160|  41.5k|            }
  161|   206k|            it = result->begin();
  162|   206k|        }
  163|  41.5k|    }
  164|       |
  165|       |    // scan localized
  166|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 41.5k, False: 4.15k]
  ------------------
  167|  41.5k|        auto it = scn::ranges::begin(source);
  168|   248k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   248k|            auto result = scn::scan<T>(
  170|   248k|                global_locale,
  171|   248k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   248k|                scn::runtime_format(f));
  173|   248k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 41.5k, False: 206k]
  ------------------
  174|  41.5k|                break;
  175|  41.5k|            }
  176|   206k|            it = result->begin();
  177|   206k|        }
  178|  41.5k|    }
  179|       |
  180|       |    // scan_value
  181|  4.15k|    {
  182|  4.15k|        auto it = scn::ranges::begin(source);
  183|  51.0k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  51.0k|            auto result = scn::scan_value<T>(
  185|  51.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  51.0k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.15k, False: 46.8k]
  ------------------
  187|  4.15k|                break;
  188|  4.15k|            }
  189|  46.8k|            it = result->begin();
  190|  46.8k|        }
  191|  4.15k|    }
  192|  4.15k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.15k|{
  151|       |    // Regular scan
  152|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 41.5k, False: 4.15k]
  ------------------
  153|  41.5k|        auto it = scn::ranges::begin(source);
  154|   248k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   248k|            auto result = scn::scan<T>(
  156|   248k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   248k|                scn::runtime_format(f));
  158|   248k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 41.5k, False: 207k]
  ------------------
  159|  41.5k|                break;
  160|  41.5k|            }
  161|   207k|            it = result->begin();
  162|   207k|        }
  163|  41.5k|    }
  164|       |
  165|       |    // scan localized
  166|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 41.5k, False: 4.15k]
  ------------------
  167|  41.5k|        auto it = scn::ranges::begin(source);
  168|   248k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   248k|            auto result = scn::scan<T>(
  170|   248k|                global_locale,
  171|   248k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   248k|                scn::runtime_format(f));
  173|   248k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 41.5k, False: 207k]
  ------------------
  174|  41.5k|                break;
  175|  41.5k|            }
  176|   207k|            it = result->begin();
  177|   207k|        }
  178|  41.5k|    }
  179|       |
  180|       |    // scan_value
  181|  4.15k|    {
  182|  4.15k|        auto it = scn::ranges::begin(source);
  183|  48.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  48.9k|            auto result = scn::scan_value<T>(
  185|  48.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  48.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.15k, False: 44.8k]
  ------------------
  187|  4.15k|                break;
  188|  4.15k|            }
  189|  44.8k|            it = result->begin();
  190|  44.8k|        }
  191|  4.15k|    }
  192|  4.15k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.15k|{
  151|       |    // Regular scan
  152|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 41.5k, False: 4.15k]
  ------------------
  153|  41.5k|        auto it = scn::ranges::begin(source);
  154|   353k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   353k|            auto result = scn::scan<T>(
  156|   353k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   353k|                scn::runtime_format(f));
  158|   353k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 41.5k, False: 312k]
  ------------------
  159|  41.5k|                break;
  160|  41.5k|            }
  161|   312k|            it = result->begin();
  162|   312k|        }
  163|  41.5k|    }
  164|       |
  165|       |    // scan localized
  166|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 41.5k, False: 4.15k]
  ------------------
  167|  41.5k|        auto it = scn::ranges::begin(source);
  168|   353k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   353k|            auto result = scn::scan<T>(
  170|   353k|                global_locale,
  171|   353k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   353k|                scn::runtime_format(f));
  173|   353k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 41.5k, False: 312k]
  ------------------
  174|  41.5k|                break;
  175|  41.5k|            }
  176|   312k|            it = result->begin();
  177|   312k|        }
  178|  41.5k|    }
  179|       |
  180|       |    // scan_value
  181|  4.15k|    {
  182|  4.15k|        auto it = scn::ranges::begin(source);
  183|  67.9k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  67.9k|            auto result = scn::scan_value<T>(
  185|  67.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  67.9k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.15k, False: 63.7k]
  ------------------
  187|  4.15k|                break;
  188|  4.15k|            }
  189|  63.7k|            it = result->begin();
  190|  63.7k|        }
  191|  4.15k|    }
  192|  4.15k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.15k|{
  151|       |    // Regular scan
  152|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 41.5k, False: 4.15k]
  ------------------
  153|  41.5k|        auto it = scn::ranges::begin(source);
  154|   301k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   301k|            auto result = scn::scan<T>(
  156|   301k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   301k|                scn::runtime_format(f));
  158|   301k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 41.5k, False: 259k]
  ------------------
  159|  41.5k|                break;
  160|  41.5k|            }
  161|   259k|            it = result->begin();
  162|   259k|        }
  163|  41.5k|    }
  164|       |
  165|       |    // scan localized
  166|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 41.5k, False: 4.15k]
  ------------------
  167|  41.5k|        auto it = scn::ranges::begin(source);
  168|   301k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   301k|            auto result = scn::scan<T>(
  170|   301k|                global_locale,
  171|   301k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   301k|                scn::runtime_format(f));
  173|   301k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 41.5k, False: 259k]
  ------------------
  174|  41.5k|                break;
  175|  41.5k|            }
  176|   259k|            it = result->begin();
  177|   259k|        }
  178|  41.5k|    }
  179|       |
  180|       |    // scan_value
  181|  4.15k|    {
  182|  4.15k|        auto it = scn::ranges::begin(source);
  183|  57.2k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  57.2k|            auto result = scn::scan_value<T>(
  185|  57.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  57.2k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.15k, False: 53.0k]
  ------------------
  187|  4.15k|                break;
  188|  4.15k|            }
  189|  53.0k|            it = result->begin();
  190|  53.0k|        }
  191|  4.15k|    }
  192|  4.15k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.15k|{
  151|       |    // Regular scan
  152|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 41.5k, False: 4.15k]
  ------------------
  153|  41.5k|        auto it = scn::ranges::begin(source);
  154|   358k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   358k|            auto result = scn::scan<T>(
  156|   358k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   358k|                scn::runtime_format(f));
  158|   358k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 41.5k, False: 317k]
  ------------------
  159|  41.5k|                break;
  160|  41.5k|            }
  161|   317k|            it = result->begin();
  162|   317k|        }
  163|  41.5k|    }
  164|       |
  165|       |    // scan localized
  166|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 41.5k, False: 4.15k]
  ------------------
  167|  41.5k|        auto it = scn::ranges::begin(source);
  168|   358k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   358k|            auto result = scn::scan<T>(
  170|   358k|                global_locale,
  171|   358k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   358k|                scn::runtime_format(f));
  173|   358k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 41.5k, False: 317k]
  ------------------
  174|  41.5k|                break;
  175|  41.5k|            }
  176|   317k|            it = result->begin();
  177|   317k|        }
  178|  41.5k|    }
  179|       |
  180|       |    // scan_value
  181|  4.15k|    {
  182|  4.15k|        auto it = scn::ranges::begin(source);
  183|  68.8k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  68.8k|            auto result = scn::scan_value<T>(
  185|  68.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  68.8k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.15k, False: 64.6k]
  ------------------
  187|  4.15k|                break;
  188|  4.15k|            }
  189|  64.6k|            it = result->begin();
  190|  64.6k|        }
  191|  4.15k|    }
  192|  4.15k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  150|  4.15k|{
  151|       |    // Regular scan
  152|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 41.5k, False: 4.15k]
  ------------------
  153|  41.5k|        auto it = scn::ranges::begin(source);
  154|   303k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|   303k|            auto result = scn::scan<T>(
  156|   303k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   303k|                scn::runtime_format(f));
  158|   303k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 41.5k, False: 261k]
  ------------------
  159|  41.5k|                break;
  160|  41.5k|            }
  161|   261k|            it = result->begin();
  162|   261k|        }
  163|  41.5k|    }
  164|       |
  165|       |    // scan localized
  166|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 41.5k, False: 4.15k]
  ------------------
  167|  41.5k|        auto it = scn::ranges::begin(source);
  168|   303k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   303k|            auto result = scn::scan<T>(
  170|   303k|                global_locale,
  171|   303k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|   303k|                scn::runtime_format(f));
  173|   303k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 41.5k, False: 261k]
  ------------------
  174|  41.5k|                break;
  175|  41.5k|            }
  176|   261k|            it = result->begin();
  177|   261k|        }
  178|  41.5k|    }
  179|       |
  180|       |    // scan_value
  181|  4.15k|    {
  182|  4.15k|        auto it = scn::ranges::begin(source);
  183|  57.5k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  57.5k|            auto result = scn::scan_value<T>(
  185|  57.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  57.5k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.15k, False: 53.4k]
  ------------------
  187|  4.15k|                break;
  188|  4.15k|            }
  189|  53.4k|            it = result->begin();
  190|  53.4k|        }
  191|  4.15k|    }
  192|  4.15k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.15k|{
  151|       |    // Regular scan
  152|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 41.5k, False: 4.15k]
  ------------------
  153|  41.5k|        auto it = scn::ranges::begin(source);
  154|  58.1k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  58.1k|            auto result = scn::scan<T>(
  156|  58.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  58.1k|                scn::runtime_format(f));
  158|  58.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 41.5k, False: 16.6k]
  ------------------
  159|  41.5k|                break;
  160|  41.5k|            }
  161|  16.6k|            it = result->begin();
  162|  16.6k|        }
  163|  41.5k|    }
  164|       |
  165|       |    // scan localized
  166|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 41.5k, False: 4.15k]
  ------------------
  167|  41.5k|        auto it = scn::ranges::begin(source);
  168|  58.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  58.1k|            auto result = scn::scan<T>(
  170|  58.1k|                global_locale,
  171|  58.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  58.1k|                scn::runtime_format(f));
  173|  58.1k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 41.5k, False: 16.6k]
  ------------------
  174|  41.5k|                break;
  175|  41.5k|            }
  176|  16.6k|            it = result->begin();
  177|  16.6k|        }
  178|  41.5k|    }
  179|       |
  180|       |    // scan_value
  181|  4.15k|    {
  182|  4.15k|        auto it = scn::ranges::begin(source);
  183|  8.30k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  8.30k|            auto result = scn::scan_value<T>(
  185|  8.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  8.30k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.15k, False: 4.15k]
  ------------------
  187|  4.15k|                break;
  188|  4.15k|            }
  189|  4.15k|            it = result->begin();
  190|  4.15k|        }
  191|  4.15k|    }
  192|  4.15k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.15k|{
  151|       |    // Regular scan
  152|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 41.5k, False: 4.15k]
  ------------------
  153|  41.5k|        auto it = scn::ranges::begin(source);
  154|  62.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  62.3k|            auto result = scn::scan<T>(
  156|  62.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  62.3k|                scn::runtime_format(f));
  158|  62.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 41.5k, False: 20.7k]
  ------------------
  159|  41.5k|                break;
  160|  41.5k|            }
  161|  20.7k|            it = result->begin();
  162|  20.7k|        }
  163|  41.5k|    }
  164|       |
  165|       |    // scan localized
  166|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 41.5k, False: 4.15k]
  ------------------
  167|  41.5k|        auto it = scn::ranges::begin(source);
  168|  62.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  62.3k|            auto result = scn::scan<T>(
  170|  62.3k|                global_locale,
  171|  62.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  62.3k|                scn::runtime_format(f));
  173|  62.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 41.5k, False: 20.7k]
  ------------------
  174|  41.5k|                break;
  175|  41.5k|            }
  176|  20.7k|            it = result->begin();
  177|  20.7k|        }
  178|  41.5k|    }
  179|       |
  180|       |    // scan_value
  181|  4.15k|    {
  182|  4.15k|        auto it = scn::ranges::begin(source);
  183|  8.30k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  8.30k|            auto result = scn::scan_value<T>(
  185|  8.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  8.30k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.15k, False: 4.15k]
  ------------------
  187|  4.15k|                break;
  188|  4.15k|            }
  189|  4.15k|            it = result->begin();
  190|  4.15k|        }
  191|  4.15k|    }
  192|  4.15k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.15k|{
  151|       |    // Regular scan
  152|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 41.5k, False: 4.15k]
  ------------------
  153|  41.5k|        auto it = scn::ranges::begin(source);
  154|  62.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  62.3k|            auto result = scn::scan<T>(
  156|  62.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  62.3k|                scn::runtime_format(f));
  158|  62.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 41.5k, False: 20.7k]
  ------------------
  159|  41.5k|                break;
  160|  41.5k|            }
  161|  20.7k|            it = result->begin();
  162|  20.7k|        }
  163|  41.5k|    }
  164|       |
  165|       |    // scan localized
  166|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 41.5k, False: 4.15k]
  ------------------
  167|  41.5k|        auto it = scn::ranges::begin(source);
  168|  62.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  62.3k|            auto result = scn::scan<T>(
  170|  62.3k|                global_locale,
  171|  62.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  62.3k|                scn::runtime_format(f));
  173|  62.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 41.5k, False: 20.7k]
  ------------------
  174|  41.5k|                break;
  175|  41.5k|            }
  176|  20.7k|            it = result->begin();
  177|  20.7k|        }
  178|  41.5k|    }
  179|       |
  180|       |    // scan_value
  181|  4.15k|    {
  182|  4.15k|        auto it = scn::ranges::begin(source);
  183|  8.30k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  8.30k|            auto result = scn::scan_value<T>(
  185|  8.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  8.30k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.15k, False: 4.15k]
  ------------------
  187|  4.15k|                break;
  188|  4.15k|            }
  189|  4.15k|            it = result->begin();
  190|  4.15k|        }
  191|  4.15k|    }
  192|  4.15k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.15k|{
  151|       |    // Regular scan
  152|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 41.5k, False: 4.15k]
  ------------------
  153|  41.5k|        auto it = scn::ranges::begin(source);
  154|  62.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  62.3k|            auto result = scn::scan<T>(
  156|  62.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  62.3k|                scn::runtime_format(f));
  158|  62.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 41.5k, False: 20.7k]
  ------------------
  159|  41.5k|                break;
  160|  41.5k|            }
  161|  20.7k|            it = result->begin();
  162|  20.7k|        }
  163|  41.5k|    }
  164|       |
  165|       |    // scan localized
  166|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 41.5k, False: 4.15k]
  ------------------
  167|  41.5k|        auto it = scn::ranges::begin(source);
  168|  62.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  62.3k|            auto result = scn::scan<T>(
  170|  62.3k|                global_locale,
  171|  62.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  62.3k|                scn::runtime_format(f));
  173|  62.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 41.5k, False: 20.7k]
  ------------------
  174|  41.5k|                break;
  175|  41.5k|            }
  176|  20.7k|            it = result->begin();
  177|  20.7k|        }
  178|  41.5k|    }
  179|       |
  180|       |    // scan_value
  181|  4.15k|    {
  182|  4.15k|        auto it = scn::ranges::begin(source);
  183|  8.30k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  8.30k|            auto result = scn::scan_value<T>(
  185|  8.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  8.30k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.15k, False: 4.15k]
  ------------------
  187|  4.15k|                break;
  188|  4.15k|            }
  189|  4.15k|            it = result->begin();
  190|  4.15k|        }
  191|  4.15k|    }
  192|  4.15k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.15k|{
  151|       |    // Regular scan
  152|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 41.5k, False: 4.15k]
  ------------------
  153|  41.5k|        auto it = scn::ranges::begin(source);
  154|  62.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  62.3k|            auto result = scn::scan<T>(
  156|  62.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  62.3k|                scn::runtime_format(f));
  158|  62.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 41.5k, False: 20.7k]
  ------------------
  159|  41.5k|                break;
  160|  41.5k|            }
  161|  20.7k|            it = result->begin();
  162|  20.7k|        }
  163|  41.5k|    }
  164|       |
  165|       |    // scan localized
  166|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 41.5k, False: 4.15k]
  ------------------
  167|  41.5k|        auto it = scn::ranges::begin(source);
  168|  62.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  62.3k|            auto result = scn::scan<T>(
  170|  62.3k|                global_locale,
  171|  62.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  62.3k|                scn::runtime_format(f));
  173|  62.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 41.5k, False: 20.7k]
  ------------------
  174|  41.5k|                break;
  175|  41.5k|            }
  176|  20.7k|            it = result->begin();
  177|  20.7k|        }
  178|  41.5k|    }
  179|       |
  180|       |    // scan_value
  181|  4.15k|    {
  182|  4.15k|        auto it = scn::ranges::begin(source);
  183|  8.30k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  8.30k|            auto result = scn::scan_value<T>(
  185|  8.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  8.30k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.15k, False: 4.15k]
  ------------------
  187|  4.15k|                break;
  188|  4.15k|            }
  189|  4.15k|            it = result->begin();
  190|  4.15k|        }
  191|  4.15k|    }
  192|  4.15k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  150|  4.15k|{
  151|       |    // Regular scan
  152|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (152:24): [True: 41.5k, False: 4.15k]
  ------------------
  153|  41.5k|        auto it = scn::ranges::begin(source);
  154|  62.3k|        while (true) {
  ------------------
  |  Branch (154:16): [Folded - Ignored]
  ------------------
  155|  62.3k|            auto result = scn::scan<T>(
  156|  62.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  62.3k|                scn::runtime_format(f));
  158|  62.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 41.5k, False: 20.7k]
  ------------------
  159|  41.5k|                break;
  160|  41.5k|            }
  161|  20.7k|            it = result->begin();
  162|  20.7k|        }
  163|  41.5k|    }
  164|       |
  165|       |    // scan localized
  166|  41.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (166:24): [True: 41.5k, False: 4.15k]
  ------------------
  167|  41.5k|        auto it = scn::ranges::begin(source);
  168|  62.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  62.3k|            auto result = scn::scan<T>(
  170|  62.3k|                global_locale,
  171|  62.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  172|  62.3k|                scn::runtime_format(f));
  173|  62.3k|            if (!result) {
  ------------------
  |  Branch (173:17): [True: 41.5k, False: 20.7k]
  ------------------
  174|  41.5k|                break;
  175|  41.5k|            }
  176|  20.7k|            it = result->begin();
  177|  20.7k|        }
  178|  41.5k|    }
  179|       |
  180|       |    // scan_value
  181|  4.15k|    {
  182|  4.15k|        auto it = scn::ranges::begin(source);
  183|  8.30k|        while (true) {
  ------------------
  |  Branch (183:16): [Folded - Ignored]
  ------------------
  184|  8.30k|            auto result = scn::scan_value<T>(
  185|  8.30k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  186|  8.30k|            if (!result) {
  ------------------
  |  Branch (186:17): [True: 4.15k, False: 4.15k]
  ------------------
  187|  4.15k|                break;
  188|  4.15k|            }
  189|  4.15k|            it = result->begin();
  190|  4.15k|        }
  191|  4.15k|    }
  192|  4.15k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  108|  4.15k|{
  109|  4.15k|    using char_type = ranges::range_value_t<Source>;
  110|  4.15k|    auto& deque = get_noncontiguous_buffer<char_type>();
  111|  4.15k|    std::copy(ranges::begin(source), ranges::end(source),
  112|  4.15k|              std::back_inserter(deque));
  113|  4.15k|    return deque;
  114|  4.15k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   97|  4.15k|{
   98|  4.15k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (98:19): [Folded - Ignored]
  ------------------
   99|  4.15k|        return noncontiguous_buffer;
  100|  4.15k|    }
  101|  4.15k|    else {
  102|  4.15k|        return wnoncontiguous_buffer;
  103|  4.15k|    }
  104|  4.15k|}

LLVMFuzzerTestOneInput:
   59|  2.36k|{
   60|  2.36k|    scn::fuzz::run({data, size});
   61|  2.36k|    return 0;
   62|  2.36k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  2.36k|{
   36|  2.36k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.36k]
  |  Branch (36:42): [True: 0, False: 2.36k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.36k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data);
   41|       |
   42|  2.36k|    auto f =
   43|  2.36k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   44|  2.36k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   45|  2.36k|    do_basic_run(sv, f);
   46|       |
   47|  2.36k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   48|  2.36k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   49|  2.36k|                                          L"{:'}", L"{:'L}");
   50|  2.36k|    do_basic_run(wsv_reinterpret, wf);
   51|  2.36k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (51:9): [True: 1.78k, False: 576]
  ------------------
   52|  1.78k|        do_basic_run(wsv_transcode, wf);
   53|  1.78k|    }
   54|  2.36k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.36k|{
   25|  2.36k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.36k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.36k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.36k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.36k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.36k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.36k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.36k|{
   25|  2.36k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.36k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.36k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.36k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.36k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.36k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.36k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  4.15k|{
   25|  4.15k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  4.15k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  4.15k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  4.15k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  4.15k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  4.15k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  4.15k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  4.15k|{
   25|  4.15k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  4.15k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  4.15k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  4.15k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  4.15k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  4.15k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  4.15k|}

