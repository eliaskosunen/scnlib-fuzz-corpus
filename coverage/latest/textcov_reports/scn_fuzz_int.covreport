_ZNK7simdutf14implementation25required_instruction_setsEv:
 1445|      2|  virtual uint32_t required_instruction_sets() const { return _required_instruction_sets; }
_ZN7simdutf14implementationC2ENSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_j:
 2455|      7|  {
 2456|      7|  }
_ZN7simdutf8internal29available_implementation_listC2Ev:
 2485|      1|  simdutf_really_inline available_implementation_list() {}
_ZN7simdutf14implementationD2Ev:
 2457|      5|  virtual ~implementation()=default;
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEaSEPS3_:
 2551|      1|  atomic_ptr& operator=(T *_ptr) { ptr = _ptr; return *this; }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEcvPS3_Ev:
 2548|      1|  operator T*() { return ptr.load(); }
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEC2EPS3_:
 2531|      1|  atomic_ptr(T *_ptr) : ptr{_ptr} {}
_ZN7simdutf8internal10atomic_ptrIKNS_14implementationEEptEv:
 2550|   102k|  T* operator->() { return ptr.load(); }

simdutf.cpp:_ZN7simdutf8internalL30detect_supported_architecturesEv:
  170|      1|static inline uint32_t detect_supported_architectures() {
  171|      1|  uint32_t eax;
  172|      1|  uint32_t ebx = 0;
  173|      1|  uint32_t ecx = 0;
  174|      1|  uint32_t edx = 0;
  175|      1|  uint32_t host_isa = 0x0;
  176|       |
  177|       |  // EBX for EAX=0x1
  178|      1|  eax = 0x1;
  179|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  180|       |
  181|      1|  if (ecx & cpuid_bit::sse42) {
  ------------------
  |  Branch (181:7): [True: 1, False: 0]
  ------------------
  182|      1|    host_isa |= instruction_set::SSE42;
  183|      1|  }
  184|       |
  185|      1|  if (ecx & cpuid_bit::pclmulqdq) {
  ------------------
  |  Branch (185:7): [True: 1, False: 0]
  ------------------
  186|      1|    host_isa |= instruction_set::PCLMULQDQ;
  187|      1|  }
  188|       |
  189|      1|  if ((ecx & cpuid_bit::osxsave) != cpuid_bit::osxsave) {
  ------------------
  |  Branch (189:7): [True: 0, False: 1]
  ------------------
  190|      0|    return host_isa;
  191|      0|  }
  192|       |
  193|       |  // xgetbv for checking if the OS saves registers
  194|      1|  uint64_t xcr0 = xgetbv();
  195|       |
  196|      1|  if ((xcr0 & cpuid_bit::xcr0_bit::avx256_saved) == 0) {
  ------------------
  |  Branch (196:7): [True: 0, False: 1]
  ------------------
  197|      0|    return host_isa;
  198|      0|  }
  199|       |  // ECX for EAX=0x7
  200|      1|  eax = 0x7;
  201|      1|  ecx = 0x0; // Sub-leaf = 0
  202|      1|  cpuid(&eax, &ebx, &ecx, &edx);
  203|      1|  if (ebx & cpuid_bit::ebx::avx2) {
  ------------------
  |  Branch (203:7): [True: 1, False: 0]
  ------------------
  204|      1|    host_isa |= instruction_set::AVX2;
  205|      1|  }
  206|      1|  if (ebx & cpuid_bit::ebx::bmi1) {
  ------------------
  |  Branch (206:7): [True: 1, False: 0]
  ------------------
  207|      1|    host_isa |= instruction_set::BMI1;
  208|      1|  }
  209|      1|  if (ebx & cpuid_bit::ebx::bmi2) {
  ------------------
  |  Branch (209:7): [True: 1, False: 0]
  ------------------
  210|      1|    host_isa |= instruction_set::BMI2;
  211|      1|  }
  212|      1|  if (!((xcr0 & cpuid_bit::xcr0_bit::avx512_saved) == cpuid_bit::xcr0_bit::avx512_saved)) {
  ------------------
  |  Branch (212:7): [True: 1, False: 0]
  ------------------
  213|      1|    return host_isa;
  214|      1|  }
  215|      0|  if (ebx & cpuid_bit::ebx::avx512f) {
  ------------------
  |  Branch (215:7): [True: 0, False: 0]
  ------------------
  216|      0|    host_isa |= instruction_set::AVX512F;
  217|      0|  }
  218|      0|  if (ebx & cpuid_bit::ebx::avx512bw) {
  ------------------
  |  Branch (218:7): [True: 0, False: 0]
  ------------------
  219|      0|    host_isa |= instruction_set::AVX512BW;
  220|      0|  }
  221|      0|  if (ebx & cpuid_bit::ebx::avx512cd) {
  ------------------
  |  Branch (221:7): [True: 0, False: 0]
  ------------------
  222|      0|    host_isa |= instruction_set::AVX512CD;
  223|      0|  }
  224|      0|  if (ebx & cpuid_bit::ebx::avx512dq) {
  ------------------
  |  Branch (224:7): [True: 0, False: 0]
  ------------------
  225|      0|    host_isa |= instruction_set::AVX512DQ;
  226|      0|  }
  227|      0|  if (ebx & cpuid_bit::ebx::avx512vl) {
  ------------------
  |  Branch (227:7): [True: 0, False: 0]
  ------------------
  228|      0|    host_isa |= instruction_set::AVX512VL;
  229|      0|  }
  230|      0|  if (ecx & cpuid_bit::ecx::avx512vbmi2) {
  ------------------
  |  Branch (230:7): [True: 0, False: 0]
  ------------------
  231|      0|    host_isa |= instruction_set::AVX512VBMI2;
  232|      0|  }
  233|      0|  if (ecx & cpuid_bit::ecx::avx512vpopcnt) {
  ------------------
  |  Branch (233:7): [True: 0, False: 0]
  ------------------
  234|      0|    host_isa |= instruction_set::AVX512VPOPCNTDQ;
  235|      0|  }
  236|      0|  return host_isa;
  237|      1|}
simdutf.cpp:_ZN7simdutf8internalL5cpuidEPjS1_S1_S1_:
  139|      2|                         uint32_t *edx) {
  140|       |#if defined(_MSC_VER)
  141|       |  int cpu_info[4];
  142|       |  __cpuidex(cpu_info, *eax, *ecx);
  143|       |  *eax = cpu_info[0];
  144|       |  *ebx = cpu_info[1];
  145|       |  *ecx = cpu_info[2];
  146|       |  *edx = cpu_info[3];
  147|       |#elif defined(HAVE_GCC_GET_CPUID) && defined(USE_GCC_GET_CPUID)
  148|       |  uint32_t level = *eax;
  149|       |  __get_cpuid(level, eax, ebx, ecx, edx);
  150|       |#else
  151|      2|  uint32_t a = *eax, b, c = *ecx, d;
  152|      2|  asm volatile("cpuid\n\t" : "+a"(a), "=b"(b), "+c"(c), "=d"(d));
  153|      2|  *eax = a;
  154|      2|  *ebx = b;
  155|      2|  *ecx = c;
  156|      2|  *edx = d;
  157|      2|#endif
  158|      2|}
simdutf.cpp:_ZN7simdutf8internalL6xgetbvEv:
  160|      1|static inline uint64_t xgetbv() {
  161|       | #if defined(_MSC_VER)
  162|       |   return _xgetbv(0);
  163|       | #else
  164|      1|   uint32_t xcr0_lo, xcr0_hi;
  165|      1|   asm volatile("xgetbv\n\t" : "=a" (xcr0_lo), "=d" (xcr0_hi) : "c" (0));
  166|      1|   return xcr0_lo | ((uint64_t)xcr0_hi << 32);
  167|      1| #endif
  168|      1| }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EEC2EPKhm:
   62|  2.72k|simdutf_really_inline buf_block_reader<STEP_SIZE>::buf_block_reader(const uint8_t *_buf, size_t _len) : buf{_buf}, len{_len}, lenminusstep{len < STEP_SIZE ? 0 : len - STEP_SIZE}, idx{0} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE14has_full_blockEv:
   68|  10.1k|simdutf_really_inline bool buf_block_reader<STEP_SIZE>::has_full_block() const {
   69|  10.1k|  return idx < lenminusstep;
   70|  10.1k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE10full_blockEv:
   73|  7.42k|simdutf_really_inline const uint8_t *buf_block_reader<STEP_SIZE>::full_block() const {
   74|  7.42k|  return &buf[idx];
   75|  7.42k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE7advanceEv:
   86|  10.1k|simdutf_really_inline void buf_block_reader<STEP_SIZE>::advance() {
   87|  10.1k|  idx += STEP_SIZE;
   88|  10.1k|}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_116buf_block_readerILm64EE13get_remainderEPh:
   78|  2.72k|simdutf_really_inline size_t buf_block_reader<STEP_SIZE>::get_remainder(uint8_t *dst) const {
   79|  2.72k|  if(len == idx) { return 0; } // memcpy(dst, null, 0) will trigger an error with some sanitizers
  ------------------
  |  Branch (79:6): [True: 0, False: 2.72k]
  ------------------
   80|  2.72k|  std::memset(dst, 0x20, STEP_SIZE); // std::memset STEP_SIZE because it's more efficient to write out 8 or 16 bytes at once.
   81|  2.72k|  std::memcpy(dst, buf + idx, len - idx);
   82|  2.72k|  return len - idx;
   83|  2.72k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14utf817count_code_pointsEPKcm:
   10|  2.12k|simdutf_really_inline size_t count_code_points(const char* in, size_t size) {
   11|  2.12k|    size_t pos = 0;
   12|  2.12k|    size_t count = 0;
   13|  8.18k|    for(;pos + 64 <= size; pos += 64) {
  ------------------
  |  Branch (13:10): [True: 6.05k, False: 2.12k]
  ------------------
   14|  6.05k|      simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
   15|  6.05k|      uint64_t utf8_continuation_mask = input.gt(-65);
   16|  6.05k|      count += count_ones(utf8_continuation_mask);
   17|  6.05k|    }
   18|  2.12k|    return count + scalar::utf8::count_code_points(in + pos, size - pos);
   19|  2.12k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoderC2Ev:
  115|  95.3k|    validating_transcoder() : error(uint8_t(0)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder7convertEPKcmPDi:
  129|  95.3k|    simdutf_really_inline size_t convert(const char* in, size_t size, char32_t* utf32_output) {
  130|  95.3k|      size_t pos = 0;
  131|  95.3k|      char32_t* start{utf32_output};
  132|       |      // In the worst case, we have the haswell kernel which can cause an overflow of
  133|       |      // 8 bytes when calling convert_masked_utf8_to_utf32. If you skip the last 16 bytes,
  134|       |      // and if the data is valid, then it is entirely safe because 16 UTF-8 bytes generate
  135|       |      // much more than 8 bytes. However, you cannot generally assume that you have valid
  136|       |      // UTF-8 input, so we are going to go back from the end counting 4 leading bytes,
  137|       |      // to give us a good margin.
  138|  95.3k|      size_t leading_byte = 0;
  139|  95.3k|      size_t margin = size;
  140|   208k|      for(; margin > 0 && leading_byte < 4; margin--) {
  ------------------
  |  Branch (140:13): [True: 112k, False: 95.3k]
  |  Branch (140:27): [True: 112k, False: 0]
  ------------------
  141|   112k|        leading_byte += (int8_t(in[margin-1]) > -65);
  142|   112k|      }
  143|       |      // If the input is long enough, then we have that margin-1 is the fourth last leading byte.
  144|  95.3k|      const size_t safety_margin = size - margin + 1; // to avoid overruns!
  145|  95.3k|      while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (145:13): [True: 0, False: 95.3k]
  ------------------
  146|      0|        simd8x64<int8_t> input(reinterpret_cast<const int8_t *>(in + pos));
  147|      0|        if(input.is_ascii()) {
  ------------------
  |  Branch (147:12): [True: 0, False: 0]
  ------------------
  148|      0|          input.store_ascii_as_utf32(utf32_output);
  149|      0|          utf32_output += 64;
  150|      0|          pos += 64;
  151|      0|        } else {
  152|       |          // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  153|      0|          static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  154|      0|              "We support either two or four chunks per 64-byte block.");
  155|      0|          auto zero = simd8<uint8_t>{uint8_t(0)};
  156|      0|          if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (156:14): [Folded - Ignored]
  ------------------
  157|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  158|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  159|      0|          } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (159:21): [Folded - Ignored]
  ------------------
  160|      0|            this->check_utf8_bytes(input.chunks[0], zero);
  161|      0|            this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|      0|            this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  163|      0|            this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  164|      0|          }
  165|      0|          uint64_t utf8_continuation_mask = input.lt(-65 + 1);
  166|      0|          uint64_t utf8_leading_mask = ~utf8_continuation_mask;
  167|      0|          uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
  168|       |          // We process in blocks of up to 12 bytes except possibly
  169|       |          // for fast paths which may process up to 16 bytes. For the
  170|       |          // slow path to work, we should have at least 12 input bytes left.
  171|      0|          size_t max_starting_point = (pos + 64) - 12;
  172|       |          // Next loop is going to run at least five times.
  173|      0|          while(pos < max_starting_point) {
  ------------------
  |  Branch (173:17): [True: 0, False: 0]
  ------------------
  174|       |            // Performance note: our ability to compute 'consumed' and
  175|       |            // then shift and recompute is critical. If there is a
  176|       |            // latency of, say, 4 cycles on getting 'consumed', then
  177|       |            // the inner loop might have a total latency of about 6 cycles.
  178|       |            // Yet we process between 6 to 12 inputs bytes, thus we get
  179|       |            // a speed limit between 1 cycle/byte and 0.5 cycle/byte
  180|       |            // for this section of the code. Hence, there is a limit
  181|       |            // to how much we can further increase this latency before
  182|       |            // it seriously harms performance.
  183|      0|            size_t consumed = convert_masked_utf8_to_utf32(in + pos,
  184|      0|                            utf8_end_of_code_point_mask, utf32_output);
  185|      0|            pos += consumed;
  186|      0|            utf8_end_of_code_point_mask >>= consumed;
  187|      0|          }
  188|       |          // At this point there may remain between 0 and 12 bytes in the
  189|       |          // 64-byte block. These bytes will be processed again. So we have an
  190|       |          // 80% efficiency (in the worst case). In practice we expect an
  191|       |          // 85% to 90% efficiency.
  192|      0|        }
  193|      0|      }
  194|  95.3k|      if(errors()) { return 0; }
  ------------------
  |  Branch (194:10): [True: 0, False: 95.3k]
  ------------------
  195|  95.3k|      if(pos < size) {
  ------------------
  |  Branch (195:10): [True: 95.3k, False: 0]
  ------------------
  196|  95.3k|        size_t howmany  = scalar::utf8_to_utf32::convert(in + pos, size - pos, utf32_output);
  197|  95.3k|        if(howmany == 0) { return 0; }
  ------------------
  |  Branch (197:12): [True: 5.52k, False: 89.7k]
  ------------------
  198|  89.7k|        utf32_output += howmany;
  199|  89.7k|      }
  200|  89.7k|      return utf32_output - start;
  201|  95.3k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3221validating_transcoder6errorsEv:
  290|  95.3k|    simdutf_really_inline bool errors() const {
  291|  95.3k|      return this->error.any_bits_set_anywhere();
  292|  95.3k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
   12|  2.12k|    char32_t* utf32_output) noexcept {
   13|  2.12k|  size_t pos = 0;
   14|  2.12k|  char32_t* start{utf32_output};
   15|  2.12k|  const size_t safety_margin = 16; // to avoid overruns!
   16|  7.97k|  while(pos + 64 + safety_margin <= size) {
  ------------------
  |  Branch (16:9): [True: 5.84k, False: 2.12k]
  ------------------
   17|  5.84k|    simd8x64<int8_t> in(reinterpret_cast<const int8_t *>(input + pos));
   18|  5.84k|    if(in.is_ascii()) {
  ------------------
  |  Branch (18:8): [True: 5.05k, False: 792]
  ------------------
   19|  5.05k|      in.store_ascii_as_utf32(utf32_output);
   20|  5.05k|      utf32_output += 64;
   21|  5.05k|      pos += 64;
   22|  5.05k|    } else {
   23|       |    // -65 is 0b10111111 in two-complement's, so largest possible continuation byte
   24|    792|    uint64_t utf8_continuation_mask = in.lt(-65 + 1);
   25|    792|    uint64_t utf8_leading_mask = ~utf8_continuation_mask;
   26|    792|    uint64_t utf8_end_of_code_point_mask = utf8_leading_mask>>1;
   27|    792|    size_t max_starting_point = (pos + 64) - 12;
   28|  4.95k|    while(pos < max_starting_point) {
  ------------------
  |  Branch (28:11): [True: 4.16k, False: 792]
  ------------------
   29|  4.16k|      size_t consumed = convert_masked_utf8_to_utf32(input + pos,
   30|  4.16k|                          utf8_end_of_code_point_mask, utf32_output);
   31|  4.16k|      pos += consumed;
   32|  4.16k|      utf8_end_of_code_point_mask >>= consumed;
   33|  4.16k|      }
   34|    792|    }
   35|  5.84k|  }
   36|  2.12k|  utf32_output += scalar::utf8_to_utf32::convert_valid(input + pos, size - pos, utf32_output);
   37|  2.12k|  return utf32_output - start;
   38|  2.12k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_next_inputERKNS1_4simd8simd8x64IhEE:
  152|  10.1k|    simdutf_really_inline void check_next_input(const simd8x64<uint8_t>& input) {
  153|  10.1k|      if(simdutf_likely(is_ascii(input))) {
  ------------------
  |  |   70|  10.1k|  #define simdutf_likely(x) __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (70:29): [True: 8.36k, False: 1.78k]
  |  |  ------------------
  ------------------
  154|  8.36k|        this->error |= this->prev_incomplete;
  155|  8.36k|      } else {
  156|       |        // you might think that a for-loop would work, but under Visual Studio, it is not good enough.
  157|  1.78k|        static_assert((simd8x64<uint8_t>::NUM_CHUNKS == 2) || (simd8x64<uint8_t>::NUM_CHUNKS == 4),
  158|  1.78k|            "We support either two or four chunks per 64-byte block.");
  159|  1.78k|        if(simd8x64<uint8_t>::NUM_CHUNKS == 2) {
  ------------------
  |  Branch (159:12): [Folded - Ignored]
  ------------------
  160|  1.78k|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  161|  1.78k|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  162|  1.78k|        } else if(simd8x64<uint8_t>::NUM_CHUNKS == 4) {
  ------------------
  |  Branch (162:19): [Folded - Ignored]
  ------------------
  163|      0|          this->check_utf8_bytes(input.chunks[0], this->prev_input_block);
  164|      0|          this->check_utf8_bytes(input.chunks[1], input.chunks[0]);
  165|      0|          this->check_utf8_bytes(input.chunks[2], input.chunks[1]);
  166|      0|          this->check_utf8_bytes(input.chunks[3], input.chunks[2]);
  167|      0|        }
  168|  1.78k|        this->prev_incomplete = is_incomplete(input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1]);
  169|  1.78k|        this->prev_input_block = input.chunks[simd8x64<uint8_t>::NUM_CHUNKS-1];
  170|       |
  171|  1.78k|      }
  172|  10.1k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker16check_utf8_bytesENS1_4simd5simd8IhEES6_:
  135|  3.56k|    simdutf_really_inline void check_utf8_bytes(const simd8<uint8_t> input, const simd8<uint8_t> prev_input) {
  136|       |      // Flip prev1...prev3 so we can easily determine if they are 2+, 3+ or 4+ lead bytes
  137|       |      // (2, 3, 4-byte leads become large positive numbers instead of small negative numbers)
  138|  3.56k|      simd8<uint8_t> prev1 = input.prev<1>(prev_input);
  139|  3.56k|      simd8<uint8_t> sc = check_special_cases(input, prev1);
  140|  3.56k|      this->error |= check_multibyte_lengths(input, prev_input, sc);
  141|  3.56k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation19check_special_casesENS1_4simd5simd8IhEES5_:
    8|  3.56k|  simdutf_really_inline simd8<uint8_t> check_special_cases(const simd8<uint8_t> input, const simd8<uint8_t> prev1) {
    9|       |// Bit 0 = Too Short (lead byte/ASCII followed by lead byte/ASCII)
   10|       |// Bit 1 = Too Long (ASCII followed by continuation)
   11|       |// Bit 2 = Overlong 3-byte
   12|       |// Bit 4 = Surrogate
   13|       |// Bit 5 = Overlong 2-byte
   14|       |// Bit 7 = Two Continuations
   15|  3.56k|    constexpr const uint8_t TOO_SHORT   = 1<<0; // 11______ 0_______
   16|       |                                                // 11______ 11______
   17|  3.56k|    constexpr const uint8_t TOO_LONG    = 1<<1; // 0_______ 10______
   18|  3.56k|    constexpr const uint8_t OVERLONG_3  = 1<<2; // 11100000 100_____
   19|  3.56k|    constexpr const uint8_t SURROGATE   = 1<<4; // 11101101 101_____
   20|  3.56k|    constexpr const uint8_t OVERLONG_2  = 1<<5; // 1100000_ 10______
   21|  3.56k|    constexpr const uint8_t TWO_CONTS   = 1<<7; // 10______ 10______
   22|  3.56k|    constexpr const uint8_t TOO_LARGE   = 1<<3; // 11110100 1001____
   23|       |                                                // 11110100 101_____
   24|       |                                                // 11110101 1001____
   25|       |                                                // 11110101 101_____
   26|       |                                                // 1111011_ 1001____
   27|       |                                                // 1111011_ 101_____
   28|       |                                                // 11111___ 1001____
   29|       |                                                // 11111___ 101_____
   30|  3.56k|    constexpr const uint8_t TOO_LARGE_1000 = 1<<6;
   31|       |                                                // 11110101 1000____
   32|       |                                                // 1111011_ 1000____
   33|       |                                                // 11111___ 1000____
   34|  3.56k|    constexpr const uint8_t OVERLONG_4  = 1<<6; // 11110000 1000____
   35|       |
   36|  3.56k|    const simd8<uint8_t> byte_1_high = prev1.shr<4>().lookup_16<uint8_t>(
   37|       |      // 0_______ ________ <ASCII in byte 1>
   38|  3.56k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   39|  3.56k|      TOO_LONG, TOO_LONG, TOO_LONG, TOO_LONG,
   40|       |      // 10______ ________ <continuation in byte 1>
   41|  3.56k|      TWO_CONTS, TWO_CONTS, TWO_CONTS, TWO_CONTS,
   42|       |      // 1100____ ________ <two byte lead in byte 1>
   43|  3.56k|      TOO_SHORT | OVERLONG_2,
   44|       |      // 1101____ ________ <two byte lead in byte 1>
   45|  3.56k|      TOO_SHORT,
   46|       |      // 1110____ ________ <three byte lead in byte 1>
   47|  3.56k|      TOO_SHORT | OVERLONG_3 | SURROGATE,
   48|       |      // 1111____ ________ <four+ byte lead in byte 1>
   49|  3.56k|      TOO_SHORT | TOO_LARGE | TOO_LARGE_1000 | OVERLONG_4
   50|  3.56k|    );
   51|  3.56k|    constexpr const uint8_t CARRY = TOO_SHORT | TOO_LONG | TWO_CONTS; // These all have ____ in byte 1 .
   52|  3.56k|    const simd8<uint8_t> byte_1_low = (prev1 & 0x0F).lookup_16<uint8_t>(
   53|       |      // ____0000 ________
   54|  3.56k|      CARRY | OVERLONG_3 | OVERLONG_2 | OVERLONG_4,
   55|       |      // ____0001 ________
   56|  3.56k|      CARRY | OVERLONG_2,
   57|       |      // ____001_ ________
   58|  3.56k|      CARRY,
   59|  3.56k|      CARRY,
   60|       |
   61|       |      // ____0100 ________
   62|  3.56k|      CARRY | TOO_LARGE,
   63|       |      // ____0101 ________
   64|  3.56k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   65|       |      // ____011_ ________
   66|  3.56k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   67|  3.56k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   68|       |
   69|       |      // ____1___ ________
   70|  3.56k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   71|  3.56k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   72|  3.56k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   73|  3.56k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   74|  3.56k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   75|       |      // ____1101 ________
   76|  3.56k|      CARRY | TOO_LARGE | TOO_LARGE_1000 | SURROGATE,
   77|  3.56k|      CARRY | TOO_LARGE | TOO_LARGE_1000,
   78|  3.56k|      CARRY | TOO_LARGE | TOO_LARGE_1000
   79|  3.56k|    );
   80|  3.56k|    const simd8<uint8_t> byte_2_high = input.shr<4>().lookup_16<uint8_t>(
   81|       |      // ________ 0_______ <ASCII in byte 2>
   82|  3.56k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   83|  3.56k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT,
   84|       |
   85|       |      // ________ 1000____
   86|  3.56k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE_1000 | OVERLONG_4,
   87|       |      // ________ 1001____
   88|  3.56k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | OVERLONG_3 | TOO_LARGE,
   89|       |      // ________ 101_____
   90|  3.56k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   91|  3.56k|      TOO_LONG | OVERLONG_2 | TWO_CONTS | SURROGATE  | TOO_LARGE,
   92|       |
   93|       |      // ________ 11______
   94|  3.56k|      TOO_SHORT, TOO_SHORT, TOO_SHORT, TOO_SHORT
   95|  3.56k|    );
   96|  3.56k|    return (byte_1_high & byte_1_low & byte_2_high);
   97|  3.56k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation23check_multibyte_lengthsENS1_4simd5simd8IhEES5_S5_:
   99|  3.56k|      const simd8<uint8_t> prev_input, const simd8<uint8_t> sc) {
  100|  3.56k|    simd8<uint8_t> prev2 = input.prev<2>(prev_input);
  101|  3.56k|    simd8<uint8_t> prev3 = input.prev<3>(prev_input);
  102|  3.56k|    simd8<uint8_t> must23 = simd8<uint8_t>(must_be_2_3_continuation(prev2, prev3));
  103|  3.56k|    simd8<uint8_t> must23_80 = must23 & uint8_t(0x80);
  104|  3.56k|    return must23_80 ^ sc;
  105|  3.56k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation13is_incompleteENS1_4simd5simd8IhEE:
  111|  1.78k|  simdutf_really_inline simd8<uint8_t> is_incomplete(const simd8<uint8_t> input) {
  112|       |    // If the previous input's last 3 bytes match this, they're too short (they ended at EOF):
  113|       |    // ... 1111____ 111_____ 11______
  114|  1.78k|    static const uint8_t max_array[32] = {
  115|  1.78k|      255, 255, 255, 255, 255, 255, 255, 255,
  116|  1.78k|      255, 255, 255, 255, 255, 255, 255, 255,
  117|  1.78k|      255, 255, 255, 255, 255, 255, 255, 255,
  118|  1.78k|      255, 255, 255, 255, 255, 0b11110000u-1, 0b11100000u-1, 0b11000000u-1
  119|  1.78k|    };
  120|  1.78k|    const simd8<uint8_t> max_value(&max_array[sizeof(max_array)-sizeof(simd8<uint8_t>)]);
  121|  1.78k|    return input.gt_bits(max_value);
  122|  1.78k|  }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker9check_eofEv:
  146|  2.72k|    simdutf_really_inline void check_eof() {
  147|       |      // If the previous block had incomplete UTF-8 characters at the end, an ASCII block can't
  148|       |      // possibly finish them.
  149|  2.72k|      this->error |= this->prev_incomplete;
  150|  2.72k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_115utf8_validation12utf8_checker6errorsEv:
  175|  2.72k|    simdutf_really_inline bool errors() const {
  176|  2.72k|      return this->error.any_bits_set_anywhere();
  177|  2.72k|    }

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8EPKcm:
   27|  2.72k|bool generic_validate_utf8(const char * input, size_t length) {
   28|  2.72k|  return generic_validate_utf8<utf8_checker>(reinterpret_cast<const uint8_t *>(input),length);
   29|  2.72k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_115utf8_validation21generic_validate_utf8INS2_12utf8_checkerEEEbPKhm:
   10|  2.72k|bool generic_validate_utf8(const uint8_t * input, size_t length) {
   11|  2.72k|    checker c{};
   12|  2.72k|    buf_block_reader<64> reader(input, length);
   13|  10.1k|    while (reader.has_full_block()) {
  ------------------
  |  Branch (13:12): [True: 7.42k, False: 2.72k]
  ------------------
   14|  7.42k|      simd::simd8x64<uint8_t> in(reader.full_block());
   15|  7.42k|      c.check_next_input(in);
   16|  7.42k|      reader.advance();
   17|  7.42k|    }
   18|  2.72k|    uint8_t block[64]{};
   19|  2.72k|    reader.get_remainder(block);
   20|  2.72k|    simd::simd8x64<uint8_t> in(block);
   21|  2.72k|    c.check_next_input(in);
   22|  2.72k|    reader.advance();
   23|  2.72k|    c.check_eof();
   24|  2.72k|    return !c.errors();
   25|  2.72k|}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_128convert_masked_utf8_to_utf32EPKcmRPDi:
   10|  4.16k|                           char32_t *&utf32_output) {
   11|       |  // we use an approach where we try to process up to 12 input bytes.
   12|       |  // Why 12 input bytes and not 16? Because we are concerned with the size of
   13|       |  // the lookup tables. Also 12 is nicely divisible by two and three.
   14|       |  //
   15|       |  //
   16|       |  // Optimization note: our main path below is load-latency dependent. Thus it is maybe
   17|       |  // beneficial to have fast paths that depend on branch prediction but have less latency.
   18|       |  // This results in more instructions but, potentially, also higher speeds.
   19|       |  //
   20|       |  // We first try a few fast paths.
   21|  4.16k|  const __m128i in = _mm_loadu_si128((__m128i *)input);
   22|  4.16k|  const uint16_t input_utf8_end_of_code_point_mask =
   23|  4.16k|      utf8_end_of_code_point_mask & 0xfff;
   24|  4.16k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xffff)) {
  ------------------
  |  Branch (24:6): [True: 1.86k, False: 2.29k]
  ------------------
   25|       |    // We process the data in chunks of 16 bytes.
   26|  1.86k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output), _mm256_cvtepu8_epi32(in));
   27|  1.86k|    _mm256_storeu_si256(reinterpret_cast<__m256i *>(utf32_output+8), _mm256_cvtepu8_epi32(_mm_srli_si128(in,8)));
   28|  1.86k|    utf32_output += 16; // We wrote 16 32-bit characters.
   29|  1.86k|    return 16; // We consumed 16 bytes.
   30|  1.86k|  }
   31|  2.29k|  if(((utf8_end_of_code_point_mask & 0xffff) == 0xaaaa)) {
  ------------------
  |  Branch (31:6): [True: 1, False: 2.29k]
  ------------------
   32|       |    // We want to take 8 2-byte UTF-8 code units and turn them into 8 4-byte UTF-32 code units.
   33|       |    // There is probably a more efficient sequence, but the following might do.
   34|      1|    const __m128i sh = _mm_setr_epi8(1, 0, 3, 2, 5, 4, 7, 6, 9, 8, 11, 10, 13, 12, 15, 14);
   35|      1|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   36|      1|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   37|      1|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   38|      1|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   39|      1|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   40|      1|    utf32_output += 8; // We wrote 16 bytes, 8 code points.
   41|      1|    return 16;
   42|      1|  }
   43|  2.29k|  if(input_utf8_end_of_code_point_mask == 0x924) {
  ------------------
  |  Branch (43:6): [True: 0, False: 2.29k]
  ------------------
   44|       |    // We want to take 4 3-byte UTF-8 code units and turn them into 4 4-byte UTF-32 code units.
   45|       |    // There is probably a more efficient sequence, but the following might do.
   46|      0|    const __m128i sh = _mm_setr_epi8(2, 1, 0, -1, 5, 4, 3, -1, 8, 7, 6, -1, 11, 10, 9, -1);
   47|      0|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   48|      0|    const __m128i ascii =
   49|      0|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   50|      0|    const __m128i middlebyte =
   51|      0|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   52|      0|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   53|      0|    const __m128i highbyte =
   54|      0|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   55|      0|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   56|      0|    const __m128i composed =
   57|      0|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   58|      0|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   59|      0|    utf32_output += 4;
   60|      0|    return 12;
   61|      0|  }
   62|       |  /// We do not have a fast path available, so we fallback.
   63|       |
   64|  2.29k|  const uint8_t idx =
   65|  2.29k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][0];
   66|  2.29k|  const uint8_t consumed =
   67|  2.29k|      tables::utf8_to_utf16::utf8bigindex[input_utf8_end_of_code_point_mask][1];
   68|  2.29k|  if (idx < 64) {
  ------------------
  |  Branch (68:7): [True: 2.00k, False: 284]
  ------------------
   69|       |    // SIX (6) input code-code units
   70|       |    // this is a relatively easy scenario
   71|       |    // we process SIX (6) input code-code units. The max length in bytes of six code
   72|       |    // code units spanning between 1 and 2 bytes each is 12 bytes. On processors
   73|       |    // where pdep/pext is fast, we might be able to use a small lookup table.
   74|  2.00k|    const __m128i sh =
   75|  2.00k|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   76|  2.00k|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   77|  2.00k|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi16(0x7f));
   78|  2.00k|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi16(0x1f00));
   79|  2.00k|    const __m128i composed = _mm_or_si128(ascii, _mm_srli_epi16(highbyte, 2));
   80|  2.00k|    _mm256_storeu_si256((__m256i *)utf32_output, _mm256_cvtepu16_epi32(composed));
   81|  2.00k|    utf32_output += 6; // We wrote 24 bytes, 6 code points. There is a potential
   82|       |    // overflow of 32 - 24 = 8 bytes.
   83|  2.00k|  } else if (idx < 145) {
  ------------------
  |  Branch (83:14): [True: 94, False: 190]
  ------------------
   84|       |    // FOUR (4) input code-code units
   85|     94|    const __m128i sh =
   86|     94|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
   87|     94|    const __m128i perm = _mm_shuffle_epi8(in, sh);
   88|     94|    const __m128i ascii =
   89|     94|        _mm_and_si128(perm, _mm_set1_epi32(0x7f)); // 7 or 6 bits
   90|     94|    const __m128i middlebyte =
   91|     94|        _mm_and_si128(perm, _mm_set1_epi32(0x3f00)); // 5 or 6 bits
   92|     94|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
   93|     94|    const __m128i highbyte =
   94|     94|        _mm_and_si128(perm, _mm_set1_epi32(0x0f0000)); // 4 bits
   95|     94|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 4);
   96|     94|    const __m128i composed =
   97|     94|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted), highbyte_shifted);
   98|     94|    _mm_storeu_si128((__m128i *)utf32_output, composed);
   99|     94|    utf32_output += 4;
  100|    190|  } else if (idx < 209) {
  ------------------
  |  Branch (100:14): [True: 190, False: 0]
  ------------------
  101|       |    // TWO (2) input code-code units
  102|    190|    const __m128i sh =
  103|    190|        _mm_loadu_si128((const __m128i *)tables::utf8_to_utf16::shufutf8[idx]);
  104|    190|    const __m128i perm = _mm_shuffle_epi8(in, sh);
  105|    190|    const __m128i ascii = _mm_and_si128(perm, _mm_set1_epi32(0x7f));
  106|    190|    const __m128i middlebyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f00));
  107|    190|    const __m128i middlebyte_shifted = _mm_srli_epi32(middlebyte, 2);
  108|    190|    __m128i middlehighbyte = _mm_and_si128(perm, _mm_set1_epi32(0x3f0000));
  109|       |    // correct for spurious high bit
  110|    190|    const __m128i correct =
  111|    190|        _mm_srli_epi32(_mm_and_si128(perm, _mm_set1_epi32(0x400000)), 1);
  112|    190|    middlehighbyte = _mm_xor_si128(correct, middlehighbyte);
  113|    190|    const __m128i middlehighbyte_shifted = _mm_srli_epi32(middlehighbyte, 4);
  114|    190|    const __m128i highbyte = _mm_and_si128(perm, _mm_set1_epi32(0x07000000));
  115|    190|    const __m128i highbyte_shifted = _mm_srli_epi32(highbyte, 6);
  116|    190|    const __m128i composed =
  117|    190|        _mm_or_si128(_mm_or_si128(ascii, middlebyte_shifted),
  118|    190|                     _mm_or_si128(highbyte_shifted, middlehighbyte_shifted));
  119|    190|    _mm_storeu_si128((__m128i *)utf32_output, composed);
  120|    190|    utf32_output += 3; // We wrote 3 * 4 bytes, there is a potential overflow of 4 bytes.
  121|    190|  } else {
  122|       |    // here we know that there is an error but we do not handle errors
  123|      0|  }
  124|  2.29k|  return consumed;
  125|  2.29k|}

_ZNK7simdutf7haswell14implementation13validate_utf8EPKcm:
  104|  2.72k|simdutf_warn_unused bool implementation::validate_utf8(const char *buf, size_t len) const noexcept {
  105|  2.72k|  return haswell::utf8_validation::generic_validate_utf8(buf,len);
  106|  2.72k|}
_ZNK7simdutf7haswell14implementation21convert_utf8_to_utf32EPKcmPDi:
  274|  95.3k|simdutf_warn_unused size_t implementation::convert_utf8_to_utf32(const char* buf, size_t len, char32_t* utf32_output) const noexcept {
  275|  95.3k|  utf8_to_utf32::validating_transcoder converter;
  276|  95.3k|  return converter.convert(buf, len, utf32_output);
  277|  95.3k|}
_ZNK7simdutf7haswell14implementation27convert_valid_utf8_to_utf32EPKcmPDi:
  285|  2.12k|    char32_t* utf32_output) const noexcept {
  286|  2.12k|  return utf8_to_utf32::convert_valid(input, size,  utf32_output);
  287|  2.12k|}
_ZNK7simdutf7haswell14implementation22utf32_length_from_utf8EPKcm:
  776|  2.12k|simdutf_warn_unused size_t implementation::utf32_length_from_utf8(const char * input, size_t length) const noexcept {
  777|  2.12k|  return utf8::count_code_points(input, length);
  778|  2.12k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_18is_asciiERKNS1_4simd8simd8x64IhEE:
   23|  10.1k|simdutf_really_inline bool is_ascii(const simd8x64<uint8_t>& input) {
   24|  10.1k|  return input.reduce_or().is_ascii();
   25|  10.1k|}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_124must_be_2_3_continuationENS1_4simd5simd8IhEES4_:
   35|  3.56k|simdutf_really_inline simd8<bool> must_be_2_3_continuation(const simd8<uint8_t> prev2, const simd8<uint8_t> prev3) {
   36|  3.56k|  simd8<uint8_t> is_third_byte  = prev2.saturating_sub(0b11100000u-1); // Only 111_____ will be > 0
   37|  3.56k|  simd8<uint8_t> is_fourth_byte = prev3.saturating_sub(0b11110000u-1); // Only 1111____ will be > 0
   38|       |  // Caller requires a bool (all 1's). All values resulting from the subtraction will be <= 64, so signed comparison is fine.
   39|  3.56k|  return simd8<int8_t>(is_third_byte | is_fourth_byte) > int8_t(0);
   40|  3.56k|}

_ZNK7simdutf8internal29available_implementation_list21detect_best_supportedEv:
  768|      1|const implementation *available_implementation_list::detect_best_supported() const noexcept {
  769|       |  // They are prelisted in priority order, so we just go down the list
  770|      1|  uint32_t supported_instruction_sets = internal::detect_supported_architectures();
  771|      2|  for (const implementation *impl : internal::get_available_implementation_pointers()) {
  ------------------
  |  Branch (771:35): [True: 2, False: 0]
  ------------------
  772|      2|    uint32_t required_instruction_sets = impl->required_instruction_sets();
  773|      2|    if ((supported_instruction_sets & required_instruction_sets) == required_instruction_sets) { return impl; }
  ------------------
  |  Branch (773:9): [True: 1, False: 1]
  ------------------
  774|      2|  }
  775|      0|  return &unsupported_singleton; // this should never happen?
  776|      1|}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use8set_bestEv:
  778|      1|const implementation *detect_best_supported_implementation_on_first_use::set_best() const noexcept {
  779|      1|  SIMDUTF_PUSH_DISABLE_WARNINGS
  780|       |  SIMDUTF_DISABLE_DEPRECATED_WARNING // Disable CRT_SECURE warning on MSVC: manually verified this is safe
  781|      1|  char *force_implementation_name = getenv("SIMDUTF_FORCE_IMPLEMENTATION");
  782|      1|  SIMDUTF_POP_DISABLE_WARNINGS
  783|       |
  784|      1|  if (force_implementation_name) {
  ------------------
  |  Branch (784:7): [True: 0, False: 1]
  ------------------
  785|      0|    auto force_implementation = get_available_implementations()[force_implementation_name];
  786|      0|    if (force_implementation) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      return get_active_implementation() = force_implementation;
  788|      0|    } else {
  789|       |      // Note: abort() and stderr usage within the library is forbidden.
  790|      0|      return get_active_implementation() = &unsupported_singleton;
  791|      0|    }
  792|      0|  }
  793|      1|  return get_active_implementation() = get_available_implementations().detect_best_supported();
  794|      1|}
_ZN7simdutf29get_available_implementationsEv:
  803|      1|SIMDUTF_DLLIMPORTEXPORT const internal::available_implementation_list& get_available_implementations() {
  804|      1|  static const internal::available_implementation_list available_implementations{};
  805|      1|  return available_implementations;
  806|      1|}
_ZN7simdutf25get_active_implementationEv:
  811|   102k|SIMDUTF_DLLIMPORTEXPORT internal::atomic_ptr<const implementation>& get_active_implementation() {
  812|   102k|    static const internal::detect_best_supported_implementation_on_first_use detect_best_supported_implementation_on_first_use_singleton;
  813|   102k|    static internal::atomic_ptr<const implementation> active_implementation{&detect_best_supported_implementation_on_first_use_singleton};
  814|   102k|    return active_implementation;
  815|   102k|}
_ZN7simdutf13validate_utf8EPKcm:
  817|  2.72k|simdutf_warn_unused bool validate_utf8(const char *buf, size_t len) noexcept {
  818|  2.72k|  return get_active_implementation()->validate_utf8(buf, len);
  819|  2.72k|}
_ZN7simdutf21convert_utf8_to_utf32EPKcmPDi:
  876|  95.3k|simdutf_warn_unused size_t convert_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_output) noexcept {
  877|  95.3k|  return get_active_implementation()->convert_utf8_to_utf32(input, length, utf32_output);
  878|  95.3k|}
_ZN7simdutf27convert_valid_utf8_to_utf32EPKcmPDi:
  927|  2.12k|simdutf_warn_unused size_t convert_valid_utf8_to_utf32(const char * input, size_t length, char32_t* utf32_buffer) noexcept {
  928|  2.12k|  return get_active_implementation()->convert_valid_utf8_to_utf32(input, length, utf32_buffer);
  929|  2.12k|}
_ZN7simdutf22utf32_length_from_utf8EPKcm:
 1174|  2.12k|simdutf_warn_unused size_t utf32_length_from_utf8(const char * input, size_t length) noexcept {
 1175|  2.12k|  return get_active_implementation()->utf32_length_from_utf8(input, length);
 1176|  2.12k|}
_ZN7simdutf8internal26unsupported_implementationC2Ev:
  754|      2|  unsupported_implementation() : implementation("unsupported", "Unsupported CPU (no detected SIMD instructions)", 0) {}
simdutf.cpp:_ZN7simdutf8internalL37get_available_implementation_pointersEv:
  423|      1|static const std::initializer_list<const implementation *>& get_available_implementation_pointers() {
  424|      1|  static const std::initializer_list<const implementation *> available_implementation_pointers {
  425|      1|#if SIMDUTF_IMPLEMENTATION_ICELAKE
  426|      1|    get_icelake_singleton(),
  427|      1|#endif
  428|      1|#if SIMDUTF_IMPLEMENTATION_HASWELL
  429|      1|    get_haswell_singleton(),
  430|      1|#endif
  431|      1|#if SIMDUTF_IMPLEMENTATION_WESTMERE
  432|      1|    get_westmere_singleton(),
  433|      1|#endif
  434|       |#if SIMDUTF_IMPLEMENTATION_ARM64
  435|       |    get_arm64_singleton(),
  436|       |#endif
  437|       |#if SIMDUTF_IMPLEMENTATION_PPC64
  438|       |    get_ppc64_singleton(),
  439|       |#endif
  440|      1|#if SIMDUTF_IMPLEMENTATION_FALLBACK
  441|      1|    get_fallback_singleton(),
  442|      1|#endif
  443|      1|  }; // available_implementation_pointers
  444|      1|  return available_implementation_pointers;
  445|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_icelake_singletonEv:
   72|      1|static const icelake::implementation* get_icelake_singleton() {
   73|      1|  static const icelake::implementation icelake_singleton{};
   74|      1|  return &icelake_singleton;
   75|      1|}
simdutf.cpp:_ZN7simdutf8internalL21get_haswell_singletonEv:
   78|      1|static const haswell::implementation* get_haswell_singleton() {
   79|      1|  static const haswell::implementation haswell_singleton{};
   80|      1|  return &haswell_singleton;
   81|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_westmere_singletonEv:
   84|      1|static const westmere::implementation* get_westmere_singleton() {
   85|      1|  static const westmere::implementation westmere_singleton{};
   86|      1|  return &westmere_singleton;
   87|      1|}
simdutf.cpp:_ZN7simdutf8internalL22get_fallback_singletonEv:
  102|      1|static const fallback::implementation* get_fallback_singleton() {
  103|      1|  static const fallback::implementation fallback_singleton{};
  104|      1|  return &fallback_singleton;
  105|      1|}
_ZN7simdutf8internal49detect_best_supported_implementation_on_first_useC2Ev:
  417|      1|  simdutf_really_inline detect_best_supported_implementation_on_first_use() noexcept : implementation("best_supported_detector", "Detects the best supported implementation and sets it", 0) {}
_ZNK7simdutf8internal49detect_best_supported_implementation_on_first_use13validate_utf8EPKcm:
  121|      1|  simdutf_warn_unused bool validate_utf8(const char * buf, size_t len) const noexcept final override {
  122|      1|    return set_best()->validate_utf8(buf, len);
  123|      1|  }

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_14utf817count_code_pointsEPKcm:
  168|  2.12k|inline size_t count_code_points(const char* buf, size_t len) {
  169|  2.12k|    const int8_t * p = reinterpret_cast<const int8_t *>(buf);
  170|  2.12k|    size_t counter{0};
  171|  55.7k|    for(size_t i = 0; i < len; i++) {
  ------------------
  |  Branch (171:23): [True: 53.6k, False: 2.12k]
  ------------------
  172|       |        // -65 is 0b10111111, anything larger in two-complement's should start a new code point.
  173|  53.6k|        if(p[i] > -65) { counter++; }
  ------------------
  |  Branch (173:12): [True: 53.0k, False: 532]
  ------------------
  174|  53.6k|    }
  175|  2.12k|    return counter;
  176|  2.12k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf327convertEPKcmPDi:
    9|  95.3k|inline size_t convert(const char* buf, size_t len, char32_t* utf32_output) {
   10|  95.3k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  95.3k|  size_t pos = 0;
   12|  95.3k|  char32_t* start{utf32_output};
   13|   185k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 95.3k, False: 89.7k]
  ------------------
   14|       |    // try to convert the next block of 16 ASCII bytes
   15|  95.3k|    if (pos + 16 <= len) { // if it is safe to read 16 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 0, False: 95.3k]
  ------------------
   16|      0|      uint64_t v1;
   17|      0|      ::memcpy(&v1, data + pos, sizeof(uint64_t));
   18|      0|      uint64_t v2;
   19|      0|      ::memcpy(&v2, data + pos + sizeof(uint64_t), sizeof(uint64_t));
   20|      0|      uint64_t v{v1 | v2};
   21|      0|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (21:11): [True: 0, False: 0]
  ------------------
   22|      0|        size_t final_pos = pos + 16;
   23|      0|        while(pos < final_pos) {
  ------------------
  |  Branch (23:15): [True: 0, False: 0]
  ------------------
   24|      0|          *utf32_output++ = char32_t(buf[pos]);
   25|      0|          pos++;
   26|      0|        }
   27|      0|        continue;
   28|      0|      }
   29|      0|    }
   30|  95.3k|    uint8_t leading_byte = data[pos]; // leading byte
   31|  95.3k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (31:9): [True: 85.7k, False: 9.59k]
  ------------------
   32|       |      // converting one ASCII byte !!!
   33|  85.7k|      *utf32_output++ = char32_t(leading_byte);
   34|  85.7k|      pos++;
   35|  85.7k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (35:16): [True: 4.35k, False: 5.24k]
  ------------------
   36|       |      // We have a two-byte UTF-8
   37|  4.35k|      if(pos + 1 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (37:10): [True: 0, False: 4.35k]
  ------------------
   38|  4.35k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (38:11): [True: 2.74k, False: 1.60k]
  ------------------
   39|       |      // range check
   40|  1.60k|      uint32_t code_point = (leading_byte & 0b00011111) << 6 | (data[pos + 1] & 0b00111111);
   41|  1.60k|      if (code_point < 0x80 || 0x7ff < code_point) { return 0; }
  ------------------
  |  Branch (41:11): [True: 184, False: 1.42k]
  |  Branch (41:32): [True: 0, False: 1.42k]
  ------------------
   42|  1.42k|      *utf32_output++ = char32_t(code_point);
   43|  1.42k|      pos += 2;
   44|  5.24k|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (44:16): [True: 2.42k, False: 2.81k]
  ------------------
   45|       |      // We have a three-byte UTF-8
   46|  2.42k|      if(pos + 2 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (46:10): [True: 0, False: 2.42k]
  ------------------
   47|       |
   48|  2.42k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (48:11): [True: 255, False: 2.17k]
  ------------------
   49|  2.17k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (49:11): [True: 287, False: 1.88k]
  ------------------
   50|       |      // range check
   51|  1.88k|      uint32_t code_point = (leading_byte & 0b00001111) << 12 |
   52|  1.88k|                   (data[pos + 1] & 0b00111111) << 6 |
   53|  1.88k|                   (data[pos + 2] & 0b00111111);
   54|  1.88k|      if (code_point < 0x800 || 0xffff < code_point ||
  ------------------
  |  Branch (54:11): [True: 315, False: 1.56k]
  |  Branch (54:33): [True: 0, False: 1.56k]
  ------------------
   55|  1.88k|          (0xd7ff < code_point && code_point < 0xe000)) {
  ------------------
  |  Branch (55:12): [True: 359, False: 1.21k]
  |  Branch (55:35): [True: 134, False: 225]
  ------------------
   56|    449|        return 0;
   57|    449|      }
   58|  1.43k|      *utf32_output++ = char32_t(code_point);
   59|  1.43k|      pos += 3;
   60|  2.81k|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (60:16): [True: 2.81k, False: 0]
  ------------------
   61|       |      // we have a 4-byte UTF-8 word.
   62|  2.81k|      if(pos + 3 >= len) { return 0; } // minimal bound checking
  ------------------
  |  Branch (62:10): [True: 0, False: 2.81k]
  ------------------
   63|  2.81k|      if ((data[pos + 1] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (63:11): [True: 610, False: 2.20k]
  ------------------
   64|  2.20k|      if ((data[pos + 2] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (64:11): [True: 216, False: 1.99k]
  ------------------
   65|  1.99k|      if ((data[pos + 3] & 0b11000000) != 0b10000000) { return 0; }
  ------------------
  |  Branch (65:11): [True: 141, False: 1.85k]
  ------------------
   66|       |
   67|       |      // range check
   68|  1.85k|      uint32_t code_point =
   69|  1.85k|          (leading_byte & 0b00000111) << 18 | (data[pos + 1] & 0b00111111) << 12 |
   70|  1.85k|          (data[pos + 2] & 0b00111111) << 6 | (data[pos + 3] & 0b00111111);
   71|  1.85k|      if (code_point <= 0xffff || 0x10ffff < code_point) { return 0; }
  ------------------
  |  Branch (71:11): [True: 477, False: 1.37k]
  |  Branch (71:35): [True: 165, False: 1.20k]
  ------------------
   72|  1.20k|      *utf32_output++ = char32_t(code_point);
   73|  1.20k|      pos += 4;
   74|  1.20k|    } else {
   75|      0|      return 0;
   76|      0|    }
   77|  95.3k|  }
   78|  89.7k|  return utf32_output - start;
   79|  95.3k|}

simdutf.cpp:_ZN7simdutf6scalar12_GLOBAL__N_113utf8_to_utf3213convert_validEPKcmPDi:
    9|  2.12k|inline size_t convert_valid(const char* buf, size_t len, char32_t* utf32_output) {
   10|  2.12k| const uint8_t *data = reinterpret_cast<const uint8_t *>(buf);
   11|  2.12k|  size_t pos = 0;
   12|  2.12k|  char32_t* start{utf32_output};
   13|  18.3k|  while (pos < len) {
  ------------------
  |  Branch (13:10): [True: 16.2k, False: 2.12k]
  ------------------
   14|       |    // try to convert the next block of 8 ASCII bytes
   15|  16.2k|    if (pos + 8 <= len) { // if it is safe to read 8 more bytes, check that they are ascii
  ------------------
  |  Branch (15:9): [True: 8.96k, False: 7.29k]
  ------------------
   16|  8.96k|      uint64_t v;
   17|  8.96k|      ::memcpy(&v, data + pos, sizeof(uint64_t));
   18|  8.96k|      if ((v & 0x8080808080808080) == 0) {
  ------------------
  |  Branch (18:11): [True: 8.10k, False: 859]
  ------------------
   19|  8.10k|        size_t final_pos = pos + 8;
   20|  72.9k|        while(pos < final_pos) {
  ------------------
  |  Branch (20:15): [True: 64.8k, False: 8.10k]
  ------------------
   21|  64.8k|          *utf32_output++ = char32_t(buf[pos]);
   22|  64.8k|          pos++;
   23|  64.8k|        }
   24|  8.10k|        continue;
   25|  8.10k|      }
   26|  8.96k|    }
   27|  8.15k|    uint8_t leading_byte = data[pos]; // leading byte
   28|  8.15k|    if (leading_byte < 0b10000000) {
  ------------------
  |  Branch (28:9): [True: 7.81k, False: 336]
  ------------------
   29|       |      // converting one ASCII byte !!!
   30|  7.81k|      *utf32_output++ = char32_t(leading_byte);
   31|  7.81k|      pos++;
   32|  7.81k|    } else if ((leading_byte & 0b11100000) == 0b11000000) {
  ------------------
  |  Branch (32:16): [True: 128, False: 208]
  ------------------
   33|       |      // We have a two-byte UTF-8
   34|    128|      if(pos + 1 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (34:10): [True: 0, False: 128]
  ------------------
   35|    128|      *utf32_output++ = char32_t(((leading_byte &0b00011111) << 6) | (data[pos + 1] &0b00111111));
   36|    128|      pos += 2;
   37|    208|    } else if ((leading_byte & 0b11110000) == 0b11100000) {
  ------------------
  |  Branch (37:16): [True: 139, False: 69]
  ------------------
   38|       |      // We have a three-byte UTF-8
   39|    139|      if(pos + 2 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (39:10): [True: 0, False: 139]
  ------------------
   40|    139|      *utf32_output++ = char32_t(((leading_byte &0b00001111) << 12) | ((data[pos + 1] &0b00111111) << 6) | (data[pos + 2] &0b00111111));
   41|    139|      pos += 3;
   42|    139|    } else if ((leading_byte & 0b11111000) == 0b11110000) { // 0b11110000
  ------------------
  |  Branch (42:16): [True: 69, False: 0]
  ------------------
   43|       |      // we have a 4-byte UTF-8 word.
   44|     69|      if(pos + 3 >= len) { break; } // minimal bound checking
  ------------------
  |  Branch (44:10): [True: 0, False: 69]
  ------------------
   45|     69|      uint32_t code_word = ((leading_byte & 0b00000111) << 18 )| ((data[pos + 1] &0b00111111) << 12)
   46|     69|                           | ((data[pos + 2] &0b00111111) << 6) | (data[pos + 3] &0b00111111);
   47|     69|      *utf32_output++ = char32_t(code_word);
   48|     69|      pos += 4;
   49|     69|    } else {
   50|       |      // we may have a continuation but we do not do error checking
   51|      0|      return 0;
   52|      0|    }
   53|  8.15k|  }
   54|  2.12k|  return utf32_output - start;
   55|  2.12k|}

_ZN7simdutf8fallback14implementationC2Ev:
   19|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_110count_onesEm:
   14|  6.05k|simdutf_really_inline long long int count_ones(uint64_t input_num) {
   15|  6.05k|  return _popcnt64(input_num);
   16|  6.05k|}

_ZN7simdutf7haswell14implementationC2Ev:
   18|      1|  ) {}

simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ev:
  195|  8.16k|    simdutf_really_inline simd8() : base8_numeric<uint8_t>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2Ev:
  112|  8.16k|    simdutf_really_inline base8_numeric() : base8<T>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2Ev:
   61|  8.16k|    simdutf_really_inline base8() : base<simd8<T>>() {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2Ev:
   16|  8.16k|    simdutf_really_inline base() : value{__m256i()} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhEC2EPKh:
  276|  10.1k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE4loadEPKh:
   96|  22.0k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  22.0k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  22.0k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EDv4_x:
  196|   243k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<uint8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhEC2EDv4_x:
  113|   243k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEEC2EDv4_x:
   62|   243k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEC2EDv4_x:
   19|   243k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IhE9reduce_orEv:
  295|  10.1k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  10.1k|      return this->chunks[0] | this->chunks[1];
  297|  10.1k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEorES5_:
   43|  28.3k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRKDv4_xEv:
   21|   380k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE8is_asciiEv:
  248|  10.1k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEoRES5_:
   47|  14.6k|    simdutf_really_inline Child& operator|=(const Child other) { auto this_cast = static_cast<Child*>(this); *this_cast = *this_cast | other; return *this_cast; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi1EEENS4_IhEES8_:
   70|  3.56k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.56k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.56k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE3shrILi4EEES4_v:
  254|  7.13k|    simdutf_really_inline simd8<uint8_t> shr() const { return simd8<uint8_t>(_mm256_srli_epi16(*this, N)) & uint8_t(0xFFu >> N); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_S7_:
  138|  10.6k|        L replace12, L replace13, L replace14, L replace15) const {
  139|  10.6k|      return lookup_16(simd8<L>::repeat_16(
  140|  10.6k|        replace0,  replace1,  replace2,  replace3,
  141|  10.6k|        replace4,  replace5,  replace6,  replace7,
  142|  10.6k|        replace8,  replace9,  replace10, replace11,
  143|  10.6k|        replace12, replace13, replace14, replace15
  144|  10.6k|      ));
  145|  10.6k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE9lookup_16IhEENS2_5simd8IT_EES8_:
  129|  10.6k|    simdutf_really_inline simd8<L> lookup_16(simd8<L> lookup_table) const {
  130|  10.6k|      return _mm256_shuffle_epi8(lookup_table, *this);
  131|  10.6k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEcvRDv4_xEv:
   22|  14.2k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE9repeat_16Ehhhhhhhhhhhhhhhh:
  217|  10.6k|    ) {
  218|  10.6k|      return simd8<uint8_t>(
  219|  10.6k|        v0, v1, v2, v3, v4, v5, v6, v7,
  220|  10.6k|        v8, v9, v10,v11,v12,v13,v14,v15,
  221|  10.6k|        v0, v1, v2, v3, v4, v5, v6, v7,
  222|  10.6k|        v8, v9, v10,v11,v12,v13,v14,v15
  223|  10.6k|      );
  224|  10.6k|    }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Ehhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh:
  212|  10.6k|    )) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEanES5_:
   44|  21.3k|    simdutf_really_inline Child operator&(const Child other) const { return _mm256_and_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2Eh:
  198|   116k|    simdutf_really_inline simd8(uint8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIhE5splatEh:
   94|   116k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi2EEENS4_IhEES8_:
   70|  3.56k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.56k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.56k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5base8IhNS2_5simd8IbEEE4prevILi3EEENS4_IhEES8_:
   70|  3.56k|    simdutf_really_inline simd8<T> prev(const simd8<T> prev_chunk) const {
   71|  3.56k|      return _mm256_alignr_epi8(*this, _mm256_permute2x128_si256(prev_chunk, *this, 0x21), 16 - N);
   72|  3.56k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE14saturating_subES4_:
  229|  8.91k|    simdutf_really_inline simd8<uint8_t> saturating_sub(const simd8<uint8_t> other) const { return _mm256_subs_epu8(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2EDv4_x:
  153|  43.6k|    simdutf_really_inline simd8(const __m256i _value) : base8_numeric<int8_t>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaEC2EDv4_x:
  113|  43.6k|    simdutf_really_inline base8_numeric(const __m256i _value) : base8<T>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IaNS2_5simd8IbEEEC2EDv4_x:
   62|  43.6k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEC2EDv4_x:
   19|  43.6k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEgtES4_:
  188|  15.6k|    simdutf_really_inline simd8<bool> operator>(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEcvRKDv4_xEv:
   21|  92.4k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IbEC2EDv4_x:
   81|  17.2k|    simdutf_really_inline simd8<bool>(const __m256i _value) : base8<bool>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5base8IbNS2_5simd8IbEEEC2EDv4_x:
   62|  17.2k|    simdutf_really_inline base8(const __m256i _value) : base<simd8<T>>(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEC2EDv4_x:
   19|  17.2k|    simdutf_really_inline base(const __m256i _value) : value(_value) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEC2Ea:
  156|  3.56k|    simdutf_really_inline simd8(int8_t _value) : simd8(splat(_value)) {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE5splatEa:
   94|  10.4k|    static simdutf_really_inline simd8<T> splat(T _value) { return _mm256_set1_epi8(_value); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRDv4_xEv:
   22|  3.56k|    simdutf_really_inline operator __m256i&() { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IhEEEeoES5_:
   45|  3.56k|    simdutf_really_inline Child operator^(const Child other) const { return _mm256_xor_si256(*this, other); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd5simd8IhEC2EPKh:
  200|  1.78k|    simdutf_really_inline simd8(const uint8_t values[32]) : simd8(load(values)) {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE7gt_bitsES4_:
  235|  1.78k|    simdutf_really_inline simd8<uint8_t> gt_bits(const simd8<uint8_t> other) const { return this->saturating_sub(other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21any_bits_set_anywhereEv:
  250|  98.0k|    simdutf_really_inline bool any_bits_set_anywhere() const { return !bits_not_set_anywhere(); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IhE21bits_not_set_anywhereEv:
  249|  98.0k|    simdutf_really_inline bool bits_not_set_anywhere() const { return _mm256_testz_si256(*this, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaEC2EPKa:
  276|  11.9k|    simdutf_really_inline simd8x64(const T* ptr) : chunks{simd8<T>::load(ptr), simd8<T>::load(ptr+sizeof(simd8<T>)/sizeof(T))} {}
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd13base8_numericIaE4loadEPKa:
   96|  23.8k|    static simdutf_really_inline simd8<T> load(const T values[32]) {
   97|  23.8k|      return _mm256_loadu_si256(reinterpret_cast<const __m256i *>(values));
   98|  23.8k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE8is_asciiEv:
  299|  5.84k|    simdutf_really_inline bool is_ascii() const {
  300|  5.84k|      return this->reduce_or().is_ascii();
  301|  5.84k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE9reduce_orEv:
  295|  5.84k|    simdutf_really_inline simd8<T> reduce_or() const {
  296|  5.84k|      return this->chunks[0] | this->chunks[1];
  297|  5.84k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEEorES5_:
   43|  5.84k|    simdutf_really_inline Child operator|(const Child other) const { return _mm256_or_si256(*this, other); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaE8is_asciiEv:
  184|  5.84k|    simdutf_really_inline bool is_ascii() const { return _mm256_movemask_epi8(*this) == 0; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2ltEa:
  362|    792|    simdutf_really_inline uint64_t lt(const T m) const {
  363|    792|      const simd8<T> mask = simd8<T>::splat(m);
  364|    792|      return  simd8x64<bool>(
  365|    792|        this->chunks[0] < mask,
  366|    792|        this->chunks[1] < mask
  367|    792|      ).to_bitmask();
  368|    792|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IaEltES4_:
  189|  1.58k|    simdutf_really_inline simd8<bool> operator<(const simd8<int8_t> other) const { return _mm256_cmpgt_epi8(other, *this); }
simdutf.cpp:_ZN7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbEC2ENS2_5simd8IbEES6_:
  275|  6.85k|    simdutf_really_inline simd8x64(const simd8<T> chunk0, const simd8<T> chunk1) : chunks{chunk0, chunk1} {}
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IbE10to_bitmaskEv:
  283|  6.85k|    simdutf_really_inline uint64_t to_bitmask() const {
  284|  6.85k|      uint64_t r_lo = uint32_t(this->chunks[0].to_bitmask());
  285|  6.85k|      uint64_t r_hi =                       this->chunks[1].to_bitmask();
  286|  6.85k|      return r_lo | (r_hi << 32);
  287|  6.85k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd5simd8IbE10to_bitmaskEv:
   85|  13.7k|    simdutf_really_inline uint32_t to_bitmask() const { return uint32_t(_mm256_movemask_epi8(*this)); }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IbEEEcvRKDv4_xEv:
   21|  13.7k|    simdutf_really_inline operator const __m256i&() const { return this->value; }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE20store_ascii_as_utf32EPDi:
  309|  5.05k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
  310|  5.05k|      this->chunks[0].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*0);
  311|  5.05k|      this->chunks[1].store_ascii_as_utf32(ptr+sizeof(simd8<T>)*1);
  312|  5.05k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd4baseINS2_5simd8IaEEE20store_ascii_as_utf32EPDi:
   36|  10.1k|    simdutf_really_inline void store_ascii_as_utf32(char32_t * ptr) const {
   37|  10.1k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(*this)));
   38|  10.1k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr+8), _mm256_cvtepu8_epi32(_mm256_castsi256_si128(_mm256_srli_si256(*this,8))));
   39|  10.1k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 16), _mm256_cvtepu8_epi32(_mm256_extractf128_si256(*this,1)));
   40|  10.1k|      _mm256_storeu_si256(reinterpret_cast<__m256i *>(ptr + 24), _mm256_cvtepu8_epi32(_mm_srli_si128(_mm256_extractf128_si256(*this,1),8)));
   41|  10.1k|    }
simdutf.cpp:_ZNK7simdutf7haswell12_GLOBAL__N_14simd8simd8x64IaE2gtEa:
  370|  6.05k|    simdutf_really_inline uint64_t gt(const T m) const {
  371|  6.05k|      const simd8<T> mask = simd8<T>::splat(m);
  372|  6.05k|      return  simd8x64<bool>(
  373|  6.05k|        this->chunks[0] > mask,
  374|  6.05k|        this->chunks[1] > mask
  375|  6.05k|      ).to_bitmask();
  376|  6.05k|    }

_ZN7simdutf7icelake14implementationC2Ev:
   18|      1|      internal::instruction_set::AVX2 | internal::instruction_set::BMI1 | internal::instruction_set::BMI2 | internal::instruction_set::AVX512BW | internal::instruction_set::AVX512CD | internal::instruction_set::AVX512VL | internal::instruction_set::AVX512VBMI2 | internal::instruction_set::AVX512VPOPCNTDQ ) {}

_ZN7simdutf8westmere14implementationC2Ev:
   16|      1|  simdutf_really_inline implementation() : simdutf::implementation("westmere", "Intel/AMD SSE4.2", internal::instruction_set::SSE42) {}

_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   867k|{
  619|   867k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   867k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   867k|    static_cast<    \
  |  |  247|   867k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   867k|}
_ZN3scn2v26detail20check_scan_arg_typesIJaEEEvv:
  386|  2.05M|{
  387|  2.05M|    static_assert(
  388|  2.05M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.05M|        "Scan argument types must be default constructible");
  390|  2.05M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.05M|                  "Scan argument types must be Destructible");
  392|  2.05M|    static_assert(
  393|  2.05M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.05M|        "Scan argument types must not be references");
  395|  2.05M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEEC2EONSt3__15tupleIJaEEE:
  563|   867k|    {
  564|   867k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   867k|    {
  574|   867k|        return {
  575|   867k|            detail::make_arg<base::is_packed, Context,
  576|   867k|                             detail::mapped_type_constant<
  577|   867k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   867k|                args)...};
  579|   867k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|   867k|{
  415|   867k|    return make_value<Context>(value);
  416|   867k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEaEEDaRT0_:
  371|   959k|{
  372|   959k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   959k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   959k|                                  needs_context_tag>) {
  376|   959k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   959k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   959k|    }
  378|   959k|    else {
  379|   959k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   959k|            value, context_tag<Context>{}));
  381|   959k|    }
  382|   959k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERa:
  216|   959k|    {                                                                        \
  217|   959k|        return val;                                                          \
  218|   959k|    }
_ZN3scn2v26detail15make_value_implIRaEEDaOT_:
  340|  2.05M|{
  341|  2.05M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.05M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.05M|    constexpr bool scannable_char =
  345|  2.05M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.05M|    static_assert(scannable_char,
  347|  2.05M|                  "Cannot scan an argument of an unsupported character "
  348|  2.05M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.05M|    constexpr bool scannable_const =
  351|  2.05M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.05M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.05M|    constexpr bool scannable_disabled =
  355|  2.05M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.05M|    static_assert(scannable_disabled,
  357|  2.05M|                  "Cannot scan an argument that has been disabled by "
  358|  2.05M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.05M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.05M|    static_assert(
  362|  2.05M|        scannable,
  363|  2.05M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.05M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.05M|    return arg_value{arg};
  367|  2.05M|}
_ZN3scn2v26detail9arg_valueC2IaEERT_:
  159|  2.05M|    {
  160|  2.05M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   867k|    {
  647|   867k|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPNS0_6detail9arg_valueE:
  693|  6.40M|    {
  694|  6.40M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJaEE4argsEv:
  553|   758k|    {
  554|   758k|        return m_args;
  555|   758k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  92.2k|{
  400|  92.2k|    check_scan_arg_types<T>();
  401|       |
  402|  92.2k|    basic_scan_arg<Context> arg;
  403|  92.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  92.2k|    arg.m_value = make_value<Context>(value);
  405|  92.2k|    return arg;
  406|  92.2k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
  476|  7.05M|    constexpr basic_scan_arg() = default;
_ZN3scn2v26detail9arg_valueC2Ev:
  155|  14.8M|        arg_value() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   823k|{
  619|   823k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   823k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   823k|    static_cast<    \
  |  |  247|   823k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   823k|}
_ZN3scn2v26detail20check_scan_arg_typesIJhEEEvv:
  386|  1.95M|{
  387|  1.95M|    static_assert(
  388|  1.95M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  1.95M|        "Scan argument types must be default constructible");
  390|  1.95M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  1.95M|                  "Scan argument types must be Destructible");
  392|  1.95M|    static_assert(
  393|  1.95M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  1.95M|        "Scan argument types must not be references");
  395|  1.95M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   823k|    {
  564|   823k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   823k|    {
  574|   823k|        return {
  575|   823k|            detail::make_arg<base::is_packed, Context,
  576|   823k|                             detail::mapped_type_constant<
  577|   823k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   823k|                args)...};
  579|   823k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   823k|{
  415|   823k|    return make_value<Context>(value);
  416|   823k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEhEEDaRT0_:
  371|   907k|{
  372|   907k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|   907k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|   907k|                                  needs_context_tag>) {
  376|   907k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|   907k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|   907k|    }
  378|   907k|    else {
  379|   907k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|   907k|            value, context_tag<Context>{}));
  381|   907k|    }
  382|   907k|}
_ZN3scn2v26detail10arg_mapperIcE3mapERh:
  216|   907k|    {                                                                        \
  217|   907k|        return val;                                                          \
  218|   907k|    }
_ZN3scn2v26detail15make_value_implIRhEEDaOT_:
  340|  1.95M|{
  341|  1.95M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  1.95M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  1.95M|    constexpr bool scannable_char =
  345|  1.95M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  1.95M|    static_assert(scannable_char,
  347|  1.95M|                  "Cannot scan an argument of an unsupported character "
  348|  1.95M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  1.95M|    constexpr bool scannable_const =
  351|  1.95M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  1.95M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  1.95M|    constexpr bool scannable_disabled =
  355|  1.95M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  1.95M|    static_assert(scannable_disabled,
  357|  1.95M|                  "Cannot scan an argument that has been disabled by "
  358|  1.95M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  1.95M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  1.95M|    static_assert(
  362|  1.95M|        scannable,
  363|  1.95M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  1.95M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  1.95M|    return arg_value{arg};
  367|  1.95M|}
_ZN3scn2v26detail9arg_valueC2IhEERT_:
  159|  1.95M|    {
  160|  1.95M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   823k|    {
  647|   823k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJhEE4argsEv:
  553|   714k|    {
  554|   714k|        return m_args;
  555|   714k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  83.5k|{
  400|  83.5k|    check_scan_arg_types<T>();
  401|       |
  402|  83.5k|    basic_scan_arg<Context> arg;
  403|  83.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  83.5k|    arg.m_value = make_value<Context>(value);
  405|  83.5k|    return arg;
  406|  83.5k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.26M|{
  619|  1.26M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.26M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.26M|    static_cast<    \
  |  |  247|  1.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.26M|}
_ZN3scn2v26detail20check_scan_arg_typesIJiEEEvv:
  386|  2.88M|{
  387|  2.88M|    static_assert(
  388|  2.88M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.88M|        "Scan argument types must be default constructible");
  390|  2.88M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.88M|                  "Scan argument types must be Destructible");
  392|  2.88M|    static_assert(
  393|  2.88M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.88M|        "Scan argument types must not be references");
  395|  2.88M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  1.26M|    {
  564|  1.26M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.26M|    {
  574|  1.26M|        return {
  575|  1.26M|            detail::make_arg<base::is_packed, Context,
  576|  1.26M|                             detail::mapped_type_constant<
  577|  1.26M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.26M|                args)...};
  579|  1.26M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  1.26M|{
  415|  1.26M|    return make_value<Context>(value);
  416|  1.26M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEiEEDaRT0_:
  371|  1.38M|{
  372|  1.38M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.38M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.38M|                                  needs_context_tag>) {
  376|  1.38M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.38M|    }
  378|  1.38M|    else {
  379|  1.38M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.38M|            value, context_tag<Context>{}));
  381|  1.38M|    }
  382|  1.38M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERi:
  216|  1.38M|    {                                                                        \
  217|  1.38M|        return val;                                                          \
  218|  1.38M|    }
_ZN3scn2v26detail15make_value_implIRiEEDaOT_:
  340|  2.88M|{
  341|  2.88M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.88M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.88M|    constexpr bool scannable_char =
  345|  2.88M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.88M|    static_assert(scannable_char,
  347|  2.88M|                  "Cannot scan an argument of an unsupported character "
  348|  2.88M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.88M|    constexpr bool scannable_const =
  351|  2.88M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.88M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.88M|    constexpr bool scannable_disabled =
  355|  2.88M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.88M|    static_assert(scannable_disabled,
  357|  2.88M|                  "Cannot scan an argument that has been disabled by "
  358|  2.88M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.88M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.88M|    static_assert(
  362|  2.88M|        scannable,
  363|  2.88M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.88M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.88M|    return arg_value{arg};
  367|  2.88M|}
_ZN3scn2v26detail9arg_valueC2IiEERT_:
  159|  2.88M|    {
  160|  2.88M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.26M|    {
  647|  1.26M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJiEE4argsEv:
  553|  1.15M|    {
  554|  1.15M|        return m_args;
  555|  1.15M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEiEENS0_14basic_scan_argIT_EERT0_:
  399|   126k|{
  400|   126k|    check_scan_arg_types<T>();
  401|       |
  402|   126k|    basic_scan_arg<Context> arg;
  403|   126k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   126k|    arg.m_value = make_value<Context>(value);
  405|   126k|    return arg;
  406|   126k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.01M|{
  619|  1.01M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.01M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.01M|    static_cast<    \
  |  |  247|  1.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.01M|}
_ZN3scn2v26detail20check_scan_arg_typesIJjEEEvv:
  386|  2.37M|{
  387|  2.37M|    static_assert(
  388|  2.37M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.37M|        "Scan argument types must be default constructible");
  390|  2.37M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.37M|                  "Scan argument types must be Destructible");
  392|  2.37M|    static_assert(
  393|  2.37M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.37M|        "Scan argument types must not be references");
  395|  2.37M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEEC2EONSt3__15tupleIJjEEE:
  563|  1.01M|    {
  564|  1.01M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.01M|    {
  574|  1.01M|        return {
  575|  1.01M|            detail::make_arg<base::is_packed, Context,
  576|  1.01M|                             detail::mapped_type_constant<
  577|  1.01M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.01M|                args)...};
  579|  1.01M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|  1.01M|{
  415|  1.01M|    return make_value<Context>(value);
  416|  1.01M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEjEEDaRT0_:
  371|  1.11M|{
  372|  1.11M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.11M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.11M|                                  needs_context_tag>) {
  376|  1.11M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.11M|    }
  378|  1.11M|    else {
  379|  1.11M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.11M|            value, context_tag<Context>{}));
  381|  1.11M|    }
  382|  1.11M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERj:
  216|  1.11M|    {                                                                        \
  217|  1.11M|        return val;                                                          \
  218|  1.11M|    }
_ZN3scn2v26detail15make_value_implIRjEEDaOT_:
  340|  2.37M|{
  341|  2.37M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.37M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.37M|    constexpr bool scannable_char =
  345|  2.37M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.37M|    static_assert(scannable_char,
  347|  2.37M|                  "Cannot scan an argument of an unsupported character "
  348|  2.37M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.37M|    constexpr bool scannable_const =
  351|  2.37M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.37M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.37M|    constexpr bool scannable_disabled =
  355|  2.37M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.37M|    static_assert(scannable_disabled,
  357|  2.37M|                  "Cannot scan an argument that has been disabled by "
  358|  2.37M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.37M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.37M|    static_assert(
  362|  2.37M|        scannable,
  363|  2.37M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.37M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.37M|    return arg_value{arg};
  367|  2.37M|}
_ZN3scn2v26detail9arg_valueC2IjEERT_:
  159|  2.37M|    {
  160|  2.37M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.01M|    {
  647|  1.01M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJjEE4argsEv:
  553|   908k|    {
  554|   908k|        return m_args;
  555|   908k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEjEENS0_14basic_scan_argIT_EERT0_:
  399|   102k|{
  400|   102k|    check_scan_arg_types<T>();
  401|       |
  402|   102k|    basic_scan_arg<Context> arg;
  403|   102k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   102k|    arg.m_value = make_value<Context>(value);
  405|   102k|    return arg;
  406|   102k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.35M|{
  619|  1.35M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.35M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.35M|    static_cast<    \
  |  |  247|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.35M|}
_ZN3scn2v26detail20check_scan_arg_typesIJxEEEvv:
  386|  3.07M|{
  387|  3.07M|    static_assert(
  388|  3.07M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  3.07M|        "Scan argument types must be default constructible");
  390|  3.07M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  3.07M|                  "Scan argument types must be Destructible");
  392|  3.07M|    static_assert(
  393|  3.07M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  3.07M|        "Scan argument types must not be references");
  395|  3.07M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEEC2EONSt3__15tupleIJxEEE:
  563|  1.35M|    {
  564|  1.35M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.35M|    {
  574|  1.35M|        return {
  575|  1.35M|            detail::make_arg<base::is_packed, Context,
  576|  1.35M|                             detail::mapped_type_constant<
  577|  1.35M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.35M|                args)...};
  579|  1.35M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|  1.35M|{
  415|  1.35M|    return make_value<Context>(value);
  416|  1.35M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEExEEDaRT0_:
  371|  1.49M|{
  372|  1.49M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.49M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.49M|                                  needs_context_tag>) {
  376|  1.49M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.49M|    }
  378|  1.49M|    else {
  379|  1.49M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.49M|            value, context_tag<Context>{}));
  381|  1.49M|    }
  382|  1.49M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERx:
  216|  1.49M|    {                                                                        \
  217|  1.49M|        return val;                                                          \
  218|  1.49M|    }
_ZN3scn2v26detail15make_value_implIRxEEDaOT_:
  340|  3.07M|{
  341|  3.07M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  3.07M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  3.07M|    constexpr bool scannable_char =
  345|  3.07M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  3.07M|    static_assert(scannable_char,
  347|  3.07M|                  "Cannot scan an argument of an unsupported character "
  348|  3.07M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  3.07M|    constexpr bool scannable_const =
  351|  3.07M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  3.07M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  3.07M|    constexpr bool scannable_disabled =
  355|  3.07M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  3.07M|    static_assert(scannable_disabled,
  357|  3.07M|                  "Cannot scan an argument that has been disabled by "
  358|  3.07M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  3.07M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  3.07M|    static_assert(
  362|  3.07M|        scannable,
  363|  3.07M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  3.07M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  3.07M|    return arg_value{arg};
  367|  3.07M|}
_ZN3scn2v26detail9arg_valueC2IxEERT_:
  159|  3.07M|    {
  160|  3.07M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.35M|    {
  647|  1.35M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJxEE4argsEv:
  553|  1.24M|    {
  554|  1.24M|        return m_args;
  555|  1.24M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEExEENS0_14basic_scan_argIT_EERT0_:
  399|   136k|{
  400|   136k|    check_scan_arg_types<T>();
  401|       |
  402|   136k|    basic_scan_arg<Context> arg;
  403|   136k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   136k|    arg.m_value = make_value<Context>(value);
  405|   136k|    return arg;
  406|   136k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIcEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.07M|{
  619|  1.07M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.07M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.07M|    static_cast<    \
  |  |  247|  1.07M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.07M|}
_ZN3scn2v26detail20check_scan_arg_typesIJyEEEvv:
  386|  2.49M|{
  387|  2.49M|    static_assert(
  388|  2.49M|        std::conjunction<std::is_default_constructible<Args>...>::value,
  389|  2.49M|        "Scan argument types must be default constructible");
  390|  2.49M|    static_assert(std::conjunction<std::is_destructible<Args>...>::value,
  391|  2.49M|                  "Scan argument types must be Destructible");
  392|  2.49M|    static_assert(
  393|  2.49M|        !std::conjunction<std::false_type, std::is_reference<Args>...>::value,
  394|  2.49M|        "Scan argument types must not be references");
  395|  2.49M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEEC2EONSt3__15tupleIJyEEE:
  563|  1.07M|    {
  564|  1.07M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.07M|    {
  574|  1.07M|        return {
  575|  1.07M|            detail::make_arg<base::is_packed, Context,
  576|  1.07M|                             detail::mapped_type_constant<
  577|  1.07M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.07M|                args)...};
  579|  1.07M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIcEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|  1.07M|{
  415|  1.07M|    return make_value<Context>(value);
  416|  1.07M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIcEEyEEDaRT0_:
  371|  1.18M|{
  372|  1.18M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.18M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.18M|                                  needs_context_tag>) {
  376|  1.18M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.18M|    }
  378|  1.18M|    else {
  379|  1.18M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.18M|            value, context_tag<Context>{}));
  381|  1.18M|    }
  382|  1.18M|}
_ZN3scn2v26detail10arg_mapperIcE3mapERy:
  216|  1.18M|    {                                                                        \
  217|  1.18M|        return val;                                                          \
  218|  1.18M|    }
_ZN3scn2v26detail15make_value_implIRyEEDaOT_:
  340|  2.49M|{
  341|  2.49M|    using arg_nocvref_t = remove_cvref_t<Arg>;
  342|  2.49M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
  343|       |
  344|  2.49M|    constexpr bool scannable_char =
  345|  2.49M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
  346|  2.49M|    static_assert(scannable_char,
  347|  2.49M|                  "Cannot scan an argument of an unsupported character "
  348|  2.49M|                  "type (i.e. char from a wchar_t source)");
  349|       |
  350|  2.49M|    constexpr bool scannable_const =
  351|  2.49M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
  352|  2.49M|    static_assert(scannable_const, "Cannot scan a const argument");
  353|       |
  354|  2.49M|    constexpr bool scannable_disabled =
  355|  2.49M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
  356|  2.49M|    static_assert(scannable_disabled,
  357|  2.49M|                  "Cannot scan an argument that has been disabled by "
  358|  2.49M|                  "flag (SCN_DISABLE_TYPE_*)");
  359|       |
  360|  2.49M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
  361|  2.49M|    static_assert(
  362|  2.49M|        scannable,
  363|  2.49M|        "Cannot scan an argument. To make a type T scannable, provide "
  364|  2.49M|        "a scn::scanner<T, CharT> specialization.");
  365|       |
  366|  2.49M|    return arg_value{arg};
  367|  2.49M|}
_ZN3scn2v26detail9arg_valueC2IyEERT_:
  159|  2.49M|    {
  160|  2.49M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.07M|    {
  647|  1.07M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIcEEJyEE4argsEv:
  553|   966k|    {
  554|   966k|        return m_args;
  555|   966k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIcEEyEENS0_14basic_scan_argIT_EERT0_:
  399|   108k|{
  400|   108k|    check_scan_arg_types<T>();
  401|       |
  402|   108k|    basic_scan_arg<Context> arg;
  403|   108k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   108k|    arg.m_value = make_value<Context>(value);
  405|   108k|    return arg;
  406|   108k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJaEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.00M|{
  619|  1.00M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.00M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.00M|    static_cast<    \
  |  |  247|  1.00M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.00M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEEC2EONSt3__15tupleIJaEEE:
  563|  1.00M|    {
  564|  1.00M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE15make_data_arrayIJaEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.00M|    {
  574|  1.00M|        return {
  575|  1.00M|            detail::make_arg<base::is_packed, Context,
  576|  1.00M|                             detail::mapped_type_constant<
  577|  1.00M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.00M|                args)...};
  579|  1.00M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE1EavEENS1_9arg_valueERT2_:
  414|  1.00M|{
  415|  1.00M|    return make_value<Context>(value);
  416|  1.00M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEaEEDaRT0_:
  371|  1.09M|{
  372|  1.09M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.09M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.09M|                                  needs_context_tag>) {
  376|  1.09M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.09M|    }
  378|  1.09M|    else {
  379|  1.09M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.09M|            value, context_tag<Context>{}));
  381|  1.09M|    }
  382|  1.09M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERa:
  216|  1.09M|    {                                                                        \
  217|  1.09M|        return val;                                                          \
  218|  1.09M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJaEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.00M|    {
  647|  1.00M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPNS0_6detail9arg_valueE:
  693|  7.13M|    {
  694|  7.13M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJaEE4argsEv:
  553|   676k|    {
  554|   676k|        return m_args;
  555|   676k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEaEENS0_14basic_scan_argIT_EERT0_:
  399|  94.8k|{
  400|  94.8k|    check_scan_arg_types<T>();
  401|       |
  402|  94.8k|    basic_scan_arg<Context> arg;
  403|  94.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  94.8k|    arg.m_value = make_value<Context>(value);
  405|  94.8k|    return arg;
  406|  94.8k|}
_ZN3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
  476|  7.78M|    constexpr basic_scan_arg() = default;
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJhEEEDaONSt3__15tupleIJDpT0_EEE:
  618|   964k|{
  619|   964k|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|   964k|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|   964k|    static_cast<    \
  |  |  247|   964k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|   964k|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEEC2EONSt3__15tupleIJhEEE:
  563|   964k|    {
  564|   964k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE15make_data_arrayIJhEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|   964k|    {
  574|   964k|        return {
  575|   964k|            detail::make_arg<base::is_packed, Context,
  576|   964k|                             detail::mapped_type_constant<
  577|   964k|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|   964k|                args)...};
  579|   964k|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE6EhvEENS1_9arg_valueERT2_:
  414|   964k|{
  415|   964k|    return make_value<Context>(value);
  416|   964k|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEhEEDaRT0_:
  371|  1.05M|{
  372|  1.05M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.05M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.05M|                                  needs_context_tag>) {
  376|  1.05M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.05M|    }
  378|  1.05M|    else {
  379|  1.05M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.05M|            value, context_tag<Context>{}));
  381|  1.05M|    }
  382|  1.05M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERh:
  216|  1.05M|    {                                                                        \
  217|  1.05M|        return val;                                                          \
  218|  1.05M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJhEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|   964k|    {
  647|   964k|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJhEE4argsEv:
  553|   637k|    {
  554|   637k|        return m_args;
  555|   637k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEhEENS0_14basic_scan_argIT_EERT0_:
  399|  86.2k|{
  400|  86.2k|    check_scan_arg_types<T>();
  401|       |
  402|  86.2k|    basic_scan_arg<Context> arg;
  403|  86.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|  86.2k|    arg.m_value = make_value<Context>(value);
  405|  86.2k|    return arg;
  406|  86.2k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJiEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.36M|{
  619|  1.36M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.36M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.36M|    static_cast<    \
  |  |  247|  1.36M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.36M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEEC2EONSt3__15tupleIJiEEE:
  563|  1.36M|    {
  564|  1.36M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE15make_data_arrayIJiEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.36M|    {
  574|  1.36M|        return {
  575|  1.36M|            detail::make_arg<base::is_packed, Context,
  576|  1.36M|                             detail::mapped_type_constant<
  577|  1.36M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.36M|                args)...};
  579|  1.36M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE3EivEENS1_9arg_valueERT2_:
  414|  1.36M|{
  415|  1.36M|    return make_value<Context>(value);
  416|  1.36M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEiEEDaRT0_:
  371|  1.49M|{
  372|  1.49M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.49M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.49M|                                  needs_context_tag>) {
  376|  1.49M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.49M|    }
  378|  1.49M|    else {
  379|  1.49M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.49M|            value, context_tag<Context>{}));
  381|  1.49M|    }
  382|  1.49M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERi:
  216|  1.49M|    {                                                                        \
  217|  1.49M|        return val;                                                          \
  218|  1.49M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJiEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.36M|    {
  647|  1.36M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJiEE4argsEv:
  553|  1.04M|    {
  554|  1.04M|        return m_args;
  555|  1.04M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEiEENS0_14basic_scan_argIT_EERT0_:
  399|   125k|{
  400|   125k|    check_scan_arg_types<T>();
  401|       |
  402|   125k|    basic_scan_arg<Context> arg;
  403|   125k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   125k|    arg.m_value = make_value<Context>(value);
  405|   125k|    return arg;
  406|   125k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJjEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.15M|{
  619|  1.15M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.15M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.15M|    static_cast<    \
  |  |  247|  1.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.15M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEEC2EONSt3__15tupleIJjEEE:
  563|  1.15M|    {
  564|  1.15M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE15make_data_arrayIJjEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.15M|    {
  574|  1.15M|        return {
  575|  1.15M|            detail::make_arg<base::is_packed, Context,
  576|  1.15M|                             detail::mapped_type_constant<
  577|  1.15M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.15M|                args)...};
  579|  1.15M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE8EjvEENS1_9arg_valueERT2_:
  414|  1.15M|{
  415|  1.15M|    return make_value<Context>(value);
  416|  1.15M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEjEEDaRT0_:
  371|  1.25M|{
  372|  1.25M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.25M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.25M|                                  needs_context_tag>) {
  376|  1.25M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.25M|    }
  378|  1.25M|    else {
  379|  1.25M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.25M|            value, context_tag<Context>{}));
  381|  1.25M|    }
  382|  1.25M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERj:
  216|  1.25M|    {                                                                        \
  217|  1.25M|        return val;                                                          \
  218|  1.25M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJjEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.15M|    {
  647|  1.15M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJjEE4argsEv:
  553|   826k|    {
  554|   826k|        return m_args;
  555|   826k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEjEENS0_14basic_scan_argIT_EERT0_:
  399|   103k|{
  400|   103k|    check_scan_arg_types<T>();
  401|       |
  402|   103k|    basic_scan_arg<Context> arg;
  403|   103k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   103k|    arg.m_value = make_value<Context>(value);
  405|   103k|    return arg;
  406|   103k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJxEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.44M|{
  619|  1.44M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.44M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.44M|    static_cast<    \
  |  |  247|  1.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.44M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEEC2EONSt3__15tupleIJxEEE:
  563|  1.44M|    {
  564|  1.44M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE15make_data_arrayIJxEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.44M|    {
  574|  1.44M|        return {
  575|  1.44M|            detail::make_arg<base::is_packed, Context,
  576|  1.44M|                             detail::mapped_type_constant<
  577|  1.44M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.44M|                args)...};
  579|  1.44M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE5ExvEENS1_9arg_valueERT2_:
  414|  1.44M|{
  415|  1.44M|    return make_value<Context>(value);
  416|  1.44M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEExEEDaRT0_:
  371|  1.57M|{
  372|  1.57M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.57M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.57M|                                  needs_context_tag>) {
  376|  1.57M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.57M|    }
  378|  1.57M|    else {
  379|  1.57M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.57M|            value, context_tag<Context>{}));
  381|  1.57M|    }
  382|  1.57M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERx:
  216|  1.57M|    {                                                                        \
  217|  1.57M|        return val;                                                          \
  218|  1.57M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJxEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.44M|    {
  647|  1.44M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJxEE4argsEv:
  553|  1.11M|    {
  554|  1.11M|        return m_args;
  555|  1.11M|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEExEENS0_14basic_scan_argIT_EERT0_:
  399|   132k|{
  400|   132k|    check_scan_arg_types<T>();
  401|       |
  402|   132k|    basic_scan_arg<Context> arg;
  403|   132k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   132k|    arg.m_value = make_value<Context>(value);
  405|   132k|    return arg;
  406|   132k|}
_ZN3scn2v214make_scan_argsINS0_18basic_scan_contextIwEEJyEEEDaONSt3__15tupleIJDpT0_EEE:
  618|  1.19M|{
  619|  1.19M|    detail::check_scan_arg_types<Args...>();
  620|       |
  621|  1.19M|    return scan_arg_store<Context, Args...>{SCN_MOVE(values)};
  ------------------
  |  |  246|  1.19M|    static_cast<    \
  |  |  247|  1.19M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  622|  1.19M|}
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEEC2EONSt3__15tupleIJyEEE:
  563|  1.19M|    {
  564|  1.19M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE15make_data_arrayIJyEEENSt3__15arrayINS0_6detail9arg_valueELm1EEEDpRT_:
  573|  1.19M|    {
  574|  1.19M|        return {
  575|  1.19M|            detail::make_arg<base::is_packed, Context,
  576|  1.19M|                             detail::mapped_type_constant<
  577|  1.19M|                                 detail::remove_cvref_t<A>, char_type>::value>(
  578|  1.19M|                args)...};
  579|  1.19M|    }
_ZN3scn2v26detail8make_argILb1ENS0_18basic_scan_contextIwEELNS1_8arg_typeE10EyvEENS1_9arg_valueERT2_:
  414|  1.19M|{
  415|  1.19M|    return make_value<Context>(value);
  416|  1.19M|}
_ZN3scn2v26detail10make_valueINS0_18basic_scan_contextIwEEyEEDaRT0_:
  371|  1.30M|{
  372|  1.30M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
  373|       |
  374|  1.30M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (374:19): [Folded - Ignored]
  ------------------
  375|  1.30M|                                  needs_context_tag>) {
  376|  1.30M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  248|  1.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  377|  1.30M|    }
  378|  1.30M|    else {
  379|  1.30M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
  380|  1.30M|            value, context_tag<Context>{}));
  381|  1.30M|    }
  382|  1.30M|}
_ZN3scn2v26detail10arg_mapperIwE3mapERy:
  216|  1.30M|    {                                                                        \
  217|  1.30M|        return val;                                                          \
  218|  1.30M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJyEEERNS0_14scan_arg_storeIS3_JDpT_EEE:
  646|  1.19M|    {
  647|  1.19M|    }
_ZN3scn2v214scan_arg_storeINS0_18basic_scan_contextIwEEJyEE4argsEv:
  553|   873k|    {
  554|   873k|        return m_args;
  555|   873k|    }
_ZN3scn2v26detail8make_argINS0_18basic_scan_contextIwEEyEENS0_14basic_scan_argIT_EERT0_:
  399|   108k|{
  400|   108k|    check_scan_arg_types<T>();
  401|       |
  402|   108k|    basic_scan_arg<Context> arg;
  403|   108k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
  404|   108k|    arg.m_value = make_value<Context>(value);
  405|   108k|    return arg;
  406|   108k|}
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
  681|  6.40M|    {
  682|  6.40M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  6.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.40M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  6.40M|        return static_cast<std::size_t>(m_desc &
  687|  6.40M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  6.40M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
  701|  12.8M|    {
  702|  12.8M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  12.8M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
  654|  6.40M|    {
  655|  6.40M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  6.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.40M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  6.40M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  6.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.40M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  6.40M|        const auto t = type(id);
  667|  6.40M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  6.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.40M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  6.40M|        basic_scan_arg<Context> arg;
  672|  6.40M|        arg.m_type = t;
  673|  6.40M|        arg.m_value = m_values[id];
  674|  6.40M|        return arg;
  675|  6.40M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
  706|  6.40M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  6.40M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  6.40M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  6.40M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  6.40M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
  482|  11.9M|    {
  483|  11.9M|        return m_type != detail::arg_type::none_type;
  484|  11.9M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
  487|  10.2M|    {
  488|  10.2M|        return m_type;
  489|  10.2M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
  681|  7.13M|    {
  682|  7.13M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  7.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.13M]
  |  |  ------------------
  ------------------
  683|      0|            return max_size();
  684|      0|        }
  685|       |
  686|  7.13M|        return static_cast<std::size_t>(m_desc &
  687|  7.13M|                                        ((1 << detail::packed_arg_bits) - 1));
  688|  7.13M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
  701|  14.2M|    {
  702|  14.2M|        return (m_desc & detail::is_unpacked_bit) == 0;
  703|  14.2M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
  654|  7.13M|    {
  655|  7.13M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  153|  7.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.13M]
  |  |  ------------------
  ------------------
  656|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  657|      0|                return m_args[id];
  658|      0|            }
  659|      0|            return {};
  660|      0|        }
  661|       |
  662|  7.13M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  153|  7.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.13M]
  |  |  ------------------
  ------------------
  663|      0|            return {};
  664|      0|        }
  665|       |
  666|  7.13M|        const auto t = type(id);
  667|  7.13M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  153|  7.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 7.13M]
  |  |  ------------------
  ------------------
  668|      0|            return {};
  669|      0|        }
  670|       |
  671|  7.13M|        basic_scan_arg<Context> arg;
  672|  7.13M|        arg.m_type = t;
  673|  7.13M|        arg.m_value = m_values[id];
  674|  7.13M|        return arg;
  675|  7.13M|    }
_ZNK3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
  706|  7.13M|    {
  707|       |        // First (0th) index is size, types start after that
  708|  7.13M|        const auto shift = (index + 1) * detail::packed_arg_bits;
  709|  7.13M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
  710|  7.13M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
  711|  7.13M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
  482|  13.0M|    {
  483|  13.0M|        return m_type != detail::arg_type::none_type;
  484|  13.0M|    }
_ZNK3scn2v214basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
  487|  11.6M|    {
  488|  11.6M|        return m_type;
  489|  11.6M|    }
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
  634|   650k|    constexpr basic_scan_args() = default;
_ZN3scn2v215basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
  634|   650k|    constexpr basic_scan_args() = default;

_ZN3scn2v218basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   326k|    {
  109|   326k|    }
_ZN3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
   59|  5.10M|    {
   60|  5.10M|    }
_ZNK3scn2v218basic_scan_contextIcE5beginEv:
  123|   588k|    {
  124|   588k|        return m_current;
  125|   588k|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
   42|  5.10M|    {
   43|  5.10M|        return m_args.get(id);
   44|  5.10M|    }
_ZNK3scn2v26detail17scan_context_baseIcNS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
   52|  4.90M|    {
   53|  4.90M|        return m_locale;
   54|  4.90M|    }
_ZNK3scn2v218basic_scan_contextIcE3endEv:
  131|   228k|    {
  132|   228k|        return ranges_std::default_sentinel;
  133|   228k|    }
_ZN3scn2v218basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
  145|  32.6k|    {
  146|  32.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  32.6k|    static_cast<    \
  |  |  247|  32.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  32.6k|    }
_ZNK3scn2v218basic_scan_contextIcE5rangeEv:
  139|   228k|    {
  140|   228k|        return ranges::subrange{begin(), end()};
  141|   228k|    }
_ZN3scn2v218basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
  108|   947k|    {
  109|   947k|    }
_ZN3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
   59|  5.83M|    {
   60|  5.83M|    }
_ZNK3scn2v218basic_scan_contextIwE5beginEv:
  123|  1.66M|    {
  124|  1.66M|        return m_current;
  125|  1.66M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
   42|  5.83M|    {
   43|  5.83M|        return m_args.get(id);
   44|  5.83M|    }
_ZNK3scn2v26detail17scan_context_baseIwNS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
   52|  5.24M|    {
   53|  5.24M|        return m_locale;
   54|  5.24M|    }
_ZNK3scn2v218basic_scan_contextIwE3endEv:
  131|   653k|    {
  132|   653k|        return ranges_std::default_sentinel;
  133|   653k|    }
_ZN3scn2v218basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
  145|  65.3k|    {
  146|  65.3k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  65.3k|    static_cast<    \
  |  |  247|  65.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  147|  65.3k|    }
_ZNK3scn2v218basic_scan_contextIwE5rangeEv:
  139|   653k|    {
  140|   653k|        return ranges::subrange{begin(), end()};
  141|   653k|    }

_ZN3scn2v210scan_errorC2ENS1_4codeEPKc:
   68|  3.79M|    {
   69|  3.79M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  3.79M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   70|  3.79M|    }
_ZNK3scn2v210scan_errorcvbEv:
   74|  52.6M|    {
   75|  52.6M|        return m_code == good;
   76|  52.6M|    }
_ZNK3scn2v210scan_error4codeEv:
   85|  1.56M|    {
   86|  1.56M|        return m_code;
   87|  1.56M|    }
_ZN3scn2v2eqENS0_10scan_errorENS1_4codeE:
  110|  1.56M|{
  111|  1.56M|    return a.code() == b;
  112|  1.56M|}
_ZN3scn2v2neENS0_10scan_errorENS1_4codeE:
  115|  1.56M|{
  116|  1.56M|    return !(a == b);
  117|  1.56M|}
_ZN3scn2v210scan_errorC2Ev:
   62|  32.0M|    constexpr scan_error() SCN_NOEXCEPT = default;

_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   807k|    {
  675|   807k|        return m_str;
  676|   807k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
  384|  6.40M|{
  385|  6.40M|    return s;
  386|  6.40M|}
_ZN3scn2v26detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
  361|  6.40M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   807k|    {
  671|   807k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   763k|    {
  675|   763k|        return m_str;
  676|   763k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   763k|    {
  671|   763k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.20M|    {
  675|  1.20M|        return m_str;
  676|  1.20M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.20M|    {
  671|  1.20M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|   957k|    {
  675|   957k|        return m_str;
  676|   957k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|   957k|    {
  671|   957k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.29M|    {
  675|  1.29M|        return m_str;
  676|  1.29M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.29M|    {
  671|  1.29M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEv:
  674|  1.01M|    {
  675|  1.01M|        return m_str;
  676|  1.01M|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  1.01M|    {
  671|  1.01M|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  59.9k|    {
  675|  59.9k|        return m_str;
  676|  59.9k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  59.9k|    {
  671|  59.9k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  59.9k|    {
  675|  59.9k|        return m_str;
  676|  59.9k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  59.9k|    {
  671|  59.9k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  59.9k|    {
  675|  59.9k|        return m_str;
  676|  59.9k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  59.9k|    {
  671|  59.9k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  59.9k|    {
  675|  59.9k|        return m_str;
  676|  59.9k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  59.9k|    {
  671|  59.9k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  59.9k|    {
  675|  59.9k|        return m_str;
  676|  59.9k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  59.9k|    {
  671|  59.9k|    }
_ZNK3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
  674|  59.9k|    {
  675|  59.9k|        return m_str;
  676|  59.9k|    }
_ZN3scn2v224basic_scan_format_stringIcN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
  670|  59.9k|    {
  671|  59.9k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   840k|    {
  675|   840k|        return m_str;
  676|   840k|    }
_ZN3scn2v214runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
  389|  7.13M|{
  390|  7.13M|    return s;
  391|  7.13M|}
_ZN3scn2v26detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
  361|  7.13M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   840k|    {
  671|   840k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   801k|    {
  675|   801k|        return m_str;
  676|   801k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   801k|    {
  671|   801k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.18M|    {
  675|  1.18M|        return m_str;
  676|  1.18M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.18M|    {
  671|  1.18M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|   973k|    {
  675|   973k|        return m_str;
  676|   973k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   973k|    {
  671|   973k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.26M|    {
  675|  1.26M|        return m_str;
  676|  1.26M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.26M|    {
  671|  1.26M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEcvNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEv:
  674|  1.02M|    {
  675|  1.02M|        return m_str;
  676|  1.02M|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|  1.02M|    {
  671|  1.02M|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   163k|    {
  675|   163k|        return m_str;
  676|   163k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   163k|    {
  671|   163k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   163k|    {
  675|   163k|        return m_str;
  676|   163k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   163k|    {
  671|   163k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   179k|    {
  675|   179k|        return m_str;
  676|   179k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   179k|    {
  671|   179k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   179k|    {
  675|   179k|        return m_str;
  676|   179k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   179k|    {
  671|   179k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   179k|    {
  675|   179k|        return m_str;
  676|   179k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   179k|    {
  671|   179k|    }
_ZNK3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
  674|   179k|    {
  675|   179k|        return m_str;
  676|   179k|    }
_ZN3scn2v224basic_scan_format_stringIwN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
  670|   179k|    {
  671|   179k|    }

_ZNK3scn2v26detail12format_specs8get_baseEi:
  195|  10.1M|    {
  196|  10.1M|        SCN_GCC_COMPAT_PUSH
  197|  10.1M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
  198|  10.1M|        switch (type) {
  199|  2.58M|            case presentation_type::none:
  ------------------
  |  Branch (199:13): [True: 2.58M, False: 7.52M]
  ------------------
  200|  5.17M|            case presentation_type::int_generic:
  ------------------
  |  Branch (200:13): [True: 2.59M, False: 7.51M]
  ------------------
  201|  5.17M|                return default_base;
  202|      0|            case presentation_type::int_arbitrary_base:
  ------------------
  |  Branch (202:13): [True: 0, False: 10.1M]
  ------------------
  203|      0|                return arbitrary_base;
  204|       |
  205|   404k|            case presentation_type::int_binary:
  ------------------
  |  Branch (205:13): [True: 404k, False: 9.70M]
  ------------------
  206|   404k|                return 2;
  207|   712k|            case presentation_type::int_octal:
  ------------------
  |  Branch (207:13): [True: 712k, False: 9.39M]
  ------------------
  208|   712k|                return 8;
  209|  1.90M|            case presentation_type::int_decimal:
  ------------------
  |  Branch (209:13): [True: 1.90M, False: 8.20M]
  ------------------
  210|  1.90M|            case presentation_type::int_unsigned_decimal:
  ------------------
  |  Branch (210:13): [True: 0, False: 10.1M]
  ------------------
  211|  1.90M|                return 10;
  212|  1.91M|            case presentation_type::int_hex:
  ------------------
  |  Branch (212:13): [True: 1.91M, False: 8.19M]
  ------------------
  213|  1.91M|                return 16;
  214|       |
  215|      0|            default:
  ------------------
  |  Branch (215:13): [True: 0, False: 10.1M]
  ------------------
  216|      0|                SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  217|      0|                SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  218|  10.1M|        }
  219|  10.1M|        SCN_GCC_COMPAT_POP
  220|  10.1M|    }
_ZN3scn2v26detail12specs_setterC2ERNS1_12format_specsE:
  232|  10.9M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v26detail12specs_setter12on_localizedEv:
  244|  2.59M|    {
  245|  2.59M|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  126|  2.59M|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (245:23): [Folded - Ignored]
  ------------------
  246|  2.59M|            m_specs.localized = true;
  247|  2.59M|        }
  248|      0|        else {
  249|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
  250|      0|        }
  251|  2.59M|    }
_ZN3scn2v26detail12specs_setter7on_typeENS1_17presentation_typeE:
  259|  7.81M|    {
  260|  7.81M|        m_specs.type = type;
  261|  7.81M|    }
_ZN3scn2v26detail12specs_setter8on_errorEPKc:
  321|   522k|    {
  322|   522k|        SCN_UNLIKELY_ATTR
  323|   522k|        m_error = scan_error{scan_error::invalid_format_string, msg};
  324|   522k|    }
_ZNK3scn2v26detail12specs_settercvbEv:
  332|  10.4M|    {
  333|  10.4M|        return static_cast<bool>(m_error);
  334|  10.4M|    }
_ZN3scn2v26detail25get_category_for_arg_typeENS1_8arg_typeE:
  980|  2.59M|{
  981|  2.59M|    switch (type) {
  982|      0|        case arg_type::none_type:
  ------------------
  |  Branch (982:9): [True: 0, False: 2.59M]
  ------------------
  983|      0|            return arg_type_category::none;
  984|       |
  985|   373k|        case arg_type::schar_type:
  ------------------
  |  Branch (985:9): [True: 373k, False: 2.22M]
  ------------------
  986|   373k|        case arg_type::short_type:
  ------------------
  |  Branch (986:9): [True: 0, False: 2.59M]
  ------------------
  987|   876k|        case arg_type::int_type:
  ------------------
  |  Branch (987:9): [True: 503k, False: 2.09M]
  ------------------
  988|   876k|        case arg_type::long_type:
  ------------------
  |  Branch (988:9): [True: 0, False: 2.59M]
  ------------------
  989|  1.41M|        case arg_type::llong_type:
  ------------------
  |  Branch (989:9): [True: 537k, False: 2.06M]
  ------------------
  990|  1.41M|            return arg_type_category::integer;
  991|       |
  992|   339k|        case arg_type::uchar_type:
  ------------------
  |  Branch (992:9): [True: 339k, False: 2.25M]
  ------------------
  993|   339k|        case arg_type::ushort_type:
  ------------------
  |  Branch (993:9): [True: 0, False: 2.59M]
  ------------------
  994|   751k|        case arg_type::uint_type:
  ------------------
  |  Branch (994:9): [True: 411k, False: 2.18M]
  ------------------
  995|   751k|        case arg_type::ulong_type:
  ------------------
  |  Branch (995:9): [True: 0, False: 2.59M]
  ------------------
  996|  1.18M|        case arg_type::ullong_type:
  ------------------
  |  Branch (996:9): [True: 432k, False: 2.16M]
  ------------------
  997|  1.18M|            return arg_type_category::unsigned_integer;
  998|       |
  999|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (999:9): [True: 0, False: 2.59M]
  ------------------
 1000|      0|            return arg_type_category::pointer;
 1001|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (1001:9): [True: 0, False: 2.59M]
  ------------------
 1002|      0|            return arg_type_category::boolean;
 1003|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (1003:9): [True: 0, False: 2.59M]
  ------------------
 1004|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (1004:9): [True: 0, False: 2.59M]
  ------------------
 1005|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (1005:9): [True: 0, False: 2.59M]
  ------------------
 1006|      0|            return arg_type_category::character;
 1007|       |
 1008|      0|        case arg_type::float_type:
  ------------------
  |  Branch (1008:9): [True: 0, False: 2.59M]
  ------------------
 1009|      0|        case arg_type::double_type:
  ------------------
  |  Branch (1009:9): [True: 0, False: 2.59M]
  ------------------
 1010|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (1010:9): [True: 0, False: 2.59M]
  ------------------
 1011|      0|            return arg_type_category::floating;
 1012|       |
 1013|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (1013:9): [True: 0, False: 2.59M]
  ------------------
 1014|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (1014:9): [True: 0, False: 2.59M]
  ------------------
 1015|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (1015:9): [True: 0, False: 2.59M]
  ------------------
 1016|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (1016:9): [True: 0, False: 2.59M]
  ------------------
 1017|      0|            return arg_type_category::string;
 1018|       |
 1019|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (1019:9): [True: 0, False: 2.59M]
  ------------------
 1020|      0|            return arg_type_category::custom;
 1021|       |
 1022|      0|            SCN_CLANG_PUSH
 1023|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 1024|      0|        default:
  ------------------
  |  Branch (1024:9): [True: 0, False: 2.59M]
  ------------------
 1025|      0|            SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1026|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1027|  2.59M|            SCN_CLANG_POP
 1028|  2.59M|    }
 1029|       |
 1030|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1031|  2.59M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  4.77M|{
  962|  4.77M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  4.77M|    handler.check_args_exhausted();
  964|  4.77M|    return handler.get_error();
  965|  4.77M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  4.77M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  4.77M|    auto begin = format.data();
  931|  4.77M|    auto it = begin;
  932|  4.77M|    const auto end = format.data() + format.size();
  933|       |
  934|  9.26M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 4.77M, False: 4.48M]
  ------------------
  935|  4.77M|        const auto ch = *it++;
  936|  4.77M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 4.77M, False: 0]
  ------------------
  937|  4.77M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  4.77M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  4.77M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 294k, False: 4.48M]
  ------------------
  941|   294k|                return;
  942|   294k|            }
  943|  4.77M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  4.77M|    }
  954|       |
  955|  4.48M|    handler.on_literal_text(begin, end);
  956|  4.48M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
  859|  4.77M|{
  860|  4.77M|    struct id_adapter {
  861|  4.77M|        constexpr void operator()()
  862|  4.77M|        {
  863|  4.77M|            arg_id = handler.on_arg_id();
  864|  4.77M|        }
  865|  4.77M|        constexpr void operator()(std::size_t id)
  866|  4.77M|        {
  867|  4.77M|            arg_id = handler.on_arg_id(id);
  868|  4.77M|        }
  869|       |
  870|  4.77M|        constexpr void on_error(const char* msg)
  871|  4.77M|        {
  872|  4.77M|            SCN_UNLIKELY_ATTR
  873|  4.77M|            handler.on_error(msg);
  874|  4.77M|        }
  875|       |
  876|  4.77M|        Handler& handler;
  877|  4.77M|        std::size_t arg_id;
  878|  4.77M|    };
  879|       |
  880|  4.77M|    ++begin;
  881|  4.77M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.77M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  4.77M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 4.77M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  4.77M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 4.77M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  4.77M|    else {
  893|  4.77M|        auto adapter = id_adapter{handler, 0};
  894|  4.77M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  4.77M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.77M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  4.77M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 4.77M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  4.77M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 4.77M, False: 0]
  ------------------
  905|  4.77M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  4.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.77M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  4.77M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  4.77M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  9.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 98.0k, False: 4.67M]
  |  |  |  Branch (153:45): [True: 0, False: 4.77M]
  |  |  |  Branch (153:45): [True: 98.0k, False: 4.67M]
  |  |  ------------------
  ------------------
  911|  98.0k|                handler.on_error("Unknown format specifier");
  912|  98.0k|                return begin;
  913|  98.0k|            }
  914|  4.77M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  4.77M|    }
  921|  4.67M|    return begin + 1;
  922|  4.77M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  4.77M|{
  400|  4.77M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  4.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  4.77M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 4.77M, False: 0]
  |  Branch (401:26): [True: 0, False: 4.77M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  4.77M|    handler();
  406|  4.77M|    return begin;
  407|  4.77M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  4.77M|        {
  863|  4.77M|            arg_id = handler.on_arg_id();
  864|  4.77M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  4.77M|    {
 1040|  4.77M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  4.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  4.77M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  788|  4.77M|{
  789|  4.77M|    auto do_presentation = [&]() -> const CharT* {
  790|  4.77M|        if (*begin == CharT{'['}) {
  791|  4.77M|            auto set = parse_presentation_set(begin, end, handler);
  792|  4.77M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  4.77M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  4.77M|                return begin;
  797|  4.77M|            }
  798|  4.77M|            handler.on_character_set_string(set);
  799|  4.77M|            return begin;
  800|  4.77M|        }
  801|  4.77M|        if (*begin == CharT{'/'}) {
  802|  4.77M|            return parse_presentation_regex(begin, end, handler);
  803|  4.77M|        }
  804|  4.77M|        presentation_type type = parse_presentation_type(*begin++);
  805|  4.77M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  4.77M|            handler.on_error("Invalid type specifier in format string");
  807|  4.77M|            return begin;
  808|  4.77M|        }
  809|  4.77M|        handler.on_type(type);
  810|  4.77M|        return begin;
  811|  4.77M|    };
  812|       |
  813|  4.77M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 4.77M, False: 0]
  |  Branch (813:28): [True: 4.71M, False: 65.3k]
  ------------------
  814|  4.77M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 4.67M, False: 32.6k]
  |  Branch (814:36): [True: 3.41M, False: 1.26M]
  ------------------
  815|  3.41M|        return do_presentation();
  816|  3.41M|    }
  817|       |
  818|  1.36M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  1.36M|    begin = parse_align(begin, end, handler);
  824|  1.36M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  1.36M|    begin = parse_width(begin, end, handler);
  830|  1.36M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  1.36M|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 1.26M, False: 98.0k]
  ------------------
  836|  1.26M|        handler.on_localized();
  837|  1.26M|        ++begin;
  838|  1.26M|    }
  839|  1.36M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  1.36M|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 1.36M, False: 0]
  |  Branch (844:25): [True: 98.0k, False: 1.26M]
  ------------------
  845|  98.0k|        do_presentation();
  846|  98.0k|    }
  847|  1.36M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  1.36M|    return begin;
  853|  1.36M|}
_ZN3scn2v26detail15is_ascii_letterIcEEbT_:
  463|  4.97M|{
  464|  4.97M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 3.60M, False: 1.36M]
  |  Branch (464:33): [True: 3.60M, False: 0]
  ------------------
  465|  4.97M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 1.29M, False: 65.3k]
  |  Branch (465:33): [True: 1.29M, False: 0]
  ------------------
  466|  4.97M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  3.51M|    auto do_presentation = [&]() -> const CharT* {
  790|  3.51M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 3.51M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  3.51M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 3.51M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  3.51M|        presentation_type type = parse_presentation_type(*begin++);
  805|  3.51M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  3.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 65.3k, False: 3.44M]
  |  |  ------------------
  ------------------
  806|  65.3k|            handler.on_error("Invalid type specifier in format string");
  807|  65.3k|            return begin;
  808|  65.3k|        }
  809|  3.44M|        handler.on_type(type);
  810|  3.44M|        return begin;
  811|  3.51M|    };
_ZN3scn2v26detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
  411|  3.80M|{
  412|  3.80M|    switch (type) {
  413|   141k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 141k, False: 3.66M]
  ------------------
  414|   206k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 65.3k, False: 3.74M]
  ------------------
  415|   206k|            return presentation_type::int_binary;
  416|   937k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 937k, False: 2.86M]
  ------------------
  417|   937k|            return presentation_type::int_decimal;
  418|  1.30M|        case 'i':
  ------------------
  |  Branch (418:9): [True: 1.30M, False: 2.50M]
  ------------------
  419|  1.30M|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 3.80M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   307k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 307k, False: 3.49M]
  ------------------
  423|   307k|            return presentation_type::int_octal;
  424|   924k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 924k, False: 2.88M]
  ------------------
  425|   924k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 3.80M]
  ------------------
  426|   924k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 3.80M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 3.80M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 3.80M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 3.80M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 3.80M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 3.80M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 3.80M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 3.80M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 3.80M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 3.80M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 3.80M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 3.80M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 3.80M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 3.80M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 3.80M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 3.80M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   130k|        default:
  ------------------
  |  Branch (456:9): [True: 130k, False: 3.67M]
  ------------------
  457|   130k|            return presentation_type::none;
  458|  3.80M|    }
  459|  3.80M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  488|  1.36M|{
  489|  1.36M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  1.36M|        switch (ch) {
  493|  1.36M|            case L'<':
  494|  1.36M|                return align_type::left;
  495|  1.36M|            case L'>':
  496|  1.36M|                return align_type::right;
  497|  1.36M|            case L'^':
  498|  1.36M|                return align_type::center;
  499|  1.36M|            default:
  500|  1.36M|                return align_type::none;
  501|  1.36M|        }
  502|  1.36M|    };
  503|       |
  504|  1.36M|    auto potential_fill_len = code_point_length(begin, end);
  505|  1.36M|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  2.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.36M]
  |  |  |  Branch (153:45): [True: 0, False: 1.36M]
  |  |  |  Branch (153:45): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
  506|  1.36M|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  1.36M|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  1.36M|    auto potential_fill = std::basic_string_view<CharT>{
  514|  1.36M|        begin, static_cast<size_t>(potential_fill_len)};
  515|  1.36M|    const auto begin_before_fill = begin;
  516|  1.36M|    begin += potential_fill_len;
  517|       |
  518|  1.36M|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 1.36M]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  1.36M|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  1.36M|    const auto begin_after_fill = begin;
  524|  1.36M|    ++begin;
  525|       |
  526|  1.36M|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 1.36M, False: 0]
  ------------------
  527|  1.36M|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.36M]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  1.36M|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 1.36M]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  1.36M|    }
  535|       |
  536|  1.36M|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 1.36M, False: 0]
  ------------------
  537|  1.36M|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 1.36M]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  1.36M|        return begin_before_fill;
  542|  1.36M|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  1.36M|}
_ZN3scn2v26detail17code_point_lengthIcEEiPKT_S5_:
  470|  1.49M|{
  471|  1.49M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.49M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.49M|        return 1;
  474|  1.49M|    }
  475|  1.49M|    else {
  476|  1.49M|        const auto lengths =
  477|  1.49M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.49M|            "\3\4";
  479|  1.49M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.49M|        return len;
  481|  1.49M|    }
  482|  1.49M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  2.72M|    auto check_align = [](wchar_t ch) {
  492|  2.72M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 2.72M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 2.72M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 2.72M]
  ------------------
  498|      0|                return align_type::center;
  499|  2.72M|            default:
  ------------------
  |  Branch (499:13): [True: 2.72M, False: 0]
  ------------------
  500|  2.72M|                return align_type::none;
  501|  2.72M|        }
  502|  2.72M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
  553|  1.36M|{
  554|  1.36M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  1.36M|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 1.29M, False: 65.3k]
  |  Branch (556:33): [True: 0, False: 1.29M]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  1.36M|    return begin;
  567|  1.36M|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 1044|  1.26M|    {
 1045|  1.26M|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  1.26M|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 572k, False: 693k]
  ------------------
 1047|  1.26M|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 572k]
  ------------------
 1048|  1.26M|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  1.26M|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  1.26M|        Handler::on_localized();
 1057|  1.26M|    }
_ZN3scn2v26detail20check_int_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 1066|  10.1M|{
 1067|  10.1M|    if (SCN_UNLIKELY(specs.type > presentation_type::int_hex)) {
  ------------------
  |  |  153|  10.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 10.1M]
  |  |  ------------------
  ------------------
 1068|      0|        return handler.on_error("Invalid type specifier for integer type");
 1069|      0|    }
 1070|  10.1M|    if (specs.localized) {
  ------------------
  |  Branch (1070:9): [True: 2.59M, False: 7.55M]
  ------------------
 1071|  2.59M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_binary)) {
  ------------------
  |  |  153|  2.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.59M]
  |  |  ------------------
  ------------------
 1072|       |            // clang-format off
 1073|      0|            handler.on_error("'b'/'B' specifier not supported for localized integers");
 1074|       |            // clang-format on
 1075|      0|            return;
 1076|      0|        }
 1077|  2.59M|        if (SCN_UNLIKELY(specs.type == presentation_type::int_arbitrary_base)) {
  ------------------
  |  |  153|  2.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 2.59M]
  |  |  ------------------
  ------------------
 1078|       |            // clang-format off
 1079|      0|            return handler.on_error("Arbitrary bases not supported for localized integers");
 1080|       |            // clang-format on
 1081|      0|        }
 1082|  2.59M|    }
 1083|  10.1M|}
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|   326k|{
  962|   326k|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|   326k|    handler.check_args_exhausted();
  964|   326k|    return handler.get_error();
  965|   326k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|   326k|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|   326k|    auto begin = format.data();
  931|   326k|    auto it = begin;
  932|   326k|    const auto end = format.data() + format.size();
  933|       |
  934|   359k|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 326k, False: 32.6k]
  ------------------
  935|   326k|        const auto ch = *it++;
  936|   326k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 326k, False: 0]
  ------------------
  937|   326k|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|   326k|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|   326k|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 294k, False: 32.6k]
  ------------------
  941|   294k|                return;
  942|   294k|            }
  943|   326k|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|   326k|    }
  954|       |
  955|  32.6k|    handler.on_literal_text(begin, end);
  956|  32.6k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
  859|   326k|{
  860|   326k|    struct id_adapter {
  861|   326k|        constexpr void operator()()
  862|   326k|        {
  863|   326k|            arg_id = handler.on_arg_id();
  864|   326k|        }
  865|   326k|        constexpr void operator()(std::size_t id)
  866|   326k|        {
  867|   326k|            arg_id = handler.on_arg_id(id);
  868|   326k|        }
  869|       |
  870|   326k|        constexpr void on_error(const char* msg)
  871|   326k|        {
  872|   326k|            SCN_UNLIKELY_ATTR
  873|   326k|            handler.on_error(msg);
  874|   326k|        }
  875|       |
  876|   326k|        Handler& handler;
  877|   326k|        std::size_t arg_id;
  878|   326k|    };
  879|       |
  880|   326k|    ++begin;
  881|   326k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 326k]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|   326k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 326k]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|   326k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 326k]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|   326k|    else {
  893|   326k|        auto adapter = id_adapter{handler, 0};
  894|   326k|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|   326k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 326k]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|   326k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 326k]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|   326k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 326k, False: 0]
  ------------------
  905|   326k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 326k]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|   326k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|   326k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|   653k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 98.0k, False: 228k]
  |  |  |  Branch (153:45): [True: 0, False: 326k]
  |  |  |  Branch (153:45): [True: 98.0k, False: 228k]
  |  |  ------------------
  ------------------
  911|  98.0k|                handler.on_error("Unknown format specifier");
  912|  98.0k|                return begin;
  913|  98.0k|            }
  914|   326k|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|   326k|    }
  921|   228k|    return begin + 1;
  922|   326k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   326k|{
  400|   326k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   326k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   326k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   326k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 326k, False: 0]
  |  Branch (401:26): [True: 0, False: 326k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   326k|    handler();
  406|   326k|    return begin;
  407|   326k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|   326k|        {
  863|   326k|            arg_id = handler.on_arg_id();
  864|   326k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|   326k|    {
 1040|   326k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   326k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   326k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|   326k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  788|   326k|{
  789|   326k|    auto do_presentation = [&]() -> const CharT* {
  790|   326k|        if (*begin == CharT{'['}) {
  791|   326k|            auto set = parse_presentation_set(begin, end, handler);
  792|   326k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|   326k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|   326k|                return begin;
  797|   326k|            }
  798|   326k|            handler.on_character_set_string(set);
  799|   326k|            return begin;
  800|   326k|        }
  801|   326k|        if (*begin == CharT{'/'}) {
  802|   326k|            return parse_presentation_regex(begin, end, handler);
  803|   326k|        }
  804|   326k|        presentation_type type = parse_presentation_type(*begin++);
  805|   326k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|   326k|            handler.on_error("Invalid type specifier in format string");
  807|   326k|            return begin;
  808|   326k|        }
  809|   326k|        handler.on_type(type);
  810|   326k|        return begin;
  811|   326k|    };
  812|       |
  813|   326k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 326k, False: 0]
  |  Branch (813:28): [True: 261k, False: 65.3k]
  ------------------
  814|   326k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 228k, False: 32.6k]
  |  Branch (814:36): [True: 196k, False: 32.6k]
  ------------------
  815|   196k|        return do_presentation();
  816|   196k|    }
  817|       |
  818|   130k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|   130k|    begin = parse_align(begin, end, handler);
  824|   130k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   130k|    begin = parse_width(begin, end, handler);
  830|   130k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   130k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 32.6k, False: 98.0k]
  ------------------
  836|  32.6k|        handler.on_localized();
  837|  32.6k|        ++begin;
  838|  32.6k|    }
  839|   130k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|   130k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 130k, False: 0]
  |  Branch (844:25): [True: 98.0k, False: 32.6k]
  ------------------
  845|  98.0k|        do_presentation();
  846|  98.0k|    }
  847|   130k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|   130k|    return begin;
  853|   130k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|   294k|    auto do_presentation = [&]() -> const CharT* {
  790|   294k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 294k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|   294k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 294k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|   294k|        presentation_type type = parse_presentation_type(*begin++);
  805|   294k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 65.3k, False: 228k]
  |  |  ------------------
  ------------------
  806|  65.3k|            handler.on_error("Invalid type specifier in format string");
  807|  65.3k|            return begin;
  808|  65.3k|        }
  809|   228k|        handler.on_type(type);
  810|   228k|        return begin;
  811|   294k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  488|   130k|{
  489|   130k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   130k|        switch (ch) {
  493|   130k|            case L'<':
  494|   130k|                return align_type::left;
  495|   130k|            case L'>':
  496|   130k|                return align_type::right;
  497|   130k|            case L'^':
  498|   130k|                return align_type::center;
  499|   130k|            default:
  500|   130k|                return align_type::none;
  501|   130k|        }
  502|   130k|    };
  503|       |
  504|   130k|    auto potential_fill_len = code_point_length(begin, end);
  505|   130k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 130k]
  |  |  |  Branch (153:45): [True: 0, False: 130k]
  |  |  |  Branch (153:45): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
  506|   130k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   130k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   130k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   130k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   130k|    const auto begin_before_fill = begin;
  516|   130k|    begin += potential_fill_len;
  517|       |
  518|   130k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 130k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   130k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   130k|    const auto begin_after_fill = begin;
  524|   130k|    ++begin;
  525|       |
  526|   130k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 130k, False: 0]
  ------------------
  527|   130k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 130k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   130k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 130k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   130k|    }
  535|       |
  536|   130k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 130k, False: 0]
  ------------------
  537|   130k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 130k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   130k|        return begin_before_fill;
  542|   130k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   130k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   261k|    auto check_align = [](wchar_t ch) {
  492|   261k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 261k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 261k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 261k]
  ------------------
  498|      0|                return align_type::center;
  499|   261k|            default:
  ------------------
  |  Branch (499:13): [True: 261k, False: 0]
  ------------------
  500|   261k|                return align_type::none;
  501|   261k|        }
  502|   261k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
  553|   130k|{
  554|   130k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   130k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 65.3k, False: 65.3k]
  |  Branch (556:33): [True: 0, False: 65.3k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   130k|    return begin;
  567|   130k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 1044|  32.6k|    {
 1045|  32.6k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  32.6k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 16.3k, False: 16.3k]
  ------------------
 1047|  32.6k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 16.3k]
  ------------------
 1048|  32.6k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  32.6k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  32.6k|        Handler::on_localized();
 1057|  32.6k|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|  4.88M|{
  962|  4.88M|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|  4.88M|    handler.check_args_exhausted();
  964|  4.88M|    return handler.get_error();
  965|  4.88M|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|  4.88M|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|  4.88M|    auto begin = format.data();
  931|  4.88M|    auto it = begin;
  932|  4.88M|    const auto end = format.data() + format.size();
  933|       |
  934|  8.89M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 4.88M, False: 4.00M]
  ------------------
  935|  4.88M|        const auto ch = *it++;
  936|  4.88M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 4.88M, False: 0]
  ------------------
  937|  4.88M|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|  4.88M|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|  4.88M|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 882k, False: 4.00M]
  ------------------
  941|   882k|                return;
  942|   882k|            }
  943|  4.88M|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|  4.88M|    }
  954|       |
  955|  4.00M|    handler.on_literal_text(begin, end);
  956|  4.00M|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
  859|  4.88M|{
  860|  4.88M|    struct id_adapter {
  861|  4.88M|        constexpr void operator()()
  862|  4.88M|        {
  863|  4.88M|            arg_id = handler.on_arg_id();
  864|  4.88M|        }
  865|  4.88M|        constexpr void operator()(std::size_t id)
  866|  4.88M|        {
  867|  4.88M|            arg_id = handler.on_arg_id(id);
  868|  4.88M|        }
  869|       |
  870|  4.88M|        constexpr void on_error(const char* msg)
  871|  4.88M|        {
  872|  4.88M|            SCN_UNLIKELY_ATTR
  873|  4.88M|            handler.on_error(msg);
  874|  4.88M|        }
  875|       |
  876|  4.88M|        Handler& handler;
  877|  4.88M|        std::size_t arg_id;
  878|  4.88M|    };
  879|       |
  880|  4.88M|    ++begin;
  881|  4.88M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.88M]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|  4.88M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 4.88M]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|  4.88M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 4.88M]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|  4.88M|    else {
  893|  4.88M|        auto adapter = id_adapter{handler, 0};
  894|  4.88M|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|  4.88M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  4.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.88M]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|  4.88M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 4.88M]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|  4.88M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 4.88M, False: 0]
  ------------------
  905|  4.88M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|  4.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.88M]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|  4.88M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|  4.88M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  9.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 294k, False: 4.59M]
  |  |  |  Branch (153:45): [True: 0, False: 4.88M]
  |  |  |  Branch (153:45): [True: 294k, False: 4.59M]
  |  |  ------------------
  ------------------
  911|   294k|                handler.on_error("Unknown format specifier");
  912|   294k|                return begin;
  913|   294k|            }
  914|  4.88M|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|  4.88M|    }
  921|  4.59M|    return begin + 1;
  922|  4.88M|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|  4.88M|{
  400|  4.88M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  4.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|  4.88M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 4.88M, False: 0]
  |  Branch (401:26): [True: 0, False: 4.88M]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|  4.88M|    handler();
  406|  4.88M|    return begin;
  407|  4.88M|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|  4.88M|        {
  863|  4.88M|            arg_id = handler.on_arg_id();
  864|  4.88M|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 1039|  4.88M|    {
 1040|  4.88M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|  4.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|  4.88M|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  788|  4.88M|{
  789|  4.88M|    auto do_presentation = [&]() -> const CharT* {
  790|  4.88M|        if (*begin == CharT{'['}) {
  791|  4.88M|            auto set = parse_presentation_set(begin, end, handler);
  792|  4.88M|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|  4.88M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|  4.88M|                return begin;
  797|  4.88M|            }
  798|  4.88M|            handler.on_character_set_string(set);
  799|  4.88M|            return begin;
  800|  4.88M|        }
  801|  4.88M|        if (*begin == CharT{'/'}) {
  802|  4.88M|            return parse_presentation_regex(begin, end, handler);
  803|  4.88M|        }
  804|  4.88M|        presentation_type type = parse_presentation_type(*begin++);
  805|  4.88M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|  4.88M|            handler.on_error("Invalid type specifier in format string");
  807|  4.88M|            return begin;
  808|  4.88M|        }
  809|  4.88M|        handler.on_type(type);
  810|  4.88M|        return begin;
  811|  4.88M|    };
  812|       |
  813|  4.88M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 4.88M, False: 0]
  |  Branch (813:28): [True: 4.69M, False: 196k]
  ------------------
  814|  4.88M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 4.59M, False: 98.0k]
  |  Branch (814:36): [True: 3.39M, False: 1.20M]
  ------------------
  815|  3.39M|        return do_presentation();
  816|  3.39M|    }
  817|       |
  818|  1.49M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.49M]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|  1.49M|    begin = parse_align(begin, end, handler);
  824|  1.49M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.49M]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|  1.49M|    begin = parse_width(begin, end, handler);
  830|  1.49M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.49M]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|  1.49M|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 1.20M, False: 294k]
  ------------------
  836|  1.20M|        handler.on_localized();
  837|  1.20M|        ++begin;
  838|  1.20M|    }
  839|  1.49M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.49M]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|  1.49M|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 1.49M, False: 0]
  |  Branch (844:25): [True: 294k, False: 1.20M]
  ------------------
  845|   294k|        do_presentation();
  846|   294k|    }
  847|  1.49M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.49M]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|  1.49M|    return begin;
  853|  1.49M|}
_ZN3scn2v26detail15is_ascii_letterIwEEbT_:
  463|  5.44M|{
  464|  5.44M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (464:13): [True: 3.94M, False: 1.49M]
  |  Branch (464:33): [True: 3.94M, False: 0]
  ------------------
  465|  5.44M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (465:13): [True: 1.29M, False: 196k]
  |  Branch (465:33): [True: 1.29M, False: 0]
  ------------------
  466|  5.44M|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
  789|  3.68M|    auto do_presentation = [&]() -> const CharT* {
  790|  3.68M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 3.68M]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|  3.68M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 3.68M]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|  3.68M|        presentation_type type = parse_presentation_type(*begin++);
  805|  3.68M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|  3.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 196k, False: 3.48M]
  |  |  ------------------
  ------------------
  806|   196k|            handler.on_error("Invalid type specifier in format string");
  807|   196k|            return begin;
  808|   196k|        }
  809|  3.48M|        handler.on_type(type);
  810|  3.48M|        return begin;
  811|  3.68M|    };
_ZN3scn2v26detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
  411|  4.53M|{
  412|  4.53M|    switch (type) {
  413|   265k|        case 'b':
  ------------------
  |  Branch (413:9): [True: 265k, False: 4.27M]
  ------------------
  414|   461k|        case 'B':
  ------------------
  |  Branch (414:9): [True: 196k, False: 4.33M]
  ------------------
  415|   461k|            return presentation_type::int_binary;
  416|   974k|        case 'd':
  ------------------
  |  Branch (416:9): [True: 974k, False: 3.56M]
  ------------------
  417|   974k|            return presentation_type::int_decimal;
  418|  1.30M|        case 'i':
  ------------------
  |  Branch (418:9): [True: 1.30M, False: 3.23M]
  ------------------
  419|  1.30M|            return presentation_type::int_generic;
  420|      0|        case 'u':
  ------------------
  |  Branch (420:9): [True: 0, False: 4.53M]
  ------------------
  421|      0|            return presentation_type::int_unsigned_decimal;
  422|   407k|        case 'o':
  ------------------
  |  Branch (422:9): [True: 407k, False: 4.12M]
  ------------------
  423|   407k|            return presentation_type::int_octal;
  424|   999k|        case 'x':
  ------------------
  |  Branch (424:9): [True: 999k, False: 3.53M]
  ------------------
  425|   999k|        case 'X':
  ------------------
  |  Branch (425:9): [True: 0, False: 4.53M]
  ------------------
  426|   999k|            return presentation_type::int_hex;
  427|      0|        case 'r':
  ------------------
  |  Branch (427:9): [True: 0, False: 4.53M]
  ------------------
  428|      0|        case 'R':
  ------------------
  |  Branch (428:9): [True: 0, False: 4.53M]
  ------------------
  429|      0|            return presentation_type::int_arbitrary_base;
  430|      0|        case 'a':
  ------------------
  |  Branch (430:9): [True: 0, False: 4.53M]
  ------------------
  431|      0|        case 'A':
  ------------------
  |  Branch (431:9): [True: 0, False: 4.53M]
  ------------------
  432|      0|            return presentation_type::float_hex;
  433|      0|        case 'e':
  ------------------
  |  Branch (433:9): [True: 0, False: 4.53M]
  ------------------
  434|      0|        case 'E':
  ------------------
  |  Branch (434:9): [True: 0, False: 4.53M]
  ------------------
  435|      0|            return presentation_type::float_scientific;
  436|      0|        case 'f':
  ------------------
  |  Branch (436:9): [True: 0, False: 4.53M]
  ------------------
  437|      0|        case 'F':
  ------------------
  |  Branch (437:9): [True: 0, False: 4.53M]
  ------------------
  438|      0|            return presentation_type::float_fixed;
  439|      0|        case 'g':
  ------------------
  |  Branch (439:9): [True: 0, False: 4.53M]
  ------------------
  440|      0|        case 'G':
  ------------------
  |  Branch (440:9): [True: 0, False: 4.53M]
  ------------------
  441|      0|            return presentation_type::float_general;
  442|      0|        case 's':
  ------------------
  |  Branch (442:9): [True: 0, False: 4.53M]
  ------------------
  443|      0|            return presentation_type::string;
  444|      0|        case 'c':
  ------------------
  |  Branch (444:9): [True: 0, False: 4.53M]
  ------------------
  445|      0|            return presentation_type::character;
  446|      0|        case '?':
  ------------------
  |  Branch (446:9): [True: 0, False: 4.53M]
  ------------------
  447|      0|            return presentation_type::escaped_character;
  448|      0|        case 'p':
  ------------------
  |  Branch (448:9): [True: 0, False: 4.53M]
  ------------------
  449|      0|            return presentation_type::pointer;
  450|      0|        case '[':
  ------------------
  |  Branch (450:9): [True: 0, False: 4.53M]
  ------------------
  451|      0|        case '/':
  ------------------
  |  Branch (451:9): [True: 0, False: 4.53M]
  ------------------
  452|       |            // Should be handled by parse_presentation_set and
  453|       |            // parse_presentation_regex
  454|      0|            SCN_EXPECT(false);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  456|   392k|        default:
  ------------------
  |  Branch (456:9): [True: 392k, False: 4.14M]
  ------------------
  457|   392k|            return presentation_type::none;
  458|  4.53M|    }
  459|  4.53M|}
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  488|  1.49M|{
  489|  1.49M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|  1.49M|        switch (ch) {
  493|  1.49M|            case L'<':
  494|  1.49M|                return align_type::left;
  495|  1.49M|            case L'>':
  496|  1.49M|                return align_type::right;
  497|  1.49M|            case L'^':
  498|  1.49M|                return align_type::center;
  499|  1.49M|            default:
  500|  1.49M|                return align_type::none;
  501|  1.49M|        }
  502|  1.49M|    };
  503|       |
  504|  1.49M|    auto potential_fill_len = code_point_length(begin, end);
  505|  1.49M|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|  2.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.49M]
  |  |  |  Branch (153:45): [True: 0, False: 1.49M]
  |  |  |  Branch (153:45): [True: 0, False: 1.49M]
  |  |  ------------------
  ------------------
  506|  1.49M|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|  1.49M|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|  1.49M|    auto potential_fill = std::basic_string_view<CharT>{
  514|  1.49M|        begin, static_cast<size_t>(potential_fill_len)};
  515|  1.49M|    const auto begin_before_fill = begin;
  516|  1.49M|    begin += potential_fill_len;
  517|       |
  518|  1.49M|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 1.49M]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|  1.49M|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|  1.49M|    const auto begin_after_fill = begin;
  524|  1.49M|    ++begin;
  525|       |
  526|  1.49M|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 1.49M, False: 0]
  ------------------
  527|  1.49M|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.49M]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|  1.49M|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 1.49M]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|  1.49M|    }
  535|       |
  536|  1.49M|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 1.49M, False: 0]
  ------------------
  537|  1.49M|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 1.49M]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|  1.49M|        return begin_before_fill;
  542|  1.49M|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|  1.49M|}
_ZN3scn2v26detail17code_point_lengthIwEEiPKT_S5_:
  470|  1.88M|{
  471|  1.88M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  472|  1.88M|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (472:19): [Folded - Ignored]
  ------------------
  473|  1.88M|        return 1;
  474|  1.88M|    }
  475|  1.88M|    else {
  476|  1.88M|        const auto lengths =
  477|  1.88M|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
  478|  1.88M|            "\3\4";
  479|  1.88M|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
  480|  1.88M|        return len;
  481|  1.88M|    }
  482|  1.88M|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
  491|  2.99M|    auto check_align = [](wchar_t ch) {
  492|  2.99M|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 2.99M]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 2.99M]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 2.99M]
  ------------------
  498|      0|                return align_type::center;
  499|  2.99M|            default:
  ------------------
  |  Branch (499:13): [True: 2.99M, False: 0]
  ------------------
  500|  2.99M|                return align_type::none;
  501|  2.99M|        }
  502|  2.99M|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
  553|  1.49M|{
  554|  1.49M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|  1.49M|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 1.29M, False: 196k]
  |  Branch (556:33): [True: 0, False: 1.29M]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|  1.49M|    return begin;
  567|  1.49M|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 1044|  1.20M|    {
 1045|  1.20M|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  1.20M|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 546k, False: 655k]
  ------------------
 1047|  1.20M|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 546k]
  ------------------
 1048|  1.20M|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  1.20M|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  1.20M|        Handler::on_localized();
 1057|  1.20M|    }
vscan.cpp:_ZN3scn2v26detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
  961|   947k|{
  962|   947k|    parse_format_string_impl<IsConstexpr>(format, handler);
  963|   947k|    handler.check_args_exhausted();
  964|   947k|    return handler.get_error();
  965|   947k|}
vscan.cpp:_ZN3scn2v26detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
  927|   947k|{
  928|       |    // TODO: memchr fast path with a larger (> 32) format string
  929|       |
  930|   947k|    auto begin = format.data();
  931|   947k|    auto it = begin;
  932|   947k|    const auto end = format.data() + format.size();
  933|       |
  934|  1.01M|    while (it != end) {
  ------------------
  |  Branch (934:12): [True: 947k, False: 65.3k]
  ------------------
  935|   947k|        const auto ch = *it++;
  936|   947k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (936:13): [True: 947k, False: 0]
  ------------------
  937|   947k|            handler.on_literal_text(begin, it - 1);
  938|       |
  939|   947k|            begin = it = parse_replacement_field(it - 1, end, handler);
  940|   947k|            if (!handler) {
  ------------------
  |  Branch (940:17): [True: 882k, False: 65.3k]
  ------------------
  941|   882k|                return;
  942|   882k|            }
  943|   947k|        }
  944|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (944:18): [True: 0, False: 0]
  ------------------
  945|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  |  Branch (153:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  946|      0|                handler.on_error("Unmatched '}' in format string");
  947|      0|                return;
  948|      0|            }
  949|       |
  950|      0|            handler.on_literal_text(begin, it);
  951|      0|            begin = ++it;
  952|      0|        }
  953|   947k|    }
  954|       |
  955|  65.3k|    handler.on_literal_text(begin, end);
  956|  65.3k|}
vscan.cpp:_ZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
  859|   947k|{
  860|   947k|    struct id_adapter {
  861|   947k|        constexpr void operator()()
  862|   947k|        {
  863|   947k|            arg_id = handler.on_arg_id();
  864|   947k|        }
  865|   947k|        constexpr void operator()(std::size_t id)
  866|   947k|        {
  867|   947k|            arg_id = handler.on_arg_id(id);
  868|   947k|        }
  869|       |
  870|   947k|        constexpr void on_error(const char* msg)
  871|   947k|        {
  872|   947k|            SCN_UNLIKELY_ATTR
  873|   947k|            handler.on_error(msg);
  874|   947k|        }
  875|       |
  876|   947k|        Handler& handler;
  877|   947k|        std::size_t arg_id;
  878|   947k|    };
  879|       |
  880|   947k|    ++begin;
  881|   947k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   947k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 947k]
  |  |  ------------------
  ------------------
  882|      0|        handler.on_error("Unexpected end of replacement field");
  883|      0|        return begin;
  884|      0|    }
  885|       |
  886|   947k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (886:9): [True: 0, False: 947k]
  ------------------
  887|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
  888|      0|    }
  889|   947k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (889:14): [True: 0, False: 947k]
  ------------------
  890|      0|        handler.on_literal_text(begin, begin + 1);
  891|      0|    }
  892|   947k|    else {
  893|   947k|        auto adapter = id_adapter{handler, 0};
  894|   947k|        begin = parse_arg_id(begin, end, adapter);
  895|       |
  896|   947k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   947k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 947k]
  |  |  ------------------
  ------------------
  897|      0|            handler.on_error("Missing '}' in format string");
  898|      0|            return begin;
  899|      0|        }
  900|       |
  901|   947k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (901:13): [True: 0, False: 947k]
  ------------------
  902|      0|            handler.on_replacement_field(adapter.arg_id, begin);
  903|      0|        }
  904|   947k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (904:18): [True: 947k, False: 0]
  ------------------
  905|   947k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  153|   947k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 947k]
  |  |  ------------------
  ------------------
  906|      0|                handler.on_error("Unexpected end of replacement field");
  907|      0|                return begin;
  908|      0|            }
  909|   947k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
  910|   947k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  153|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 294k, False: 653k]
  |  |  |  Branch (153:45): [True: 0, False: 947k]
  |  |  |  Branch (153:45): [True: 294k, False: 653k]
  |  |  ------------------
  ------------------
  911|   294k|                handler.on_error("Unknown format specifier");
  912|   294k|                return begin;
  913|   294k|            }
  914|   947k|        }
  915|      0|        else {
  916|      0|            SCN_UNLIKELY_ATTR
  917|      0|            handler.on_error("Missing '}' in format string");
  918|      0|            return begin;
  919|      0|        }
  920|   947k|    }
  921|   653k|    return begin + 1;
  922|   947k|}
vscan.cpp:_ZN3scn2v26detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
  399|   947k|{
  400|   947k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   947k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   947k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  401|   947k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (401:9): [True: 947k, False: 0]
  |  Branch (401:26): [True: 0, False: 947k]
  ------------------
  402|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  403|      0|    }
  404|       |
  405|   947k|    handler();
  406|   947k|    return begin;
  407|   947k|}
vscan.cpp:_ZZN3scn2v26detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
  862|   947k|        {
  863|   947k|            arg_id = handler.on_arg_id();
  864|   947k|        }
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 1039|   947k|    {
 1040|   947k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  242|   947k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   947k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1041|   947k|    }
vscan.cpp:_ZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  788|   947k|{
  789|   947k|    auto do_presentation = [&]() -> const CharT* {
  790|   947k|        if (*begin == CharT{'['}) {
  791|   947k|            auto set = parse_presentation_set(begin, end, handler);
  792|   947k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  793|       |                // clang-format off
  794|   947k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|   947k|                return begin;
  797|   947k|            }
  798|   947k|            handler.on_character_set_string(set);
  799|   947k|            return begin;
  800|   947k|        }
  801|   947k|        if (*begin == CharT{'/'}) {
  802|   947k|            return parse_presentation_regex(begin, end, handler);
  803|   947k|        }
  804|   947k|        presentation_type type = parse_presentation_type(*begin++);
  805|   947k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  806|   947k|            handler.on_error("Invalid type specifier in format string");
  807|   947k|            return begin;
  808|   947k|        }
  809|   947k|        handler.on_type(type);
  810|   947k|        return begin;
  811|   947k|    };
  812|       |
  813|   947k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (813:9): [True: 947k, False: 0]
  |  Branch (813:28): [True: 751k, False: 196k]
  ------------------
  814|   947k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (814:9): [True: 653k, False: 98.0k]
  |  Branch (814:36): [True: 555k, False: 98.0k]
  ------------------
  815|   555k|        return do_presentation();
  816|   555k|    }
  817|       |
  818|   392k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
  819|      0|        handler.on_error("Unexpected end of format string");
  820|      0|        return begin;
  821|      0|    }
  822|       |
  823|   392k|    begin = parse_align(begin, end, handler);
  824|   392k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
  825|      0|        handler.on_error("Unexpected end of format string");
  826|      0|        return begin;
  827|      0|    }
  828|       |
  829|   392k|    begin = parse_width(begin, end, handler);
  830|   392k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
  831|      0|        handler.on_error("Unexpected end of format string");
  832|      0|        return begin;
  833|      0|    }
  834|       |
  835|   392k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (835:9): [True: 98.0k, False: 294k]
  ------------------
  836|  98.0k|        handler.on_localized();
  837|  98.0k|        ++begin;
  838|  98.0k|    }
  839|   392k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
  840|      0|        handler.on_error("Unexpected end of format string");
  841|      0|        return begin;
  842|      0|    }
  843|       |
  844|   392k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (844:9): [True: 392k, False: 0]
  |  Branch (844:25): [True: 294k, False: 98.0k]
  ------------------
  845|   294k|        do_presentation();
  846|   294k|    }
  847|   392k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  153|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
  848|      0|        handler.on_error("Unexpected end of format string");
  849|      0|        return begin;
  850|      0|    }
  851|       |
  852|   392k|    return begin;
  853|   392k|}
vscan.cpp:_ZZN3scn2v26detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
  789|   849k|    auto do_presentation = [&]() -> const CharT* {
  790|   849k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (790:13): [True: 0, False: 849k]
  ------------------
  791|      0|            auto set = parse_presentation_set(begin, end, handler);
  792|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  793|       |                // clang-format off
  794|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
  795|       |                // clang-format on
  796|      0|                return begin;
  797|      0|            }
  798|      0|            handler.on_character_set_string(set);
  799|      0|            return begin;
  800|      0|        }
  801|   849k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (801:13): [True: 0, False: 849k]
  ------------------
  802|      0|            return parse_presentation_regex(begin, end, handler);
  803|      0|        }
  804|   849k|        presentation_type type = parse_presentation_type(*begin++);
  805|   849k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  153|   849k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 196k, False: 653k]
  |  |  ------------------
  ------------------
  806|   196k|            handler.on_error("Invalid type specifier in format string");
  807|   196k|            return begin;
  808|   196k|        }
  809|   653k|        handler.on_type(type);
  810|   653k|        return begin;
  811|   849k|    };
vscan.cpp:_ZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  488|   392k|{
  489|   392k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  490|       |
  491|      0|    auto check_align = [](wchar_t ch) {
  492|   392k|        switch (ch) {
  493|   392k|            case L'<':
  494|   392k|                return align_type::left;
  495|   392k|            case L'>':
  496|   392k|                return align_type::right;
  497|   392k|            case L'^':
  498|   392k|                return align_type::center;
  499|   392k|            default:
  500|   392k|                return align_type::none;
  501|   392k|        }
  502|   392k|    };
  503|       |
  504|   392k|    auto potential_fill_len = code_point_length(begin, end);
  505|   392k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  153|   784k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 392k]
  |  |  |  Branch (153:45): [True: 0, False: 392k]
  |  |  |  Branch (153:45): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
  506|   392k|                     std::distance(begin, end) < potential_fill_len)) {
  507|      0|        handler.on_error("Invalid encoding in fill character");
  508|      0|        return begin;
  509|      0|    }
  510|       |
  511|   392k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
  512|       |
  513|   392k|    auto potential_fill = std::basic_string_view<CharT>{
  514|   392k|        begin, static_cast<size_t>(potential_fill_len)};
  515|   392k|    const auto begin_before_fill = begin;
  516|   392k|    begin += potential_fill_len;
  517|       |
  518|   392k|    if (begin == end) {
  ------------------
  |  Branch (518:9): [True: 0, False: 392k]
  ------------------
  519|      0|        return begin_before_fill;
  520|      0|    }
  521|       |
  522|   392k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
  523|   392k|    const auto begin_after_fill = begin;
  524|   392k|    ++begin;
  525|       |
  526|   392k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (526:9): [True: 392k, False: 0]
  ------------------
  527|   392k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  153|   392k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 392k]
  |  |  ------------------
  ------------------
  528|      0|            handler.on_error("Invalid fill character '{' in format string");
  529|      0|            return begin;
  530|      0|        }
  531|   392k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (531:13): [True: 0, False: 392k]
  ------------------
  532|      0|            return begin_before_fill;
  533|      0|        }
  534|   392k|    }
  535|       |
  536|   392k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (536:9): [True: 392k, False: 0]
  ------------------
  537|   392k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (537:13): [True: 0, False: 392k]
  ------------------
  538|      0|            handler.on_align(potential_align_on_fill);
  539|      0|            return begin_after_fill;
  540|      0|        }
  541|   392k|        return begin_before_fill;
  542|   392k|    }
  543|       |
  544|      0|    handler.on_fill(potential_fill);
  545|      0|    handler.on_align(potential_align_after_fill);
  546|      0|    return begin;
  547|   392k|}
vscan.cpp:_ZZN3scn2v26detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
  491|   784k|    auto check_align = [](wchar_t ch) {
  492|   784k|        switch (ch) {
  493|      0|            case L'<':
  ------------------
  |  Branch (493:13): [True: 0, False: 784k]
  ------------------
  494|      0|                return align_type::left;
  495|      0|            case L'>':
  ------------------
  |  Branch (495:13): [True: 0, False: 784k]
  ------------------
  496|      0|                return align_type::right;
  497|      0|            case L'^':
  ------------------
  |  Branch (497:13): [True: 0, False: 784k]
  ------------------
  498|      0|                return align_type::center;
  499|   784k|            default:
  ------------------
  |  Branch (499:13): [True: 784k, False: 0]
  ------------------
  500|   784k|                return align_type::none;
  501|   784k|        }
  502|   784k|    };
vscan.cpp:_ZN3scn2v26detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
  553|   392k|{
  554|   392k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  242|   392k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   392k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  555|       |
  556|   392k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (556:9): [True: 196k, False: 196k]
  |  Branch (556:33): [True: 0, False: 196k]
  ------------------
  557|      0|        int width = parse_simple_int(begin, end);
  558|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  152|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  559|      0|            handler.on_width(width);
  560|      0|        }
  561|      0|        else {
  562|      0|            handler.on_error("Invalid field width");
  563|      0|            return begin;
  564|      0|        }
  565|      0|    }
  566|   392k|    return begin;
  567|   392k|}
vscan.cpp:_ZN3scn2v26detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 1044|  98.0k|    {
 1045|  98.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 1046|  98.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (1046:13): [True: 49.0k, False: 49.0k]
  ------------------
 1047|  98.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (1047:13): [True: 0, False: 49.0k]
  ------------------
 1048|  98.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (1048:13): [True: 0, False: 0]
  ------------------
 1049|  98.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (1049:13): [True: 0, False: 0]
  ------------------
 1050|      0|            SCN_UNLIKELY_ATTR
 1051|       |            // clang-format off
 1052|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 1053|       |            // clang-format on
 1054|      0|        }
 1055|       |
 1056|  98.0k|        Handler::on_localized();
 1057|  98.0k|    }

_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  6.67M|{
  226|  6.67M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  6.67M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  6.67M|                  "\n"
  230|  6.67M|                  "Unsupported range type given as input to a scanning "
  231|  6.67M|                  "function.\n"
  232|  6.67M|                  "A range needs to have a character type (value type) "
  233|  6.67M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  6.67M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  6.67M|                  "to be included.\n"
  236|  6.67M|                  "See the scnlib documentation for more details.");
  237|  6.67M|    static_assert(
  238|  6.67M|        !std::is_same_v<T, custom_char_traits>,
  239|  6.67M|        "\n"
  240|  6.67M|        "Unsupported range type given as input to a scanning "
  241|  6.67M|        "function.\n"
  242|  6.67M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  6.67M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  6.67M|        "not supported.");
  245|  6.67M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  6.67M|                  "\n"
  247|  6.67M|                  "Unsupported range type given as input to a scanning "
  248|  6.67M|                  "function.\n"
  249|  6.67M|                  "file_marker_found cannot be used as an "
  250|  6.67M|                  "source range type to scn::scan.\n"
  251|  6.67M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  6.67M|                  "and do not provide an explicit source range, "
  253|  6.67M|                  "or use scn::scan with a FILE* directly.");
  254|  6.67M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  6.67M|                  "\n"
  256|  6.67M|                  "Unsupported range type given as input to a scanning "
  257|  6.67M|                  "function.\n"
  258|  6.67M|                  "In order to be scannable, a range needs to satisfy "
  259|  6.67M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  6.67M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  6.67M|                  "\n"
  262|  6.67M|                  "Unsupported range type given as input to a scanning "
  263|  6.67M|                  "function.\n"
  264|  6.67M|                  "A range needs to model forward_range and have a valid "
  265|  6.67M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  6.67M|                  "Examples of scannable ranges are std::string, "
  267|  6.67M|                  "std::string_view, "
  268|  6.67M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  6.67M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  6.67M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  6.67M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  6.67M|{
  153|  6.67M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  6.67M|        return std::basic_string_view{ranges::data(r),
  155|  6.67M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  6.67M|    }
  162|  6.67M|    else {
  163|  6.67M|        return invalid_char_type{};
  164|  6.67M|    }
  165|  6.67M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|   375k|{
  226|   375k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|   375k|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|   375k|                  "\n"
  230|   375k|                  "Unsupported range type given as input to a scanning "
  231|   375k|                  "function.\n"
  232|   375k|                  "A range needs to have a character type (value type) "
  233|   375k|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|   375k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|   375k|                  "to be included.\n"
  236|   375k|                  "See the scnlib documentation for more details.");
  237|   375k|    static_assert(
  238|   375k|        !std::is_same_v<T, custom_char_traits>,
  239|   375k|        "\n"
  240|   375k|        "Unsupported range type given as input to a scanning "
  241|   375k|        "function.\n"
  242|   375k|        "String types (std::basic_string, and std::basic_string_view) "
  243|   375k|        "need to use std::char_traits. Strings with custom Traits are "
  244|   375k|        "not supported.");
  245|   375k|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|   375k|                  "\n"
  247|   375k|                  "Unsupported range type given as input to a scanning "
  248|   375k|                  "function.\n"
  249|   375k|                  "file_marker_found cannot be used as an "
  250|   375k|                  "source range type to scn::scan.\n"
  251|   375k|                  "To read from stdin, use scn::input or scn::prompt, "
  252|   375k|                  "and do not provide an explicit source range, "
  253|   375k|                  "or use scn::scan with a FILE* directly.");
  254|   375k|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|   375k|                  "\n"
  256|   375k|                  "Unsupported range type given as input to a scanning "
  257|   375k|                  "function.\n"
  258|   375k|                  "In order to be scannable, a range needs to satisfy "
  259|   375k|                  "`forward_range`. `input_range` is not sufficient.");
  260|   375k|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|   375k|                  "\n"
  262|   375k|                  "Unsupported range type given as input to a scanning "
  263|   375k|                  "function.\n"
  264|   375k|                  "A range needs to model forward_range and have a valid "
  265|   375k|                  "character type (char or wchar_t) to be scannable.\n"
  266|   375k|                  "Examples of scannable ranges are std::string, "
  267|   375k|                  "std::string_view, "
  268|   375k|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|   375k|                  "See the scnlib documentation for more details.");
  270|       |
  271|   375k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|   375k|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|   375k|{
  196|   375k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|   375k|        return file_marker_found{};
  198|   375k|    }
  199|   375k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|   375k|        if constexpr (ranges::input_range<Range>) {
  201|   375k|            return insufficient_range{};
  202|   375k|        }
  203|   375k|        else {
  204|   375k|            return invalid_input_range{};
  205|   375k|        }
  206|   375k|    }
  207|   375k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|   375k|        return invalid_char_type{};
  209|   375k|    }
  210|   375k|    else {
  211|   375k|        return make_forward_scan_buffer(r);
  212|   375k|    }
  213|   375k|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  6.69M|{
  226|  6.69M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  6.69M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  6.69M|                  "\n"
  230|  6.69M|                  "Unsupported range type given as input to a scanning "
  231|  6.69M|                  "function.\n"
  232|  6.69M|                  "A range needs to have a character type (value type) "
  233|  6.69M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  6.69M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  6.69M|                  "to be included.\n"
  236|  6.69M|                  "See the scnlib documentation for more details.");
  237|  6.69M|    static_assert(
  238|  6.69M|        !std::is_same_v<T, custom_char_traits>,
  239|  6.69M|        "\n"
  240|  6.69M|        "Unsupported range type given as input to a scanning "
  241|  6.69M|        "function.\n"
  242|  6.69M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  6.69M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  6.69M|        "not supported.");
  245|  6.69M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  6.69M|                  "\n"
  247|  6.69M|                  "Unsupported range type given as input to a scanning "
  248|  6.69M|                  "function.\n"
  249|  6.69M|                  "file_marker_found cannot be used as an "
  250|  6.69M|                  "source range type to scn::scan.\n"
  251|  6.69M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  6.69M|                  "and do not provide an explicit source range, "
  253|  6.69M|                  "or use scn::scan with a FILE* directly.");
  254|  6.69M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  6.69M|                  "\n"
  256|  6.69M|                  "Unsupported range type given as input to a scanning "
  257|  6.69M|                  "function.\n"
  258|  6.69M|                  "In order to be scannable, a range needs to satisfy "
  259|  6.69M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  6.69M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  6.69M|                  "\n"
  262|  6.69M|                  "Unsupported range type given as input to a scanning "
  263|  6.69M|                  "function.\n"
  264|  6.69M|                  "A range needs to model forward_range and have a valid "
  265|  6.69M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  6.69M|                  "Examples of scannable ranges are std::string, "
  267|  6.69M|                  "std::string_view, "
  268|  6.69M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  6.69M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  6.69M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  6.69M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
  152|  6.69M|{
  153|  6.69M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (153:19): [Folded - Ignored]
  ------------------
  154|  6.69M|        return std::basic_string_view{ranges::data(r),
  155|  6.69M|                                      ranges_polyfill::usize(r)};
  156|       |#if 0
  157|       |                    return make_string_scan_buffer(std::basic_string_view{
  158|       |                        ranges::data(r),
  159|       |                        static_cast<std::size_t>(ranges::size(r))});
  160|       |#endif
  161|  6.69M|    }
  162|  6.69M|    else {
  163|  6.69M|        return invalid_char_type{};
  164|  6.69M|    }
  165|  6.69M|}
_ZN3scn2v26detail16make_scan_bufferIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRKT_:
  225|  1.09M|{
  226|  1.09M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
  227|       |
  228|  1.09M|    static_assert(!std::is_same_v<T, invalid_char_type>,
  229|  1.09M|                  "\n"
  230|  1.09M|                  "Unsupported range type given as input to a scanning "
  231|  1.09M|                  "function.\n"
  232|  1.09M|                  "A range needs to have a character type (value type) "
  233|  1.09M|                  "of either `char` or `wchar_t` to be scannable.\n"
  234|  1.09M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
  235|  1.09M|                  "to be included.\n"
  236|  1.09M|                  "See the scnlib documentation for more details.");
  237|  1.09M|    static_assert(
  238|  1.09M|        !std::is_same_v<T, custom_char_traits>,
  239|  1.09M|        "\n"
  240|  1.09M|        "Unsupported range type given as input to a scanning "
  241|  1.09M|        "function.\n"
  242|  1.09M|        "String types (std::basic_string, and std::basic_string_view) "
  243|  1.09M|        "need to use std::char_traits. Strings with custom Traits are "
  244|  1.09M|        "not supported.");
  245|  1.09M|    static_assert(!std::is_same_v<T, file_marker_found>,
  246|  1.09M|                  "\n"
  247|  1.09M|                  "Unsupported range type given as input to a scanning "
  248|  1.09M|                  "function.\n"
  249|  1.09M|                  "file_marker_found cannot be used as an "
  250|  1.09M|                  "source range type to scn::scan.\n"
  251|  1.09M|                  "To read from stdin, use scn::input or scn::prompt, "
  252|  1.09M|                  "and do not provide an explicit source range, "
  253|  1.09M|                  "or use scn::scan with a FILE* directly.");
  254|  1.09M|    static_assert(!std::is_same_v<T, insufficient_range>,
  255|  1.09M|                  "\n"
  256|  1.09M|                  "Unsupported range type given as input to a scanning "
  257|  1.09M|                  "function.\n"
  258|  1.09M|                  "In order to be scannable, a range needs to satisfy "
  259|  1.09M|                  "`forward_range`. `input_range` is not sufficient.");
  260|  1.09M|    static_assert(!std::is_same_v<T, invalid_input_range>,
  261|  1.09M|                  "\n"
  262|  1.09M|                  "Unsupported range type given as input to a scanning "
  263|  1.09M|                  "function.\n"
  264|  1.09M|                  "A range needs to model forward_range and have a valid "
  265|  1.09M|                  "character type (char or wchar_t) to be scannable.\n"
  266|  1.09M|                  "Examples of scannable ranges are std::string, "
  267|  1.09M|                  "std::string_view, "
  268|  1.09M|                  "std::vector<char>, and scn::istreambuf_view.\n"
  269|  1.09M|                  "See the scnlib documentation for more details.");
  270|       |
  271|  1.09M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
  272|  1.09M|}
_ZN3scn2v26detail17_make_scan_buffer4implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEEEDaRKT_NS1_12priority_tagILm0EEE:
  195|  1.09M|{
  196|  1.09M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (196:19): [Folded - Ignored]
  ------------------
  197|  1.09M|        return file_marker_found{};
  198|  1.09M|    }
  199|  1.09M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (199:24): [Folded - Ignored]
  ------------------
  200|  1.09M|        if constexpr (ranges::input_range<Range>) {
  201|  1.09M|            return insufficient_range{};
  202|  1.09M|        }
  203|  1.09M|        else {
  204|  1.09M|            return invalid_input_range{};
  205|  1.09M|        }
  206|  1.09M|    }
  207|  1.09M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (207:24): [Folded - Ignored]
  ------------------
  208|  1.09M|        return invalid_char_type{};
  209|  1.09M|    }
  210|  1.09M|    else {
  211|  1.09M|        return make_forward_scan_buffer(r);
  212|  1.09M|    }
  213|  1.09M|}

_ZN3scn2v26detail10locale_refC2Ev:
   29|  10.6M|    constexpr locale_ref() = default;

_ZN3scn2v224basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
   44|  5.10M|    {
   45|  5.10M|    }
_ZN3scn2v224basic_scan_parse_contextIcE11next_arg_idEv:
   65|  5.10M|    {
   66|  5.10M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  5.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.10M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  5.10M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  5.10M|        do_check_arg_id(id);
   74|  5.10M|        return id;
   75|  5.10M|    }
_ZN3scn2v224basic_scan_parse_contextIcE15do_check_arg_idEm:
  209|  5.10M|{
  210|  5.10M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  5.10M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  5.10M|}
_ZN3scn2v224basic_scan_parse_contextIcE10advance_toEPKc:
   60|  4.90M|    {
   61|  4.90M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  4.90M|    }
_ZNK3scn2v224basic_scan_parse_contextIcE5beginEv:
   49|  10.0M|    {
   50|  10.0M|        return m_format.data();
   51|  10.0M|    }
_ZN3scn2v224basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
   44|  5.83M|    {
   45|  5.83M|    }
_ZN3scn2v224basic_scan_parse_contextIwE11next_arg_idEv:
   65|  5.83M|    {
   66|  5.83M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  153|  5.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.83M]
  |  |  ------------------
  ------------------
   67|      0|            on_error(
   68|      0|                "Cannot switch from manual to automatic argument indexing");
   69|      0|            return 0;
   70|      0|        }
   71|       |
   72|  5.83M|        auto id = static_cast<size_t>(m_next_arg_id++);
   73|  5.83M|        do_check_arg_id(id);
   74|  5.83M|        return id;
   75|  5.83M|    }
_ZN3scn2v224basic_scan_parse_contextIwE15do_check_arg_idEm:
  209|  5.83M|{
  210|  5.83M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (210:9): [Folded - Ignored]
  ------------------
  211|  5.83M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   94|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   54|      0|    ((major)*10'000'000 + (minor)*10'000 + (patch))
  ------------------
  |  Branch (211:10): [Folded - Ignored]
  |  Branch (211:22): [Folded - Ignored]
  ------------------
  212|       |        // The cast below will cause an error on gcc pre-12
  213|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
  214|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (214:13): [True: 0, False: 0]
  ------------------
  215|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
  216|      0|            SCN_UNLIKELY_ATTR
  217|      0|            on_error("Argument not found");
  218|      0|        }
  219|      0|    }
  220|  5.83M|}
_ZN3scn2v224basic_scan_parse_contextIwE10advance_toEPKw:
   60|  5.24M|    {
   61|  5.24M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
   62|  5.24M|    }
_ZNK3scn2v224basic_scan_parse_contextIwE5beginEv:
   49|  11.0M|    {
   50|  11.0M|        return m_format.data();
   51|  11.0M|    }

_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIccEEDaSH_SR_:
  153|   473k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlSE_T0_E_clIwcEEDaSE_SO_:
  153|  21.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlSH_T0_E_clIwcEEDaSH_SR_:
  153|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  13.2M|    {
  482|  13.2M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  13.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  13.2M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  13.2M|    {
  473|  13.2M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  13.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  13.2M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  6.69M|    {
  482|  6.69M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  6.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  6.69M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRKN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSH_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSF_5beginEEclsr3stdE7declvalIRSK_EEEEE15difference_typeEE4typeELm8EEmNSH_13make_unsignedISR_E4typeEE4typeE_EEOSK_:
  472|  6.69M|    {
  473|  6.69M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  6.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  6.69M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  2.06M|    {
  594|  2.06M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  2.06M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKcEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  2.06M|    {
  564|  2.06M|        return ranges::prev(it);
  565|  2.06M|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.75M|    {
  482|  3.75M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.75M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  3.75M|    {
  473|  3.75M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.75M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKcEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  4.27M|    {
  513|  4.27M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  4.27M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKcEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  4.27M|    {
  505|  4.27M|        return ranges::next(it, n);
  506|  4.27M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKcS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  4.51M|    {
  549|  4.51M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  4.51M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKcS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  4.51M|    {
  541|  4.51M|        return ranges::distance(lhs, rhs);
  542|  4.51M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|   784k|    {
  513|   784k|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|   784k|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|   784k|    {
  498|   784k|        it.batch_advance(n);
  499|   784k|        return it;
  500|   784k|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  32.6k|    {
  549|  32.6k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  32.6k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  32.6k|    {
  534|  32.6k|        return rhs.position() - lhs.position();
  535|  32.6k|    }
_ZNK3scn2v24r_pf10usize_impl2fnclIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTclsr2fnE4implscDtfp_Efp_EEOT_:
  481|  3.78M|    {
  482|  3.78M|        return fn::impl(SCN_FWD(t));
  ------------------
  |  |  248|  3.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  483|  3.78M|    }
_ZN3scn2v24r_pf10usize_impl2fn4implIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEDTcmclL_ZNS6_16function_objects4sizeEEscDtfp_Efp_EcvNSt3__111conditionalIXltstNSG_9enable_ifIX5rangeIT_EENS6_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSJ_EEEEE15difference_typeEE4typeELm8EEmNSG_13make_unsignedISQ_E4typeEE4typeE_EEOSJ_:
  472|  3.78M|    {
  473|  3.78M|        return static_cast<usize_return_t<T>>(ranges::size(SCN_FWD(t)));
  ------------------
  |  |  248|  3.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  474|  3.78M|    }
_ZNK3scn2v24r_pf19prev_backtrack_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm2EEEEEET_SB_:
  593|  1.85M|    {
  594|  1.85M|        return fn::impl(it, beg, detail::priority_tag<2>{});
  595|  1.85M|    }
_ZN3scn2v24r_pf19prev_backtrack_impl2fn4implIPKwEENSt3__19enable_ifIXsr10ranges_stdE22bidirectional_iteratorIT_EES9_E4typeES9_S9_NS0_6detail12priority_tagILm2EEE:
  563|  1.85M|    {
  564|  1.85M|        return ranges::prev(it);
  565|  1.85M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclIPKwEEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_l:
  512|  3.80M|    {
  513|  3.80M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  3.80M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implIPKwEEDaT_lNS0_6detail12priority_tagILm0EEE:
  504|  3.80M|    {
  505|  3.80M|        return ranges::next(it, n);
  506|  3.80M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclIPKwS6_EEDTclsr2fnE4implfp_fp0_tlNS0_6detail12priority_tagILm1EEEEEET_T0_:
  548|  4.03M|    {
  549|  4.03M|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  4.03M|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implIPKwS6_EEDTclL_ZN4nano6ranges16function_objects8distanceEEfp_fp0_EET_T0_NS0_6detail12priority_tagILm0EEE:
  540|  4.03M|    {
  541|  4.03M|        return ranges::distance(lhs, rhs);
  542|  4.03M|    }
_ZNK3scn2v24r_pf15batch_next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_l:
  512|  2.25M|    {
  513|  2.25M|        return fn::impl(it, n, detail::priority_tag<1>{});
  514|  2.25M|    }
_ZN3scn2v24r_pf15batch_next_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTcmcldtfp_13batch_advancefp0_Efp_EE4typeEE4typeET_lNS5_12priority_tagILm1EEE:
  497|  2.25M|    {
  498|  2.25M|        it.batch_advance(n);
  499|  2.25M|        return it;
  500|  2.25M|    }
_ZNK3scn2v24r_pf17pos_distance_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EEDTclsr2fnE4implfp_fp0_tlNS5_12priority_tagILm1EEEEEET_T0_:
  548|  65.3k|    {
  549|  65.3k|        return fn::impl(lhs, rhs, detail::priority_tag<1>{});
  550|  65.3k|    }
_ZN3scn2v24r_pf17pos_distance_impl2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19remove_cvINS9_16remove_referenceIDTmicldtfp0_8positionEcldtfp_8positionEEE4typeEE4typeET_SH_NS5_12priority_tagILm1EEE:
  533|  65.3k|    {
  534|  65.3k|        return rhs.position() - lhs.position();
  535|  65.3k|    }

_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  6.33M|{
  343|  6.33M|    return {ranges::next(ranges::begin(source), n),
  344|  6.33M|            make_vscan_result_range_end(source)};
  345|  6.33M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  6.33M|{
  330|  6.33M|    return ranges::end(source);
  331|  6.33M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   839k|    {
  253|   839k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  6.33M|    {
  104|  6.33M|    }
_ZN3scn2v26detail25scan_result_value_storageIJaEEC2EONSt3__15tupleIJaEEE:
   38|  1.60M|    {
   39|  1.60M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  6.33M|    {
  121|  6.33M|        return ranges::begin(m_range);
  122|  6.33M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   787k|    {
  253|   787k|    }
_ZN3scn2v26detail25scan_result_value_storageIJhEEC2EONSt3__15tupleIJhEEE:
   38|  1.50M|    {
   39|  1.50M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|  1.26M|    {
  253|  1.26M|    }
_ZN3scn2v26detail25scan_result_value_storageIJiEEC2EONSt3__15tupleIJiEEE:
   38|  2.42M|    {
   39|  2.42M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|  1.00M|    {
  253|  1.00M|    }
_ZN3scn2v26detail25scan_result_value_storageIJjEEC2EONSt3__15tupleIJjEEE:
   38|  1.91M|    {
   39|  1.91M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|  1.37M|    {
  253|  1.37M|    }
_ZN3scn2v26detail25scan_result_value_storageIJxEEC2EONSt3__15tupleIJxEEE:
   38|  2.61M|    {
   39|  2.61M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|  1.06M|    {
  253|  1.06M|    }
_ZN3scn2v26detail25scan_result_value_storageIJyEEC2EONSt3__15tupleIJyEEE:
   38|  2.03M|    {
   39|  2.03M|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  32.6k|{
  343|  32.6k|    return {ranges::next(ranges::begin(source), n),
  344|  32.6k|            make_vscan_result_range_end(source)};
  345|  32.6k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  32.6k|{
  330|  32.6k|    return ranges::end(source);
  331|  32.6k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|  5.44k|    {
  253|  5.44k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  32.6k|    {
  104|  32.6k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  32.6k|    {
  121|  32.6k|        return ranges::begin(m_range);
  122|  32.6k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|  5.44k|    {
  253|  5.44k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  5.44k|    {
  253|  5.44k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  5.44k|    {
  253|  5.44k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  5.44k|    {
  253|  5.44k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  5.44k|    {
  253|  5.44k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISC_EEE4typeEOSC_l:
  342|  5.66M|{
  343|  5.66M|    return {ranges::next(ranges::begin(source), n),
  344|  5.66M|            make_vscan_result_range_end(source)};
  345|  5.66M|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  5.66M|{
  330|  5.66M|    return ranges::end(source);
  331|  5.66M|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJaEEC2ES9_ONSt3__15tupleIJaEEE:
  252|   755k|    {
  253|   755k|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEC2EOSA_:
  103|  5.66M|    {
  104|  5.66M|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  5.66M|    {
  121|  5.66M|        return ranges::begin(m_range);
  122|  5.66M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJhEEC2ES9_ONSt3__15tupleIJhEEE:
  252|   707k|    {
  253|   707k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJiEEC2ES9_ONSt3__15tupleIJiEEE:
  252|  1.13M|    {
  253|  1.13M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJjEEC2ES9_ONSt3__15tupleIJjEEE:
  252|   896k|    {
  253|   896k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJxEEC2ES9_ONSt3__15tupleIJxEEE:
  252|  1.21M|    {
  253|  1.21M|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEJyEEC2ES9_ONSt3__15tupleIJyEEE:
  252|   948k|    {
  253|   948k|    }
_ZN3scn2v26detail23make_vscan_result_rangeIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_31borrowed_subrange_with_sentinelIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_l:
  342|  65.3k|{
  343|  65.3k|    return {ranges::next(ranges::begin(source), n),
  344|  65.3k|            make_vscan_result_range_end(source)};
  345|  65.3k|}
_ZN3scn2v26detail27make_vscan_result_range_endIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaRT_:
  329|  65.3k|{
  330|  65.3k|    return ranges::end(source);
  331|  65.3k|}
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJaEEC2ESF_ONS6_5tupleIJaEEE:
  252|      2|    {
  253|      2|    }
_ZN3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2EOSG_:
  103|  65.3k|    {
  104|  65.3k|    }
_ZNK3scn2v26detail25scan_result_range_storageIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE5beginEv:
  120|  65.3k|    {
  121|  65.3k|        return ranges::begin(m_range);
  122|  65.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJhEEC2ESF_ONS6_5tupleIJhEEE:
  252|      4|    {
  253|      4|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJiEEC2ESF_ONS6_5tupleIJiEEE:
  252|  16.3k|    {
  253|  16.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJjEEC2ESF_ONS6_5tupleIJjEEE:
  252|  16.3k|    {
  253|  16.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJxEEC2ESF_ONS6_5tupleIJxEEE:
  252|  16.3k|    {
  253|  16.3k|    }
_ZN3scn2v211scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEJyEEC2ESF_ONS6_5tupleIJyEEE:
  252|  16.3k|    {
  253|  16.3k|    }

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   403k|{
  117|   403k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   403k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   403k|{
   77|   403k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   403k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   403k|    static_cast<    \
  |  |  247|   403k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   403k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   403k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   403k|    static_cast<    \
  |  |  247|   403k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   403k|    static_cast<    \
  |  |  247|   403k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   403k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   807k|{
   55|   807k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   807k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.4k, False: 752k]
  |  |  ------------------
  ------------------
   56|  54.4k|        return unexpected(result.error());
   57|  54.4k|    }
   58|   752k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   752k|    static_cast<    \
  |  |  247|   752k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   752k|    static_cast<    \
  |  |  247|   752k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   807k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   403k|{
  201|   403k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   403k|                                                      format, {});
  203|   403k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   403k|{
  163|   403k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   403k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   403k|    static_cast<    \
  |  |  247|   403k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   403k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   403k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   403k|    static_cast<    \
  |  |  247|   403k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   403k|    static_cast<    \
  |  |  247|   403k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   403k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  89.5k|{
  248|  89.5k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  89.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  89.5k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  89.5k|{
  229|  89.5k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  89.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  89.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  89.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  89.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  89.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 86.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|  89.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  86.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  86.7k|    static_cast<    \
  |  |  247|  86.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  86.7k|    static_cast<    \
  |  |  247|  86.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  89.5k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   381k|{
  117|   381k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   381k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   381k|{
   77|   381k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   381k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   381k|    static_cast<    \
  |  |  247|   381k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   381k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   381k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   381k|    static_cast<    \
  |  |  247|   381k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   381k|    static_cast<    \
  |  |  247|   381k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   381k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   763k|{
   55|   763k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   763k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.4k, False: 709k]
  |  |  ------------------
  ------------------
   56|  54.4k|        return unexpected(result.error());
   57|  54.4k|    }
   58|   709k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   709k|    static_cast<    \
  |  |  247|   709k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   709k|    static_cast<    \
  |  |  247|   709k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   763k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   381k|{
  201|   381k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   381k|                                                      format, {});
  203|   381k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   381k|{
  163|   381k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   381k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   381k|    static_cast<    \
  |  |  247|   381k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   381k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   381k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   381k|    static_cast<    \
  |  |  247|   381k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   381k|    static_cast<    \
  |  |  247|   381k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   381k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|  80.7k|{
  248|  80.7k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  80.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  80.7k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  80.7k|{
  229|  80.7k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  80.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  80.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  80.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  80.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  80.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 78.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|  80.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  78.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  78.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  78.0k|    static_cast<    \
  |  |  247|  78.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  78.0k|    static_cast<    \
  |  |  247|  78.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  80.7k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   601k|{
  117|   601k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   601k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   601k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   601k|{
   77|   601k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   601k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   601k|    static_cast<    \
  |  |  247|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   601k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   601k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   601k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   601k|    static_cast<    \
  |  |  247|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   601k|    static_cast<    \
  |  |  247|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   601k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.20M|{
   55|  1.20M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.4k, False: 1.14M]
  |  |  ------------------
  ------------------
   56|  54.4k|        return unexpected(result.error());
   57|  54.4k|    }
   58|  1.14M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.14M|    static_cast<    \
  |  |  247|  1.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.14M|    static_cast<    \
  |  |  247|  1.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.20M|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   601k|{
  201|   601k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   601k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   601k|                                                      format, {});
  203|   601k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   601k|{
  163|   601k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   601k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   601k|    static_cast<    \
  |  |  247|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   601k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   601k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   601k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   601k|    static_cast<    \
  |  |  247|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   601k|    static_cast<    \
  |  |  247|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   601k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   124k|{
  248|   124k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   124k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   124k|{
  229|   124k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   124k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 121k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   121k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   121k|    static_cast<    \
  |  |  247|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   121k|    static_cast<    \
  |  |  247|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   124k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   478k|{
  117|   478k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   478k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   478k|{
   77|   478k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   478k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   478k|    static_cast<    \
  |  |  247|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   478k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   478k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   478k|    static_cast<    \
  |  |  247|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   478k|    static_cast<    \
  |  |  247|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   478k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   957k|{
   55|   957k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   957k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.4k, False: 902k]
  |  |  ------------------
  ------------------
   56|  54.4k|        return unexpected(result.error());
   57|  54.4k|    }
   58|   902k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   902k|    static_cast<    \
  |  |  247|   902k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   902k|    static_cast<    \
  |  |  247|   902k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   957k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   478k|{
  201|   478k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   478k|                                                      format, {});
  203|   478k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   478k|{
  163|   478k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   478k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   478k|    static_cast<    \
  |  |  247|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   478k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   478k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   478k|    static_cast<    \
  |  |  247|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   478k|    static_cast<    \
  |  |  247|   478k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   478k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   100k|{
  248|   100k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   100k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   100k|{
  229|   100k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   100k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 97.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  97.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  97.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  97.2k|    static_cast<    \
  |  |  247|  97.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  97.2k|    static_cast<    \
  |  |  247|  97.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   100k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   649k|{
  117|   649k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   649k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   649k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   649k|{
   77|   649k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   649k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   649k|    static_cast<    \
  |  |  247|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   649k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   649k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   649k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   649k|    static_cast<    \
  |  |  247|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   649k|    static_cast<    \
  |  |  247|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   649k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.29M|{
   55|  1.29M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.4k, False: 1.24M]
  |  |  ------------------
  ------------------
   56|  54.4k|        return unexpected(result.error());
   57|  54.4k|    }
   58|  1.24M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.24M|    static_cast<    \
  |  |  247|  1.24M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.24M|    static_cast<    \
  |  |  247|  1.24M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.29M|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   649k|{
  201|   649k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   649k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   649k|                                                      format, {});
  203|   649k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   649k|{
  163|   649k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   649k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   649k|    static_cast<    \
  |  |  247|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   649k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   649k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   649k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   649k|    static_cast<    \
  |  |  247|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   649k|    static_cast<    \
  |  |  247|   649k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   649k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   133k|{
  248|   133k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   133k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   133k|{
  229|   133k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   133k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   130k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   130k|    static_cast<    \
  |  |  247|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   130k|    static_cast<    \
  |  |  247|   130k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   133k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISG_E4typeEJDpNSZ_ISS_E4typeEEEE:
  116|   507k|{
  117|   507k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   507k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   507k|{
   77|   507k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   507k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   507k|    static_cast<    \
  |  |  247|   507k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   507k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   507k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   507k|    static_cast<    \
  |  |  247|   507k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   507k|    static_cast<    \
  |  |  247|   507k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   507k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.01M|{
   55|  1.01M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.4k, False: 961k]
  |  |  ------------------
  ------------------
   56|  54.4k|        return unexpected(result.error());
   57|  54.4k|    }
   58|   961k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   961k|    static_cast<    \
  |  |  247|   961k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   961k|    static_cast<    \
  |  |  247|   961k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.01M|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISH_E4typeEJDpNS13_IST_E4typeEEEE:
  200|   507k|{
  201|   507k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|   507k|                                                      format, {});
  203|   507k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   507k|{
  163|   507k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   507k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   507k|    static_cast<    \
  |  |  247|   507k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   507k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   507k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   507k|    static_cast<    \
  |  |  247|   507k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   507k|    static_cast<    \
  |  |  247|   507k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   507k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  247|   105k|{
  248|   105k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|   105k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   105k|{
  229|   105k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   105k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   105k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   105k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   105k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|   105k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   103k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   103k|    static_cast<    \
  |  |  247|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   103k|    static_cast<    \
  |  |  247|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   105k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  29.9k|{
  117|  29.9k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  29.9k|}
_ZN3scn2v26detail9scan_implIcJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  29.9k|{
   77|  29.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  29.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  29.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  29.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  29.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  59.9k|{
   55|  59.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.4k, False: 5.44k]
  |  |  ------------------
  ------------------
   56|  54.4k|        return unexpected(result.error());
   57|  54.4k|    }
   58|  5.44k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  5.44k|    static_cast<    \
  |  |  247|  5.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  5.44k|    static_cast<    \
  |  |  247|  5.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  59.9k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  29.9k|{
  201|  29.9k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  29.9k|                                                      format, {});
  203|  29.9k|}
_ZN3scn2v26detail19scan_localized_implIcJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  29.9k|{
  163|  29.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  29.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  29.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  29.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  29.9k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.72k|{
  248|  2.72k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.72k|}
_ZN3scn2v26detail15scan_value_implIcaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.72k|{
  229|  2.72k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.72k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|  2.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.72k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  29.9k|{
  117|  29.9k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  29.9k|}
_ZN3scn2v26detail9scan_implIcJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  29.9k|{
   77|  29.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  29.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  29.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  29.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  29.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  59.9k|{
   55|  59.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.4k, False: 5.44k]
  |  |  ------------------
  ------------------
   56|  54.4k|        return unexpected(result.error());
   57|  54.4k|    }
   58|  5.44k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  5.44k|    static_cast<    \
  |  |  247|  5.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  5.44k|    static_cast<    \
  |  |  247|  5.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  59.9k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  29.9k|{
  201|  29.9k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  29.9k|                                                      format, {});
  203|  29.9k|}
_ZN3scn2v26detail19scan_localized_implIcJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  29.9k|{
  163|  29.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  29.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  29.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  29.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  29.9k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.72k|{
  248|  2.72k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.72k|}
_ZN3scn2v26detail15scan_value_implIchN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.72k|{
  229|  2.72k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.72k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|  2.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.72k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  29.9k|{
  117|  29.9k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  29.9k|}
_ZN3scn2v26detail9scan_implIcJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  29.9k|{
   77|  29.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  29.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  29.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  29.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  29.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  59.9k|{
   55|  59.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.4k, False: 5.44k]
  |  |  ------------------
  ------------------
   56|  54.4k|        return unexpected(result.error());
   57|  54.4k|    }
   58|  5.44k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  5.44k|    static_cast<    \
  |  |  247|  5.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  5.44k|    static_cast<    \
  |  |  247|  5.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  59.9k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  29.9k|{
  201|  29.9k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  29.9k|                                                      format, {});
  203|  29.9k|}
_ZN3scn2v26detail19scan_localized_implIcJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  29.9k|{
  163|  29.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  29.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  29.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  29.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  29.9k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.72k|{
  248|  2.72k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.72k|}
_ZN3scn2v26detail15scan_value_implIciN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.72k|{
  229|  2.72k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.72k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|  2.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.72k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  29.9k|{
  117|  29.9k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  29.9k|}
_ZN3scn2v26detail9scan_implIcJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  29.9k|{
   77|  29.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  29.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  29.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  29.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  29.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  59.9k|{
   55|  59.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.4k, False: 5.44k]
  |  |  ------------------
  ------------------
   56|  54.4k|        return unexpected(result.error());
   57|  54.4k|    }
   58|  5.44k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  5.44k|    static_cast<    \
  |  |  247|  5.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  5.44k|    static_cast<    \
  |  |  247|  5.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  59.9k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  29.9k|{
  201|  29.9k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  29.9k|                                                      format, {});
  203|  29.9k|}
_ZN3scn2v26detail19scan_localized_implIcJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  29.9k|{
  163|  29.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  29.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  29.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  29.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  29.9k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.72k|{
  248|  2.72k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.72k|}
_ZN3scn2v26detail15scan_value_implIcjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.72k|{
  229|  2.72k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.72k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|  2.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.72k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  29.9k|{
  117|  29.9k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  29.9k|}
_ZN3scn2v26detail9scan_implIcJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  29.9k|{
   77|  29.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  29.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  29.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  29.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  29.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  59.9k|{
   55|  59.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.4k, False: 5.44k]
  |  |  ------------------
  ------------------
   56|  54.4k|        return unexpected(result.error());
   57|  54.4k|    }
   58|  5.44k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  5.44k|    static_cast<    \
  |  |  247|  5.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  5.44k|    static_cast<    \
  |  |  247|  5.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  59.9k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  29.9k|{
  201|  29.9k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  29.9k|                                                      format, {});
  203|  29.9k|}
_ZN3scn2v26detail19scan_localized_implIcJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  29.9k|{
  163|  29.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  29.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  29.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  29.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  29.9k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.72k|{
  248|  2.72k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.72k|}
_ZN3scn2v26detail15scan_value_implIcxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.72k|{
  229|  2.72k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.72k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|  2.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.72k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEEOSL_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISL_E4typeEJDpNS14_ISX_E4typeEEEE:
  116|  29.9k|{
  117|  29.9k|    return detail::scan_impl<char, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  29.9k|}
_ZN3scn2v26detail9scan_implIcJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  29.9k|{
   77|  29.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  29.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  29.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  29.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  29.9k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIcEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|  59.9k|{
   55|  59.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 54.4k, False: 5.44k]
  |  |  ------------------
  ------------------
   56|  54.4k|        return unexpected(result.error());
   57|  54.4k|    }
   58|  5.44k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  5.44k|    static_cast<    \
  |  |  247|  5.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  5.44k|    static_cast<    \
  |  |  247|  5.44k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  59.9k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS5_13subrange_kindE1EEEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEERKT0_OSM_NS0_24basic_scan_format_stringIcNS0_6detail13type_identityISM_E4typeEJDpNS18_ISY_E4typeEEEE:
  200|  29.9k|{
  201|  29.9k|    return detail::scan_localized_impl<char, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  202|  29.9k|                                                      format, {});
  203|  29.9k|}
_ZN3scn2v26detail19scan_localized_implIcJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIcSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  29.9k|{
  163|  29.9k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  29.9k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  29.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  29.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  29.9k|    static_cast<    \
  |  |  247|  29.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  29.9k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJT_EEEEEOSL_:
  247|  2.72k|{
  248|  2.72k|    return detail::scan_value_impl<char>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  2.72k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  249|  2.72k|}
_ZN3scn2v26detail15scan_value_implIcyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  2.72k|{
  229|  2.72k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  2.72k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  2.72k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  2.72k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  2.72k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  2.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.72k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.72k|    }                                                  \
  |  |  |  |   70|  2.72k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  2.72k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JaEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   420k|{
   77|   420k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   420k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   420k|    static_cast<    \
  |  |  247|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   420k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   420k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   420k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   420k|    static_cast<    \
  |  |  247|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   420k|    static_cast<    \
  |  |  247|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   420k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   840k|{
   55|   840k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   840k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 676k]
  |  |  ------------------
  ------------------
   56|   163k|        return unexpected(result.error());
   57|   163k|    }
   58|   676k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   676k|    static_cast<    \
  |  |  247|   676k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   676k|    static_cast<    \
  |  |  247|   676k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   840k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   420k|{
  163|   420k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   420k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   420k|    static_cast<    \
  |  |  247|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   420k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   420k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   420k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   420k|    static_cast<    \
  |  |  247|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   420k|    static_cast<    \
  |  |  247|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   420k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  86.6k|{
  229|  86.6k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  86.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  86.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  86.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  86.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  86.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 78.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  86.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  78.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  78.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  78.4k|    static_cast<    \
  |  |  247|  78.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  78.4k|    static_cast<    \
  |  |  247|  78.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  86.6k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JhEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   400k|{
   77|   400k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   400k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   400k|    static_cast<    \
  |  |  247|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   400k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   400k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   400k|    static_cast<    \
  |  |  247|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   400k|    static_cast<    \
  |  |  247|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   400k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   801k|{
   55|   801k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   801k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 637k]
  |  |  ------------------
  ------------------
   56|   163k|        return unexpected(result.error());
   57|   163k|    }
   58|   637k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   637k|    static_cast<    \
  |  |  247|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   637k|    static_cast<    \
  |  |  247|   637k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   801k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   400k|{
  163|   400k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   400k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   400k|    static_cast<    \
  |  |  247|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   400k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   400k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   400k|    static_cast<    \
  |  |  247|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   400k|    static_cast<    \
  |  |  247|   400k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   400k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  78.1k|{
  229|  78.1k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  78.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  78.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  78.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  78.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  78.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 69.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  78.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  69.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  69.9k|    static_cast<    \
  |  |  247|  69.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  69.9k|    static_cast<    \
  |  |  247|  69.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  78.1k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JiEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   594k|{
   77|   594k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   594k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   594k|    static_cast<    \
  |  |  247|   594k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   594k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   594k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   594k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   594k|    static_cast<    \
  |  |  247|   594k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   594k|    static_cast<    \
  |  |  247|   594k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   594k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.18M|{
   55|  1.18M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 1.02M]
  |  |  ------------------
  ------------------
   56|   163k|        return unexpected(result.error());
   57|   163k|    }
   58|  1.02M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.02M|    static_cast<    \
  |  |  247|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.02M|    static_cast<    \
  |  |  247|  1.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.18M|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   594k|{
  163|   594k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   594k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   594k|    static_cast<    \
  |  |  247|   594k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   594k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   594k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   594k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   594k|    static_cast<    \
  |  |  247|   594k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   594k|    static_cast<    \
  |  |  247|   594k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   594k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   116k|{
  229|   116k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   116k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   108k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   108k|    static_cast<    \
  |  |  247|   108k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   108k|    static_cast<    \
  |  |  247|   108k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   116k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JjEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   486k|{
   77|   486k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   486k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   486k|    static_cast<    \
  |  |  247|   486k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   486k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   486k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   486k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   486k|    static_cast<    \
  |  |  247|   486k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   486k|    static_cast<    \
  |  |  247|   486k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   486k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|   973k|{
   55|   973k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   973k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 809k]
  |  |  ------------------
  ------------------
   56|   163k|        return unexpected(result.error());
   57|   163k|    }
   58|   809k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   809k|    static_cast<    \
  |  |  247|   809k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   809k|    static_cast<    \
  |  |  247|   809k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   973k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   486k|{
  163|   486k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   486k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   486k|    static_cast<    \
  |  |  247|   486k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   486k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   486k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   486k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   486k|    static_cast<    \
  |  |  247|   486k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   486k|    static_cast<    \
  |  |  247|   486k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   486k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  95.2k|{
  229|  95.2k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  95.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  95.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  95.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  95.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  95.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 87.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  95.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  87.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  87.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  87.0k|    static_cast<    \
  |  |  247|  87.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  87.0k|    static_cast<    \
  |  |  247|  87.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  95.2k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JxEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   633k|{
   77|   633k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   633k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   633k|    static_cast<    \
  |  |  247|   633k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   633k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   633k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   633k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   633k|    static_cast<    \
  |  |  247|   633k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   633k|    static_cast<    \
  |  |  247|   633k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   633k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.26M|{
   55|  1.26M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.26M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 1.10M]
  |  |  ------------------
  ------------------
   56|   163k|        return unexpected(result.error());
   57|   163k|    }
   58|  1.10M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.10M|    static_cast<    \
  |  |  247|  1.10M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  1.10M|    static_cast<    \
  |  |  247|  1.10M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.26M|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   633k|{
  163|   633k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   633k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   633k|    static_cast<    \
  |  |  247|   633k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   633k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   633k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   633k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   633k|    static_cast<    \
  |  |  247|   633k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   633k|    static_cast<    \
  |  |  247|   633k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   633k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|   124k|{
  229|   124k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|   124k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|   124k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   116k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   116k|    static_cast<    \
  |  |  247|   116k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|   116k|    static_cast<    \
  |  |  247|   116k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|   124k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSA_JyEEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSF_9remove_cvINSF_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESP_NS0_31borrowed_subrange_with_sentinelISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT0_EEEEEOSJ_T2_NSF_5tupleIJSW_EEE:
   76|   510k|{
   77|   510k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|   510k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   510k|    static_cast<    \
  |  |  247|   510k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|   510k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|   510k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   510k|    static_cast<    \
  |  |  247|   510k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   510k|    static_cast<    \
  |  |  247|   510k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|   510k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSC_ISE_EEONS0_14scan_arg_storeIT0_JSG_EEE:
   54|  1.02M|{
   55|  1.02M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 856k]
  |  |  ------------------
  ------------------
   56|   163k|        return unexpected(result.error());
   57|   163k|    }
   58|   856k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   856k|    static_cast<    \
  |  |  247|   856k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|   856k|    static_cast<    \
  |  |  247|   856k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.02M|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSC_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSK_T3_NS3_5tupleIJSX_EEE:
  162|   510k|{
  163|   510k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|   510k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|   510k|    static_cast<    \
  |  |  247|   510k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|   510k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|   510k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   510k|    static_cast<    \
  |  |  247|   510k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|   510k|    static_cast<    \
  |  |  247|   510k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   510k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT0_EEEEEOSH_ST_:
  228|  99.9k|{
  229|  99.9k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  99.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  99.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  99.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 91.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  99.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  91.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  91.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  91.8k|    static_cast<    \
  |  |  247|  91.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|  91.8k|    static_cast<    \
  |  |  247|  91.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  99.9k|}
_ZN3scn2v26detail9scan_implIwJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  81.6k|{
   77|  81.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  81.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  81.6k|    static_cast<    \
  |  |  247|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  81.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  81.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  81.6k|    static_cast<    \
  |  |  247|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  81.6k|    static_cast<    \
  |  |  247|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  81.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJaEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   163k|{
   55|   163k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 2]
  |  |  ------------------
  ------------------
   56|   163k|        return unexpected(result.error());
   57|   163k|    }
   58|      2|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      2|    static_cast<    \
  |  |  247|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      2|    static_cast<    \
  |  |  247|      2|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   163k|}
_ZN3scn2v26detail19scan_localized_implIwJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JaEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  81.6k|{
  163|  81.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  81.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  81.6k|    static_cast<    \
  |  |  247|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  81.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  81.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  81.6k|    static_cast<    \
  |  |  247|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  81.6k|    static_cast<    \
  |  |  247|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  81.6k|}
_ZN3scn2v26detail15scan_value_implIwaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.16k|{
  229|  8.16k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.16k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.16k|}
_ZN3scn2v26detail9scan_implIwJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  81.6k|{
   77|  81.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  81.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  81.6k|    static_cast<    \
  |  |  247|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  81.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  81.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  81.6k|    static_cast<    \
  |  |  247|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  81.6k|    static_cast<    \
  |  |  247|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  81.6k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJhEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   163k|{
   55|   163k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 4]
  |  |  ------------------
  ------------------
   56|   163k|        return unexpected(result.error());
   57|   163k|    }
   58|      4|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      4|    static_cast<    \
  |  |  247|      4|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|      4|    static_cast<    \
  |  |  247|      4|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   163k|}
_ZN3scn2v26detail19scan_localized_implIwJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JhEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  81.6k|{
  163|  81.6k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  81.6k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  81.6k|    static_cast<    \
  |  |  247|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  81.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  81.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  81.6k|    static_cast<    \
  |  |  247|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  81.6k|    static_cast<    \
  |  |  247|  81.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  81.6k|}
_ZN3scn2v26detail15scan_value_implIwhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.16k|{
  229|  8.16k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.16k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.16k|}
_ZN3scn2v26detail9scan_implIwJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  89.8k|{
   77|  89.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  89.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  89.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  89.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  89.8k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJiEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   179k|{
   55|   179k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 16.3k]
  |  |  ------------------
  ------------------
   56|   163k|        return unexpected(result.error());
   57|   163k|    }
   58|  16.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  16.3k|    static_cast<    \
  |  |  247|  16.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  16.3k|    static_cast<    \
  |  |  247|  16.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   179k|}
_ZN3scn2v26detail19scan_localized_implIwJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JiEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  89.8k|{
  163|  89.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  89.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  89.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  89.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  89.8k|}
_ZN3scn2v26detail15scan_value_implIwiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.16k|{
  229|  8.16k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.16k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.16k|}
_ZN3scn2v26detail9scan_implIwJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  89.8k|{
   77|  89.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  89.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  89.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  89.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  89.8k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJjEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   179k|{
   55|   179k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 16.3k]
  |  |  ------------------
  ------------------
   56|   163k|        return unexpected(result.error());
   57|   163k|    }
   58|  16.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  16.3k|    static_cast<    \
  |  |  247|  16.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  16.3k|    static_cast<    \
  |  |  247|  16.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   179k|}
_ZN3scn2v26detail19scan_localized_implIwJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JjEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  89.8k|{
  163|  89.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  89.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  89.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  89.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  89.8k|}
_ZN3scn2v26detail15scan_value_implIwjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.16k|{
  229|  8.16k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.16k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.16k|}
_ZN3scn2v26detail9scan_implIwJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  89.8k|{
   77|  89.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  89.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  89.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  89.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  89.8k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJxEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   179k|{
   55|   179k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 16.3k]
  |  |  ------------------
  ------------------
   56|   163k|        return unexpected(result.error());
   57|   163k|    }
   58|  16.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  16.3k|    static_cast<    \
  |  |  247|  16.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  16.3k|    static_cast<    \
  |  |  247|  16.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   179k|}
_ZN3scn2v26detail19scan_localized_implIwJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JxEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  89.8k|{
  163|  89.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  89.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  89.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  89.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  89.8k|}
_ZN3scn2v26detail15scan_value_implIwxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.16k|{
  229|  8.16k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.16k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.16k|}
_ZN3scn2v26detail9scan_implIwJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSG_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESU_NS0_31borrowed_subrange_with_sentinelISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT0_EEEEEOSO_T2_NS7_5tupleIJS11_EEE:
   76|  89.8k|{
   77|  89.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
   78|  89.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   79|  89.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   80|  89.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   81|  89.8k|}
_ZN3scn2v216make_scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_18basic_scan_contextIwEEJyEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT1_EEEEEONSI_ISK_EEONS0_14scan_arg_storeIT0_JSM_EEE:
   54|   179k|{
   55|   179k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 16.3k]
  |  |  ------------------
  ------------------
   56|   163k|        return unexpected(result.error());
   57|   163k|    }
   58|  16.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  16.3k|    static_cast<    \
  |  |  247|  16.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args.args())};
  ------------------
  |  |  246|  16.3k|    static_cast<    \
  |  |  247|  16.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|   179k|}
_ZN3scn2v26detail19scan_localized_implIwJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEENS0_24basic_scan_format_stringIwSH_JyEEEEENS0_13scan_expectedINS0_11scan_resultINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT2_E4typeEE4typeEP8_IO_FILEEESV_NS0_31borrowed_subrange_with_sentinelISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT0_EEEEERKT1_OSP_T3_NS3_5tupleIJS12_EEE:
  162|  89.8k|{
  163|  89.8k|    auto args = make_scan_args<basic_scan_context<CharT>, Args...>(
  164|  89.8k|        SCN_MOVE(default_values));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  165|  89.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  166|  89.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args));
  ------------------
  |  |  246|  89.8k|    static_cast<    \
  |  |  247|  89.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  89.8k|}
_ZN3scn2v26detail15scan_value_implIwyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedINS0_11scan_resultINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT0_EEEEEOSM_SY_:
  228|  8.16k|{
  229|  8.16k|    auto arg = detail::make_arg<basic_scan_context<CharT>>(value);
  230|  8.16k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  232|  8.16k|}

_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|   375k|{
  486|   375k|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|   375k|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|   375k|    {
  378|   375k|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIcEC2Ev:
  359|   375k|    {
  360|   375k|    }
_ZN3scn2v26detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
  128|   375k|    {
  129|   375k|    }
_ZN3scn2v26detail17basic_scan_bufferIcED2Ev:
   43|   375k|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|   555k|    {
  382|   555k|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 540, False: 555k]
  ------------------
  383|    540|            return false;
  384|    540|        }
  385|   555k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 277k, False: 277k]
  ------------------
  386|   277k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   277k|                                          this->m_current_view.begin(),
  388|   277k|                                          this->m_current_view.end());
  389|   277k|        }
  390|   555k|        m_latest = *m_cursor;
  391|   555k|        ++m_cursor;
  392|   555k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|   555k|        return true;
  394|   555k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE4syncEl:
   48|   375k|    {
   49|   375k|        SCN_UNUSED(position);
  ------------------
  |  |  227|   375k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|   375k|    }
_ZN3scn2v26detail24make_forward_scan_bufferIRKN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEEDaOT_:
  485|  1.09M|{
  486|  1.09M|    return basic_scan_forward_buffer_impl(SCN_FWD(range));
  ------------------
  |  |  248|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  487|  1.09M|}
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEEC2ESG_:
  377|  1.09M|    {
  378|  1.09M|    }
_ZN3scn2v26detail30basic_scan_forward_buffer_baseIwEC2Ev:
  359|  1.09M|    {
  360|  1.09M|    }
_ZN3scn2v26detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
  128|  1.09M|    {
  129|  1.09M|    }
_ZN3scn2v26detail17basic_scan_bufferIwED2Ev:
   43|  1.09M|    virtual ~basic_scan_buffer() = default;
_ZN3scn2v26detail30basic_scan_forward_buffer_implIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEE4fillEv:
  381|  1.79M|    {
  382|  1.79M|        if (m_cursor == ranges::end(m_range)) {
  ------------------
  |  Branch (382:13): [True: 618, False: 1.79M]
  ------------------
  383|    618|            return false;
  384|    618|        }
  385|  1.79M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (385:13): [True: 996k, False: 800k]
  ------------------
  386|   996k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
  387|   996k|                                          this->m_current_view.begin(),
  388|   996k|                                          this->m_current_view.end());
  389|   996k|        }
  390|  1.79M|        m_latest = *m_cursor;
  391|  1.79M|        ++m_cursor;
  392|  1.79M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
  393|  1.79M|        return true;
  394|  1.79M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE4syncEl:
   48|  1.09M|    {
   49|  1.09M|        SCN_UNUSED(position);
  ------------------
  |  |  227|  1.09M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   50|  1.09M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
  172|  15.2M|    {
  173|  15.2M|        return m_end == nullptr;
  174|  15.2M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
  188|   620k|    {
  189|   620k|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 620k]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|   620k|        return parent()->get_segment_starting_at(position());
  195|   620k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  182|  8.00M|    {
  183|  8.00M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  8.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  8.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  8.00M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE23get_segment_starting_atEl:
   78|   620k|    {
   79|   620k|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.6k, False: 588k]
  |  |  ------------------
  ------------------
   80|   620k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  32.6k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  32.6k|        }
   83|   588k|        const auto start = pos - m_putback_buffer.size();
   84|   588k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|   588k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   588k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|   620k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator6parentEv:
  177|   473k|    {
  178|   473k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|   473k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   473k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|   473k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator8positionEv:
  167|  1.22M|    {
  168|  1.22M|        return m_position;
  169|  1.22M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE13is_contiguousEv:
  100|  1.12M|    {
  101|  1.12M|        return m_is_contiguous;
  102|  1.12M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
  172|  47.7M|    {
  173|  47.7M|        return m_end == nullptr;
  174|  47.7M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
  188|  1.79M|    {
  189|  1.79M|        if (!stores_parent()) {
  ------------------
  |  Branch (189:13): [True: 0, False: 1.79M]
  ------------------
  190|      0|            return make_string_view_from_pointers(
  191|      0|                static_cast<const CharT*>(m_begin) + position(),
  192|      0|                static_cast<const CharT*>(m_end));
  193|      0|        }
  194|  1.79M|        return parent()->get_segment_starting_at(position());
  195|  1.79M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  182|  25.1M|    {
  183|  25.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  25.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  25.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  184|      0|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
  185|  25.1M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE23get_segment_starting_atEl:
   78|  1.79M|    {
   79|  1.79M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 98.0k, False: 1.69M]
  |  |  ------------------
  ------------------
   80|  1.79M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   81|  98.0k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
   82|  98.0k|        }
   83|  1.69M|        const auto start = pos - m_putback_buffer.size();
   84|  1.69M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  242|  1.69M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.69M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   85|      0|        return m_current_view.substr(start);
   86|  1.79M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator6parentEv:
  177|  1.38M|    {
  178|  1.38M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  242|  1.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  179|      0|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
  180|  1.38M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator8positionEv:
  167|  3.51M|    {
  168|  3.51M|        return m_position;
  169|  3.51M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE13is_contiguousEv:
  100|  3.28M|    {
  101|  3.28M|        return m_is_contiguous;
  102|  3.28M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE3getEv:
  321|   375k|{
  322|   375k|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 375k]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|   375k|    return ranges::subrange{forward_iterator{this, 0},
  327|   375k|                            ranges_std::default_sentinel};
  328|   375k|}
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
  154|   375k|    {
  155|   375k|        SCN_EXPECT(parent);
  ------------------
  |  |  242|   375k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   375k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|   375k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|   375k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   375k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   375k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  1.25M|    {
  258|  1.25M|        return x.is_at_end();
  259|  1.25M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
  301|  1.56M|    {
  302|  1.56M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 1.56M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  1.56M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 1.56M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  1.56M|        return !read_at_position();
  309|  1.56M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
  281|  3.88M|    {
  282|  3.88M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  3.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  3.88M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 3.88M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  3.88M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  3.88M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 3.33M, False: 555k]
  |  |  ------------------
  ------------------
  289|  3.33M|            return true;
  290|  3.33M|        }
  291|       |
  292|  1.11M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 555k, False: 555k]
  ------------------
  293|   555k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 540, False: 555k]
  ------------------
  294|    540|                return false;
  295|    540|            }
  296|   555k|        }
  297|   555k|        return true;
  298|   555k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE15chars_availableEv:
   58|  5.47M|    {
   59|  5.47M|        return m_putback_buffer.size() + m_current_view.size();
   60|  5.47M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|   310k|    {
  269|   310k|        return !x.is_at_end();
  270|   310k|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16forward_iteratordeEv:
  216|  1.82M|    {
  217|  1.82M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  1.82M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 1.82M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  1.82M|        auto res = read_at_position();
  226|  1.82M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  1.82M|    }
_ZNK3scn2v26detail17basic_scan_bufferIcE16get_character_atEl:
   89|  1.82M|    {
   90|  1.82M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.79M, False: 33.1k]
  |  |  ------------------
  ------------------
   91|  1.82M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  1.79M|            return m_putback_buffer[pos];
   93|  1.79M|        }
   94|  33.1k|        const auto start = pos - m_putback_buffer.size();
   95|  33.1k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|  33.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  33.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  1.82M|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorppEv:
  202|   490k|    {
  203|   490k|        ++m_position;
  204|   490k|        std::ignore = read_at_position();
  205|   490k|        return *this;
  206|   490k|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  251|   538k|    {
  252|   538k|        return !(lhs == rhs);
  253|   538k|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
  246|   784k|    {
  247|   784k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 784k, False: 0]
  |  Branch (247:46): [True: 245k, False: 538k]
  ------------------
  248|   784k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE16forward_iterator13batch_advanceEl:
  231|   784k|    {
  232|   784k|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|   784k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   784k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|   784k|        return *this;
  235|   784k|    }
_ZN3scn2v26detail17basic_scan_bufferIcE8sync_allEv:
   53|   343k|    {
   54|   343k|        sync(0);
   55|   343k|    }
_ZN3scn2v26detail17basic_scan_bufferIwE3getEv:
  321|  1.09M|{
  322|  1.09M|    if (is_contiguous()) {
  ------------------
  |  Branch (322:9): [True: 0, False: 1.09M]
  ------------------
  323|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
  324|      0|                                ranges_std::default_sentinel};
  325|      0|    }
  326|  1.09M|    return ranges::subrange{forward_iterator{this, 0},
  327|  1.09M|                            ranges_std::default_sentinel};
  328|  1.09M|}
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
  154|  1.09M|    {
  155|  1.09M|        SCN_EXPECT(parent);
  ------------------
  |  |  242|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  156|  1.09M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  242|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  1.09M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  257|  3.64M|    {
  258|  3.64M|        return x.is_at_end();
  259|  3.64M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
  301|  4.73M|    {
  302|  4.73M|        if (m_end) {
  ------------------
  |  Branch (302:13): [True: 0, False: 4.73M]
  ------------------
  303|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
  304|      0|        }
  305|  4.73M|        if (!m_begin) {
  ------------------
  |  Branch (305:13): [True: 0, False: 4.73M]
  ------------------
  306|      0|            return true;
  307|      0|        }
  308|  4.73M|        return !read_at_position();
  309|  4.73M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
  281|  12.2M|    {
  282|  12.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  12.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  283|       |
  284|  12.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (284:13): [True: 0, False: 12.2M]
  ------------------
  285|      0|            return true;
  286|      0|        }
  287|       |
  288|  12.2M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  152|  12.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 10.4M, False: 1.79M]
  |  |  ------------------
  ------------------
  289|  10.4M|            return true;
  290|  10.4M|        }
  291|       |
  292|  3.59M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (292:16): [True: 1.79M, False: 1.79M]
  ------------------
  293|  1.79M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (293:17): [True: 618, False: 1.79M]
  ------------------
  294|    618|                return false;
  295|    618|            }
  296|  1.79M|        }
  297|  1.79M|        return true;
  298|  1.79M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE15chars_availableEv:
   58|  17.2M|    {
   59|  17.2M|        return m_putback_buffer.size() + m_current_view.size();
   60|  17.2M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tE:
  268|  1.09M|    {
  269|  1.09M|        return !x.is_at_end();
  270|  1.09M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16forward_iteratordeEv:
  216|  5.71M|    {
  217|  5.71M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  242|  5.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  218|       |
  219|  5.71M|        if (!stores_parent()) {
  ------------------
  |  Branch (219:13): [True: 0, False: 5.71M]
  ------------------
  220|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
  221|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  242|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|      0|            return *ptr;
  223|      0|        }
  224|       |
  225|  5.71M|        auto res = read_at_position();
  226|  5.71M|        SCN_EXPECT(res);
  ------------------
  |  |  242|  5.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  227|      0|        return parent()->get_character_at(m_position);
  228|  5.71M|    }
_ZNK3scn2v26detail17basic_scan_bufferIwE16get_character_atEl:
   89|  5.71M|    {
   90|  5.71M|        if (SCN_UNLIKELY(
  ------------------
  |  |  153|  5.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.42M, False: 294k]
  |  |  ------------------
  ------------------
   91|  5.71M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
   92|  5.42M|            return m_putback_buffer[pos];
   93|  5.42M|        }
   94|   294k|        const auto start = pos - m_putback_buffer.size();
   95|   294k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  242|   294k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   294k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   96|      0|        return m_current_view[start];
   97|  5.71M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorppEv:
  202|  1.82M|    {
  203|  1.82M|        ++m_position;
  204|  1.82M|        std::ignore = read_at_position();
  205|  1.82M|        return *this;
  206|  1.82M|    }
_ZN3scn2v26detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  251|  1.78M|    {
  252|  1.78M|        return !(lhs == rhs);
  253|  1.78M|    }
_ZN3scn2v26detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
  246|  2.48M|    {
  247|  2.48M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (247:16): [True: 2.48M, False: 0]
  |  Branch (247:46): [True: 702k, False: 1.78M]
  ------------------
  248|  2.48M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE16forward_iterator13batch_advanceEl:
  231|  2.25M|    {
  232|  2.25M|        SCN_EXPECT(n >= 0);
  ------------------
  |  |  242|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  233|      0|        m_position += n;
  234|  2.25M|        return *this;
  235|  2.25M|    }
_ZN3scn2v26detail17basic_scan_bufferIwE8sync_allEv:
   53|  1.02M|    {
   54|  1.02M|        sync(0);
   55|  1.02M|    }

_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIcEEmT_:
   71|   192k|{
   72|   192k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|   192k|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|   192k|    }
   75|   192k|    else if constexpr (sizeof(U) == 2) {
   76|   192k|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|   192k|    }
   78|   192k|    else {
   79|       |        // utf-32
   80|   192k|        static_assert(sizeof(U) == 4);
   81|   192k|        SCN_UNUSED(ch);
   82|   192k|        return 1;
   83|   192k|    }
   84|   192k|}
_ZN3scn2v26detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
   35|   192k|{
   36|   192k|    static_assert(sizeof(U8) == 1);
   37|       |
   38|   192k|    SCN_GCC_COMPAT_PUSH
   39|   192k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
   40|   192k|    constexpr char lengths[] =
   41|   192k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
   42|   192k|        "\1\1\1\1\1\1\1\1"
   43|   192k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
   44|       |                            // byte
   45|   192k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
   46|   192k|        "\3\3"              // highest bits 1110 -> 3-byte cp
   47|   192k|        "\4";               // highest bits 11110 -> 4-byte cp
   48|   192k|    return lengths[static_cast<unsigned char>(ch) >> 3];
   49|   192k|    SCN_GCC_COMPAT_POP
   50|   192k|}
_ZN3scn2v26detail43utf_code_point_length_by_starting_code_unitIwEEmT_:
   71|  98.2M|{
   72|  98.2M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (72:19): [Folded - Ignored]
  ------------------
   73|  98.2M|        return utf8_code_point_length_by_starting_code_unit(ch);
   74|  98.2M|    }
   75|  98.2M|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (75:24): [Folded - Ignored]
  ------------------
   76|  98.2M|        return utf16_code_point_length_by_starting_code_unit(ch);
   77|  98.2M|    }
   78|  98.2M|    else {
   79|       |        // utf-32
   80|  98.2M|        static_assert(sizeof(U) == 4);
   81|  98.2M|        SCN_UNUSED(ch);
  ------------------
  |  |  227|  98.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   82|  98.2M|        return 1;
   83|  98.2M|    }
   84|  98.2M|}

_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.90M|{
   36|  1.90M|#define SCN_VISIT(Type)                                         \
   37|  1.90M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.90M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.90M|    }                                                           \
   40|  1.90M|    else {                                                      \
   41|  1.90M|        return vis(monostate_val);                              \
   42|  1.90M|    }
   43|       |
   44|  1.90M|    monostate monostate_val{};
   45|       |
   46|  1.90M|    switch (arg.m_type) {
   47|   268k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 268k, False: 1.63M]
  ------------------
   48|   268k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   268k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   268k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   268k|    }                                                           \
  |  |   40|   268k|    else {                                                      \
  |  |   41|   268k|        return vis(monostate_val);                              \
  |  |   42|   268k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.90M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   372k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 372k, False: 1.52M]
  ------------------
   52|   372k|            SCN_VISIT(int);
  ------------------
  |  |   37|   372k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   372k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   372k|    }                                                           \
  |  |   40|   372k|    else {                                                      \
  |  |   41|   372k|        return vis(monostate_val);                              \
  |  |   42|   372k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.90M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   400k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 400k, False: 1.50M]
  ------------------
   56|   400k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   400k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   400k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   400k|    }                                                           \
  |  |   40|   400k|    else {                                                      \
  |  |   41|   400k|        return vis(monostate_val);                              \
  |  |   42|   400k|    }
  ------------------
   57|   242k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 242k, False: 1.65M]
  ------------------
   58|   242k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   242k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   242k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   242k|    }                                                           \
  |  |   40|   242k|    else {                                                      \
  |  |   41|   242k|        return vis(monostate_val);                              \
  |  |   42|   242k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.90M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   300k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 300k, False: 1.60M]
  ------------------
   62|   300k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   300k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   300k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   300k|    }                                                           \
  |  |   40|   300k|    else {                                                      \
  |  |   41|   300k|        return vis(monostate_val);                              \
  |  |   42|   300k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.90M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   317k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 317k, False: 1.58M]
  ------------------
   66|   317k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   317k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   317k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   317k|    }                                                           \
  |  |   40|   317k|    else {                                                      \
  |  |   41|   317k|        return vis(monostate_val);                              \
  |  |   42|   317k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.90M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.90M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.90M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.90M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.90M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.90M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.90M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.90M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.90M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.90M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.90M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.90M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.90M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.90M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.90M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.90M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.90M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.90M|            SCN_CLANG_POP
  114|  1.90M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.90M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  49.0k|{
   36|  49.0k|#define SCN_VISIT(Type)                                         \
   37|  49.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  49.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  49.0k|    }                                                           \
   40|  49.0k|    else {                                                      \
   41|  49.0k|        return vis(monostate_val);                              \
   42|  49.0k|    }
   43|       |
   44|  49.0k|    monostate monostate_val{};
   45|       |
   46|  49.0k|    switch (arg.m_type) {
   47|  8.16k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 8.16k, False: 40.8k]
  ------------------
   48|  8.16k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  8.16k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  8.16k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  8.16k|    }                                                           \
  |  |   40|  8.16k|    else {                                                      \
  |  |   41|  8.16k|        return vis(monostate_val);                              \
  |  |   42|  8.16k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 49.0k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  8.16k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 8.16k, False: 40.8k]
  ------------------
   52|  8.16k|            SCN_VISIT(int);
  ------------------
  |  |   37|  8.16k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  8.16k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  8.16k|    }                                                           \
  |  |   40|  8.16k|    else {                                                      \
  |  |   41|  8.16k|        return vis(monostate_val);                              \
  |  |   42|  8.16k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 49.0k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  8.16k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 8.16k, False: 40.8k]
  ------------------
   56|  8.16k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  8.16k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  8.16k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  8.16k|    }                                                           \
  |  |   40|  8.16k|    else {                                                      \
  |  |   41|  8.16k|        return vis(monostate_val);                              \
  |  |   42|  8.16k|    }
  ------------------
   57|  8.16k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 8.16k, False: 40.8k]
  ------------------
   58|  8.16k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  8.16k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  8.16k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  8.16k|    }                                                           \
  |  |   40|  8.16k|    else {                                                      \
  |  |   41|  8.16k|        return vis(monostate_val);                              \
  |  |   42|  8.16k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 49.0k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  8.16k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 8.16k, False: 40.8k]
  ------------------
   62|  8.16k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  8.16k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  8.16k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  8.16k|    }                                                           \
  |  |   40|  8.16k|    else {                                                      \
  |  |   41|  8.16k|        return vis(monostate_val);                              \
  |  |   42|  8.16k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 49.0k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  8.16k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 8.16k, False: 40.8k]
  ------------------
   66|  8.16k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  8.16k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  8.16k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  8.16k|    }                                                           \
  |  |   40|  8.16k|    else {                                                      \
  |  |   41|  8.16k|        return vis(monostate_val);                              \
  |  |   42|  8.16k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 49.0k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 49.0k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 49.0k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 49.0k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 49.0k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 49.0k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 49.0k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 49.0k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 49.0k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 49.0k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 49.0k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 49.0k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 49.0k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 49.0k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 49.0k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 49.0k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 49.0k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  49.0k|            SCN_CLANG_POP
  114|  49.0k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  49.0k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  4.67M|{
   36|  4.67M|#define SCN_VISIT(Type)                                         \
   37|  4.67M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  4.67M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  4.67M|    }                                                           \
   40|  4.67M|    else {                                                      \
   41|  4.67M|        return vis(monostate_val);                              \
   42|  4.67M|    }
   43|       |
   44|  4.67M|    monostate monostate_val{};
   45|       |
   46|  4.67M|    switch (arg.m_type) {
   47|   611k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 611k, False: 4.06M]
  ------------------
   48|   611k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   611k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   611k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   611k|    }                                                           \
  |  |   40|   611k|    else {                                                      \
  |  |   41|   611k|        return vis(monostate_val);                              \
  |  |   42|   611k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 4.67M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   937k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 937k, False: 3.74M]
  ------------------
   52|   937k|            SCN_VISIT(int);
  ------------------
  |  |   37|   937k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   937k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   937k|    }                                                           \
  |  |   40|   937k|    else {                                                      \
  |  |   41|   937k|        return vis(monostate_val);                              \
  |  |   42|   937k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 4.67M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  1.01M|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 1.01M, False: 3.66M]
  ------------------
   56|  1.01M|            SCN_VISIT(long long);
  ------------------
  |  |   37|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  1.01M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  1.01M|    }                                                           \
  |  |   40|  1.01M|    else {                                                      \
  |  |   41|  1.01M|        return vis(monostate_val);                              \
  |  |   42|  1.01M|    }
  ------------------
   57|   585k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 585k, False: 4.09M]
  ------------------
   58|   585k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   585k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   585k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   585k|    }                                                           \
  |  |   40|   585k|    else {                                                      \
  |  |   41|   585k|        return vis(monostate_val);                              \
  |  |   42|   585k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 4.67M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   740k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 740k, False: 3.93M]
  ------------------
   62|   740k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   740k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   740k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   740k|    }                                                           \
  |  |   40|   740k|    else {                                                      \
  |  |   41|   740k|        return vis(monostate_val);                              \
  |  |   42|   740k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 4.67M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   787k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 787k, False: 3.89M]
  ------------------
   66|   787k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   787k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   787k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   787k|    }                                                           \
  |  |   40|   787k|    else {                                                      \
  |  |   41|   787k|        return vis(monostate_val);                              \
  |  |   42|   787k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 4.67M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 4.67M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 4.67M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 4.67M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 4.67M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 4.67M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 4.67M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 4.67M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 4.67M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 4.67M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 4.67M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 4.67M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 4.67M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 4.67M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 4.67M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 4.67M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 4.67M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  4.67M|            SCN_CLANG_POP
  114|  4.67M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  4.67M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   228k|{
   36|   228k|#define SCN_VISIT(Type)                                         \
   37|   228k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   228k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   228k|    }                                                           \
   40|   228k|    else {                                                      \
   41|   228k|        return vis(monostate_val);                              \
   42|   228k|    }
   43|       |
   44|   228k|    monostate monostate_val{};
   45|       |
   46|   228k|    switch (arg.m_type) {
   47|  38.1k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 38.1k, False: 190k]
  ------------------
   48|  38.1k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  38.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  38.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  38.1k|    }                                                           \
  |  |   40|  38.1k|    else {                                                      \
  |  |   41|  38.1k|        return vis(monostate_val);                              \
  |  |   42|  38.1k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 228k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  38.1k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 38.1k, False: 190k]
  ------------------
   52|  38.1k|            SCN_VISIT(int);
  ------------------
  |  |   37|  38.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  38.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  38.1k|    }                                                           \
  |  |   40|  38.1k|    else {                                                      \
  |  |   41|  38.1k|        return vis(monostate_val);                              \
  |  |   42|  38.1k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 228k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  38.1k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 38.1k, False: 190k]
  ------------------
   56|  38.1k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  38.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  38.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  38.1k|    }                                                           \
  |  |   40|  38.1k|    else {                                                      \
  |  |   41|  38.1k|        return vis(monostate_val);                              \
  |  |   42|  38.1k|    }
  ------------------
   57|  38.1k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 38.1k, False: 190k]
  ------------------
   58|  38.1k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  38.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  38.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  38.1k|    }                                                           \
  |  |   40|  38.1k|    else {                                                      \
  |  |   41|  38.1k|        return vis(monostate_val);                              \
  |  |   42|  38.1k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 228k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  38.1k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 38.1k, False: 190k]
  ------------------
   62|  38.1k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  38.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  38.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  38.1k|    }                                                           \
  |  |   40|  38.1k|    else {                                                      \
  |  |   41|  38.1k|        return vis(monostate_val);                              \
  |  |   42|  38.1k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 228k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  38.1k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 38.1k, False: 190k]
  ------------------
   66|  38.1k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  38.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  38.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  38.1k|    }                                                           \
  |  |   40|  38.1k|    else {                                                      \
  |  |   41|  38.1k|        return vis(monostate_val);                              \
  |  |   42|  38.1k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 228k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 228k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 228k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 228k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 228k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 228k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 228k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 228k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 228k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 228k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 228k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 228k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 228k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 228k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 228k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 228k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 228k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   228k|            SCN_CLANG_POP
  114|   228k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   228k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  1.80M|{
   36|  1.80M|#define SCN_VISIT(Type)                                         \
   37|  1.80M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  1.80M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  1.80M|    }                                                           \
   40|  1.80M|    else {                                                      \
   41|  1.80M|        return vis(monostate_val);                              \
   42|  1.80M|    }
   43|       |
   44|  1.80M|    monostate monostate_val{};
   45|       |
   46|  1.80M|    switch (arg.m_type) {
   47|   259k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 259k, False: 1.54M]
  ------------------
   48|   259k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   259k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   259k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   259k|    }                                                           \
  |  |   40|   259k|    else {                                                      \
  |  |   41|   259k|        return vis(monostate_val);                              \
  |  |   42|   259k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 1.80M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   350k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 350k, False: 1.45M]
  ------------------
   52|   350k|            SCN_VISIT(int);
  ------------------
  |  |   37|   350k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   350k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   350k|    }                                                           \
  |  |   40|   350k|    else {                                                      \
  |  |   41|   350k|        return vis(monostate_val);                              \
  |  |   42|   350k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 1.80M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   373k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 373k, False: 1.43M]
  ------------------
   56|   373k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   373k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   373k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   373k|    }                                                           \
  |  |   40|   373k|    else {                                                      \
  |  |   41|   373k|        return vis(monostate_val);                              \
  |  |   42|   373k|    }
  ------------------
   57|   234k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 234k, False: 1.56M]
  ------------------
   58|   234k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   234k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   234k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   234k|    }                                                           \
  |  |   40|   234k|    else {                                                      \
  |  |   41|   234k|        return vis(monostate_val);                              \
  |  |   42|   234k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 1.80M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   285k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 285k, False: 1.51M]
  ------------------
   62|   285k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   285k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   285k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   285k|    }                                                           \
  |  |   40|   285k|    else {                                                      \
  |  |   41|   285k|        return vis(monostate_val);                              \
  |  |   42|   285k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 1.80M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   299k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 299k, False: 1.50M]
  ------------------
   66|   299k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   299k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   299k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   299k|    }                                                           \
  |  |   40|   299k|    else {                                                      \
  |  |   41|   299k|        return vis(monostate_val);                              \
  |  |   42|   299k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 1.80M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 1.80M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 1.80M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 1.80M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 1.80M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 1.80M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 1.80M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 1.80M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 1.80M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 1.80M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 1.80M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 1.80M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 1.80M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 1.80M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 1.80M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 1.80M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 1.80M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  1.80M|            SCN_CLANG_POP
  114|  1.80M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  1.80M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|  4.59M|{
   36|  4.59M|#define SCN_VISIT(Type)                                         \
   37|  4.59M|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|  4.59M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|  4.59M|    }                                                           \
   40|  4.59M|    else {                                                      \
   41|  4.59M|        return vis(monostate_val);                              \
   42|  4.59M|    }
   43|       |
   44|  4.59M|    monostate monostate_val{};
   45|       |
   46|  4.59M|    switch (arg.m_type) {
   47|   617k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 617k, False: 3.97M]
  ------------------
   48|   617k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|   617k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   617k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   617k|    }                                                           \
  |  |   40|   617k|    else {                                                      \
  |  |   41|   617k|        return vis(monostate_val);                              \
  |  |   42|   617k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 4.59M]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   905k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 905k, False: 3.68M]
  ------------------
   52|   905k|            SCN_VISIT(int);
  ------------------
  |  |   37|   905k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   905k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   905k|    }                                                           \
  |  |   40|   905k|    else {                                                      \
  |  |   41|   905k|        return vis(monostate_val);                              \
  |  |   42|   905k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 4.59M]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   968k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 968k, False: 3.62M]
  ------------------
   56|   968k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   968k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   968k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   968k|    }                                                           \
  |  |   40|   968k|    else {                                                      \
  |  |   41|   968k|        return vis(monostate_val);                              \
  |  |   42|   968k|    }
  ------------------
   57|   595k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 595k, False: 3.99M]
  ------------------
   58|   595k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|   595k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   595k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   595k|    }                                                           \
  |  |   40|   595k|    else {                                                      \
  |  |   41|   595k|        return vis(monostate_val);                              \
  |  |   42|   595k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 4.59M]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   733k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 733k, False: 3.85M]
  ------------------
   62|   733k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   733k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   733k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   733k|    }                                                           \
  |  |   40|   733k|    else {                                                      \
  |  |   41|   733k|        return vis(monostate_val);                              \
  |  |   42|   733k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 4.59M]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   771k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 771k, False: 3.82M]
  ------------------
   66|   771k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   771k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   771k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   771k|    }                                                           \
  |  |   40|   771k|    else {                                                      \
  |  |   41|   771k|        return vis(monostate_val);                              \
  |  |   42|   771k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 4.59M]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 4.59M]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 4.59M]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 4.59M]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 4.59M]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 4.59M]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 4.59M]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 4.59M]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 4.59M]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 4.59M]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 4.59M]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 4.59M]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 4.59M]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 4.59M]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 4.59M]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 4.59M]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 4.59M]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|  4.59M|            SCN_CLANG_POP
  114|  4.59M|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|  4.59M|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   147k|{
   36|   147k|#define SCN_VISIT(Type)                                         \
   37|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   147k|    }                                                           \
   40|   147k|    else {                                                      \
   41|   147k|        return vis(monostate_val);                              \
   42|   147k|    }
   43|       |
   44|   147k|    monostate monostate_val{};
   45|       |
   46|   147k|    switch (arg.m_type) {
   47|  24.5k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 24.5k, False: 122k]
  ------------------
   48|  24.5k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  24.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.5k|    }                                                           \
  |  |   40|  24.5k|    else {                                                      \
  |  |   41|  24.5k|        return vis(monostate_val);                              \
  |  |   42|  24.5k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 147k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|  24.5k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 24.5k, False: 122k]
  ------------------
   52|  24.5k|            SCN_VISIT(int);
  ------------------
  |  |   37|  24.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.5k|    }                                                           \
  |  |   40|  24.5k|    else {                                                      \
  |  |   41|  24.5k|        return vis(monostate_val);                              \
  |  |   42|  24.5k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 147k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|  24.5k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 24.5k, False: 122k]
  ------------------
   56|  24.5k|            SCN_VISIT(long long);
  ------------------
  |  |   37|  24.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.5k|    }                                                           \
  |  |   40|  24.5k|    else {                                                      \
  |  |   41|  24.5k|        return vis(monostate_val);                              \
  |  |   42|  24.5k|    }
  ------------------
   57|  24.5k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 24.5k, False: 122k]
  ------------------
   58|  24.5k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  24.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.5k|    }                                                           \
  |  |   40|  24.5k|    else {                                                      \
  |  |   41|  24.5k|        return vis(monostate_val);                              \
  |  |   42|  24.5k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 147k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|  24.5k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 24.5k, False: 122k]
  ------------------
   62|  24.5k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|  24.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.5k|    }                                                           \
  |  |   40|  24.5k|    else {                                                      \
  |  |   41|  24.5k|        return vis(monostate_val);                              \
  |  |   42|  24.5k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 147k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|  24.5k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 24.5k, False: 122k]
  ------------------
   66|  24.5k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|  24.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  24.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  24.5k|    }                                                           \
  |  |   40|  24.5k|    else {                                                      \
  |  |   41|  24.5k|        return vis(monostate_val);                              \
  |  |   42|  24.5k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 147k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 147k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 147k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 147k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 147k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 147k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 147k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 147k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 147k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 147k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 147k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 147k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 147k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 147k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 147k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 147k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 147k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   147k|            SCN_CLANG_POP
  114|   147k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   147k|}  // namespace scn
_ZN3scn2v214visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
   35|   653k|{
   36|   653k|#define SCN_VISIT(Type)                                         \
   37|   653k|    if constexpr (!detail::is_type_disabled<Type>) {            \
   38|   653k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
   39|   653k|    }                                                           \
   40|   653k|    else {                                                      \
   41|   653k|        return vis(monostate_val);                              \
   42|   653k|    }
   43|       |
   44|   653k|    monostate monostate_val{};
   45|       |
   46|   653k|    switch (arg.m_type) {
   47|  98.0k|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (47:9): [True: 98.0k, False: 555k]
  ------------------
   48|  98.0k|            SCN_VISIT(signed char);
  ------------------
  |  |   37|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  98.0k|    }                                                           \
  |  |   40|  98.0k|    else {                                                      \
  |  |   41|  98.0k|        return vis(monostate_val);                              \
  |  |   42|  98.0k|    }
  ------------------
   49|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (49:9): [True: 0, False: 653k]
  ------------------
   50|      0|            SCN_VISIT(short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   51|   114k|        case detail::arg_type::int_type:
  ------------------
  |  Branch (51:9): [True: 114k, False: 539k]
  ------------------
   52|   114k|            SCN_VISIT(int);
  ------------------
  |  |   37|   114k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   114k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   114k|    }                                                           \
  |  |   40|   114k|    else {                                                      \
  |  |   41|   114k|        return vis(monostate_val);                              \
  |  |   42|   114k|    }
  ------------------
   53|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (53:9): [True: 0, False: 653k]
  ------------------
   54|      0|            SCN_VISIT(long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   55|   114k|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (55:9): [True: 114k, False: 539k]
  ------------------
   56|   114k|            SCN_VISIT(long long);
  ------------------
  |  |   37|   114k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   114k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   114k|    }                                                           \
  |  |   40|   114k|    else {                                                      \
  |  |   41|   114k|        return vis(monostate_val);                              \
  |  |   42|   114k|    }
  ------------------
   57|  98.0k|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (57:9): [True: 98.0k, False: 555k]
  ------------------
   58|  98.0k|            SCN_VISIT(unsigned char);
  ------------------
  |  |   37|  98.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|  98.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|  98.0k|    }                                                           \
  |  |   40|  98.0k|    else {                                                      \
  |  |   41|  98.0k|        return vis(monostate_val);                              \
  |  |   42|  98.0k|    }
  ------------------
   59|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (59:9): [True: 0, False: 653k]
  ------------------
   60|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   61|   114k|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (61:9): [True: 114k, False: 539k]
  ------------------
   62|   114k|            SCN_VISIT(unsigned);
  ------------------
  |  |   37|   114k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   114k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   114k|    }                                                           \
  |  |   40|   114k|    else {                                                      \
  |  |   41|   114k|        return vis(monostate_val);                              \
  |  |   42|   114k|    }
  ------------------
   63|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (63:9): [True: 0, False: 653k]
  ------------------
   64|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   65|   114k|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (65:9): [True: 114k, False: 539k]
  ------------------
   66|   114k|            SCN_VISIT(unsigned long long);
  ------------------
  |  |   37|   114k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|   114k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|   114k|    }                                                           \
  |  |   40|   114k|    else {                                                      \
  |  |   41|   114k|        return vis(monostate_val);                              \
  |  |   42|   114k|    }
  ------------------
   67|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (67:9): [True: 0, False: 653k]
  ------------------
   68|      0|            SCN_VISIT(void*);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   69|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (69:9): [True: 0, False: 653k]
  ------------------
   70|      0|            SCN_VISIT(bool);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   71|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (71:9): [True: 0, False: 653k]
  ------------------
   72|      0|            SCN_VISIT(char);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   73|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (73:9): [True: 0, False: 653k]
  ------------------
   74|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   75|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (75:9): [True: 0, False: 653k]
  ------------------
   76|      0|            SCN_VISIT(char32_t);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   77|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (77:9): [True: 0, False: 653k]
  ------------------
   78|      0|            SCN_VISIT(float);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   79|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (79:9): [True: 0, False: 653k]
  ------------------
   80|      0|            SCN_VISIT(double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   81|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (81:9): [True: 0, False: 653k]
  ------------------
   82|      0|            SCN_VISIT(long double);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   83|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (83:9): [True: 0, False: 653k]
  ------------------
   84|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   85|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (85:9): [True: 0, False: 653k]
  ------------------
   86|      0|            SCN_VISIT(std::string);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   87|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (87:9): [True: 0, False: 653k]
  ------------------
   88|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   89|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (89:9): [True: 0, False: 653k]
  ------------------
   90|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   91|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (91:9): [True: 0, False: 653k]
  ------------------
   92|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   93|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (93:9): [True: 0, False: 653k]
  ------------------
   94|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  |   37|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (37:19): [Folded - Ignored]
  |  |  ------------------
  |  |   38|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  |   39|      0|    }                                                           \
  |  |   40|      0|    else {                                                      \
  |  |   41|      0|        return vis(monostate_val);                              \
  |  |   42|      0|    }
  ------------------
   95|       |
   96|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (96:9): [True: 0, False: 653k]
  ------------------
   97|      0|#if !SCN_DISABLE_TYPE_CUSTOM
   98|      0|            return vis(
   99|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
  100|       |#else
  101|       |            return vis(monostate_val);
  102|       |#endif
  103|       |
  104|      0|            SCN_CLANG_PUSH
  105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
  106|       |
  107|      0|            SCN_UNLIKELY_ATTR
  108|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (108:9): [True: 0, False: 653k]
  ------------------
  109|      0|        default: {
  ------------------
  |  Branch (109:9): [True: 0, False: 653k]
  ------------------
  110|      0|            return vis(monostate_val);
  111|      0|        }
  112|       |
  113|   653k|            SCN_CLANG_POP
  114|   653k|    }
  115|       |
  116|      0|#undef SCN_VISIT
  117|       |
  118|      0|    SCN_ENSURE(false);
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  183|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
  120|   653k|}  // namespace scn

_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|  3.02M|{
  174|  3.02M|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|  3.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|  3.02M|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  3.02M|{
  111|  3.02M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  3.02M|    auto result = vscan_impl(buffer, format, args);
  114|  3.02M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 2.85M]
  |  |  ------------------
  ------------------
  115|   163k|        return unexpected(result.error());
  116|   163k|    }
  117|  2.85M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  3.02M|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENSt3__16localeEvEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEERKT0_OSG_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|  3.02M|{
  192|  3.02M|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|  3.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|  3.02M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  3.02M|{
  127|  3.02M|#if !SCN_DISABLE_LOCALE
  128|  3.02M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  3.02M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  3.02M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  3.02M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  3.02M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 2.85M]
  |  |  ------------------
  ------------------
  135|   163k|        return unexpected(result.error());
  136|   163k|    }
  137|  2.85M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  3.02M|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|   633k|{
  205|   633k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|   633k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   633k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   633k|{
  151|   633k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   633k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   633k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   633k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16.3k, False: 617k]
  |  |  ------------------
  ------------------
  155|  16.3k|        return unexpected(result.error());
  156|  16.3k|    }
  157|   617k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   617k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   633k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  173|   179k|{
  174|   179k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  248|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  175|   179k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   179k|{
  111|   179k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   179k|    auto result = vscan_impl(buffer, format, args);
  114|   179k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 16.3k]
  |  |  ------------------
  ------------------
  115|   163k|        return unexpected(result.error());
  116|   163k|    }
  117|  16.3k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   179k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEERKT0_OSL_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  191|   179k|{
  192|   179k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  248|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  193|   179k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS6_13subrange_kindE1EEEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   179k|{
  127|   179k|#if !SCN_DISABLE_LOCALE
  128|   179k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   179k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   179k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   179k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   179k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 163k, False: 16.3k]
  |  |  ------------------
  ------------------
  135|   163k|        return unexpected(result.error());
  136|   163k|    }
  137|  16.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   179k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  204|  16.3k|{
  205|  16.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  16.3k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  16.3k|{
  151|  16.3k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  16.3k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  16.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 16.3k, False: 0]
  |  |  ------------------
  ------------------
  155|  16.3k|        return unexpected(result.error());
  156|  16.3k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  16.3k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NSC_17basic_string_viewIT0_NSC_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
  110|  3.04M|{
  111|  3.04M|    auto buffer = make_scan_buffer(range);
  112|       |
  113|  3.04M|    auto result = vscan_impl(buffer, format, args);
  114|  3.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  3.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 490k, False: 2.55M]
  |  |  ------------------
  ------------------
  115|   490k|        return unexpected(result.error());
  116|   490k|    }
  117|  2.55M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|  3.04M|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT_OSH_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
  126|  3.04M|{
  127|  3.04M|#if !SCN_DISABLE_LOCALE
  128|  3.04M|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|  3.04M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|  3.04M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|  3.04M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|  3.04M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  3.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 490k, False: 2.55M]
  |  |  ------------------
  ------------------
  135|   490k|        return unexpected(result.error());
  136|   490k|    }
  137|  2.55M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  2.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|  3.04M|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSC_9remove_cvINSC_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESM_NS0_31borrowed_subrange_with_sentinelISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEEEOSG_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|   601k|{
  151|   601k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|   601k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|   601k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 49.0k, False: 552k]
  |  |  ------------------
  ------------------
  155|  49.0k|        return unexpected(result.error());
  156|  49.0k|    }
  157|   552k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|   552k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|   601k|}
_ZN3scn2v26detail13vscan_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS7_17basic_string_viewIT0_NS7_11char_traitsIS10_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS10_EEEE:
  110|   522k|{
  111|   522k|    auto buffer = make_scan_buffer(range);
  112|       |
  113|   522k|    auto result = vscan_impl(buffer, format, args);
  114|   522k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   522k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 490k, False: 32.6k]
  |  |  ------------------
  ------------------
  115|   490k|        return unexpected(result.error());
  116|   490k|    }
  117|  32.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  118|   522k|}
_ZN3scn2v26detail23vscan_localized_genericINSt3__16localeEN4nano6ranges9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS6_13subrange_kindE1EEEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vINS3_9remove_cvINS3_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT_OSM_NS3_17basic_string_viewIT1_NS3_11char_traitsIS14_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS14_EEEE:
  126|   522k|{
  127|   522k|#if !SCN_DISABLE_LOCALE
  128|   522k|    auto buffer = detail::make_scan_buffer(range);
  129|       |
  130|   522k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
  131|   522k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
  132|   522k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
  133|       |
  134|   522k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|   522k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 490k, False: 32.6k]
  |  |  ------------------
  ------------------
  135|   490k|        return unexpected(result.error());
  136|   490k|    }
  137|  32.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  138|       |#else
  139|       |    static_assert(dependent_false<Locale>::value,
  140|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
  141|       |
  142|       |    return {};
  143|       |#endif
  144|   522k|}
_ZN3scn2v26detail19vscan_value_genericIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vINS7_9remove_cvINS7_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESR_NS0_31borrowed_subrange_with_sentinelISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEEEOSL_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  150|  49.0k|{
  151|  49.0k|    auto buffer = detail::make_scan_buffer(range);
  152|       |
  153|  49.0k|    auto result = detail::vscan_value_impl(buffer, arg);
  154|  49.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  153|  49.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 49.0k, False: 0]
  |  |  ------------------
  ------------------
  155|  49.0k|        return unexpected(result.error());
  156|  49.0k|    }
  157|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  158|  49.0k|}

_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   420k|{
   90|   420k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   420k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   420k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NSB_17basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|  3.04M|{
   45|  3.04M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|  3.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  3.04M|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   420k|{
  125|   420k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   420k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   420k|                                                         format, {});
  127|   420k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENSt3__16localeELPv0EEENS0_13scan_expectedINSA_11conditionalIXsr3stdE9is_same_vINSA_9remove_cvINSA_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEERKT0_OSH_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|  3.04M|{
   61|  3.04M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|  3.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|  3.04M|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  86.6k|{
  159|  86.6k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  86.6k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vINSB_9remove_cvINSB_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESL_NS0_31borrowed_subrange_with_sentinelISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEEOSF_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|   601k|{
   73|   601k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|   601k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|   601k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   400k|{
   90|   400k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   400k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   400k|{
  125|   400k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   400k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   400k|                                                         format, {});
  127|   400k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  78.1k|{
  159|  78.1k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  78.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  78.1k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   594k|{
   90|   594k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   594k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   594k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   594k|{
  125|   594k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   594k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   594k|                                                         format, {});
  127|   594k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|   116k|{
  159|   116k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|   116k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   486k|{
   90|   486k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   486k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   486k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   486k|{
  125|   486k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   486k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   486k|                                                         format, {});
  127|   486k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  95.2k|{
  159|  95.2k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  95.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  95.2k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   633k|{
   90|   633k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   633k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   633k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   633k|{
  125|   633k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   633k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   633k|                                                         format, {});
  127|   633k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|   124k|{
  159|   124k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|   124k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISH_E4typeEJDpNS10_IST_E4typeEEEE:
   89|   510k|{
   90|   510k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   510k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEELPv0ELSC_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEESO_NS0_31borrowed_subrange_with_sentinelISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISI_E4typeEJDpNS14_ISU_E4typeEEEE:
  124|   510k|{
  125|   510k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|   510k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|   510k|                                                         format, {});
  127|   510k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vINSD_9remove_cvINSD_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESN_NS0_31borrowed_subrange_with_sentinelISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  158|  99.9k|{
  159|  99.9k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  99.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  99.9k|}
_ZN3scn2v24scanIJaEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  81.6k|{
   90|  81.6k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  81.6k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   44|   522k|{
   45|   522k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  248|   522k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   522k|}
_ZN3scn2v24scanIJaENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  81.6k|{
  125|  81.6k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  81.6k|                                                         format, {});
  127|  81.6k|}
_ZN3scn2v25vscanIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEEERKT0_OSM_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   60|   522k|{
   61|   522k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  248|   522k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   62|   522k|}
_ZN3scn2v210scan_valueIaN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.16k|{
  159|  8.16k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.16k|}
_ZN3scn2v211vscan_valueIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT_E4typeEE4typeEP8_IO_FILEEESQ_NS0_31borrowed_subrange_with_sentinelISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEEOSK_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   72|  49.0k|{
   73|  49.0k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  248|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   74|  49.0k|}
_ZN3scn2v24scanIJhEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  81.6k|{
   90|  81.6k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  81.6k|}
_ZN3scn2v24scanIJhENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  81.6k|{
  125|  81.6k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  81.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  81.6k|                                                         format, {});
  127|  81.6k|}
_ZN3scn2v210scan_valueIhN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.16k|{
  159|  8.16k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.16k|}
_ZN3scn2v24scanIJiEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  89.8k|{
   90|  89.8k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  89.8k|}
_ZN3scn2v24scanIJiENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  89.8k|{
  125|  89.8k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  89.8k|                                                         format, {});
  127|  89.8k|}
_ZN3scn2v210scan_valueIiN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.16k|{
  159|  8.16k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.16k|}
_ZN3scn2v24scanIJjEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  89.8k|{
   90|  89.8k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  89.8k|}
_ZN3scn2v24scanIJjENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  89.8k|{
  125|  89.8k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  89.8k|                                                         format, {});
  127|  89.8k|}
_ZN3scn2v210scan_valueIjN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.16k|{
  159|  8.16k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.16k|}
_ZN3scn2v24scanIJxEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  89.8k|{
   90|  89.8k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  89.8k|}
_ZN3scn2v24scanIJxENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  89.8k|{
  125|  89.8k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  89.8k|                                                         format, {});
  127|  89.8k|}
_ZN3scn2v210scan_valueIxN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.16k|{
  159|  8.16k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.16k|}
_ZN3scn2v24scanIJyEN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISM_E4typeEJDpNS15_ISY_E4typeEEEE:
   89|  89.8k|{
   90|  89.8k|    return detail::scan_impl<wchar_t, Args...>(SCN_FWD(source), format, {});
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  89.8k|}
_ZN3scn2v24scanIJyENSt3__16localeEN4nano6ranges9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS5_13subrange_kindE1EEELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vINS2_9remove_cvINS2_16remove_referenceIT1_E4typeEE4typeEP8_IO_FILEEEST_NS0_31borrowed_subrange_with_sentinelISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS0_6detail13type_identityISN_E4typeEJDpNS19_ISZ_E4typeEEEE:
  124|  89.8k|{
  125|  89.8k|    return detail::scan_localized_impl<wchar_t, Args...>(loc, SCN_FWD(source),
  ------------------
  |  |  248|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  126|  89.8k|                                                         format, {});
  127|  89.8k|}
_ZN3scn2v210scan_valueIyN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vINS6_9remove_cvINS6_16remove_referenceIT0_E4typeEE4typeEP8_IO_FILEEESS_NS0_31borrowed_subrange_with_sentinelISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  158|  8.16k|{
  159|  8.16k|    return detail::scan_value_impl<wchar_t>(SCN_FWD(source), T{});
  ------------------
  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  160|  8.16k|}

_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  7.17M|            {
 2693|  7.17M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  7.17M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  7.17M|            {
 2672|  7.17M|                return decay_copy(t.begin());
 2673|  7.17M|            }
_ZN4nano6ranges6detail10decay_copyIPKcEENSt3__15decayIT_E4typeEOS7_:
 2605|   212M|    {
 2606|   212M|        return std::forward<T>(t);
 2607|   212M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  13.2M|            {
 3178|  13.2M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  13.2M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  13.2M|            {
 3158|  13.2M|                return t.data();
 3159|  13.2M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  13.2M|    {
 6095|  13.2M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 20.1k, False: 13.2M]
  ------------------
 6096|  13.2M|                   ? nullptr
 6097|  13.2M|                   : std::addressof(*ranges::begin(derived()));
 6098|  13.2M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  13.2M|            {
 3127|  13.2M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  13.2M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  13.2M|            {
 3098|  13.2M|                return bool((std::forward<T>(t).empty()));
 3099|  13.2M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  31.3M|        {
 6454|  31.3M|            return data_.begin_ == data_.end_;
 6455|  31.3M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  26.4M|    {
 6049|  26.4M|        return static_cast<const D&>(*this);
 6050|  26.4M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  54.1M|            {
 2693|  54.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  54.1M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  54.1M|            {
 2672|  54.1M|                return decay_copy(t.begin());
 2673|  54.1M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   125M|        {
 6444|   125M|            return data_.begin_;
 6445|   125M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  13.2M|            {
 3038|  13.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  13.2M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  13.2M|            {
 3000|  13.2M|                return decay_copy(std::forward<T>(t).size());
 3001|  13.2M|            }
_ZN4nano6ranges6detail10decay_copyIlEENSt3__15decayIT_E4typeEOS5_:
 2605|  55.7M|    {
 2606|  55.7M|        return std::forward<T>(t);
 2607|  55.7M|    }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  31.4M|        {
 6462|  31.4M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  31.4M|                return data_.size_;
 6464|  31.4M|            }
 6465|  31.4M|            else {
 6466|  31.4M|                return data_.end_ - data_.begin_;
 6467|  31.4M|            }
 6468|  31.4M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  21.5M|            {
 3788|  21.5M|                ranges::advance(x, n);
 3789|  21.5M|                return x;
 3790|  21.5M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  21.5M|            {
 3678|  21.5M|                fn::impl(i, n);
 3679|  21.5M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  21.5M|            {
 3562|  21.5M|                r += n;
 3563|  21.5M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  66.5M|            {
 2693|  66.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  66.5M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  66.5M|            {
 2672|  66.5M|                return decay_copy(t.begin());
 2673|  66.5M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  29.8M|            {
 2759|  29.8M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  29.8M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  29.8M|            {
 2739|  29.8M|                return decay_copy(std::forward<T>(t).end());
 2740|  29.8M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EE3endEv:
 6448|  80.1M|        {
 6449|  80.1M|            return data_.end_;
 6450|  80.1M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  13.5M|            {
 2759|  13.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  13.5M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEPKcSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  13.5M|            {
 2739|  13.5M|                return decay_copy(std::forward<T>(t).end());
 2740|  13.5M|            }
_ZN4nano6ranges9subrange_8subrangeIPKcS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  52.2M|        {
 6375|  52.2M|        }
_ZN4nano6ranges6detail13subrange_dataIPKcS4_Lb0EEC2EOS4_S6_:
 6293|  52.2M|        {
 6294|  52.2M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|   343k|            {
 2693|   343k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   343k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|   343k|            {
 2672|   343k|                return decay_copy(t.begin());
 2673|   343k|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  1.74M|    {
 2606|  1.74M|        return std::forward<T>(t);
 2607|  1.74M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|   408k|            {
 2693|   408k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|   408k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|   408k|            {
 2672|   408k|                return decay_copy(t.begin());
 2673|   408k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|   441k|        {
 6444|   441k|            return data_.begin_;
 6445|   441k|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|   588k|            {
 2759|   588k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   588k|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|   588k|            {
 2739|   588k|                return decay_copy(std::forward<T>(t).end());
 2740|   588k|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|   588k|        {
 6449|   588k|            return data_.end_;
 6450|   588k|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  32.6k|            {
 3788|  32.6k|                ranges::advance(x, n);
 3789|  32.6k|                return x;
 3790|  32.6k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  32.6k|            {
 3678|  32.6k|                fn::impl(i, n);
 3679|  32.6k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  32.6k|            {
 3562|  32.6k|                r += n;
 3563|  32.6k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIcNS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|   375k|            {
 2759|   375k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   375k|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS5_9allocatorIcEEEENS5_16__deque_iteratorIcPKcRSD_PKSE_lLl4096EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|   375k|            {
 2739|   375k|                return decay_copy(std::forward<T>(t).end());
 2740|   375k|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|   408k|        {
 6375|   408k|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIcPKcRS5_PKS6_lLl4096EEESA_Lb0EEC2EOSA_SC_:
 6293|   408k|        {
 6294|   408k|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  32.6k|            {
 2693|  32.6k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  32.6k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  32.6k|            {
 2672|  32.6k|                return decay_copy(t.begin());
 2673|  32.6k|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2692|  1.83M|            {
 2693|  1.83M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.83M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESD_E4typeEOSC_NS1_12priority_tagILm1EEE:
 2671|  1.83M|            {
 2672|  1.83M|                return decay_copy(t.begin());
 2673|  1.83M|            }
_ZN4nano6ranges6detail10decay_copyIPKwEENSt3__15decayIT_E4typeEOS7_:
 2605|   313M|    {
 2606|   313M|        return std::forward<T>(t);
 2607|   313M|    }
_ZNK4nano6ranges6detail5data_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSD_:
 3177|  6.69M|            {
 3178|  6.69M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  6.69M|            }
_ZN4nano6ranges6detail5data_2fn4implIKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  6.69M|            {
 3158|  6.69M|                return t.data();
 3159|  6.69M|            }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6094|  6.69M|    {
 6095|  6.69M|        return ranges::empty(derived())
  ------------------
  |  Branch (6095:16): [True: 24.4k, False: 6.66M]
  ------------------
 6096|  6.69M|                   ? nullptr
 6097|  6.69M|                   : std::addressof(*ranges::begin(derived()));
 6098|  6.69M|    }
_ZNK4nano6ranges6detail6empty_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSD_:
 3126|  6.69M|            {
 3127|  6.69M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  6.69M|            }
_ZN4nano6ranges6detail6empty_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSD_NS1_12priority_tagILm2EEE:
 3097|  6.69M|            {
 3098|  6.69M|                return bool((std::forward<T>(t).empty()));
 3099|  6.69M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5emptyEv:
 6453|  10.4M|        {
 6454|  10.4M|            return data_.begin_ == data_.end_;
 6455|  10.4M|        }
_ZNK4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6048|  13.3M|    {
 6049|  13.3M|        return static_cast<const D&>(*this);
 6050|  13.3M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2692|  52.4M|            {
 2693|  52.4M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  52.4M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESG_E4typeEOSF_NS1_12priority_tagILm1EEE:
 2671|  52.4M|            {
 2672|  52.4M|                return decay_copy(t.begin());
 2673|  52.4M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE5beginEv:
 6443|   134M|        {
 6444|   134M|            return data_.begin_;
 6445|   134M|        }
_ZNK4nano6ranges6detail5size_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 3037|  6.69M|            {
 3038|  6.69M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  6.69M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  6.69M|            {
 3000|  6.69M|                return decay_copy(std::forward<T>(t).size());
 3001|  6.69M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE4sizeILS5_1EEENSt3__19enable_ifIXeqT_LS5_1EElE4typeEv:
 6461|  24.3M|        {
 6462|  24.3M|            if constexpr (StoreSize) {
  ------------------
  |  Branch (6462:27): [Folded - Ignored]
  ------------------
 6463|  24.3M|                return data_.size_;
 6464|  24.3M|            }
 6465|  24.3M|            else {
 6466|  24.3M|                return data_.end_ - data_.begin_;
 6467|  24.3M|            }
 6468|  24.3M|        }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3787|  27.0M|            {
 3788|  27.0M|                ranges::advance(x, n);
 3789|  27.0M|                return x;
 3790|  27.0M|            }
_ZNK4nano6ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3677|  27.0M|            {
 3678|  27.0M|                fn::impl(i, n);
 3679|  27.0M|            }
_ZN4nano6ranges6detail8advance_2fn4implIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERS9_NS0_20incrementable_traitsIS9_E15difference_typeE:
 3561|  27.0M|            {
 3562|  27.0M|                r += n;
 3563|  27.0M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  77.5M|            {
 2693|  77.5M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  77.5M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESF_E4typeEOSE_NS1_12priority_tagILm1EEE:
 2671|  77.5M|            {
 2672|  77.5M|                return decay_copy(t.begin());
 2673|  77.5M|            }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  28.6M|            {
 2759|  28.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  28.6M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  28.6M|            {
 2739|  28.6M|                return decay_copy(std::forward<T>(t).end());
 2740|  28.6M|            }
_ZNK4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EE3endEv:
 6448|   181M|        {
 6449|   181M|            return data_.end_;
 6450|   181M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 2758|  9.10M|            {
 2759|  9.10M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  9.10M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEPKwSC_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSG_NS1_12priority_tagILm1EEE:
 2738|  9.10M|            {
 2739|  9.10M|                return decay_copy(std::forward<T>(t).end());
 2740|  9.10M|            }
_ZN4nano6ranges9subrange_8subrangeIPKwS4_LNS0_13subrange_kindE1EEC2IS4_Lb0EvEET_S4_:
 6374|  50.9M|        {
 6375|  50.9M|        }
_ZN4nano6ranges6detail13subrange_dataIPKwS4_Lb0EEC2EOS4_S6_:
 6293|  50.9M|        {
 6294|  50.9M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2692|  1.02M|            {
 2693|  1.02M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.02M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEENS5_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESE_E4typeEOSD_NS1_12priority_tagILm1EEE:
 2671|  1.02M|            {
 2672|  1.02M|                return decay_copy(t.begin());
 2673|  1.02M|            }
_ZN4nano6ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEEEENS3_5decayIT_E4typeEOSC_:
 2605|  5.21M|    {
 2606|  5.21M|        return std::forward<T>(t);
 2607|  5.21M|    }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  1.16M|            {
 2693|  1.16M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  1.16M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  1.16M|            {
 2672|  1.16M|                return decay_copy(t.begin());
 2673|  1.16M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE5beginEv:
 6443|  1.22M|        {
 6444|  1.22M|            return data_.begin_;
 6445|  1.22M|        }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.86M|            {
 2759|  1.86M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.86M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEESE_SE_EENS7_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.86M|            {
 2739|  1.86M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.86M|            }
_ZNK4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EE3endEv:
 6448|  1.86M|        {
 6449|  1.86M|            return data_.end_;
 6450|  1.86M|        }
_ZNK4nano6ranges6detail5next_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EESE_E4typeESE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3787|  65.3k|            {
 3788|  65.3k|                ranges::advance(x, n);
 3789|  65.3k|                return x;
 3790|  65.3k|            }
_ZNK4nano6ranges6detail8advance_2fnclINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3677|  65.3k|            {
 3678|  65.3k|                fn::impl(i, n);
 3679|  65.3k|            }
_ZN4nano6ranges6detail8advance_2fn4implINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEEEENS5_9enable_ifIX22random_access_iteratorIT_EEvE4typeERSE_NS0_20incrementable_traitsISE_E15difference_typeE:
 3561|  65.3k|            {
 3562|  65.3k|                r += n;
 3563|  65.3k|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNSt3__15dequeIwNS5_9allocatorIwEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 2758|  1.09M|            {
 2759|  1.09M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.09M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS5_9allocatorIwEEEENS5_16__deque_iteratorIwPKwRSD_PKSE_lLl1024EEESI_EENS5_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.09M|            {
 2739|  1.09M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.09M|            }
_ZN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_LNS0_13subrange_kindE1EEC2ISA_Lb0EvEET_SA_:
 6374|  1.16M|        {
 6375|  1.16M|        }
_ZN4nano6ranges6detail13subrange_dataINSt3__116__deque_iteratorIwPKwRS5_PKS6_lLl1024EEESA_Lb0EEC2EOSA_SC_:
 6293|  1.16M|        {
 6294|  1.16M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSJ_:
 2692|  65.3k|            {
 2693|  65.3k|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  65.3k|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS0_13subrange_kindE1EEEEENS7_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  65.3k|            {
 2672|  65.3k|                return decay_copy(t.begin());
 2673|  65.3k|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  6.71M|        {
 6444|  6.71M|            return data_.begin_;
 6445|  6.71M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE5beginEv:
 6443|  20.3M|        {
 6444|  20.3M|            return data_.begin_;
 6445|  20.3M|        }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  36.3M|    {
 6044|  36.3M|        return static_cast<D&>(*this);
 6045|  36.3M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  18.1M|            {
 3098|  18.1M|                return bool((std::forward<T>(t).empty()));
 3099|  18.1M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  18.1M|            {
 3127|  18.1M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  18.1M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKcS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  18.1M|    {
 6085|  18.1M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 18.1M]
  ------------------
 6086|  18.1M|                   ? nullptr
 6087|  18.1M|                   : std::addressof(*ranges::begin(derived()));
 6088|  18.1M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|  41.1M|            {
 2739|  41.1M|                return decay_copy(std::forward<T>(t).end());
 2740|  41.1M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|  41.1M|            {
 2759|  41.1M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  41.1M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE7derivedEv:
 6043|  7.56M|    {
 6044|  7.56M|        return static_cast<D&>(*this);
 6045|  7.56M|    }
_ZN4nano6ranges6detail6empty_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcvbcldtclsr3stdE7forwardIT_Efp_E5emptyEEOSC_NS1_12priority_tagILm2EEE:
 3097|  3.78M|            {
 3098|  3.78M|                return bool((std::forward<T>(t).empty()));
 3099|  3.78M|            }
_ZNK4nano6ranges6detail6empty_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm2EEEEEEOSC_:
 3126|  3.78M|            {
 3127|  3.78M|                return fn::impl(std::forward<T>(t), priority_tag<2>{});
 3128|  3.78M|            }
_ZN4nano6ranges14view_interfaceINS0_9subrange_8subrangeIPKwS5_LNS0_13subrange_kindE1EEEE4dataIS7_vEEDav:
 6084|  3.78M|    {
 6085|  3.78M|        return ranges::empty(derived())
  ------------------
  |  Branch (6085:16): [True: 0, False: 3.78M]
  ------------------
 6086|  3.78M|                   ? nullptr
 6087|  3.78M|                   : std::addressof(*ranges::begin(derived()));
 6088|  3.78M|    }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_S8_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSH_NS1_12priority_tagILm1EEE:
 2738|   144M|            {
 2739|   144M|                return decay_copy(std::forward<T>(t).end());
 2740|   144M|            }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSD_:
 2758|   144M|            {
 2759|   144M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|   144M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  11.1M|            {
 3780|  11.1M|                ++x;
 3781|  11.1M|                return x;
 3782|  11.1M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  18.2M|            {
 3038|  18.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  18.2M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  18.2M|            {
 3000|  18.2M|                return decay_copy(std::forward<T>(t).size());
 3001|  18.2M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  18.1M|            {
 3178|  18.1M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  18.1M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKcS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  18.1M|            {
 3158|  18.1M|                return t.data();
 3159|  18.1M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKcEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  2.06M|            {
 3828|  2.06M|                --x;
 3829|  2.06M|                return x;
 3830|  2.06M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3076|  1.27M|            {
 3077|  1.27M|                return fn::impl(std::forward<T>(t));
 3078|  1.27M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISF_EENS0_20incrementable_traitsIDTclL_ZNSE_5beginEEclsr3stdE7declvalIRSF_EEEEE15difference_typeEE4typeELm8EElSO_E4typeE_EEOSF_:
 3066|  1.27M|            {
 3067|  1.27M|                return static_cast<ssize_return_t<T>>(
 3068|  1.27M|                    ranges::size(std::forward<T>(t)));
 3069|  1.27M|            }
_ZNK4nano6ranges6detail5size_2fnclIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSE_:
 3037|  1.27M|            {
 3038|  1.27M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  1.27M|            }
_ZN4nano6ranges6detail5size_2fn4implIRKNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESF_E4typeEOSH_NS1_12priority_tagILm2EEE:
 2999|  1.27M|            {
 3000|  1.27M|                return decay_copy(std::forward<T>(t).size());
 3001|  1.27M|            }
_ZN4nano6ranges6detail10decay_copyImEENSt3__15decayIT_E4typeEOS5_:
 2605|  16.9M|    {
 2606|  16.9M|        return std::forward<T>(t);
 2607|  16.9M|    }
_ZNK4nano6ranges6detail6ssize_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSB_:
 3076|  15.6M|            {
 3077|  15.6M|                return fn::impl(std::forward<T>(t));
 3078|  15.6M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS5_11conditionalIXltstNS5_9enable_ifIX5rangeISC_EENS0_20incrementable_traitsIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRSC_EEEEE15difference_typeEE4typeELm8EElSL_E4typeE_EEOSC_:
 3066|  15.6M|            {
 3067|  15.6M|                return static_cast<ssize_return_t<T>>(
 3068|  15.6M|                    ranges::size(std::forward<T>(t)));
 3069|  15.6M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSB_:
 3037|  15.6M|            {
 3038|  15.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  15.6M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS5_9enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESC_E4typeEOSE_NS1_12priority_tagILm2EEE:
 2999|  15.6M|            {
 3000|  15.6M|                return decay_copy(std::forward<T>(t).size());
 3001|  15.6M|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS9_DpOSA_:
 1299|  13.1M|            {
 1300|  13.1M|                return fn::impl(std::forward<F>(f),
 1301|  13.1M|                                std::forward<Args>(args)...);
 1302|  13.1M|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJRKcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS9_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISC_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSC_DpOSF_:
 1288|  13.1M|            {
 1289|  13.1M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  13.1M|            }
_ZNK4nano6ranges8identityclIRKcEEOT_S6_:
 1141|  13.1M|    {
 1142|  13.1M|        return std::forward<T>(t);
 1143|  13.1M|    }
_ZNK4nano6ranges6detail9distance_2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  21.8M|            {
 3756|  21.8M|                return fn::impl(std::move(first), std::move(last));
 3757|  21.8M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKcS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  21.8M|            {
 3716|  21.8M|                return s - i;
 3717|  21.8M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  1.71M|        {
 6375|  1.71M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  1.71M|        {
 6294|  1.71M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  3.23M|            {
 2693|  3.23M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.23M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  3.23M|            {
 2672|  3.23M|                return decay_copy(t.begin());
 2673|  3.23M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  6.38M|    {
 2606|  6.38M|        return std::forward<T>(t);
 2607|  6.38M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  1.11M|            {
 2759|  1.11M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.11M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  1.11M|            {
 2739|  1.11M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.11M|            }
_ZN4nano6ranges6detail10decay_copyINS0_18default_sentinel_tEEENSt3__15decayIT_E4typeEOS6_:
 2605|  10.2M|    {
 2606|  10.2M|        return std::forward<T>(t);
 2607|  10.2M|    }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  2.64M|        {
 6449|  2.64M|            return data_.end_;
 6450|  2.64M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|  98.0k|        {
 6444|  98.0k|            return data_.begin_;
 6445|  98.0k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|  98.0k|        {
 6449|  98.0k|            return data_.end_;
 6450|  98.0k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  32.6k|        {
 6375|  32.6k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  32.6k|        {
 6294|  32.6k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|   424k|            {
 3780|   424k|                ++x;
 3781|   424k|                return x;
 3782|   424k|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbcESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   245k|        {
 6793|   245k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   245k|                                    proj);
 6795|   245k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbcESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   245k|        {
 6761|   277k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 277k, False: 12]
  ------------------
 6762|   277k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 245k, False: 32.6k]
  ------------------
 6763|   245k|                    return first;
 6764|   245k|                }
 6765|  32.6k|                ++first;
 6766|  32.6k|            }
 6767|     12|            return first;
 6768|   245k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbcES9_EEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   277k|            {
 1300|   277k|                return fn::impl(std::forward<F>(f),
 1301|   277k|                                std::forward<Args>(args)...);
 1302|   277k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbcES9_EEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   277k|            {
 1289|   277k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   277k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   277k|            {
 1300|   277k|                return fn::impl(std::forward<F>(f),
 1301|   277k|                                std::forward<Args>(args)...);
 1302|   277k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJcEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   277k|            {
 1289|   277k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   277k|            }
_ZNK4nano6ranges8identityclIcEEOT_S4_:
 1141|   277k|    {
 1142|   277k|        return std::forward<T>(t);
 1143|   277k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  1.53M|            {
 2759|  1.53M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  1.53M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  1.53M|            {
 2739|  1.53M|                return decay_copy(std::forward<T>(t).end());
 2740|  1.53M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  3.15M|            {
 2693|  3.15M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  3.15M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIcE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  3.15M|            {
 2672|  3.15M|                return decay_copy(t.begin());
 2673|  3.15M|            }
_ZNK4nano6ranges6detail5data_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm1EEEEEEOSC_:
 3177|  3.78M|            {
 3178|  3.78M|                return fn::impl(std::forward<T>(t), priority_tag<1>{});
 3179|  3.78M|            }
_ZN4nano6ranges6detail5data_2fn4implINS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEES8_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS1_12priority_tagILm1EEE:
 3157|  3.78M|            {
 3158|  3.78M|                return t.data();
 3159|  3.78M|            }
_ZNK4nano6ranges6detail5size_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSC_:
 3037|  17.6M|            {
 3038|  17.6M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3039|  17.6M|            }
_ZN4nano6ranges6detail5size_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEElEENSt3__19enable_ifIXaa8integralIT0_Ent19disable_sized_rangeINS0_12remove_cvrefIT_E4typeEEESE_E4typeEOSG_NS1_12priority_tagILm2EEE:
 2999|  17.6M|            {
 3000|  17.6M|                return decay_copy(std::forward<T>(t).size());
 3001|  17.6M|            }
_ZNK4nano6ranges6detail5next_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
 3779|  10.7M|            {
 3780|  10.7M|                ++x;
 3781|  10.7M|                return x;
 3782|  10.7M|            }
_ZNK4nano6ranges6detail6ssize_2fnclIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSC_:
 3076|  13.8M|            {
 3077|  13.8M|                return fn::impl(std::forward<T>(t));
 3078|  13.8M|            }
_ZN4nano6ranges6detail6ssize_2fn4implIRNS0_9subrange_8subrangeIPKwS8_LNS0_13subrange_kindE1EEEEEDTcmclL_ZNS0_16function_objects4sizeEEclsr3stdE7forwardIT_Efp_EEcvNSt3__111conditionalIXltstNSE_9enable_ifIX5rangeISD_EENS0_20incrementable_traitsIDTclL_ZNSC_5beginEEclsr3stdE7declvalIRSD_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSD_:
 3066|  13.8M|            {
 3067|  13.8M|                return static_cast<ssize_return_t<T>>(
 3068|  13.8M|                    ranges::size(std::forward<T>(t)));
 3069|  13.8M|            }
_ZNK4nano6ranges6detail5prev_2fnclIPKwEENSt3__19enable_ifIX22bidirectional_iteratorIT_EES9_E4typeES9_:
 3827|  1.85M|            {
 3828|  1.85M|                --x;
 3829|  1.85M|                return x;
 3830|  1.85M|            }
_ZNK4nano6ranges6detail9distance_2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EENS0_20incrementable_traitsIS9_E15difference_typeEE4typeES9_SA_:
 3755|  14.2M|            {
 3756|  14.2M|                return fn::impl(std::move(first), std::move(last));
 3757|  14.2M|            }
_ZN4nano6ranges6detail9distance_2fn4implIPKwS6_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS0_20incrementable_traitsISA_E15difference_typeEE4typeESA_S9_:
 3715|  14.2M|            {
 3716|  14.2M|                return s - i;
 3717|  14.2M|            }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S9_:
 6374|  4.95M|        {
 6375|  4.95M|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELb0EEC2EOS8_OS9_:
 6293|  4.95M|        {
 6294|  4.95M|        }
_ZNK4nano6ranges6detail6begin_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2692|  10.2M|            {
 2693|  10.2M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  10.2M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESL_E4typeEOSK_NS1_12priority_tagILm1EEE:
 2671|  10.2M|            {
 2672|  10.2M|                return decay_copy(t.begin());
 2673|  10.2M|            }
_ZN4nano6ranges6detail10decay_copyIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__15decayIT_E4typeEOSB_:
 2605|  19.3M|    {
 2606|  19.3M|        return std::forward<T>(t);
 2607|  19.3M|    }
_ZNK4nano6ranges6detail4end_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2758|  3.20M|            {
 2759|  3.20M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  3.20M|            }
_ZN4nano6ranges6detail4end_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSL_NS1_12priority_tagILm1EEE:
 2738|  3.20M|            {
 2739|  3.20M|                return decay_copy(std::forward<T>(t).end());
 2740|  3.20M|            }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EE3endEv:
 6448|  7.64M|        {
 6449|  7.64M|            return data_.end_;
 6450|  7.64M|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE5beginEv:
 6443|   294k|        {
 6444|   294k|            return data_.begin_;
 6445|   294k|        }
_ZNK4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EE3endEv:
 6448|   294k|        {
 6449|   294k|            return data_.end_;
 6450|   294k|        }
_ZN4nano6ranges9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_LNS0_13subrange_kindE0EEC2IS8_Lb0EvEET_S8_:
 6374|  98.0k|        {
 6375|  98.0k|        }
_ZN4nano6ranges6detail13subrange_dataIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorES8_Lb0EEC2EOS8_SA_:
 6293|  98.0k|        {
 6294|  98.0k|        }
_ZNK4nano6ranges6detail5next_2fnclIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESD_E4typeESD_:
 3779|  1.24M|            {
 3780|  1.24M|                ++x;
 3781|  1.24M|                return x;
 3782|  1.24M|            }
_ZNK4nano6ranges6detail10find_if_fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEENS0_8identityENS7_4impl12function_refIFbwESJ_EEEENSt3__19enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SG_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSN_EEEENS1_16projected_helperISV_SQ_vEEEEEENSP_IX14borrowed_rangeISN_EEE4typeISV_NS0_8danglingEEEE4typeEOSN_SO_SQ_:
 6792|   702k|        {
 6793|   702k|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|   702k|                                    proj);
 6795|   702k|        }
_ZN4nano6ranges6detail10find_if_fn4implIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tENS5_4impl12function_refIFbwESD_EENS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|   702k|        {
 6761|   996k|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 996k, False: 36]
  ------------------
 6762|   996k|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 702k, False: 294k]
  ------------------
 6763|   702k|                    return first;
 6764|   702k|                }
 6765|   294k|                ++first;
 6766|   294k|            }
 6767|     36|            return first;
 6768|   702k|        }
_ZNK4nano6ranges6detail7invoke_2fnclIRN3scn2v24impl12function_refIFbwES9_EEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSC_DpOSD_:
 1299|   996k|            {
 1300|   996k|                return fn::impl(std::forward<F>(f),
 1301|   996k|                                std::forward<Args>(args)...);
 1302|   996k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRN3scn2v24impl12function_refIFbwES9_EEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINSC_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISF_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSF_DpOSI_:
 1288|   996k|            {
 1289|   996k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   996k|            }
_ZNK4nano6ranges6detail7invoke_2fnclIRNS0_8identityEJwEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOS7_DpOS8_:
 1299|   996k|            {
 1300|   996k|                return fn::impl(std::forward<F>(f),
 1301|   996k|                                std::forward<Args>(args)...);
 1302|   996k|            }
_ZN4nano6ranges6detail7invoke_2fn4implIRNS0_8identityEJwEEENSt3__19enable_ifIXntsr3std17is_member_pointerINS7_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISA_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSA_DpOSD_:
 1288|   996k|            {
 1289|   996k|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|   996k|            }
_ZNK4nano6ranges8identityclIwEEOT_S4_:
 1141|   996k|    {
 1142|   996k|        return std::forward<T>(t);
 1143|   996k|    }
_ZNK4nano6ranges6detail4end_2fnclIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSI_:
 2758|  4.44M|            {
 2759|  4.44M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2760|  4.44M|            }
_ZN4nano6ranges6detail4end_2fn4implIRKNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEESD_SC_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E3endEEEE4typeEOSM_NS1_12priority_tagILm1EEE:
 2738|  4.44M|            {
 2739|  4.44M|                return decay_copy(std::forward<T>(t).end());
 2740|  4.44M|            }
_ZNK4nano6ranges6detail6begin_2fnclIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS1_12priority_tagILm3EEEEEEOSH_:
 2692|  9.16M|            {
 2693|  9.16M|                return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2694|  9.16M|            }
_ZN4nano6ranges6detail6begin_2fn4implIRNS0_9subrange_8subrangeIN3scn2v26detail17basic_scan_bufferIwE16forward_iteratorENS0_18default_sentinel_tELNS0_13subrange_kindE0EEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtclsr3stdE7forwardIT_Efp_E5beginEEEEESK_E4typeEOSJ_NS1_12priority_tagILm1EEE:
 2671|  9.16M|            {
 2672|  9.16M|                return decay_copy(t.begin());
 2673|  9.16M|            }
find_whitespace.cpp:_ZNK4nano6ranges6detail10find_if_fnclIRNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEENS0_8identityEZN3scn2v24impl33find_classic_nonspace_narrow_fastES8_E3$_3EENS4_9enable_ifIXaa11input_rangeIT_E24indirect_unary_predicateIT1_NS1_11conditionalIX7same_asIT0_SA_EEE4typeIDTclL_ZNS0_16function_objects5beginEEclsr3stdE7declvalIRSG_EEEENS1_16projected_helperISO_SJ_vEEEEEENSI_IX14borrowed_rangeISG_EEE4typeISO_NS0_8danglingEEEE4typeEOSG_SH_SJ_:
 6792|  6.82M|        {
 6793|  6.82M|            return find_if_fn::impl(nano::begin(rng), nano::end(rng), pred,
 6794|  6.82M|                                    proj);
 6795|  6.82M|        }
find_whitespace.cpp:_ZN4nano6ranges6detail10find_if_fn4implIPKcS5_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEE3$_3NS0_8identityEEET_SG_T0_RT1_RT2_:
 6760|  6.82M|        {
 6761|  13.1M|            while (first != last) {
  ------------------
  |  Branch (6761:20): [True: 13.1M, False: 69.6k]
  ------------------
 6762|  13.1M|                if (nano::invoke(pred, nano::invoke(proj, *first))) {
  ------------------
  |  Branch (6762:21): [True: 6.75M, False: 6.34M]
  ------------------
 6763|  6.75M|                    return first;
 6764|  6.75M|                }
 6765|  6.34M|                ++first;
 6766|  6.34M|            }
 6767|  69.6k|            return first;
 6768|  6.82M|        }
find_whitespace.cpp:_ZNK4nano6ranges6detail7invoke_2fnclIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEOSH_DpOSI_:
 1299|  13.1M|            {
 1300|  13.1M|                return fn::impl(std::forward<F>(f),
 1301|  13.1M|                                std::forward<Args>(args)...);
 1302|  13.1M|            }
find_whitespace.cpp:_ZN4nano6ranges6detail7invoke_2fn4implIRZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEE3$_3JRKcEEENS8_9enable_ifIXntsr3std17is_member_pointerINS8_5decayIT_E4typeEEE5valueEDTclclsr3stdE7forwardISJ_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOSJ_DpOSM_:
 1288|  13.1M|            {
 1289|  13.1M|                return std::forward<F>(f)(std::forward<Args>(args)...);
 1290|  13.1M|            }

_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA22_KcEEEDaDpOT_:
   49|   678k|{
   50|   678k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   678k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   678k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
   49|   230k|{
   50|   230k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   230k|}
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA51_KcEEEDaDpOT_:
   49|  68.6k|{
   50|  68.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|  68.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|  68.6k|}
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   245k|    {
   44|   245k|    }
_ZN3scn2v213scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
   43|   702k|    {
   44|   702k|    }
_ZN3scn2v221unexpected_scan_errorIJNS0_10scan_error4codeERA17_KcEEEDaDpOT_:
   49|   102k|{
   50|   102k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   51|   102k|}

_ZNK3scn2v28expectedIlNS0_10scan_errorEEcvbEv:
 1190|  16.3M|    {
 1191|  16.3M|        return has_value();
 1192|  16.3M|    }
_ZNK3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  188|  31.2M|    {
  189|  31.2M|        return m_has_value;
  190|  31.2M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5errorEv:
 1196|  2.74M|    {
 1197|  2.74M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.74M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  2.74M|    {
  172|  2.74M|        return m_unexpected;
  173|  2.74M|    }
_ZNR3scn2v210unexpectedINS0_10scan_errorEE5errorEv:
   71|  20.7M|    {
   72|  20.7M|        return m_unexpected;
   73|  20.7M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
   57|  10.2M|    {
   58|  10.2M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  10.2M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  10.2M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|   343k|    {
 1078|   343k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|   343k|    {
  151|   343k|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
   66|  12.1M|    {
   67|  12.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  12.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  12.1M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.67M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1250|  12.1M|    {
 1251|  12.1M|        return value();
 1252|  12.1M|    }
_ZNR3scn2v28expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1220|  12.1M|    {
 1221|  12.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  12.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  12.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  12.1M|    }
_ZNR3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  154|  12.1M|    {
  155|  12.1M|        return m_value;
  156|  12.1M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  6.33M|    {
 1034|  6.33M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  6.33M|    {
  142|  6.33M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  6.67M|    {
 1191|  6.67M|        return has_value();
 1192|  6.67M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  13.3M|    {
  189|  13.3M|        return m_has_value;
  190|  13.3M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   343k|    {
 1197|   343k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   343k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   343k|    {
  172|   343k|        return m_unexpected;
  173|   343k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  57.1k|    {
 1078|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  57.1k|    {
  151|  57.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   896k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  5.71M|    {
 1251|  5.71M|        return value();
 1252|  5.71M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  6.33M|    {
 1221|  6.33M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.33M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.33M|    {
  155|  6.33M|        return m_value;
  156|  6.33M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   839k|    {
 1034|   839k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   839k|    {
  142|   839k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   896k|    {
 1191|   896k|        return has_value();
 1192|   896k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.73M|    {
  189|  1.73M|        return m_has_value;
  190|  1.73M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   839k|    {
 1274|   839k|        return std::addressof(value());
 1275|   839k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   839k|    {
 1221|   839k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   839k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   839k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   839k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   839k|    {
  155|   839k|        return m_value;
  156|   839k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKcS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   617k|    {
 1263|   617k|        return std::move(value());
 1264|   617k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  57.1k|    {
 1078|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  57.1k|    {
  151|  57.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   844k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   787k|    {
 1034|   787k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   787k|    {
  142|   787k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   844k|    {
 1191|   844k|        return has_value();
 1192|   844k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.63M|    {
  189|  1.63M|        return m_has_value;
  190|  1.63M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   787k|    {
 1274|   787k|        return std::addressof(value());
 1275|   787k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   787k|    {
 1221|   787k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   787k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   787k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   787k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   787k|    {
  155|   787k|        return m_value;
  156|   787k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  57.1k|    {
 1078|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  57.1k|    {
  151|  57.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.32M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.26M|    {
 1034|  1.26M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.26M|    {
  142|  1.26M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  1.32M|    {
 1191|  1.32M|        return has_value();
 1192|  1.32M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.59M|    {
  189|  2.59M|        return m_has_value;
  190|  2.59M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  1.26M|    {
 1274|  1.26M|        return std::addressof(value());
 1275|  1.26M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.26M|    {
 1221|  1.26M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.26M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.26M|    {
  155|  1.26M|        return m_value;
  156|  1.26M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  57.1k|    {
 1078|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  57.1k|    {
  151|  57.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.05M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.00M|    {
 1034|  1.00M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.00M|    {
  142|  1.00M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  1.05M|    {
 1191|  1.05M|        return has_value();
 1192|  1.05M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.05M|    {
  189|  2.05M|        return m_has_value;
  190|  2.05M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  1.00M|    {
 1274|  1.00M|        return std::addressof(value());
 1275|  1.00M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.00M|    {
 1221|  1.00M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.00M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.00M|    {
  155|  1.00M|        return m_value;
  156|  1.00M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  57.1k|    {
 1078|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  57.1k|    {
  151|  57.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.43M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.37M|    {
 1034|  1.37M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.37M|    {
  142|  1.37M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  1.43M|    {
 1191|  1.43M|        return has_value();
 1192|  1.43M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.80M|    {
  189|  2.80M|        return m_has_value;
  190|  2.80M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  1.37M|    {
 1274|  1.37M|        return std::addressof(value());
 1275|  1.37M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.37M|    {
 1221|  1.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.37M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.37M|    {
  155|  1.37M|        return m_value;
  156|  1.37M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|  57.1k|    {
 1078|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|  57.1k|    {
  151|  57.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.12M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.06M|    {
 1034|  1.06M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.06M|    {
  142|  1.06M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  1.12M|    {
 1191|  1.12M|        return has_value();
 1192|  1.12M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.18M|    {
  189|  2.18M|        return m_has_value;
  190|  2.18M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  1.06M|    {
 1274|  1.06M|        return std::addressof(value());
 1275|  1.06M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.06M|    {
 1221|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.06M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.06M|    {
  155|  1.06M|        return m_value;
  156|  1.06M|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|   343k|    {
 1078|   343k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|   343k|    {
  151|   343k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   375k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  32.6k|    {
 1034|  32.6k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  32.6k|    {
  142|  32.6k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|   375k|    {
 1191|   375k|        return has_value();
 1192|   375k|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|   751k|    {
  189|   751k|        return m_has_value;
  190|   751k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|   343k|    {
 1197|   343k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   343k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   343k|    {
  172|   343k|        return m_unexpected;
  173|   343k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  57.1k|    {
 1078|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  57.1k|    {
  151|  57.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  62.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  32.6k|    {
 1251|  32.6k|        return value();
 1252|  32.6k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  32.6k|    {
 1221|  32.6k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  32.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  32.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  32.6k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  32.6k|    {
  155|  32.6k|        return m_value;
  156|  32.6k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  5.44k|    {
 1034|  5.44k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  5.44k|    {
  142|  5.44k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|  62.6k|    {
 1191|  62.6k|        return has_value();
 1192|  62.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  68.0k|    {
  189|  68.0k|        return m_has_value;
  190|  68.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|  5.44k|    {
 1274|  5.44k|        return std::addressof(value());
 1275|  5.44k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  5.44k|    {
 1221|  5.44k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.44k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.44k|    {
  155|  5.44k|        return m_value;
  156|  5.44k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  57.1k|    {
 1078|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  57.1k|    {
  151|  57.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  62.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  5.44k|    {
 1034|  5.44k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  5.44k|    {
  142|  5.44k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|  62.6k|    {
 1191|  62.6k|        return has_value();
 1192|  62.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  68.0k|    {
  189|  68.0k|        return m_has_value;
  190|  68.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|  5.44k|    {
 1274|  5.44k|        return std::addressof(value());
 1275|  5.44k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  5.44k|    {
 1221|  5.44k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.44k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.44k|    {
  155|  5.44k|        return m_value;
  156|  5.44k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  57.1k|    {
 1078|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  57.1k|    {
  151|  57.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  62.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  5.44k|    {
 1034|  5.44k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  5.44k|    {
  142|  5.44k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  62.6k|    {
 1191|  62.6k|        return has_value();
 1192|  62.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  68.0k|    {
  189|  68.0k|        return m_has_value;
  190|  68.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  5.44k|    {
 1274|  5.44k|        return std::addressof(value());
 1275|  5.44k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  5.44k|    {
 1221|  5.44k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.44k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.44k|    {
  155|  5.44k|        return m_value;
  156|  5.44k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  57.1k|    {
 1078|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  57.1k|    {
  151|  57.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  62.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  5.44k|    {
 1034|  5.44k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  5.44k|    {
  142|  5.44k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  62.6k|    {
 1191|  62.6k|        return has_value();
 1192|  62.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  68.0k|    {
  189|  68.0k|        return m_has_value;
  190|  68.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  5.44k|    {
 1274|  5.44k|        return std::addressof(value());
 1275|  5.44k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  5.44k|    {
 1221|  5.44k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.44k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.44k|    {
  155|  5.44k|        return m_value;
  156|  5.44k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  57.1k|    {
 1078|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  57.1k|    {
  151|  57.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  62.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  5.44k|    {
 1034|  5.44k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  5.44k|    {
  142|  5.44k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  62.6k|    {
 1191|  62.6k|        return has_value();
 1192|  62.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  68.0k|    {
  189|  68.0k|        return m_has_value;
  190|  68.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  5.44k|    {
 1274|  5.44k|        return std::addressof(value());
 1275|  5.44k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  5.44k|    {
 1221|  5.44k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.44k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.44k|    {
  155|  5.44k|        return m_value;
  156|  5.44k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  57.1k|    {
 1078|  57.1k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|  57.1k|    {
  151|  57.1k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  62.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  5.44k|    {
 1034|  5.44k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  5.44k|    {
  142|  5.44k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  62.6k|    {
 1191|  62.6k|        return has_value();
 1192|  62.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  68.0k|    {
  189|  68.0k|        return m_has_value;
  190|  68.0k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  5.44k|    {
 1274|  5.44k|        return std::addressof(value());
 1275|  5.44k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  5.44k|    {
 1221|  5.44k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.44k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.44k|    {
  155|  5.44k|        return m_value;
  156|  5.44k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISA_LPv0ELSD_0EEEONS0_10unexpectedIT_EE:
 1077|  1.02M|    {
 1078|  1.02M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  150|  1.02M|    {
  151|  1.02M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.69M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2IS9_vEEOT_:
 1033|  5.66M|    {
 1034|  5.66M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSA_EvEENSt3__110in_place_tEDpOT_:
  141|  5.66M|    {
  142|  5.66M|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  6.69M|    {
 1191|  6.69M|        return has_value();
 1192|  6.69M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  13.3M|    {
  189|  13.3M|        return m_has_value;
  190|  13.3M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  1.02M|    {
 1197|  1.02M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.02M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.02M|    {
  172|  1.02M|        return m_unexpected;
  173|  1.02M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   171k|    {
 1078|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   926k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEERT_v:
 1250|  5.10M|    {
 1251|  5.10M|        return value();
 1252|  5.10M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueIS9_LPv0EEERT_v:
 1220|  5.66M|    {
 1221|  5.66M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.66M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  5.66M|    {
  155|  5.66M|        return m_value;
  156|  5.66M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   755k|    {
 1034|   755k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   755k|    {
  142|   755k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   926k|    {
 1191|   926k|        return has_value();
 1192|   926k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.68M|    {
  189|  1.68M|        return m_has_value;
  190|  1.68M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|   755k|    {
 1274|   755k|        return std::addressof(value());
 1275|   755k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   755k|    {
 1221|   755k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   755k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   755k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   755k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   755k|    {
  155|   755k|        return m_value;
  156|   755k|    }
_ZNO3scn2v28expectedIN4nano6ranges9subrange_8subrangeIPKwS7_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeIS9_LPv0EEEOT_v:
 1262|   552k|    {
 1263|   552k|        return std::move(value());
 1264|   552k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   171k|    {
 1078|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   879k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   707k|    {
 1034|   707k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   707k|    {
  142|   707k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   879k|    {
 1191|   879k|        return has_value();
 1192|   879k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.58M|    {
  189|  1.58M|        return m_has_value;
  190|  1.58M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|   707k|    {
 1274|   707k|        return std::addressof(value());
 1275|   707k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   707k|    {
 1221|   707k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   707k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   707k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   707k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   707k|    {
  155|   707k|        return m_value;
  156|   707k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   171k|    {
 1078|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.30M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.13M|    {
 1034|  1.13M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.13M|    {
  142|  1.13M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|  1.30M|    {
 1191|  1.30M|        return has_value();
 1192|  1.30M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.43M|    {
  189|  2.43M|        return m_has_value;
  190|  2.43M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  1.13M|    {
 1274|  1.13M|        return std::addressof(value());
 1275|  1.13M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.13M|    {
 1221|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.13M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.13M|    {
  155|  1.13M|        return m_value;
  156|  1.13M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   171k|    {
 1078|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.06M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   896k|    {
 1034|   896k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   896k|    {
  142|   896k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|  1.06M|    {
 1191|  1.06M|        return has_value();
 1192|  1.06M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.96M|    {
  189|  1.96M|        return m_has_value;
  190|  1.96M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|   896k|    {
 1274|   896k|        return std::addressof(value());
 1275|   896k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   896k|    {
 1221|   896k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   896k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   896k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   896k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   896k|    {
  155|   896k|        return m_value;
  156|   896k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   171k|    {
 1078|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.39M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|  1.21M|    {
 1034|  1.21M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|  1.21M|    {
  142|  1.21M|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|  1.39M|    {
 1191|  1.39M|        return has_value();
 1192|  1.39M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.61M|    {
  189|  2.61M|        return m_has_value;
  190|  2.61M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  1.21M|    {
 1274|  1.21M|        return std::addressof(value());
 1275|  1.21M|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|  1.21M|    {
 1221|  1.21M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.21M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  1.21M|    {
  155|  1.21M|        return m_value;
  156|  1.21M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISC_LPv0ELSF_0EEEONS0_10unexpectedIT_EE:
 1077|   171k|    {
 1078|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSD_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.12M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISB_vEEOT_:
 1033|   948k|    {
 1034|   948k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSC_EvEENSt3__110in_place_tEDpOT_:
  141|   948k|    {
  142|   948k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|  1.12M|    {
 1191|  1.12M|        return has_value();
 1192|  1.12M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.06M|    {
  189|  2.06M|        return m_has_value;
  190|  2.06M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|   948k|    {
 1274|   948k|        return std::addressof(value());
 1275|   948k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISB_LPv0EEERT_v:
 1220|   948k|    {
 1221|   948k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   948k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   948k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   948k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   948k|    {
  155|   948k|        return m_value;
  156|   948k|    }
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  1.02M|    {
 1078|  1.02M|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  150|  1.02M|    {
  151|  1.02M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.09M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|  65.3k|    {
 1034|  65.3k|    }
_ZN3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EEC2IJSG_EvEENS7_10in_place_tEDpOT_:
  141|  65.3k|    {
  142|  65.3k|    }
_ZNK3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEcvbEv:
 1190|  1.09M|    {
 1191|  1.09M|        return has_value();
 1192|  1.09M|    }
_ZNK3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9has_valueEv:
  188|  2.18M|    {
  189|  2.18M|        return m_has_value;
  190|  2.18M|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5errorEv:
 1196|  1.02M|    {
 1197|  1.02M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.02M|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.02M|    {
  172|  1.02M|        return m_unexpected;
  173|  1.02M|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   171k|    {
 1078|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   171k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEEdeISF_LPv0EEERT_v:
 1250|  65.3k|    {
 1251|  65.3k|        return value();
 1252|  65.3k|    }
_ZNR3scn2v28expectedIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_LNS3_13subrange_kindE1EEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|  65.3k|    {
 1221|  65.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  65.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  65.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  65.3k|    }
_ZNR3scn2v26detail21expected_storage_baseIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEENS0_10scan_errorELb1EE9get_valueEv:
  154|  65.3k|    {
  155|  65.3k|        return m_value;
  156|  65.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|      2|    {
 1034|      2|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|      2|    {
  142|      2|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEcvbEv:
 1190|   171k|    {
 1191|   171k|        return has_value();
 1192|   171k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   171k|    {
  189|   171k|        return m_has_value;
  190|   171k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEEptEv:
 1273|      2|    {
 1274|      2|        return std::addressof(value());
 1275|      2|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJaEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|      2|    {
 1221|      2|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|      2|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      2|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|      2|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJaEEENS0_10scan_errorELb1EE9get_valueEv:
  154|      2|    {
  155|      2|        return m_value;
  156|      2|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   171k|    {
 1078|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   171k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|      4|    {
 1034|      4|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|      4|    {
  142|      4|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEcvbEv:
 1190|   171k|    {
 1191|   171k|        return has_value();
 1192|   171k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   171k|    {
  189|   171k|        return m_has_value;
  190|   171k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEEptEv:
 1273|      4|    {
 1274|      4|        return std::addressof(value());
 1275|      4|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJhEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|      4|    {
 1221|      4|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|      4|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|      4|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|      4|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJhEEENS0_10scan_errorELb1EE9get_valueEv:
  154|      4|    {
  155|      4|        return m_value;
  156|      4|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   171k|    {
 1078|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   187k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  16.3k|    {
 1034|  16.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  16.3k|    {
  142|  16.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEcvbEv:
 1190|   187k|    {
 1191|   187k|        return has_value();
 1192|   187k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   204k|    {
  189|   204k|        return m_has_value;
  190|   204k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEEptEv:
 1273|  16.3k|    {
 1274|  16.3k|        return std::addressof(value());
 1275|  16.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJiEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  16.3k|    {
 1221|  16.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  16.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJiEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  16.3k|    {
  155|  16.3k|        return m_value;
  156|  16.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   171k|    {
 1078|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   187k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  16.3k|    {
 1034|  16.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  16.3k|    {
  142|  16.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEcvbEv:
 1190|   187k|    {
 1191|   187k|        return has_value();
 1192|   187k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   204k|    {
  189|   204k|        return m_has_value;
  190|   204k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEEptEv:
 1273|  16.3k|    {
 1274|  16.3k|        return std::addressof(value());
 1275|  16.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJjEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  16.3k|    {
 1221|  16.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  16.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJjEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  16.3k|    {
  155|  16.3k|        return m_value;
  156|  16.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   171k|    {
 1078|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   187k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  16.3k|    {
 1034|  16.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  16.3k|    {
  142|  16.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEcvbEv:
 1190|   187k|    {
 1191|   187k|        return has_value();
 1192|   187k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   204k|    {
  189|   204k|        return m_has_value;
  190|   204k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEEptEv:
 1273|  16.3k|    {
 1274|  16.3k|        return std::addressof(value());
 1275|  16.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJxEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  16.3k|    {
 1221|  16.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  16.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJxEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  16.3k|    {
  155|  16.3k|        return m_value;
  156|  16.3k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|   171k|    {
 1078|   171k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  150|   171k|    {
  151|   171k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   187k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1033|  16.3k|    {
 1034|  16.3k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EEC2IJSI_EvEENS8_10in_place_tEDpOT_:
  141|  16.3k|    {
  142|  16.3k|    }
_ZNK3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEcvbEv:
 1190|   187k|    {
 1191|   187k|        return has_value();
 1192|   187k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   204k|    {
  189|   204k|        return m_has_value;
  190|   204k|    }
_ZN3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEEptEv:
 1273|  16.3k|    {
 1274|  16.3k|        return std::addressof(value());
 1275|  16.3k|    }
_ZNR3scn2v28expectedINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_LNS4_13subrange_kindE1EEEJyEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1220|  16.3k|    {
 1221|  16.3k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  16.3k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_11scan_resultIN4nano6ranges9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_LNS5_13subrange_kindE1EEEJyEEENS0_10scan_errorELb1EE9get_valueEv:
  154|  16.3k|    {
  155|  16.3k|        return m_value;
  156|  16.3k|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  6.58M|    {
 1405|  6.58M|        return detail::transform_error_impl(std::move(*this),
 1406|  6.58M|                                            std::forward<F>(f));
 1407|  6.58M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  6.58M|{
  927|  6.58M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  6.58M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  6.58M|        if (SCN_LIKELY(exp.has_value())) {
  930|  6.58M|            return result(*std::forward<Exp>(exp));
  931|  6.58M|        }
  932|       |
  933|  6.58M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  6.58M|        return result(unexpect, monostate{});
  935|  6.58M|    }
  936|  6.58M|    else {
  937|  6.58M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  6.58M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  6.58M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.55M, False: 26.1k]
  |  |  ------------------
  ------------------
  939|  6.58M|                   ? result(*std::forward<Exp>(exp))
  940|  6.58M|                   : result(unexpect,
  941|  26.1k|                            std::invoke(std::forward<F>(f),
  942|  26.1k|                                        std::forward<Exp>(exp).error()));
  943|  6.58M|    }
  944|  6.58M|}
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  27.5M|    {
  189|  27.5M|        return m_has_value;
  190|  27.5M|    }
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  6.55M|    {
 1263|  6.55M|        return std::move(value());
 1264|  6.55M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  9.71M|    {
 1221|  9.71M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  9.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  9.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  9.71M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  9.71M|    {
  155|  9.71M|        return m_value;
  156|  9.71M|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  24.0M|    {
 1034|  24.0M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  24.0M|    {
  142|  24.0M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  24.5M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1206|  26.1k|    {
 1207|  26.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  26.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  26.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|  26.1k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|  27.5k|    {
  172|  27.5k|        return m_unexpected;
  173|  27.5k|    }
_ZNR3scn2v210unexpectedINS0_4impl9eof_errorEE5errorEv:
   71|   388k|    {
   72|   388k|        return m_unexpected;
   73|   388k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  26.1k|    {
 1088|  26.1k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|   475k|    {
  151|   475k|    }
_ZNK3scn2v28expectedIPKcNS0_10scan_errorEEcvbEv:
 1190|  24.5M|    {
 1191|  24.5M|        return has_value();
 1192|  24.5M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  188|  49.0M|    {
  189|  49.0M|        return m_has_value;
  190|  49.0M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5errorEv:
 1196|   475k|    {
 1197|   475k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   475k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   475k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   475k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   475k|    {
  172|   475k|        return m_unexpected;
  173|   475k|    }
_ZN3scn2v28expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|   449k|    {
 1078|   449k|    }
_ZNO3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  19.5M|    {
 1263|  19.5M|        return std::move(value());
 1264|  19.5M|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  24.0M|    {
 1221|  24.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  24.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  24.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  24.0M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  154|  24.0M|    {
  155|  24.0M|        return m_value;
  156|  24.0M|    }
_ZN3scn2v210unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
   57|  1.07M|    {
   58|  1.07M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  1.07M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  1.07M|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1077|  2.74M|    {
 1078|  2.74M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  150|  2.74M|    {
  151|  2.74M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  14.8M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
   57|  64.4k|    {
   58|  64.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  64.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  64.4k|    }
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  27.5k|    {
 1078|  27.5k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  27.5k|    {
  151|  27.5k|    }
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   194k|    {
   67|   194k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   194k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   194k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  17.7M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  17.7M|    {
 1034|  17.7M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  17.7M|    {
  142|  17.7M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1190|  11.1M|    {
 1191|  11.1M|        return has_value();
 1192|  11.1M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1196|  1.44k|    {
 1197|  1.44k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.44k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
   57|  57.8k|    {
   58|  57.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  57.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  57.8k|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|  55.2k|    {
 1078|  55.2k|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_errorEE5errorEv:
   71|  14.2M|    {
   72|  14.2M|        return m_unexpected;
   73|  14.2M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  55.2k|    {
  151|  55.2k|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
   66|   317k|    {
   67|   317k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   317k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|   317k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  30.3M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  3.15M|    {
 1251|  3.15M|        return value();
 1252|  3.15M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  5.89M|    {
 1034|  5.89M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  5.89M|    {
  142|  5.89M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
   57|  52.8M|    {
   58|  52.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  52.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|  52.8M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  24.2M|    {
 1078|  24.2M|    }
_ZNR3scn2v210unexpectedINS0_4impl11parse_error4codeEE5errorEv:
   71|  52.8M|    {
   72|  52.8M|        return m_unexpected;
   73|  52.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  24.2M|    {
  151|  24.2M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
   66|  52.8M|    {
   67|  52.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|  52.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   68|  52.8M|    }
_ZNK3scn2v28expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1190|  30.3M|    {
 1191|  30.3M|        return has_value();
 1192|  30.3M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  42.3M|    {
  189|  42.3M|        return m_has_value;
  190|  42.3M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1196|  6.08M|    {
 1197|  6.08M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.08M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  6.08M|    {
  172|  6.08M|        return m_unexpected;
  173|  6.08M|    }
_ZN3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  6.55M|    {
 1034|  6.55M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  6.55M|    {
  142|  6.55M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.55M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v210unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
   57|   129k|    {
   58|   129k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   129k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   129k|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  5.96M|    {
 1251|  5.96M|        return value();
 1252|  5.96M|    }
_ZNR3scn2v28expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  5.96M|    {
 1221|  5.96M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  5.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  5.96M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  5.96M|    {
  155|  5.96M|        return m_value;
  156|  5.96M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  6.55M|    {
 1191|  6.55M|        return has_value();
 1192|  6.55M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  13.1M|    {
  189|  13.1M|        return m_has_value;
  190|  13.1M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.55M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  6.55M|    {
 1263|  6.55M|        return std::move(value());
 1264|  6.55M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  6.55M|    {
 1221|  6.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.55M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  6.55M|    {
  155|  6.55M|        return m_value;
  156|  6.55M|    }
_ZN3scn2v28expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  70.6k|    {
 1034|  70.6k|    }
_ZN3scn2v26detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  70.6k|    {
  142|  70.6k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  6.55M|    {
 1034|  6.55M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  6.55M|    {
  142|  6.55M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  6.55M|    {
 1405|  6.55M|        return detail::transform_error_impl(std::move(*this),
 1406|  6.55M|                                            std::forward<F>(f));
 1407|  6.55M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  6.55M|{
  927|  6.55M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  6.55M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  6.55M|        if (SCN_LIKELY(exp.has_value())) {
  930|  6.55M|            return result(*std::forward<Exp>(exp));
  931|  6.55M|        }
  932|       |
  933|  6.55M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  6.55M|        return result(unexpect, monostate{});
  935|  6.55M|    }
  936|  6.55M|    else {
  937|  6.55M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  6.55M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  6.55M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.55M, False: 0]
  |  |  ------------------
  ------------------
  939|  6.55M|                   ? result(*std::forward<Exp>(exp))
  940|  6.55M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  6.55M|    }
  944|  6.55M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  188|  13.1M|    {
  189|  13.1M|        return m_has_value;
  190|  13.1M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  6.55M|    {
 1263|  6.55M|        return std::move(value());
 1264|  6.55M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  6.55M|    {
 1221|  6.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.55M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  154|  6.55M|    {
  155|  6.55M|        return m_value;
  156|  6.55M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  6.55M|    {
 1034|  6.55M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  6.55M|    {
  142|  6.55M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.55M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1190|  6.55M|    {
 1191|  6.55M|        return has_value();
 1192|  6.55M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  188|  13.1M|    {
  189|  13.1M|        return m_has_value;
  190|  13.1M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  6.55M|    {
 1263|  6.55M|        return std::move(value());
 1264|  6.55M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  6.55M|    {
 1221|  6.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.55M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.55M|    {
  155|  6.55M|        return m_value;
  156|  6.55M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISD_LPv0ELSG_0EEEONS0_10unexpectedIT_EE:
 1077|  14.6k|    {
 1078|  14.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSE_EvEENS0_10unexpect_tEDpOT_:
  311|  14.6k|    {
  312|  14.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  14.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESE_EEEvDpOT_:
  372|  14.6k|    {
  373|  14.6k|        scn::detail::construct_at(unexpected_ptr(),
  374|  14.6k|                                  std::forward<Args>(args)...);
  375|  14.6k|        m_has_value = false;
  376|  14.6k|    }
_ZN3scn2v26detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  101|   226k|{
  102|   226k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   226k|        T(std::forward<Args>(args)...);
  104|   226k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  43.9k|    {
  403|  43.9k|        return reinterpret_cast<unexpected<E>*>(
  404|  43.9k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  43.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  43.9k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   698k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EED2Ev:
  316|   698k|    {
  317|   698k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 683k, False: 14.6k]
  ------------------
  318|   683k|            destroy_value();
  319|   683k|        }
  320|  14.6k|        else {
  321|  14.6k|            destroy_unexpected();
  322|  14.6k|        }
  323|   698k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  2.09M|    {
  361|  2.09M|        return m_has_value;
  362|  2.09M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   683k|    {
  380|   683k|        scn::detail::destroy_at(value_ptr());
  381|   683k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEEEvPT_:
  107|   683k|{
  108|   683k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   683k|        for (auto& elem : *p) {
  110|   683k|            scn::detail::destroy_at(std::addressof(elem));
  111|   683k|        }
  112|   683k|    }
  113|   683k|    else {
  114|   683k|        p->~T();
  115|   683k|    }
  116|   683k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  2.05M|    {
  390|  2.05M|        return reinterpret_cast<T*>(
  391|  2.05M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  2.05M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  2.05M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  14.6k|    {
  384|  14.6k|        scn::detail::destroy_at(unexpected_ptr());
  385|  14.6k|    }
_ZN3scn2v26detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  107|   226k|{
  108|   226k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   226k|        for (auto& elem : *p) {
  110|   226k|            scn::detail::destroy_at(std::addressof(elem));
  111|   226k|        }
  112|   226k|    }
  113|   226k|    else {
  114|   226k|        p->~T();
  115|   226k|    }
  116|   226k|}
_ZN3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEC2ISC_vEEOT_:
 1033|   683k|    {
 1034|   683k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EEC2IJSD_EvEENS3_10in_place_tEDpOT_:
  302|   683k|    {
  303|   683k|        construct(std::forward<Args>(args)...);
  304|   683k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9constructIJSD_EEEvDpOT_:
  366|   683k|    {
  367|   683k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   683k|        m_has_value = true;
  369|   683k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEEJSD_EEEPT_SF_DpOT0_:
  101|   683k|{
  102|   683k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   683k|        T(std::forward<Args>(args)...);
  104|   683k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEcvbEv:
 1190|   698k|    {
 1191|   698k|        return has_value();
 1192|   698k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5errorEv:
 1196|  14.6k|    {
 1197|  14.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  14.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  14.6k|    {
  344|  14.6k|        return *unexpected_ptr();
  345|  14.6k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEEdeISC_LPv0EEEOT_v:
 1262|   683k|    {
 1263|   683k|        return std::move(value());
 1264|   683k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKcNS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESB_EEENS0_10scan_errorEE5valueISC_LPv0EEERT_v:
 1220|   683k|    {
 1221|   683k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   683k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   683k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   683k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKcNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESC_EEENS0_10scan_errorELb0EE9get_valueEv:
  326|   683k|    {
  327|   683k|        return *value_ptr();
  328|   683k|    }
_ZNR3scn2v28expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  4.48M|    {
 1251|  4.48M|        return value();
 1252|  4.48M|    }
_ZN3scn2v210unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
   57|   129k|    {
   58|   129k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  227|   129k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   59|   129k|    }
_ZN3scn2v28expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1033|  12.0M|    {
 1034|  12.0M|    }
_ZN3scn2v26detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  141|  12.0M|    {
  142|  12.0M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    186|    {
 1078|    186|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    186|    {
  151|    186|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.17M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  1.17M|    {
 1034|  1.17M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.17M|    {
  142|  1.17M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   277k|    {
 1405|   277k|        return detail::transform_error_impl(std::move(*this),
 1406|   277k|                                            std::forward<F>(f));
 1407|   277k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   277k|{
  927|   277k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   277k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   277k|        if (SCN_LIKELY(exp.has_value())) {
  930|   277k|            return result(*std::forward<Exp>(exp));
  931|   277k|        }
  932|       |
  933|   277k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   277k|        return result(unexpect, monostate{});
  935|   277k|    }
  936|   277k|    else {
  937|   277k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   277k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   277k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 277k, False: 12]
  |  |  ------------------
  ------------------
  939|   277k|                   ? result(*std::forward<Exp>(exp))
  940|   277k|                   : result(unexpect,
  941|     12|                            std::invoke(std::forward<F>(f),
  942|     12|                                        std::forward<Exp>(exp).error()));
  943|   277k|    }
  944|   277k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  1.92M|    {
  189|  1.92M|        return m_has_value;
  190|  1.92M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|   751k|    {
 1263|   751k|        return std::move(value());
 1264|   751k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|   751k|    {
 1221|   751k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   751k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   751k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   751k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|   751k|    {
  155|   751k|        return m_value;
  156|   751k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   343k|    {
 1034|   343k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   343k|    {
  142|   343k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   800k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    186|    {
 1207|    186|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    186|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    186|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    186|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    186|    {
  172|    186|        return m_unexpected;
  173|    186|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   212k|    {
 1088|   212k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   457k|    {
  151|   457k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|   424k|    {
 1191|   424k|        return has_value();
 1192|   424k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    174|    {
 1078|    174|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    348|    {
  151|    348|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  1.76M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  1.25M|    {
 1078|  1.25M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  1.25M|    {
  151|  1.25M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  1.51M|    {
 1191|  1.51M|        return has_value();
 1192|  1.51M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  2.76M|    {
  189|  2.76M|        return m_has_value;
  190|  2.76M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   277k|    {
 1197|   277k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   277k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|   490k|    {
  172|   490k|        return m_unexpected;
  173|   490k|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   277k|    {
 1034|   277k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   277k|    {
  142|   277k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   277k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|   506k|    {
 1221|   506k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   506k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|   506k|    {
  155|   506k|        return m_value;
  156|   506k|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   277k|    {
 1191|   277k|        return has_value();
 1192|   277k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|   555k|    {
  189|   555k|        return m_has_value;
  190|   555k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   277k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   277k|    {
 1263|   277k|        return std::move(value());
 1264|   277k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   277k|    {
 1221|   277k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   277k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   277k|    {
  155|   277k|        return m_value;
  156|   277k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|   473k|    {
 1405|   473k|        return detail::transform_error_impl(std::move(*this),
 1406|   473k|                                            std::forward<F>(f));
 1407|   473k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   473k|{
  927|   473k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   473k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   473k|        if (SCN_LIKELY(exp.has_value())) {
  930|   473k|            return result(*std::forward<Exp>(exp));
  931|   473k|        }
  932|       |
  933|   473k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   473k|        return result(unexpect, monostate{});
  935|   473k|    }
  936|   473k|    else {
  937|   473k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   473k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   473k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 473k, False: 174]
  |  |  ------------------
  ------------------
  939|   473k|                   ? result(*std::forward<Exp>(exp))
  940|   473k|                   : result(unexpect,
  941|    174|                            std::invoke(std::forward<F>(f),
  942|    174|                                        std::forward<Exp>(exp).error()));
  943|   473k|    }
  944|   473k|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|   506k|    {
 1034|   506k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   506k|    {
  142|   506k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    174|    {
 1088|    174|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|   506k|    {
 1263|   506k|        return std::move(value());
 1264|   506k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   277k|    {
 1034|   277k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   277k|    {
  142|   277k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   277k|    {
 1405|   277k|        return detail::transform_error_impl(std::move(*this),
 1406|   277k|                                            std::forward<F>(f));
 1407|   277k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   277k|{
  927|   277k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   277k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   277k|        if (SCN_LIKELY(exp.has_value())) {
  930|   277k|            return result(*std::forward<Exp>(exp));
  931|   277k|        }
  932|       |
  933|   277k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   277k|        return result(unexpect, monostate{});
  935|   277k|    }
  936|   277k|    else {
  937|   277k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   277k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   277k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 277k, False: 0]
  |  |  ------------------
  ------------------
  939|   277k|                   ? result(*std::forward<Exp>(exp))
  940|   277k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   277k|    }
  944|   277k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|   555k|    {
  189|   555k|        return m_has_value;
  190|   555k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   277k|    {
 1263|   277k|        return std::move(value());
 1264|   277k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   277k|    {
 1221|   277k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   277k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   277k|    {
  155|   277k|        return m_value;
  156|   277k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   277k|    {
 1034|   277k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   277k|    {
  142|   277k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   277k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   277k|    {
 1191|   277k|        return has_value();
 1192|   277k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|   555k|    {
  189|   555k|        return m_has_value;
  190|   555k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   277k|    {
 1263|   277k|        return std::move(value());
 1264|   277k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   277k|    {
 1221|   277k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   277k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIcE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   277k|    {
  155|   277k|        return m_value;
  156|   277k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   245k|    {
 1405|   245k|        return detail::transform_error_impl(std::move(*this),
 1406|   245k|                                            std::forward<F>(f));
 1407|   245k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   245k|{
  927|   245k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   245k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   245k|        if (SCN_LIKELY(exp.has_value())) {
  930|   245k|            return result(*std::forward<Exp>(exp));
  931|   245k|        }
  932|       |
  933|   245k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   245k|        return result(unexpect, monostate{});
  935|   245k|    }
  936|   245k|    else {
  937|   245k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   245k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   245k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 32.6k, False: 212k]
  |  |  ------------------
  ------------------
  939|   245k|                   ? result(*std::forward<Exp>(exp))
  940|   245k|                   : result(unexpect,
  941|   212k|                            std::invoke(std::forward<F>(f),
  942|   212k|                                        std::forward<Exp>(exp).error()));
  943|   245k|    }
  944|   245k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   212k|    {
 1207|   212k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   212k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   212k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   212k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   245k|    {
 1078|   245k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1077|  32.6k|    {
 1078|  32.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EEC2IJSF_EvEENS0_10unexpect_tEDpOT_:
  311|  32.6k|    {
  312|  32.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  32.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESF_EEEvDpOT_:
  372|  32.6k|    {
  373|  32.6k|        scn::detail::construct_at(unexpected_ptr(),
  374|  32.6k|                                  std::forward<Args>(args)...);
  375|  32.6k|        m_has_value = false;
  376|  32.6k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|  98.0k|    {
  403|  98.0k|        return reinterpret_cast<unexpected<E>*>(
  404|  98.0k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|  98.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|  98.0k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  32.6k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EED2Ev:
  316|  32.6k|    {
  317|  32.6k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 32.6k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  32.6k|        else {
  321|  32.6k|            destroy_unexpected();
  322|  32.6k|        }
  323|  32.6k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE9has_valueEv:
  360|  98.0k|    {
  361|  98.0k|        return m_has_value;
  362|  98.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  32.6k|    {
  384|  32.6k|        scn::detail::destroy_at(unexpected_ptr());
  385|  32.6k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEEcvbEv:
 1190|  32.6k|    {
 1191|  32.6k|        return has_value();
 1192|  32.6k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIcE16forward_iteratorENS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESD_EEENS0_10scan_errorEE5errorEv:
 1196|  32.6k|    {
 1197|  32.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  32.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  32.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  32.6k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIcE16forward_iteratorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESD_EEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  32.6k|    {
  344|  32.6k|        return *unexpected_ptr();
  345|  32.6k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  32.6k|    {
 1251|  32.6k|        return value();
 1252|  32.6k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   343k|    {
 1221|   343k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   343k|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.60M|    {
  189|  1.60M|        return m_has_value;
  190|  1.60M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   343k|    {
  155|   343k|        return m_value;
  156|   343k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|   800k|    {
 1191|   800k|        return has_value();
 1192|   800k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|   457k|    {
 1197|   457k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   457k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|   457k|    {
  172|   457k|        return m_unexpected;
  173|   457k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   310k|    {
 1263|   310k|        return std::move(value());
 1264|   310k|    }
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   166k|    {
 1078|   166k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   166k|    {
  151|   166k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  31.0M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1033|  30.8M|    {
 1034|  30.8M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  30.8M|    {
  142|  30.8M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDaOT_:
 1404|  6.39M|    {
 1405|  6.39M|        return detail::transform_error_impl(std::move(*this),
 1406|  6.39M|                                            std::forward<F>(f));
 1407|  6.39M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  6.39M|{
  927|  6.39M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  6.39M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  6.39M|        if (SCN_LIKELY(exp.has_value())) {
  930|  6.39M|            return result(*std::forward<Exp>(exp));
  931|  6.39M|        }
  932|       |
  933|  6.39M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  6.39M|        return result(unexpect, monostate{});
  935|  6.39M|    }
  936|  6.39M|    else {
  937|  6.39M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  6.39M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  6.39M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.36M, False: 34.1k]
  |  |  ------------------
  ------------------
  939|  6.39M|                   ? result(*std::forward<Exp>(exp))
  940|  6.39M|                   : result(unexpect,
  941|  34.1k|                            std::invoke(std::forward<F>(f),
  942|  34.1k|                                        std::forward<Exp>(exp).error()));
  943|  6.39M|    }
  944|  6.39M|}
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  54.0M|    {
  189|  54.0M|        return m_has_value;
  190|  54.0M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1262|  20.0M|    {
 1263|  20.0M|        return std::move(value());
 1264|  20.0M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1220|  22.8M|    {
 1221|  22.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  22.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  22.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  22.8M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  22.8M|    {
  155|  22.8M|        return m_value;
  156|  22.8M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1033|  22.4M|    {
 1034|  22.4M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  22.4M|    {
  142|  22.4M|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  23.9M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1206|   163k|    {
 1207|   163k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   163k|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|   166k|    {
  172|   166k|        return m_unexpected;
  173|   166k|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1087|  34.1k|    {
 1088|  34.1k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  150|  1.45M|    {
  151|  1.45M|    }
_ZN3scn2v28expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1077|  1.41M|    {
 1078|  1.41M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1190|  10.7M|    {
 1191|  10.7M|        return has_value();
 1192|  10.7M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1196|  2.63k|    {
 1197|  2.63k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  2.63k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.63k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  2.63k|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1077|   132k|    {
 1078|   132k|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|   261k|    {
  151|   261k|    }
_ZN3scn2v26detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  42.9M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1250|  2.81M|    {
 1251|  2.81M|        return value();
 1252|  2.81M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1033|  5.28M|    {
 1034|  5.28M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  141|  5.28M|    {
  142|  5.28M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|  23.6M|    {
 1078|  23.6M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  23.6M|    {
  151|  23.6M|    }
_ZNK3scn2v28expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1190|  42.9M|    {
 1191|  42.9M|        return has_value();
 1192|  42.9M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  68.1M|    {
  189|  68.1M|        return m_has_value;
  190|  68.1M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1196|  6.09M|    {
 1197|  6.09M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  6.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  6.09M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  6.09M|    {
  172|  6.09M|        return m_unexpected;
  173|  6.09M|    }
_ZN3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1033|  6.36M|    {
 1034|  6.36M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  141|  6.36M|    {
  142|  6.36M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.36M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1250|  5.35M|    {
 1251|  5.35M|        return value();
 1252|  5.35M|    }
_ZNR3scn2v28expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1220|  19.0M|    {
 1221|  19.0M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  19.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  19.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  19.0M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  19.0M|    {
  155|  19.0M|        return m_value;
  156|  19.0M|    }
_ZNK3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1190|  6.36M|    {
 1191|  6.36M|        return has_value();
 1192|  6.36M|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  188|  12.7M|    {
  189|  12.7M|        return m_has_value;
  190|  12.7M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.36M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|  6.36M|    {
 1263|  6.36M|        return std::move(value());
 1264|  6.36M|    }
_ZNR3scn2v28expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|  6.36M|    {
 1221|  6.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.36M|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  154|  6.36M|    {
  155|  6.36M|        return m_value;
  156|  6.36M|    }
_ZNO3scn2v28expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDaOT_:
 1404|  13.8M|    {
 1405|  13.8M|        return detail::transform_error_impl(std::move(*this),
 1406|  13.8M|                                            std::forward<F>(f));
 1407|  13.8M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
  926|  13.8M|{
  927|  13.8M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  13.8M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  13.8M|        if (SCN_LIKELY(exp.has_value())) {
  930|  13.8M|            return result(*std::forward<Exp>(exp));
  931|  13.8M|        }
  932|       |
  933|  13.8M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  13.8M|        return result(unexpect, monostate{});
  935|  13.8M|    }
  936|  13.8M|    else {
  937|  13.8M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  13.8M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  13.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 13.7M, False: 129k]
  |  |  ------------------
  ------------------
  939|  13.8M|                   ? result(*std::forward<Exp>(exp))
  940|  13.8M|                   : result(unexpect,
  941|   129k|                            std::invoke(std::forward<F>(f),
  942|   129k|                                        std::forward<Exp>(exp).error()));
  943|  13.8M|    }
  944|  13.8M|}
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1033|  13.7M|    {
 1034|  13.7M|    }
_ZN3scn2v26detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  141|  13.7M|    {
  142|  13.7M|    }
_ZN3scn2v28expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1087|   129k|    {
 1088|   129k|    }
_ZNO3scn2v28expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1262|  13.7M|    {
 1263|  13.7M|        return std::move(value());
 1264|  13.7M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEC2IS6_vEEOT_:
 1033|  6.36M|    {
 1034|  6.36M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  6.36M|    {
  142|  6.36M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|  6.36M|    {
 1405|  6.36M|        return detail::transform_error_impl(std::move(*this),
 1406|  6.36M|                                            std::forward<F>(f));
 1407|  6.36M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS4_9eof_errorEEERFNS0_10scan_errorES9_ELPv0ESB_EEDaOT_OT0_:
  926|  6.36M|{
  927|  6.36M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  6.36M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  6.36M|        if (SCN_LIKELY(exp.has_value())) {
  930|  6.36M|            return result(*std::forward<Exp>(exp));
  931|  6.36M|        }
  932|       |
  933|  6.36M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  6.36M|        return result(unexpect, monostate{});
  935|  6.36M|    }
  936|  6.36M|    else {
  937|  6.36M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  6.36M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  6.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 6.36M, False: 0]
  |  |  ------------------
  ------------------
  939|  6.36M|                   ? result(*std::forward<Exp>(exp))
  940|  6.36M|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|  6.36M|    }
  944|  6.36M|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9has_valueEv:
  188|  12.7M|    {
  189|  12.7M|        return m_has_value;
  190|  12.7M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEEdeIS6_LPv0EEEOT_v:
 1262|  6.36M|    {
 1263|  6.36M|        return std::move(value());
 1264|  6.36M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS2_9eof_errorEE5valueIS6_LPv0EEERT_v:
 1220|  6.36M|    {
 1221|  6.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.36M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS3_9eof_errorELb1EE9get_valueEv:
  154|  6.36M|    {
  155|  6.36M|        return m_value;
  156|  6.36M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEC2IS6_vEEOT_:
 1033|  6.36M|    {
 1034|  6.36M|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  141|  6.36M|    {
  142|  6.36M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  6.36M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEcvbEv:
 1190|  6.36M|    {
 1191|  6.36M|        return has_value();
 1192|  6.36M|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9has_valueEv:
  188|  12.7M|    {
  189|  12.7M|        return m_has_value;
  190|  12.7M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1262|  6.36M|    {
 1263|  6.36M|        return std::move(value());
 1264|  6.36M|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1220|  6.36M|    {
 1221|  6.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  6.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  6.36M|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKwEENS0_10scan_errorELb1EE9get_valueEv:
  154|  6.36M|    {
  155|  6.36M|        return m_value;
  156|  6.36M|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1077|  80.8k|    {
 1078|  80.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  311|  80.8k|    {
  312|  80.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  80.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESH_EEEvDpOT_:
  372|  80.8k|    {
  373|  80.8k|        scn::detail::construct_at(unexpected_ptr(),
  374|  80.8k|                                  std::forward<Args>(args)...);
  375|  80.8k|        m_has_value = false;
  376|  80.8k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   242k|    {
  403|   242k|        return reinterpret_cast<unexpected<E>*>(
  404|   242k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   242k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   242k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   689k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|   689k|    {
  317|   689k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 608k, False: 80.8k]
  ------------------
  318|   608k|            destroy_value();
  319|   608k|        }
  320|  80.8k|        else {
  321|  80.8k|            destroy_unexpected();
  322|  80.8k|        }
  323|   689k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|  2.06M|    {
  361|  2.06M|        return m_has_value;
  362|  2.06M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  379|   608k|    {
  380|   608k|        scn::detail::destroy_at(value_ptr());
  381|   608k|    }
_ZN3scn2v26detail10destroy_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEEEvPT_:
  107|   608k|{
  108|   608k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|   608k|        for (auto& elem : *p) {
  110|   608k|            scn::detail::destroy_at(std::addressof(elem));
  111|   608k|        }
  112|   608k|    }
  113|   608k|    else {
  114|   608k|        p->~T();
  115|   608k|    }
  116|   608k|}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  389|  1.82M|    {
  390|  1.82M|        return reinterpret_cast<T*>(
  391|  1.82M|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(T)));
  ------------------
  |  |  201|  1.82M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  392|  1.82M|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  80.8k|    {
  384|  80.8k|        scn::detail::destroy_at(unexpected_ptr());
  385|  80.8k|    }
_ZN3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1033|   608k|    {
 1034|   608k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EEC2IJSG_EvEENS3_10in_place_tEDpOT_:
  302|   608k|    {
  303|   608k|        construct(std::forward<Args>(args)...);
  304|   608k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9constructIJSG_EEEvDpOT_:
  366|   608k|    {
  367|   608k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  368|   608k|        m_has_value = true;
  369|   608k|    }
_ZN3scn2v26detail12construct_atINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEEJSG_EEEPT_SI_DpOT0_:
  101|   608k|{
  102|   608k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  103|   608k|        T(std::forward<Args>(args)...);
  104|   608k|}
_ZNK3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|   689k|    {
 1191|   689k|        return has_value();
 1192|   689k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  80.8k|    {
 1197|  80.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  80.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  80.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  80.8k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  80.8k|    {
  344|  80.8k|        return *unexpected_ptr();
  345|  80.8k|    }
_ZNO3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEEdeISF_LPv0EEEOT_v:
 1262|   608k|    {
 1263|   608k|        return std::move(value());
 1264|   608k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJPKwNS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS6_IcNS7_IcEENS9_IcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1220|   608k|    {
 1221|   608k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   608k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   608k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   608k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJPKwNS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS7_IcNS8_IcEENSA_IcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  326|   608k|    {
  327|   608k|        return *value_ptr();
  328|   608k|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1250|  4.00M|    {
 1251|  4.00M|        return value();
 1252|  4.00M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1220|  22.4M|    {
 1221|  22.4M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  22.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  22.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  22.4M|    }
_ZNK3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  188|  47.8M|    {
  189|  47.8M|        return m_has_value;
  190|  47.8M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  154|  22.4M|    {
  155|  22.4M|        return m_value;
  156|  22.4M|    }
_ZNK3scn2v28expectedIPKwNS0_10scan_errorEEcvbEv:
 1190|  23.9M|    {
 1191|  23.9M|        return has_value();
 1192|  23.9M|    }
_ZNR3scn2v28expectedIPKwNS0_10scan_errorEE5errorEv:
 1196|  1.45M|    {
 1197|  1.45M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.45M|    }
_ZNR3scn2v26detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.45M|    {
  172|  1.45M|        return m_unexpected;
  173|  1.45M|    }
_ZNO3scn2v28expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1262|  18.4M|    {
 1263|  18.4M|        return std::move(value());
 1264|  18.4M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1077|   735k|    {
 1078|   735k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  150|  1.33M|    {
  151|  1.33M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  2.30M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1033|   963k|    {
 1034|   963k|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|   963k|    {
  142|   963k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1190|  2.30M|    {
 1191|  2.30M|        return has_value();
 1192|  2.30M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  188|  4.60M|    {
  189|  4.60M|        return m_has_value;
  190|  4.60M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1196|  1.33M|    {
 1197|  1.33M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  1.33M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  171|  1.33M|    {
  172|  1.33M|        return m_unexpected;
  173|  1.33M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1250|  65.3k|    {
 1251|  65.3k|        return value();
 1252|  65.3k|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1220|   963k|    {
 1221|   963k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   963k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   963k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   963k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  154|   963k|    {
  155|   963k|        return m_value;
  156|   963k|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    200|    {
 1078|    200|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    200|    {
  151|    200|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  3.43M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1033|  3.43M|    {
 1034|  3.43M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  3.43M|    {
  142|  3.43M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDaOT_:
 1404|   800k|    {
 1405|   800k|        return detail::transform_error_impl(std::move(*this),
 1406|   800k|                                            std::forward<F>(f));
 1407|   800k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|   800k|{
  927|   800k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   800k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   800k|        if (SCN_LIKELY(exp.has_value())) {
  930|   800k|            return result(*std::forward<Exp>(exp));
  931|   800k|        }
  932|       |
  933|   800k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   800k|        return result(unexpect, monostate{});
  935|   800k|    }
  936|   800k|    else {
  937|   800k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   800k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   800k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 800k, False: 30]
  |  |  ------------------
  ------------------
  939|   800k|                   ? result(*std::forward<Exp>(exp))
  940|   800k|                   : result(unexpect,
  941|     30|                            std::invoke(std::forward<F>(f),
  942|     30|                                        std::forward<Exp>(exp).error()));
  943|   800k|    }
  944|   800k|}
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  188|  5.62M|    {
  189|  5.62M|        return m_has_value;
  190|  5.62M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1262|  2.18M|    {
 1263|  2.18M|        return std::move(value());
 1264|  2.18M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1220|  2.18M|    {
 1221|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  2.18M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  154|  2.18M|    {
  155|  2.18M|        return m_value;
  156|  2.18M|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1206|    200|    {
 1207|    200|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|    200|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|    200|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|    200|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  171|    200|    {
  172|    200|        return m_unexpected;
  173|    200|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1087|   604k|    {
 1088|   604k|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1190|  1.24M|    {
 1191|  1.24M|        return has_value();
 1192|  1.24M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1077|    170|    {
 1078|    170|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  150|    340|    {
  151|    340|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  5.16M|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1077|  3.67M|    {
 1078|  3.67M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  150|  3.67M|    {
  151|  3.67M|    }
_ZNK3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1190|  4.46M|    {
 1191|  4.46M|        return has_value();
 1192|  4.46M|    }
_ZNK3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  188|  8.05M|    {
  189|  8.05M|        return m_has_value;
  190|  8.05M|    }
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1196|   800k|    {
 1197|   800k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   800k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   800k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|   800k|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  171|  1.40M|    {
  172|  1.40M|        return m_unexpected;
  173|  1.40M|    }
_ZN3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1033|   800k|    {
 1034|   800k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  141|   800k|    {
  142|   800k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   800k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNR3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1220|  1.48M|    {
 1221|  1.48M|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|  1.48M|    }
_ZNR3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  154|  1.48M|    {
  155|  1.48M|        return m_value;
  156|  1.48M|    }
_ZNK3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1190|   800k|    {
 1191|   800k|        return has_value();
 1192|   800k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  188|  1.60M|    {
  189|  1.60M|        return m_has_value;
  190|  1.60M|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   800k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNO3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1262|   800k|    {
 1263|   800k|        return std::move(value());
 1264|   800k|    }
_ZNR3scn2v28expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1220|   800k|    {
 1221|   800k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   800k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   800k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   800k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  154|   800k|    {
  155|   800k|        return m_value;
  156|   800k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDaOT_:
 1404|  1.38M|    {
 1405|  1.38M|        return detail::transform_error_impl(std::move(*this),
 1406|  1.38M|                                            std::forward<F>(f));
 1407|  1.38M|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
  926|  1.38M|{
  927|  1.38M|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|  1.38M|        using result = expected<expected_value_type<Exp>, monostate>;
  929|  1.38M|        if (SCN_LIKELY(exp.has_value())) {
  930|  1.38M|            return result(*std::forward<Exp>(exp));
  931|  1.38M|        }
  932|       |
  933|  1.38M|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|  1.38M|        return result(unexpect, monostate{});
  935|  1.38M|    }
  936|  1.38M|    else {
  937|  1.38M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|  1.38M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|  1.38M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 1.38M, False: 170]
  |  |  ------------------
  ------------------
  939|  1.38M|                   ? result(*std::forward<Exp>(exp))
  940|  1.38M|                   : result(unexpect,
  941|    170|                            std::invoke(std::forward<F>(f),
  942|    170|                                        std::forward<Exp>(exp).error()));
  943|  1.38M|    }
  944|  1.38M|}
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1033|  1.48M|    {
 1034|  1.48M|    }
_ZN3scn2v26detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  141|  1.48M|    {
  142|  1.48M|    }
_ZN3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1087|    170|    {
 1088|    170|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1262|  1.48M|    {
 1263|  1.48M|        return std::move(value());
 1264|  1.48M|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEC2IS8_vEEOT_:
 1033|   800k|    {
 1034|   800k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   800k|    {
  142|   800k|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDaOT_:
 1404|   800k|    {
 1405|   800k|        return detail::transform_error_impl(std::move(*this),
 1406|   800k|                                            std::forward<F>(f));
 1407|   800k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS4_9eof_errorEEERFNS0_10scan_errorESA_ELPv0ESC_EEDaOT_OT0_:
  926|   800k|{
  927|   800k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   800k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   800k|        if (SCN_LIKELY(exp.has_value())) {
  930|   800k|            return result(*std::forward<Exp>(exp));
  931|   800k|        }
  932|       |
  933|   800k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   800k|        return result(unexpect, monostate{});
  935|   800k|    }
  936|   800k|    else {
  937|   800k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   800k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   800k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 800k, False: 0]
  |  |  ------------------
  ------------------
  939|   800k|                   ? result(*std::forward<Exp>(exp))
  940|   800k|                   : result(unexpect,
  941|      0|                            std::invoke(std::forward<F>(f),
  942|      0|                                        std::forward<Exp>(exp).error()));
  943|   800k|    }
  944|   800k|}
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9has_valueEv:
  188|  1.60M|    {
  189|  1.60M|        return m_has_value;
  190|  1.60M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1262|   800k|    {
 1263|   800k|        return std::move(value());
 1264|   800k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS2_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1220|   800k|    {
 1221|   800k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   800k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   800k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   800k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS3_9eof_errorELb1EE9get_valueEv:
  154|   800k|    {
  155|   800k|        return m_value;
  156|   800k|    }
_ZN3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1033|   800k|    {
 1034|   800k|    }
_ZN3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2IJS8_EvEENSt3__110in_place_tEDpOT_:
  141|   800k|    {
  142|   800k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|   800k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZNK3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEcvbEv:
 1190|   800k|    {
 1191|   800k|        return has_value();
 1192|   800k|    }
_ZNK3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9has_valueEv:
  188|  1.60M|    {
  189|  1.60M|        return m_has_value;
  190|  1.60M|    }
_ZNO3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1262|   800k|    {
 1263|   800k|        return std::move(value());
 1264|   800k|    }
_ZNR3scn2v28expectedINS0_4impl27parse_integer_prefix_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1220|   800k|    {
 1221|   800k|        SCN_EXPECT(has_value());
  ------------------
  |  |  242|   800k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   800k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1222|      0|        return this->get_value();
 1223|   800k|    }
_ZNR3scn2v26detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultINS1_17basic_scan_bufferIwE16forward_iteratorEEENS0_10scan_errorELb1EE9get_valueEv:
  154|   800k|    {
  155|   800k|        return m_value;
  156|   800k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDaOT_:
 1404|   702k|    {
 1405|   702k|        return detail::transform_error_impl(std::move(*this),
 1406|   702k|                                            std::forward<F>(f));
 1407|   702k|    }
_ZN3scn2v26detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESA_EEDaOT_OT0_:
  926|   702k|{
  927|   702k|    if constexpr (std::is_void<Ret>::value) {
  ------------------
  |  Branch (927:19): [Folded - Ignored]
  ------------------
  928|   702k|        using result = expected<expected_value_type<Exp>, monostate>;
  929|   702k|        if (SCN_LIKELY(exp.has_value())) {
  930|   702k|            return result(*std::forward<Exp>(exp));
  931|   702k|        }
  932|       |
  933|   702k|        std::invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
  934|   702k|        return result(unexpect, monostate{});
  935|   702k|    }
  936|   702k|    else {
  937|   702k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
  938|   702k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  152|   702k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 98.0k, False: 604k]
  |  |  ------------------
  ------------------
  939|   702k|                   ? result(*std::forward<Exp>(exp))
  940|   702k|                   : result(unexpect,
  941|   604k|                            std::invoke(std::forward<F>(f),
  942|   604k|                                        std::forward<Exp>(exp).error()));
  943|   702k|    }
  944|   702k|}
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1206|   604k|    {
 1207|   604k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1208|      0|        return std::move(this->get_unexpected().error());
 1209|   604k|    }
_ZN3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1077|  98.0k|    {
 1078|  98.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  311|  98.0k|    {
  312|  98.0k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  313|  98.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS3_10in_place_tESI_EEEvDpOT_:
  372|  98.0k|    {
  373|  98.0k|        scn::detail::construct_at(unexpected_ptr(),
  374|  98.0k|                                  std::forward<Args>(args)...);
  375|  98.0k|        m_has_value = false;
  376|  98.0k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  402|   294k|    {
  403|   294k|        return reinterpret_cast<unexpected<E>*>(
  404|   294k|            SCN_ASSUME_ALIGNED(m_memory.data(), alignof(unexpected<E>)));
  ------------------
  |  |  201|   294k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  405|   294k|    }
_ZN3scn2v26detail26expected_default_ctor_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
  805|  98.0k|    constexpr explicit expected_default_ctor_base(non_default_ctor_tag_t) {}
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EED2Ev:
  316|  98.0k|    {
  317|  98.0k|        if (has_value()) {
  ------------------
  |  Branch (317:13): [True: 0, False: 98.0k]
  ------------------
  318|      0|            destroy_value();
  319|      0|        }
  320|  98.0k|        else {
  321|  98.0k|            destroy_unexpected();
  322|  98.0k|        }
  323|  98.0k|    }
_ZNK3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  360|   294k|    {
  361|   294k|        return m_has_value;
  362|   294k|    }
_ZN3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  383|  98.0k|    {
  384|  98.0k|        scn::detail::destroy_at(unexpected_ptr());
  385|  98.0k|    }
_ZNK3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEEcvbEv:
 1190|  98.0k|    {
 1191|  98.0k|        return has_value();
 1192|  98.0k|    }
_ZNR3scn2v28expectedINSt3__15tupleIJNS0_6detail17basic_scan_bufferIwE16forward_iteratorENS2_12basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorEE5errorEv:
 1196|  98.0k|    {
 1197|  98.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  242|  98.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  98.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1198|      0|        return this->get_unexpected().error();
 1199|  98.0k|    }
_ZNR3scn2v26detail21expected_storage_baseINSt3__15tupleIJNS1_17basic_scan_bufferIwE16forward_iteratorENS3_12basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEENS8_IcNS9_IcEENSB_IcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  343|  98.0k|    {
  344|  98.0k|        return *unexpected_ptr();
  345|  98.0k|    }
_ZNO3scn2v28expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1262|   898k|    {
 1263|   898k|        return std::move(value());
 1264|   898k|    }

_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.44k|{
  200|  5.44k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.44k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  5.44k|{
  180|  5.44k|    return p;
  181|  5.44k|}
_ZN3scn2v26detail10to_addressIRPNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.44k|{
  200|  5.44k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.44k|}
_ZN3scn2v26detail15to_address_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEPT_S9_NS1_12priority_tagILm2EEE:
  179|  5.44k|{
  180|  5.44k|    return p;
  181|  5.44k|}
_ZN3scn2v26detail10to_addressIRPKhEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  5.44k|{
  200|  5.44k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  5.44k|}
_ZN3scn2v26detail15to_address_implIKhEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  5.44k|{
  180|  5.44k|    return p;
  181|  5.44k|}
_ZN3scn2v26detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  21.0M|{
  200|  21.0M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  21.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  21.0M|}
_ZN3scn2v26detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  21.1M|{
  180|  21.1M|    return p;
  181|  21.1M|}
_ZN3scn2v26detail10to_addressIRPDiEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  14.3M|{
  200|  14.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  14.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  14.3M|}
_ZN3scn2v26detail15to_address_implIDiEEPT_S4_NS1_12priority_tagILm2EEE:
  179|  14.3M|{
  180|  14.3M|    return p;
  181|  14.3M|}
_ZN3scn2v26detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  65.3k|{
  200|  65.3k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  65.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  65.3k|}
_ZN3scn2v26detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|  14.3M|{
  200|  14.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|  14.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|  14.3M|}
_ZN3scn2v26detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  179|  14.5M|{
  180|  14.5M|    return p;
  181|  14.5M|}
_ZN3scn2v26detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  199|   196k|{
  200|   196k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  248|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  201|   196k|}

_ZNK3scn2v24spanIKhE4sizeEv:
  241|  21.6k|    {
  242|  21.6k|        return static_cast<size_type>(m_end - m_ptr);
  243|  21.6k|    }
_ZN3scn2v24spanIKhE5beginEv:
  180|  5.44k|    {
  181|  5.44k|        return m_ptr;
  182|  5.44k|    }
_ZN3scn2v24spanIKhE3endEv:
  184|  5.44k|    {
  185|  5.44k|        return m_end;
  186|  5.44k|    }
_ZNK3scn2v24spanIKhE4dataEv:
  237|  2.72k|    {
  238|  2.72k|        return m_ptr;
  239|  2.72k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEC2IPS6_LPv0EEET_m:
  119|  2.72k|    {
  120|  2.72k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE5beginEv:
  180|  65.3k|    {
  181|  65.3k|        return m_ptr;
  182|  65.3k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEE3endEv:
  184|  65.3k|    {
  185|  65.3k|        return m_end;
  186|  65.3k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEC2IPS6_LPv0EEET_m:
  119|  2.72k|    {
  120|  2.72k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE5beginEv:
  180|   196k|    {
  181|   196k|        return m_ptr;
  182|   196k|    }
_ZN3scn2v24spanIKNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEE3endEv:
  184|   196k|    {
  185|   196k|        return m_end;
  186|   196k|    }
_ZN3scn2v24spanIKhEC2IPS2_LPv0EEET_m:
  119|  2.72k|    {
  120|  2.72k|    }
_ZN3scn2v24spanIDiEC2IPDiLPv0EEET_m:
  119|  7.18M|    {
  120|  7.18M|    }
_ZNK3scn2v24spanIDiE4dataEv:
  237|  7.18M|    {
  238|  7.18M|        return m_ptr;
  239|  7.18M|    }
_ZNK3scn2v24spanIDiE4sizeEv:
  241|  7.18M|    {
  242|  7.18M|        return static_cast<size_type>(m_end - m_ptr);
  243|  7.18M|    }

_ZN3scn2v26detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  3.14M|{
   60|  3.14M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  3.14M|                                          const CharT*, const CharT*>) {
   62|  3.14M|        return {first, last};
   63|  3.14M|    }
   64|  3.14M|    else {
   65|  3.14M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  3.14M|    }
   67|  3.14M|}
_ZN3scn2v26detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
   59|  10.0M|{
   60|  10.0M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (60:19): [Folded - Ignored]
  ------------------
   61|  10.0M|                                          const CharT*, const CharT*>) {
   62|  10.0M|        return {first, last};
   63|  10.0M|    }
   64|  10.0M|    else {
   65|  10.0M|        return {first, static_cast<size_t>(std::distance(first, last))};
   66|  10.0M|    }
   67|  10.0M|}
_ZN3scn2v26detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
   43|  7.00M|{
   44|  7.00M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (44:19): [Folded - Ignored]
  |  Branch (44:19): [Folded - Ignored]
  ------------------
   45|  7.00M|                                          decltype(first), decltype(last)> &&
   46|  7.00M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (46:19): [Folded - Ignored]
  ------------------
   47|  7.00M|        return {first, last};
   48|  7.00M|    }
   49|  7.00M|    else {
   50|  7.00M|        return {to_address(first), static_cast<size_t>(std::distance(
   51|  7.00M|                                       to_address(first), to_address(last)))};
   52|  7.00M|    }
   53|  7.00M|}
_ZN3scn2v26detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
   74|  13.6M|{
   75|  13.6M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (75:19): [Folded - Ignored]
  |  Branch (75:19): [Folded - Ignored]
  ------------------
   76|  13.6M|                      typename std::basic_string_view<CharT>::iterator,
   77|  13.6M|                      decltype(it)> &&
   78|  13.6M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  152|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (78:19): [Folded - Ignored]
  ------------------
   79|  13.6M|        SCN_UNUSED(sv);
  ------------------
  |  |  227|  13.6M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   80|  13.6M|        return it;
   81|  13.6M|    }
   82|  13.6M|    else {
   83|  13.6M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
   84|  13.6M|    }
   85|  13.6M|}

_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   277k|{
   54|   277k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   277k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   277k|        return true;
   57|   277k|    }
   58|   277k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   277k|                           ranges::iterator_t<Range>,
   60|   277k|                           typename detail::basic_scan_buffer<
   61|   277k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   277k|        auto beg = ranges::begin(r);
   63|   277k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 277k, False: 0]
  ------------------
   64|   277k|            return false;
   65|   277k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   277k|    else {
   79|   277k|        return false;
   80|   277k|    }
   81|   277k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   277k|{
  112|   277k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   277k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   277k|        return r;
  115|   277k|    }
  116|   277k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   277k|                           ranges::iterator_t<Range>,
  118|   277k|                           typename detail::basic_scan_buffer<
  119|   277k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   277k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   277k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   277k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   277k|                ranges::begin(r), ranges::end(r)));
  124|   277k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   277k|        }
  126|   277k|        else {
  127|   277k|            return ranges::begin(r).contiguous_segment();
  128|   277k|        }
  129|   277k|    }
  130|   277k|    else {
  131|   277k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   277k|    }
  133|   277k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|   473k|{
  166|   473k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|   473k|        return ranges_polyfill::usize(r);
  168|   473k|    }
  169|   473k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|   473k|                           ranges::iterator_t<Range>,
  171|   473k|                           typename detail::basic_scan_buffer<
  172|   473k|                               detail::char_t<Range>>::forward_iterator>) {
  173|   473k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|   473k|            return static_cast<size_t>(ranges::end(r).position() -
  175|   473k|                                       ranges::begin(r).position());
  176|   473k|        }
  177|   473k|        else {
  178|   473k|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 473k, False: 0]
  ------------------
  179|   473k|                return static_cast<size_t>(
  180|   473k|                    ranges::begin(r).parent()->chars_available() -
  181|   473k|                    ranges::begin(r).position());
  182|   473k|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|   473k|        }
  185|   473k|    }
  186|   473k|    else {
  187|   473k|        return 0;
  188|   473k|    }
  189|   473k|}
_ZN3scn2v24impl21is_segment_contiguousIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   53|   800k|{
   54|   800k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (54:19): [Folded - Ignored]
  |  Branch (54:19): [Folded - Ignored]
  ------------------
   55|   800k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (55:19): [Folded - Ignored]
  ------------------
   56|   800k|        return true;
   57|   800k|    }
   58|   800k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (58:24): [Folded - Ignored]
  ------------------
   59|   800k|                           ranges::iterator_t<Range>,
   60|   800k|                           typename detail::basic_scan_buffer<
   61|   800k|                               detail::char_t<Range>>::forward_iterator>) {
   62|   800k|        auto beg = ranges::begin(r);
   63|   800k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (63:13): [True: 800k, False: 0]
  ------------------
   64|   800k|            return false;
   65|   800k|        }
   66|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (66:23): [Folded - Ignored]
  ------------------
   67|      0|            return beg.contiguous_segment().end() ==
   68|      0|                   ranges::end(r).contiguous_segment().end();
   69|      0|        }
   70|      0|        else {
   71|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (71:17): [True: 0, False: 0]
  ------------------
   72|      0|                return beg.contiguous_segment().end() ==
   73|      0|                       beg.parent()->current_view().end();
   74|      0|            }
   75|      0|            return true;
   76|      0|        }
   77|      0|    }
   78|   800k|    else {
   79|   800k|        return false;
   80|   800k|    }
   81|   800k|}
_ZN3scn2v24impl24get_contiguous_beginningIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEDaRKT_:
  111|   800k|{
  112|   800k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (112:19): [Folded - Ignored]
  |  Branch (112:19): [Folded - Ignored]
  ------------------
  113|   800k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (113:19): [Folded - Ignored]
  ------------------
  114|   800k|        return r;
  115|   800k|    }
  116|   800k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (116:24): [Folded - Ignored]
  ------------------
  117|   800k|                           ranges::iterator_t<Range>,
  118|   800k|                           typename detail::basic_scan_buffer<
  119|   800k|                               detail::char_t<Range>>::forward_iterator>) {
  120|   800k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (120:23): [Folded - Ignored]
  ------------------
  121|   800k|            auto seg = ranges::begin(r).contiguous_segment();
  122|   800k|            auto dist = static_cast<size_t>(ranges_polyfill::pos_distance(
  123|   800k|                ranges::begin(r), ranges::end(r)));
  124|   800k|            return seg.substr(0, std::min(seg.size(), dist));
  125|   800k|        }
  126|   800k|        else {
  127|   800k|            return ranges::begin(r).contiguous_segment();
  128|   800k|        }
  129|   800k|    }
  130|   800k|    else {
  131|   800k|        return std::basic_string_view<detail::char_t<Range>>{};
  132|   800k|    }
  133|   800k|}
_ZN3scn2v24impl23guaranteed_minimum_sizeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEmRKT_:
  165|  1.38M|{
  166|  1.38M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (166:19): [Folded - Ignored]
  ------------------
  167|  1.38M|        return ranges_polyfill::usize(r);
  168|  1.38M|    }
  169|  1.38M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (169:24): [Folded - Ignored]
  ------------------
  170|  1.38M|                           ranges::iterator_t<Range>,
  171|  1.38M|                           typename detail::basic_scan_buffer<
  172|  1.38M|                               detail::char_t<Range>>::forward_iterator>) {
  173|  1.38M|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (173:23): [Folded - Ignored]
  ------------------
  174|  1.38M|            return static_cast<size_t>(ranges::end(r).position() -
  175|  1.38M|                                       ranges::begin(r).position());
  176|  1.38M|        }
  177|  1.38M|        else {
  178|  1.38M|            if (ranges::begin(r).stores_parent()) {
  ------------------
  |  Branch (178:17): [True: 1.38M, False: 0]
  ------------------
  179|  1.38M|                return static_cast<size_t>(
  180|  1.38M|                    ranges::begin(r).parent()->chars_available() -
  181|  1.38M|                    ranges::begin(r).position());
  182|  1.38M|            }
  183|      0|            return ranges::begin(r).contiguous_segment().size();
  184|  1.38M|        }
  185|  1.38M|    }
  186|  1.38M|    else {
  187|  1.38M|        return 0;
  188|  1.38M|    }
  189|  1.38M|}

_ZN3scn2v24impl22make_contiguous_bufferIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  6.56M|{
  235|  6.56M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  6.56M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  6.56M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  6.56M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  6.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  6.56M|    }
  240|  6.56M|    else {
  241|  6.56M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  6.56M|    }
  243|  6.56M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IRKN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  6.56M|    {
   50|  6.56M|    }
_ZNK3scn2v24impl19string_view_wrapperIcE4viewEv:
   62|  20.4M|    {
   63|  20.4M|        return sv;
   64|  20.4M|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.75M|{
  235|  3.75M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.75M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.75M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.75M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.75M|    }
  240|  3.75M|    else {
  241|  3.75M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.75M|    }
  243|  3.75M|}
_ZN3scn2v24impl19string_view_wrapperIcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.75M|    {
   50|  3.75M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIcE4viewEv:
  141|  65.3k|    {
  142|  65.3k|        return m_view;
  143|  65.3k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcED2Ev:
  131|  32.6k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  32.6k|{
  235|  32.6k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  32.6k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  32.6k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  32.6k|        return string_view_wrapper{SCN_FWD(range)};
  239|  32.6k|    }
  240|  32.6k|    else {
  241|  32.6k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  32.6k|    }
  243|  32.6k|}
_ZN3scn2v24impl24contiguous_range_factoryIcEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  32.6k|    {
   97|  32.6k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  32.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  32.6k|    }
_ZN3scn2v24impl24contiguous_range_factoryIcE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  32.6k|    {
  181|  32.6k|        using value_t = ranges::range_value_t<Range>;
  182|  32.6k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  32.6k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  32.6k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  32.6k|            m_storage.reset();
  186|  32.6k|            m_view = string_view_type{ranges::data(range),
  187|  32.6k|                                      ranges_polyfill::usize(range)};
  188|  32.6k|        }
  189|  32.6k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  32.6k|                                          std::basic_string<CharT>>) {
  191|  32.6k|            m_storage.emplace(SCN_FWD(range));
  192|  32.6k|            m_view = string_view_type{*m_storage};
  193|  32.6k|        }
  194|  32.6k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  32.6k|                                          typename detail::basic_scan_buffer<
  196|  32.6k|                                              value_t>::forward_iterator> &&
  197|  32.6k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  32.6k|            auto beg_seg = range.begin().contiguous_segment();
  199|  32.6k|            auto end_seg = range.end().contiguous_segment();
  200|  32.6k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.6k, False: 12]
  |  |  ------------------
  ------------------
  201|  32.6k|                             detail::to_address(end_seg.end()))) {
  202|  32.6k|                auto& str = m_storage.emplace();
  203|  32.6k|                str.reserve(range.end().position() - range.begin().position());
  204|  32.6k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  32.6k|                m_view = string_view_type{str};
  206|  32.6k|                return;
  207|  32.6k|            }
  208|       |
  209|     12|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     12|                                                            end_seg.data());
  211|     12|            m_storage.reset();
  212|     12|        }
  213|  32.6k|        else {
  214|  32.6k|            auto& str = m_storage.emplace();
  215|  32.6k|            if constexpr (ranges::sized_range<Range>) {
  216|  32.6k|                str.reserve(ranges_polyfill::usize(range));
  217|  32.6k|            }
  218|  32.6k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  32.6k|                      std::back_inserter(str));
  220|  32.6k|            m_view = string_view_type{str};
  221|  32.6k|        }
  222|  32.6k|    }
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEDaOT_:
  234|  3.78M|{
  235|  3.78M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  3.78M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  3.78M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  3.78M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  248|  3.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  239|  3.78M|    }
  240|  3.78M|    else {
  241|  3.78M|        return contiguous_range_factory{SCN_FWD(range)};
  242|  3.78M|    }
  243|  3.78M|}
_ZN3scn2v24impl19string_view_wrapperIwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_:
   49|  3.78M|    {
   50|  3.78M|    }
_ZNK3scn2v24impl19string_view_wrapperIwE4viewEv:
   62|  6.98M|    {
   63|  6.98M|        return sv;
   64|  6.98M|    }
_ZNK3scn2v24impl24contiguous_range_factoryIwE4viewEv:
  141|   163k|    {
  142|   163k|        return m_view;
  143|   163k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwED2Ev:
  131|  98.0k|    ~contiguous_range_factory() = default;
_ZN3scn2v24impl22make_contiguous_bufferIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_LNS4_13subrange_kindE0EEEEEDaOT_:
  234|  98.0k|{
  235|  98.0k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (235:19): [Folded - Ignored]
  |  Branch (235:19): [Folded - Ignored]
  ------------------
  236|  98.0k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (236:19): [Folded - Ignored]
  ------------------
  237|  98.0k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (237:19): [Folded - Ignored]
  ------------------
  238|  98.0k|        return string_view_wrapper{SCN_FWD(range)};
  239|  98.0k|    }
  240|  98.0k|    else {
  241|  98.0k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  248|  98.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  242|  98.0k|    }
  243|  98.0k|}
_ZN3scn2v24impl24contiguous_range_factoryIwEC2IN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEELPv0EEEOT_:
   96|  98.0k|    {
   97|  98.0k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  248|  98.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   98|  98.0k|    }
_ZN3scn2v24impl24contiguous_range_factoryIwE13emplace_rangeIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_LNS6_13subrange_kindE0EEEEEvOT_:
  180|  98.0k|    {
  181|  98.0k|        using value_t = ranges::range_value_t<Range>;
  182|  98.0k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (182:23): [Folded - Ignored]
  |  Branch (182:23): [Folded - Ignored]
  ------------------
  183|  98.0k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (183:23): [Folded - Ignored]
  ------------------
  184|  98.0k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (184:23): [Folded - Ignored]
  ------------------
  185|  98.0k|            m_storage.reset();
  186|  98.0k|            m_view = string_view_type{ranges::data(range),
  187|  98.0k|                                      ranges_polyfill::usize(range)};
  188|  98.0k|        }
  189|  98.0k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (189:28): [Folded - Ignored]
  ------------------
  190|  98.0k|                                          std::basic_string<CharT>>) {
  191|  98.0k|            m_storage.emplace(SCN_FWD(range));
  192|  98.0k|            m_view = string_view_type{*m_storage};
  193|  98.0k|        }
  194|  98.0k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (194:28): [Folded - Ignored]
  |  Branch (194:28): [Folded - Ignored]
  ------------------
  195|  98.0k|                                          typename detail::basic_scan_buffer<
  196|  98.0k|                                              value_t>::forward_iterator> &&
  197|  98.0k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (197:28): [Folded - Ignored]
  ------------------
  198|  98.0k|            auto beg_seg = range.begin().contiguous_segment();
  199|  98.0k|            auto end_seg = range.end().contiguous_segment();
  200|  98.0k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  153|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 98.0k, False: 12]
  |  |  ------------------
  ------------------
  201|  98.0k|                             detail::to_address(end_seg.end()))) {
  202|  98.0k|                auto& str = m_storage.emplace();
  203|  98.0k|                str.reserve(range.end().position() - range.begin().position());
  204|  98.0k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
  205|  98.0k|                m_view = string_view_type{str};
  206|  98.0k|                return;
  207|  98.0k|            }
  208|       |
  209|     12|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
  210|     12|                                                            end_seg.data());
  211|     12|            m_storage.reset();
  212|     12|        }
  213|  98.0k|        else {
  214|  98.0k|            auto& str = m_storage.emplace();
  215|  98.0k|            if constexpr (ranges::sized_range<Range>) {
  216|  98.0k|                str.reserve(ranges_polyfill::usize(range));
  217|  98.0k|            }
  218|  98.0k|            std::copy(ranges::begin(range), ranges::end(range),
  219|  98.0k|                      std::back_inserter(str));
  220|  98.0k|            m_view = string_view_type{str};
  221|  98.0k|        }
  222|  98.0k|    }

_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  28.0M|{
   97|  28.0M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  28.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 29.1k, False: 28.0M]
  |  |  ------------------
  ------------------
   98|  29.1k|        return eof_error::eof;
   99|  29.1k|    }
  100|  28.0M|    return eof_error::good;
  101|  28.0M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  28.0M|{
   91|  28.0M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  28.0M|}
_ZN3scn2v24impl12is_range_eofIPKcS4_EEbT_T0_:
   74|  28.0M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  28.0M|    {
   84|  28.0M|        return begin == end;
   85|  28.0M|    }
   86|  28.0M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|   980k|{
   97|   980k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|   980k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12, False: 980k]
  |  |  ------------------
  ------------------
   98|     12|        return eof_error::eof;
   99|     12|    }
  100|   980k|    return eof_error::good;
  101|   980k|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|   980k|{
   91|   980k|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|   980k|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|   980k|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|   980k|    {
   84|   980k|        return begin == end;
   85|   980k|    }
   86|   980k|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_9eof_errorERKT_:
   96|  27.3M|{
   97|  27.3M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  27.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 39.2k, False: 27.3M]
  |  |  ------------------
  ------------------
   98|  39.2k|        return eof_error::eof;
   99|  39.2k|    }
  100|  27.3M|    return eof_error::good;
  101|  27.3M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRKT_:
   90|  27.3M|{
   91|  27.3M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  27.3M|}
_ZN3scn2v24impl12is_range_eofIPKwS4_EEbT_T0_:
   74|  27.3M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  27.3M|    {
   84|  27.3M|        return begin == end;
   85|  27.3M|    }
   86|  27.3M|}
_ZN3scn2v24impl9eof_checkIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_9eof_errorERKT_:
   96|  2.84M|{
   97|  2.84M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  153|  2.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30, False: 2.84M]
  |  |  ------------------
  ------------------
   98|     30|        return eof_error::eof;
   99|     30|    }
  100|  2.84M|    return eof_error::good;
  101|  2.84M|}
_ZN3scn2v24impl12is_range_eofIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEEbRKT_:
   90|  2.84M|{
   91|  2.84M|    return is_range_eof(ranges::begin(range), ranges::end(range));
   92|  2.84M|}
_ZN3scn2v24impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorEN4nano6ranges18default_sentinel_tEEEbT_T0_:
   74|  2.84M|{
   75|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
   76|       |    if constexpr (ranges_std::contiguous_iterator<I> ||
   77|       |                  (ranges_std::random_access_iterator<I> &&
   78|       |                   detail::can_make_address_from_iterator<I>::value)) {
   79|       |        return detail::to_address(begin) == detail::to_address(end);
   80|       |    }
   81|       |    else
   82|       |#endif
   83|  2.84M|    {
   84|  2.84M|        return begin == end;
   85|  2.84M|    }
   86|  2.84M|}

_ZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  127|  6.83M|{
  128|  6.83M|    return find_classic_impl(
  129|  6.83M|        source, [](char ch) { return !is_ascii_space(ch); },
  130|  6.83M|        [](char32_t cp) { return !is_cp_space(cp); });
  131|  6.83M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
   30|  6.90M|{
   31|  6.90M|    static_assert(sizeof(*source.data()) == 1);
   32|  6.90M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  242|  6.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  6.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   33|      0|    uint64_t word{};
   34|  6.90M|    std::memcpy(&word, source.data(), source.size());
   35|       |
   36|  6.90M|    return has_byte_greater(word, 127) != 0;
   37|  6.90M|}
find_whitespace.cpp:_ZN3scn2v24impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_3ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_4EEPKcS8_T_T0_:
   43|  6.83M|{
   44|  6.83M|    auto it = source.begin();
   45|       |
   46|  6.90M|    while (it != source.end()) {
  ------------------
  |  Branch (46:12): [True: 6.90M, False: 5.97k]
  ------------------
   47|  6.90M|        auto sv =
   48|  6.90M|            detail::make_string_view_from_iterators<char>(it, source.end())
   49|  6.90M|                .substr(0, 8);
   50|       |
   51|  6.90M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (51:13): [True: 6.82M, False: 76.1k]
  ------------------
   52|  6.82M|            auto tmp_it = ranges::find_if(sv, cu_cb);
   53|  6.82M|            it = detail::make_string_view_iterator(source, tmp_it);
   54|  6.82M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (54:17): [True: 6.75M, False: 69.6k]
  ------------------
   55|  6.75M|                break;
   56|  6.75M|            }
   57|  69.6k|            continue;
   58|  6.82M|        }
   59|       |
   60|   104k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (60:28): [True: 103k, False: 1.04k]
  ------------------
   61|   103k|            auto tmp =
   62|   103k|                detail::make_string_view_from_iterators<char>(it, source.end());
   63|   103k|            auto res = get_next_code_point(tmp);
   64|   103k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (64:17): [True: 75.0k, False: 28.2k]
  ------------------
   65|  75.0k|                return it;
   66|  75.0k|            }
   67|  28.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
   68|  28.2k|            it = detail::make_string_view_iterator(source, res.iterator);
   69|  28.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  243|  28.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|  28.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   70|  28.2k|        }
   71|  76.1k|    }
   72|       |
   73|  6.76M|    return detail::make_string_view_iterator(source, it);
   74|  6.83M|}
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_3clEc:
  129|  13.1M|        source, [](char ch) { return !is_ascii_space(ch); },
find_whitespace.cpp:_ZZN3scn2v24impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_4clEDi:
  130|   103k|        [](char32_t cp) { return !is_cp_space(cp); });

_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  6.56M|{
  300|  6.56M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  6.56M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  6.56M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  6.56M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  ------------------
  |  |  248|  6.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  304|  6.56M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  6.56M|        return ranges::next(ranges::begin(range),
  306|  6.56M|                            ranges::distance(buf.view().begin(), it));
  307|  6.56M|    }
  308|  6.56M|    else {
  309|  6.56M|        auto it = ranges::begin(range);
  310|       |
  311|  6.56M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  312|  6.56M|            auto seg = get_contiguous_beginning(range);
  313|  6.56M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  6.56M|                seg_it != seg.end()) {
  315|  6.56M|                return ranges_polyfill::batch_next(
  316|  6.56M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  6.56M|            }
  318|  6.56M|            ranges_polyfill::batch_next(it, seg.size());
  319|  6.56M|        }
  320|       |
  321|  6.56M|        return read_while_code_point(
  322|  6.56M|            SCN_FWD(range),
  323|  6.56M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  6.56M|    }
  325|  6.56M|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  6.55M|{
  459|  6.55M|    auto it = read_code_unit(range);
  460|  6.55M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  6.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.55M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  13.0M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 13.0M, False: 6.08M]
  ------------------
  465|  13.0M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 467k, False: 12.5M]
  ------------------
  466|   467k|            return *it;
  467|   467k|        }
  468|  13.0M|    }
  469|       |
  470|  6.08M|    return unexpected(parse_error::error);
  471|  6.55M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.23M|{
  482|  1.23M|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 1.06M, False: 169k]
  ------------------
  483|  1.06M|        return ranges::begin(range);
  484|  1.06M|    }
  485|   169k|    return *result;
  486|  1.23M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  14.4M|{
  418|  14.4M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  14.4M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  14.4M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  14.4M|        if (ranges::size(range) < str.size()) {
  ------------------
  |  Branch (422:13): [True: 53.8k, False: 14.4M]
  ------------------
  423|  53.8k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  53.8k|        }
  425|  14.4M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  ------------------
  |  Branch (425:13): [True: 14.3M, False: 70.6k]
  ------------------
  426|  14.3M|            return unexpected(parse_error::error);
  427|  14.3M|        }
  428|  70.6k|        return ranges::next(ranges::begin(range), str.size());
  429|  14.4M|    }
  430|  14.4M|    else {
  431|  14.4M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  14.4M|            if (ch < 'A' || ch > 'Z') {
  433|  14.4M|                return ch;
  434|  14.4M|            }
  435|  14.4M|            return static_cast<char_type>(ch +
  436|  14.4M|                                          static_cast<char_type>('a' - 'A'));
  437|  14.4M|        };
  438|       |
  439|  14.4M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  440|  14.4M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  14.4M|        if (SCN_UNLIKELY(!std::equal(
  443|  14.4M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  14.4M|                    return ascii_tolower(a) ==
  445|  14.4M|                           static_cast<detail::char_t<Range>>(b);
  446|  14.4M|                }))) {
  447|  14.4M|            return unexpected(parse_error::error);
  448|  14.4M|        }
  449|       |
  450|  14.4M|        return it;
  451|  14.4M|    }
  452|  14.4M|}
_ZN3scn2v24impl17fast_streq_nocaseEPKcS3_m:
  406|  14.4M|{
  407|  14.4M|    unsigned char running_diff{0};
  408|  43.2M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (408:24): [True: 28.8M, False: 14.4M]
  ------------------
  409|  28.8M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
  410|  28.8M|    }
  411|  14.4M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (411:12): [True: 62.2k, False: 14.3M]
  |  Branch (411:33): [True: 8.42k, False: 14.3M]
  ------------------
  412|  14.4M|}
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  4.62M|{
  332|  4.62M|    auto it = read_code_unit(range);
  333|  4.62M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  4.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.44k, False: 4.62M]
  |  |  ------------------
  ------------------
  334|  1.44k|        return unexpected(make_eof_parse_error(it.error()));
  335|  1.44k|    }
  336|       |
  337|  4.62M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  4.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.93M, False: 2.69M]
  |  |  ------------------
  ------------------
  338|  4.62M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  1.93M|        return unexpected(parse_error::error);
  340|  1.93M|    }
  341|       |
  342|  2.69M|    return *it;
  343|  4.62M|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   277k|{
  300|   277k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   277k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   277k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   277k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   277k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   277k|        return ranges::next(ranges::begin(range),
  306|   277k|                            ranges::distance(buf.view().begin(), it));
  307|   277k|    }
  308|   277k|    else {
  309|   277k|        auto it = ranges::begin(range);
  310|       |
  311|   277k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   277k|            auto seg = get_contiguous_beginning(range);
  313|   277k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   277k|                seg_it != seg.end()) {
  ------------------
  |  Branch (314:17): [True: 277k, False: 0]
  ------------------
  315|   277k|                return ranges_polyfill::batch_next(
  316|   277k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   277k|            }
  318|      0|            ranges_polyfill::batch_next(it, seg.size());
  319|      0|        }
  320|       |
  321|      0|        return read_while_code_point(
  322|      0|            SCN_FWD(range),
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|      0|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   277k|    }
  325|   277k|}
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   277k|{
  459|   277k|    auto it = read_code_unit(range);
  460|   277k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|   555k|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 555k, False: 277k]
  ------------------
  465|   555k|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 555k]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|   555k|    }
  469|       |
  470|   277k|    return unexpected(parse_error::error);
  471|   277k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   130k|{
  482|   130k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 130k, False: 0]
  ------------------
  483|   130k|        return ranges::begin(range);
  484|   130k|    }
  485|      0|    return *result;
  486|   130k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|   473k|{
  418|   473k|    using char_type = detail::char_t<Range>;
  419|       |
  420|   473k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|   473k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|   473k|        if (ranges::size(range) < str.size()) {
  423|   473k|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|   473k|        }
  425|   473k|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|   473k|            return unexpected(parse_error::error);
  427|   473k|        }
  428|   473k|        return ranges::next(ranges::begin(range), str.size());
  429|   473k|    }
  430|   473k|    else {
  431|   473k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   473k|            if (ch < 'A' || ch > 'Z') {
  433|   473k|                return ch;
  434|   473k|            }
  435|   473k|            return static_cast<char_type>(ch +
  436|   473k|                                          static_cast<char_type>('a' - 'A'));
  437|   473k|        };
  438|       |
  439|   473k|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|   473k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   473k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   473k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   473k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 174, False: 473k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    174|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    174|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    174|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    174|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    174|    }                                                  \
  |  |  |  |   70|   473k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   473k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|   473k|                        .transform_error(make_eof_parse_error));
  441|       |
  442|   473k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|   473k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 473k, False: 0]
  |  |  ------------------
  ------------------
  443|   473k|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|   473k|                    return ascii_tolower(a) ==
  445|   473k|                           static_cast<detail::char_t<Range>>(b);
  446|   473k|                }))) {
  447|   473k|            return unexpected(parse_error::error);
  448|   473k|        }
  449|       |
  450|      0|        return it;
  451|   473k|    }
  452|   473k|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlcE_clEc:
  431|   473k|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|   473k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 32.6k, False: 440k]
  |  Branch (432:29): [True: 0, False: 440k]
  ------------------
  433|  32.6k|                return ch;
  434|  32.6k|            }
  435|   440k|            return static_cast<char_type>(ch +
  436|   440k|                                          static_cast<char_type>('a' - 'A'));
  437|   473k|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   147k|{
  332|   147k|    auto it = read_code_unit(range);
  333|   147k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   147k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 147k, False: 0]
  |  |  ------------------
  ------------------
  338|   147k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   147k|        return unexpected(parse_error::error);
  340|   147k|    }
  341|       |
  342|      0|    return *it;
  343|   147k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   245k|{
  159|   245k|    auto it = read_while_code_unit(range, pred);
  160|   245k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 212k, False: 32.6k]
  ------------------
  161|   212k|        return unexpected(parse_error::error);
  162|   212k|    }
  163|  32.6k|    return it;
  164|   245k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   245k|{
  139|   245k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   245k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   245k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   245k|{
  131|   245k|    return ranges::find_if(range, pred);
  132|   245k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_:
  299|  6.37M|{
  300|  6.37M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|  6.37M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|  6.37M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|  6.37M|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|  6.37M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|  6.37M|        return ranges::next(ranges::begin(range),
  306|  6.37M|                            ranges::distance(buf.view().begin(), it));
  307|  6.37M|    }
  308|  6.37M|    else {
  309|  6.37M|        auto it = ranges::begin(range);
  310|       |
  311|  6.37M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|  6.37M|            auto seg = get_contiguous_beginning(range);
  313|  6.37M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|  6.37M|                seg_it != seg.end()) {
  315|  6.37M|                return ranges_polyfill::batch_next(
  316|  6.37M|                    it, ranges::distance(seg.begin(), seg_it));
  317|  6.37M|            }
  318|  6.37M|            ranges_polyfill::batch_next(it, seg.size());
  319|  6.37M|        }
  320|       |
  321|  6.37M|        return read_while_code_point(
  322|  6.37M|            SCN_FWD(range),
  ------------------
  |  |  248|  6.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  6.37M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|  6.37M|    }
  325|  6.37M|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  263|  6.37M|{
  264|  6.37M|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|  6.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|  6.37M|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  230|  6.37M|{
  231|  6.37M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|  6.37M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|  6.37M|        return read_until_code_point_eager(SCN_FWD(range), pred);
  ------------------
  |  |  248|  6.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  234|  6.37M|    }
  235|  6.37M|    else {
  236|  6.37M|        auto it = ranges::begin(range);
  237|  6.37M|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|  6.37M|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|  6.37M|            seg_it != seg.end()) {
  241|  6.37M|            return ranges_polyfill::batch_next(
  242|  6.37M|                it, ranges::distance(seg.begin(), seg_it));
  243|  6.37M|        }
  244|       |
  245|  6.37M|        while (it != ranges::end(range)) {
  246|  6.37M|            const auto [iter, value] =
  247|  6.37M|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|  6.37M|            const auto cp = decode_code_point_exhaustive(value.view());
  249|  6.37M|            if (pred(cp)) {
  250|  6.37M|                return it;
  251|  6.37M|            }
  252|  6.37M|            it = iter;
  253|  6.37M|        }
  254|       |
  255|  6.37M|        return it;
  256|  6.37M|    }
  257|  6.37M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_NS1_12function_refIFbDiESJ_EE:
  177|  6.37M|{
  178|  6.37M|    static_assert(ranges::contiguous_range<Range> &&
  179|  6.37M|                  ranges::sized_range<Range>);
  180|       |
  181|  6.37M|    std::array<char32_t, 16> cp_buf{};
  182|  6.37M|    std::array<uint8_t, 16> idx_buf{};
  183|  6.37M|    auto it = ranges::begin(range);
  184|  6.39M|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 6.38M, False: 9.71k]
  ------------------
  185|  6.38M|        auto chunk_begin = it;
  186|  6.38M|        size_t code_point_count = 0;
  187|  6.38M|        uint8_t code_unit_idx = 0;
  188|   103M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 97.9M, False: 5.86M]
  |  Branch (188:52): [True: 97.4M, False: 521k]
  ------------------
  189|  97.4M|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 97.4M, False: 0]
  ------------------
  190|  97.4M|                idx_buf[code_point_count] = code_unit_idx;
  191|  97.4M|                ++code_point_count;
  192|  97.4M|            }
  193|  97.4M|            ++it;
  194|  97.4M|            ++code_unit_idx;
  195|  97.4M|        }
  196|       |
  197|  6.38M|        auto input = detail::make_string_view_from_pointers(
  198|  6.38M|            detail::to_address(chunk_begin), detail::to_address(it));
  199|  6.38M|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|  6.38M|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|  6.38M|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|  6.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.38M]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|  12.1M|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 12.0M, False: 26.3k]
  ------------------
  217|  12.0M|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 6.36M, False: 5.72M]
  ------------------
  218|  6.36M|                return chunk_begin + idx_buf[i];
  219|  6.36M|            }
  220|  12.0M|        }
  221|  6.38M|    }
  222|       |
  223|  9.71k|    return it;
  224|  6.37M|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEOSE_ENKUlDiE_clEDi:
  323|  12.0M|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  458|  6.36M|{
  459|  6.36M|    auto it = read_code_unit(range);
  460|  6.36M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  6.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 6.36M]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  12.6M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 12.6M, False: 5.96M]
  ------------------
  465|  12.6M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 394k, False: 12.2M]
  ------------------
  466|   394k|            return *it;
  467|   394k|        }
  468|  12.6M|    }
  469|       |
  470|  5.96M|    return unexpected(parse_error::error);
  471|  6.36M|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEENS1_14parse_expectedES8_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEOSH_OSJ_:
  481|  1.30M|{
  482|  1.30M|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 1.15M, False: 152k]
  ------------------
  483|  1.15M|        return ranges::begin(range);
  484|  1.15M|    }
  485|   152k|    return *result;
  486|  1.30M|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEE:
  417|  13.8M|{
  418|  13.8M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  13.8M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  13.8M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  13.8M|        if (ranges::size(range) < str.size()) {
  423|  13.8M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  13.8M|        }
  425|  13.8M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  13.8M|            return unexpected(parse_error::error);
  427|  13.8M|        }
  428|  13.8M|        return ranges::next(ranges::begin(range), str.size());
  429|  13.8M|    }
  430|  13.8M|    else {
  431|  13.8M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  13.8M|            if (ch < 'A' || ch > 'Z') {
  433|  13.8M|                return ch;
  434|  13.8M|            }
  435|  13.8M|            return static_cast<char_type>(ch +
  436|  13.8M|                                          static_cast<char_type>('a' - 'A'));
  437|  13.8M|        };
  438|       |
  439|  13.8M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  13.8M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  13.8M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  13.8M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  13.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 129k, False: 13.7M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   129k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   129k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   129k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   129k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   129k|    }                                                  \
  |  |  |  |   70|  13.8M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  13.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  13.7M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  13.7M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  13.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 13.6M, False: 63.7k]
  |  |  ------------------
  ------------------
  443|  13.7M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  13.7M|                    return ascii_tolower(a) ==
  445|  13.7M|                           static_cast<detail::char_t<Range>>(b);
  446|  13.7M|                }))) {
  447|  13.6M|            return unexpected(parse_error::error);
  448|  13.6M|        }
  449|       |
  450|  63.7k|        return it;
  451|  13.7M|    }
  452|  13.8M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__117basic_string_viewIcNSJ_11char_traitsIcEEEEENKUlwE_clEw:
  431|  21.4M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  21.4M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 20.3M, False: 1.05M]
  |  Branch (432:29): [True: 998k, False: 60.7k]
  ------------------
  433|  21.3M|                return ch;
  434|  21.3M|            }
  435|  60.7k|            return static_cast<char_type>(ch +
  436|  60.7k|                                          static_cast<char_type>('a' - 'A'));
  437|  21.4M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NDTcl4implISE_EEE4typeE:
  331|  4.43M|{
  332|  4.43M|    auto it = read_code_unit(range);
  333|  4.43M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|  4.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.63k, False: 4.43M]
  |  |  ------------------
  ------------------
  334|  2.63k|        return unexpected(make_eof_parse_error(it.error()));
  335|  2.63k|    }
  336|       |
  337|  4.43M|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|  4.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.00M, False: 2.42M]
  |  |  ------------------
  ------------------
  338|  4.43M|                     static_cast<detail::char_t<Range>>(ch))) {
  339|  2.00M|        return unexpected(parse_error::error);
  340|  2.00M|    }
  341|       |
  342|  2.42M|    return *it;
  343|  4.43M|}
_ZN3scn2v24impl27read_until_code_point_eagerIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISA_EEE4typeEOSA_NS1_12function_refIFbDiESF_EE:
  177|   800k|{
  178|   800k|    static_assert(ranges::contiguous_range<Range> &&
  179|   800k|                  ranges::sized_range<Range>);
  180|       |
  181|   800k|    std::array<char32_t, 16> cp_buf{};
  182|   800k|    std::array<uint8_t, 16> idx_buf{};
  183|   800k|    auto it = ranges::begin(range);
  184|   800k|    while (it != ranges::end(range)) {
  ------------------
  |  Branch (184:12): [True: 800k, False: 0]
  ------------------
  185|   800k|        auto chunk_begin = it;
  186|   800k|        size_t code_point_count = 0;
  187|   800k|        uint8_t code_unit_idx = 0;
  188|  1.60M|        while (code_point_count < cp_buf.size() && it != ranges::end(range)) {
  ------------------
  |  Branch (188:16): [True: 1.60M, False: 0]
  |  Branch (188:52): [True: 800k, False: 800k]
  ------------------
  189|   800k|            if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (189:17): [True: 800k, False: 0]
  ------------------
  190|   800k|                idx_buf[code_point_count] = code_unit_idx;
  191|   800k|                ++code_point_count;
  192|   800k|            }
  193|   800k|            ++it;
  194|   800k|            ++code_unit_idx;
  195|   800k|        }
  196|       |
  197|   800k|        auto input = detail::make_string_view_from_pointers(
  198|   800k|            detail::to_address(chunk_begin), detail::to_address(it));
  199|   800k|        auto codepoints = span{cp_buf.data(), code_point_count};
  200|   800k|        auto transcode_result = transcode_possibly_invalid(input, codepoints);
  201|   800k|        if (SCN_UNLIKELY(!transcode_result)) {
  ------------------
  |  |  153|   800k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 800k]
  |  |  ------------------
  ------------------
  202|      0|            auto end = it;
  203|      0|            it = chunk_begin;
  204|      0|            while (it != end) {
  ------------------
  |  Branch (204:20): [True: 0, False: 0]
  ------------------
  205|      0|                const auto [iter, value] =
  206|      0|                    read_code_point_into(ranges::subrange{it, end});
  207|      0|                const auto cp = decode_code_point_exhaustive(value.view());
  208|      0|                if (pred(cp)) {
  ------------------
  |  Branch (208:21): [True: 0, False: 0]
  ------------------
  209|      0|                    return it;
  210|      0|                }
  211|      0|                it = iter;
  212|      0|            }
  213|      0|            continue;
  214|      0|        }
  215|       |
  216|   800k|        for (size_t i = 0; i < code_point_count; ++i) {
  ------------------
  |  Branch (216:28): [True: 800k, False: 0]
  ------------------
  217|   800k|            if (pred(cp_buf[i])) {
  ------------------
  |  Branch (217:17): [True: 800k, False: 0]
  ------------------
  218|   800k|                return chunk_begin + idx_buf[i];
  219|   800k|            }
  220|   800k|        }
  221|   800k|    }
  222|       |
  223|      0|    return it;
  224|   800k|}
_ZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_:
  299|   800k|{
  300|   800k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (300:19): [Folded - Ignored]
  |  Branch (300:19): [Folded - Ignored]
  ------------------
  301|   800k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (301:19): [Folded - Ignored]
  ------------------
  302|   800k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (302:19): [Folded - Ignored]
  ------------------
  303|   800k|        auto buf = make_contiguous_buffer(SCN_FWD(range));
  304|   800k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
  305|   800k|        return ranges::next(ranges::begin(range),
  306|   800k|                            ranges::distance(buf.view().begin(), it));
  307|   800k|    }
  308|   800k|    else {
  309|   800k|        auto it = ranges::begin(range);
  310|       |
  311|   800k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (311:23): [Folded - Ignored]
  ------------------
  312|   800k|            auto seg = get_contiguous_beginning(range);
  313|   800k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
  314|   800k|                seg_it != seg.end()) {
  315|   800k|                return ranges_polyfill::batch_next(
  316|   800k|                    it, ranges::distance(seg.begin(), seg_it));
  317|   800k|            }
  318|   800k|            ranges_polyfill::batch_next(it, seg.size());
  319|   800k|        }
  320|       |
  321|   800k|        return read_while_code_point(
  322|   800k|            SCN_FWD(range),
  ------------------
  |  |  248|   800k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   800k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
  324|   800k|    }
  325|   800k|}
_ZN3scn2v24impl21read_while_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  263|   800k|{
  264|   800k|    return read_until_code_point(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   800k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  265|   800k|}
_ZN3scn2v24impl21read_until_code_pointIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_NS1_12function_refIFbDiESM_EE:
  230|   800k|{
  231|   800k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (231:19): [Folded - Ignored]
  |  Branch (231:19): [Folded - Ignored]
  ------------------
  232|   800k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (232:19): [Folded - Ignored]
  ------------------
  233|   800k|        return read_until_code_point_eager(SCN_FWD(range), pred);
  234|   800k|    }
  235|   800k|    else {
  236|   800k|        auto it = ranges::begin(range);
  237|   800k|        auto seg = get_contiguous_beginning(range);
  238|       |
  239|   800k|        if (auto seg_it = read_until_code_point_eager(seg, pred);
  240|   800k|            seg_it != seg.end()) {
  ------------------
  |  Branch (240:13): [True: 800k, False: 0]
  ------------------
  241|   800k|            return ranges_polyfill::batch_next(
  242|   800k|                it, ranges::distance(seg.begin(), seg_it));
  243|   800k|        }
  244|       |
  245|      0|        while (it != ranges::end(range)) {
  ------------------
  |  Branch (245:16): [True: 0, False: 0]
  ------------------
  246|      0|            const auto [iter, value] =
  247|      0|                read_code_point_into(ranges::subrange{it, ranges::end(range)});
  248|      0|            const auto cp = decode_code_point_exhaustive(value.view());
  249|      0|            if (pred(cp)) {
  ------------------
  |  Branch (249:17): [True: 0, False: 0]
  ------------------
  250|      0|                return it;
  251|      0|            }
  252|      0|            it = iter;
  253|      0|        }
  254|       |
  255|      0|        return it;
  256|      0|    }
  257|   800k|}
_ZZN3scn2v24impl24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_ENKUlDiE_clEDi:
  323|   800k|            [](char32_t cp) SCN_NOEXCEPT { return is_cp_space(cp); });
_ZN3scn2v24impl21read_one_of_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  458|   800k|{
  459|   800k|    auto it = read_code_unit(range);
  460|   800k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   800k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 800k]
  |  |  ------------------
  ------------------
  461|      0|        return unexpected(make_eof_parse_error(it.error()));
  462|      0|    }
  463|       |
  464|  1.60M|    for (auto ch : str) {
  ------------------
  |  Branch (464:18): [True: 1.60M, False: 800k]
  ------------------
  465|  1.60M|        if (*ranges::begin(range) == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (465:13): [True: 0, False: 1.60M]
  ------------------
  466|      0|            return *it;
  467|      0|        }
  468|  1.60M|    }
  469|       |
  470|   800k|    return unexpected(parse_error::error);
  471|   800k|}
_ZN3scn2v24impl9apply_optIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEENS1_14parse_expectedESA_EENSt3__19enable_ifIXsr6detail11is_expectedIT0_IT1_EEE5valueENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEOSK_OSM_:
  481|   359k|{
  482|   359k|    if (!result) {
  ------------------
  |  Branch (482:9): [True: 359k, False: 0]
  ------------------
  483|   359k|        return ranges::begin(range);
  484|   359k|    }
  485|      0|    return *result;
  486|   359k|}
_ZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEE:
  417|  1.38M|{
  418|  1.38M|    using char_type = detail::char_t<Range>;
  419|       |
  420|  1.38M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (420:19): [Folded - Ignored]
  |  Branch (420:19): [Folded - Ignored]
  ------------------
  421|  1.38M|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (421:19): [Folded - Ignored]
  ------------------
  422|  1.38M|        if (ranges::size(range) < str.size()) {
  423|  1.38M|            return unexpected(make_eof_parse_error(eof_error::eof));
  424|  1.38M|        }
  425|  1.38M|        if (!fast_streq_nocase(ranges::data(range), str.data(), str.size())) {
  426|  1.38M|            return unexpected(parse_error::error);
  427|  1.38M|        }
  428|  1.38M|        return ranges::next(ranges::begin(range), str.size());
  429|  1.38M|    }
  430|  1.38M|    else {
  431|  1.38M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.38M|            if (ch < 'A' || ch > 'Z') {
  433|  1.38M|                return ch;
  434|  1.38M|            }
  435|  1.38M|            return static_cast<char_type>(ch +
  436|  1.38M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.38M|        };
  438|       |
  439|  1.38M|        SCN_TRY(it, read_exactly_n_code_units(range, ranges::ssize(str))
  ------------------
  |  |   71|  1.38M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.38M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.38M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 170, False: 1.38M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    170|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    170|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    170|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    170|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    170|    }                                                  \
  |  |  |  |   70|  1.38M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.38M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  440|  1.38M|                        .transform_error(make_eof_parse_error));
  441|       |
  442|  1.38M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  153|  1.38M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.38M, False: 0]
  |  |  ------------------
  ------------------
  443|  1.38M|                ranges::begin(range), it, str.begin(), [&](auto a, auto b) {
  444|  1.38M|                    return ascii_tolower(a) ==
  445|  1.38M|                           static_cast<detail::char_t<Range>>(b);
  446|  1.38M|                }))) {
  447|  1.38M|            return unexpected(parse_error::error);
  448|  1.38M|        }
  449|       |
  450|      0|        return it;
  451|  1.38M|    }
  452|  1.38M|}
_ZZN3scn2v24impl35read_matching_string_classic_nocaseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__117basic_string_viewIcNSM_11char_traitsIcEEEEENKUlwE_clEw:
  431|  1.38M|        auto ascii_tolower = [](char_type ch) -> char_type {
  432|  1.38M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (432:17): [True: 65.3k, False: 1.32M]
  |  Branch (432:29): [True: 0, False: 1.32M]
  ------------------
  433|  65.3k|                return ch;
  434|  65.3k|            }
  435|  1.32M|            return static_cast<char_type>(ch +
  436|  1.32M|                                          static_cast<char_type>('a' - 'A'));
  437|  1.38M|        };
_ZN3scn2v24impl23read_matching_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NDTcl4implISH_EEE4typeE:
  331|   441k|{
  332|   441k|    auto it = read_code_unit(range);
  333|   441k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  153|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 441k]
  |  |  ------------------
  ------------------
  334|      0|        return unexpected(make_eof_parse_error(it.error()));
  335|      0|    }
  336|       |
  337|   441k|    if (SCN_UNLIKELY(*ranges::begin(range) !=
  ------------------
  |  |  153|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 441k, False: 0]
  |  |  ------------------
  ------------------
  338|   441k|                     static_cast<detail::char_t<Range>>(ch))) {
  339|   441k|        return unexpected(parse_error::error);
  340|   441k|    }
  341|       |
  342|      0|    return *it;
  343|   441k|}
_ZN3scn2v24impl21read_while1_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NS1_12function_refIFbNDTcl4implISH_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
  158|   702k|{
  159|   702k|    auto it = read_while_code_unit(range, pred);
  160|   702k|    if (it == ranges::begin(range)) {
  ------------------
  |  Branch (160:9): [True: 604k, False: 98.0k]
  ------------------
  161|   604k|        return unexpected(parse_error::error);
  162|   604k|    }
  163|  98.0k|    return it;
  164|   702k|}
_ZN3scn2v24impl20read_while_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  138|   702k|{
  139|   702k|    return read_until_code_unit(SCN_FWD(range), std::not_fn(pred));
  ------------------
  |  |  248|   702k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  140|   702k|}
_ZN3scn2v24impl20read_until_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEOSG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
  130|   702k|{
  131|   702k|    return ranges::find_if(range, pred);
  132|   702k|}

_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  11.1M|{
   36|  11.1M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  11.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.44k, False: 11.1M]
  |  |  ------------------
  ------------------
   37|  1.44k|        return unexpected(e);
   38|  1.44k|    }
   39|       |
   40|  11.1M|    return ranges::next(ranges::begin(range));
   41|  11.1M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|   424k|{
   36|   424k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   424k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 424k]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|   424k|    return ranges::next(ranges::begin(range));
   41|   424k|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|   473k|{
   48|   473k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|   473k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   473k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|   473k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|   473k|        const auto sz = ranges::ssize(range);
   52|   473k|        if (sz < count) {
   53|   473k|            return unexpected(eof_error::eof);
   54|   473k|        }
   55|       |
   56|   473k|        return ranges::next(ranges::begin(range), count);
   57|   473k|    }
   58|   473k|    else {
   59|   473k|        auto it = ranges::begin(range);
   60|   473k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 473k, False: 174]
  ------------------
   61|   473k|            return ranges_polyfill::batch_next(it, count);
   62|   473k|        }
   63|       |
   64|    348|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 348, False: 0]
  ------------------
   65|    348|             ++i, (void)++it) {
   66|    348|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 174, False: 174]
  ------------------
   67|    174|                return unexpected(eof_error::eof);
   68|    174|            }
   69|    348|        }
   70|       |
   71|      0|        return it;
   72|    174|    }
   73|   473k|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   35|  10.7M|{
   36|  10.7M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  10.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.63k, False: 10.7M]
  |  |  ------------------
  ------------------
   37|  2.63k|        return unexpected(e);
   38|  2.63k|    }
   39|       |
   40|  10.7M|    return ranges::next(ranges::begin(range));
   41|  10.7M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_NSt3__19enable_ifIX5rangeISE_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeE:
   47|  13.8M|{
   48|  13.8M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  13.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  13.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  13.8M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  13.8M|        const auto sz = ranges::ssize(range);
   52|  13.8M|        if (sz < count) {
  ------------------
  |  Branch (52:13): [True: 129k, False: 13.7M]
  ------------------
   53|   129k|            return unexpected(eof_error::eof);
   54|   129k|        }
   55|       |
   56|  13.7M|        return ranges::next(ranges::begin(range), count);
   57|  13.8M|    }
   58|  13.8M|    else {
   59|  13.8M|        auto it = ranges::begin(range);
   60|  13.8M|        if (guaranteed_minimum_size(range) >= count) {
   61|  13.8M|            return ranges_polyfill::batch_next(it, count);
   62|  13.8M|        }
   63|       |
   64|  13.8M|        for (ranges::range_difference_t<Range> i = 0; i < count;
   65|  13.8M|             ++i, (void)++it) {
   66|  13.8M|            if (it == ranges::end(range)) {
   67|  13.8M|                return unexpected(eof_error::eof);
   68|  13.8M|            }
   69|  13.8M|        }
   70|       |
   71|  13.8M|        return it;
   72|  13.8M|    }
   73|  13.8M|}
_ZN3scn2v24impl14read_code_unitIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   35|  1.24M|{
   36|  1.24M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.24M]
  |  |  ------------------
  ------------------
   37|      0|        return unexpected(e);
   38|      0|    }
   39|       |
   40|  1.24M|    return ranges::next(ranges::begin(range));
   41|  1.24M|}
_ZN3scn2v24impl25read_exactly_n_code_unitsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_NSt3__19enable_ifIX5rangeISH_EENS4_20incrementable_traitsIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRSH_EEEEE15difference_typeEE4typeE:
   47|  1.38M|{
   48|  1.38M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  242|  1.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   49|       |
   50|  1.38M|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (50:19): [Folded - Ignored]
  ------------------
   51|  1.38M|        const auto sz = ranges::ssize(range);
   52|  1.38M|        if (sz < count) {
   53|  1.38M|            return unexpected(eof_error::eof);
   54|  1.38M|        }
   55|       |
   56|  1.38M|        return ranges::next(ranges::begin(range), count);
   57|  1.38M|    }
   58|  1.38M|    else {
   59|  1.38M|        auto it = ranges::begin(range);
   60|  1.38M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (60:13): [True: 1.38M, False: 170]
  ------------------
   61|  1.38M|            return ranges_polyfill::batch_next(it, count);
   62|  1.38M|        }
   63|       |
   64|    340|        for (ranges::range_difference_t<Range> i = 0; i < count;
  ------------------
  |  Branch (64:55): [True: 340, False: 0]
  ------------------
   65|    340|             ++i, (void)++it) {
   66|    340|            if (it == ranges::end(range)) {
  ------------------
  |  Branch (66:17): [True: 170, False: 170]
  ------------------
   67|    170|                return unexpected(eof_error::eof);
   68|    170|            }
   69|    340|        }
   70|       |
   71|      0|        return it;
   72|    170|    }
   73|  1.38M|}

_ZN3scn2v26detail10locale_refC2INSt3__16localeEEERKT_:
   32|  6.77M|{
   33|  6.77M|    static_assert(std::is_same_v<Locale, std::locale>);
   34|  6.77M|}
_ZNK3scn2v26detail10locale_ref3getINSt3__16localeEEET_v:
   38|  1.51M|{
   39|  1.51M|    static_assert(std::is_same_v<Locale, std::locale>);
   40|  1.51M|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (40:12): [True: 759k, False: 759k]
  ------------------
   41|  1.51M|                    : std::locale{};
   42|  1.51M|}

_ZN3scn2v24impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
  111|   730k|    {
  112|   730k|        auto stdloc = loc.get<std::locale>();
  113|   730k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   730k|        grouping = numpunct.grouping();
  115|   730k|        thousands_sep =
  116|   730k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 730k]
  ------------------
  117|   730k|        decimal_point = numpunct.decimal_point();
  118|   730k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
   48|   730k|{
   49|   730k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 730k, False: 0]
  ------------------
   50|   730k|        return std::use_facet<Facet>(stdloc);
   51|   730k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   730k|}
_ZN3scn2v24impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
  111|   787k|    {
  112|   787k|        auto stdloc = loc.get<std::locale>();
  113|   787k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
  114|   787k|        grouping = numpunct.grouping();
  115|   787k|        thousands_sep =
  116|   787k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (116:13): [True: 0, False: 787k]
  ------------------
  117|   787k|        decimal_point = numpunct.decimal_point();
  118|   787k|    }
_ZN3scn2v24impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
   48|   787k|{
   49|   787k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (49:9): [True: 787k, False: 0]
  ------------------
   50|   787k|        return std::use_facet<Facet>(stdloc);
   51|   787k|    }
   52|      0|    stdloc = std::locale(stdloc, new Facet{});
   53|      0|    return std::use_facet<Facet>(stdloc);
   54|   787k|}

_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  6.56M|{
   46|  6.56M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 6.56M, False: 0]
  ------------------
   47|  6.56M|        auto it = read_while_classic_space(range);
   48|  6.56M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  6.56M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.97k, False: 6.55M]
  |  |  ------------------
  ------------------
   50|  5.97k|            return unexpected(e);
   51|  5.97k|        }
   52|       |
   53|  6.55M|        return it;
   54|  6.56M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  6.56M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE19skip_ws_before_readEv:
  125|  6.85M|    {
  126|  6.85M|        return true;
  127|  6.85M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   277k|{
   46|   277k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 277k, False: 0]
  ------------------
   47|   277k|        auto it = read_while_classic_space(range);
   48|   277k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   277k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   277k|        return it;
   54|   277k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   277k|}
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11check_specsERKNS0_6detail12format_specsE:
  130|  4.90M|    {
  131|  4.90M|        reader_error_handler eh{};
  132|  4.90M|        get_derived().check_specs_impl(specs, eh);
  133|  4.90M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  4.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.90M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  4.90M|        return {};
  137|  4.90M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIcEEcE11get_derivedEv:
  141|  4.90M|    {
  142|  4.90M|        return static_cast<Derived&>(*this);
  143|  4.90M|    }
_ZNK3scn2v24impl20reader_error_handlercvbEv:
   34|  10.1M|    {
   35|  10.1M|        return m_msg == nullptr;
   36|  10.1M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_b:
   45|  6.37M|{
   46|  6.37M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 6.37M, False: 0]
  ------------------
   47|  6.37M|        auto it = read_while_classic_space(range);
   48|  6.37M|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|  6.37M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.71k, False: 6.36M]
  |  |  ------------------
  ------------------
   50|  9.71k|            return unexpected(e);
   51|  9.71k|        }
   52|       |
   53|  6.36M|        return it;
   54|  6.37M|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|  6.37M|}
_ZNK3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE19skip_ws_before_readEv:
  125|  7.19M|    {
  126|  7.19M|        return true;
  127|  7.19M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11check_specsERKNS0_6detail12format_specsE:
  130|  5.24M|    {
  131|  5.24M|        reader_error_handler eh{};
  132|  5.24M|        get_derived().check_specs_impl(specs, eh);
  133|  5.24M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  153|  5.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 5.24M]
  |  |  ------------------
  ------------------
  134|      0|            return {scan_error::invalid_format_string, eh.m_msg};
  135|      0|        }
  136|  5.24M|        return {};
  137|  5.24M|    }
_ZN3scn2v24impl11reader_baseINS1_19reader_impl_for_intIwEEwE11get_derivedEv:
  141|  5.24M|    {
  142|  5.24M|        return static_cast<Derived&>(*this);
  143|  5.24M|    }
_ZN3scn2v24impl23skip_classic_whitespaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_b:
   45|   800k|{
   46|   800k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (46:9): [True: 800k, False: 0]
  ------------------
   47|   800k|        auto it = read_while_classic_space(range);
   48|   800k|        if (auto e = eof_check(ranges::subrange{it, ranges::end(range)});
   49|   800k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   800k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 800k]
  |  |  ------------------
  ------------------
   50|      0|            return unexpected(e);
   51|      0|        }
   52|       |
   53|   800k|        return it;
   54|   800k|    }
   55|       |
   56|      0|    return read_while_classic_space(SCN_FWD(range));
  ------------------
  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   57|   800k|}

_ZN3scn2v24impl19parse_integer_valueIcaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   582k|{
  218|   582k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   582k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   582k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   582k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   582k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   582k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   582k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   582k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   582k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   582k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   582k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   582k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   582k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 18.5k, False: 563k]
  ------------------
  224|  18.5k|        SCN_UNLIKELY_ATTR
  225|  18.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  18.5k|                                     "Invalid integer value");
  227|  18.5k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   563k|    auto start = source.data();
  231|   563k|    const auto end = source.data() + source.size();
  232|   563k|    {
  233|   890k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 875k, False: 14.6k]
  ------------------
  234|   875k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 548k, False: 326k]
  ------------------
  235|   548k|                break;
  236|   548k|            }
  237|   875k|        }
  238|   563k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 149k, False: 414k]
  |  |  |  Branch (153:45): [True: 14.6k, False: 548k]
  |  |  |  Branch (153:45): [True: 134k, False: 414k]
  |  |  ------------------
  ------------------
  239|   149k|            value = 0;
  240|   149k|            return ranges::next(source.begin(),
  241|   149k|                                ranges::distance(source.data(), start));
  242|   149k|        }
  243|   563k|    }
  244|       |
  245|   414k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   414k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 322k, False: 91.4k]
  ------------------
  247|   322k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   322k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 9.68k, False: 312k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  9.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  9.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  9.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  9.68k|    }                                                  \
  |  |  |  |   70|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   312k|                             detail::make_string_view_from_pointers(start, end),
  249|   312k|                             value, sign == sign_type::minus_sign));
  250|   312k|            return ranges::next(source.begin(),
  251|   312k|                                ranges::distance(source.data(), ptr));
  252|   322k|        }
  253|   414k|    }
  254|       |
  255|  91.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  91.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  91.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  91.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  91.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.17k, False: 84.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.17k|    }                                                  \
  |  |  |  |   70|  91.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  84.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  84.3k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  84.3k|                     base, sign == sign_type::minus_sign));
  258|  84.3k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  91.4k|}
_ZN3scn2v24impl19parse_integer_valueIwaEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   604k|{
  218|   604k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   604k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   604k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   604k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   604k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 91.0k, False: 513k]
  ------------------
  224|  91.0k|        SCN_UNLIKELY_ATTR
  225|  91.0k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  91.0k|                                     "Invalid integer value");
  227|  91.0k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   513k|    auto start = source.data();
  231|   513k|    const auto end = source.data() + source.size();
  232|   513k|    {
  233|   815k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 802k, False: 13.6k]
  ------------------
  234|   802k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 499k, False: 302k]
  ------------------
  235|   499k|                break;
  236|   499k|            }
  237|   802k|        }
  238|   513k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 136k, False: 376k]
  |  |  |  Branch (153:45): [True: 13.6k, False: 499k]
  |  |  |  Branch (153:45): [True: 123k, False: 376k]
  |  |  ------------------
  ------------------
  239|   136k|            value = 0;
  240|   136k|            return ranges::next(source.begin(),
  241|   136k|                                ranges::distance(source.data(), start));
  242|   136k|        }
  243|   513k|    }
  244|       |
  245|   376k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   376k|        if (base == 10) {
  247|   376k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   376k|                             detail::make_string_view_from_pointers(start, end),
  249|   376k|                             value, sign == sign_type::minus_sign));
  250|   376k|            return ranges::next(source.begin(),
  251|   376k|                                ranges::distance(source.data(), ptr));
  252|   376k|        }
  253|   376k|    }
  254|       |
  255|   376k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   376k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   376k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   376k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 29.3k, False: 346k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  29.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  29.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  29.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  29.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  29.3k|    }                                                  \
  |  |  |  |   70|   376k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   346k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   346k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   346k|                     base, sign == sign_type::minus_sign));
  258|   346k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   376k|}
_ZN3scn2v24impl19parse_integer_valueIciEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   912k|{
  218|   912k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   912k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   912k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   912k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   912k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   912k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   912k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   912k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   912k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   912k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   912k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   912k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   912k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 25.4k, False: 887k]
  ------------------
  224|  25.4k|        SCN_UNLIKELY_ATTR
  225|  25.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  25.4k|                                     "Invalid integer value");
  227|  25.4k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   887k|    auto start = source.data();
  231|   887k|    const auto end = source.data() + source.size();
  232|   887k|    {
  233|  1.43M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.41M, False: 19.5k]
  ------------------
  234|  1.41M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 867k, False: 548k]
  ------------------
  235|   867k|                break;
  236|   867k|            }
  237|  1.41M|        }
  238|   887k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 230k, False: 656k]
  |  |  |  Branch (153:45): [True: 19.5k, False: 867k]
  |  |  |  Branch (153:45): [True: 211k, False: 656k]
  |  |  ------------------
  ------------------
  239|   230k|            value = 0;
  240|   230k|            return ranges::next(source.begin(),
  241|   230k|                                ranges::distance(source.data(), start));
  242|   230k|        }
  243|   887k|    }
  244|       |
  245|   656k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   656k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 466k, False: 190k]
  ------------------
  247|   466k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   466k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   466k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   466k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.59k, False: 463k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.59k|    }                                                  \
  |  |  |  |   70|   466k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   463k|                             detail::make_string_view_from_pointers(start, end),
  249|   463k|                             value, sign == sign_type::minus_sign));
  250|   463k|            return ranges::next(source.begin(),
  251|   463k|                                ranges::distance(source.data(), ptr));
  252|   466k|        }
  253|   656k|    }
  254|       |
  255|   190k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   190k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   190k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   190k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.92k, False: 187k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.92k|    }                                                  \
  |  |  |  |   70|   190k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   187k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   187k|                     base, sign == sign_type::minus_sign));
  258|   187k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   190k|}
_ZN3scn2v24impl19parse_integer_valueIwiEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   897k|{
  218|   897k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   897k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   897k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   897k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   897k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   897k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   897k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   897k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   897k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   897k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   897k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   897k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   897k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 95.9k, False: 801k]
  ------------------
  224|  95.9k|        SCN_UNLIKELY_ATTR
  225|  95.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  95.9k|                                     "Invalid integer value");
  227|  95.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   801k|    auto start = source.data();
  231|   801k|    const auto end = source.data() + source.size();
  232|   801k|    {
  233|  1.29M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.27M, False: 18.0k]
  ------------------
  234|  1.27M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 783k, False: 494k]
  ------------------
  235|   783k|                break;
  236|   783k|            }
  237|  1.27M|        }
  238|   801k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 209k, False: 591k]
  |  |  |  Branch (153:45): [True: 18.0k, False: 783k]
  |  |  |  Branch (153:45): [True: 191k, False: 591k]
  |  |  ------------------
  ------------------
  239|   209k|            value = 0;
  240|   209k|            return ranges::next(source.begin(),
  241|   209k|                                ranges::distance(source.data(), start));
  242|   209k|        }
  243|   801k|    }
  244|       |
  245|   591k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   591k|        if (base == 10) {
  247|   591k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   591k|                             detail::make_string_view_from_pointers(start, end),
  249|   591k|                             value, sign == sign_type::minus_sign));
  250|   591k|            return ranges::next(source.begin(),
  251|   591k|                                ranges::distance(source.data(), ptr));
  252|   591k|        }
  253|   591k|    }
  254|       |
  255|   591k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   591k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   591k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   591k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.17k, False: 587k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.17k|    }                                                  \
  |  |  |  |   70|   591k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   587k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   587k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   587k|                     base, sign == sign_type::minus_sign));
  258|   587k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   591k|}
_ZN3scn2v24impl19parse_integer_valueIcxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|  1.00M|{
  218|  1.00M|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|  1.00M|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|  1.00M|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|  1.00M|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|  1.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  1.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|  1.00M|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 27.5k, False: 981k]
  ------------------
  224|  27.5k|        SCN_UNLIKELY_ATTR
  225|  27.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  27.5k|                                     "Invalid integer value");
  227|  27.5k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   981k|    auto start = source.data();
  231|   981k|    const auto end = source.data() + source.size();
  232|   981k|    {
  233|  1.56M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.54M, False: 20.2k]
  ------------------
  234|  1.54M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 961k, False: 580k]
  ------------------
  235|   961k|                break;
  236|   961k|            }
  237|  1.54M|        }
  238|   981k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 237k, False: 743k]
  |  |  |  Branch (153:45): [True: 20.2k, False: 961k]
  |  |  |  Branch (153:45): [True: 217k, False: 743k]
  |  |  ------------------
  ------------------
  239|   237k|            value = 0;
  240|   237k|            return ranges::next(source.begin(),
  241|   237k|                                ranges::distance(source.data(), start));
  242|   237k|        }
  243|   981k|    }
  244|       |
  245|   743k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   743k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 523k, False: 220k]
  ------------------
  247|   523k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   523k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   523k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   523k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   523k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 871, False: 522k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    871|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    871|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    871|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    871|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    871|    }                                                  \
  |  |  |  |   70|   523k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   522k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   522k|                             detail::make_string_view_from_pointers(start, end),
  249|   522k|                             value, sign == sign_type::minus_sign));
  250|   522k|            return ranges::next(source.begin(),
  251|   522k|                                ranges::distance(source.data(), ptr));
  252|   523k|        }
  253|   743k|    }
  254|       |
  255|   220k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   220k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   220k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   220k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.18k, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.18k|    }                                                  \
  |  |  |  |   70|   220k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   219k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   219k|                     base, sign == sign_type::minus_sign));
  258|   219k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   220k|}
_ZN3scn2v24impl19parse_integer_valueIwxEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   974k|{
  218|   974k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   974k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   974k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   974k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   974k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   974k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   974k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   974k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   974k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   974k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   974k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   974k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   974k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 97.2k, False: 877k]
  ------------------
  224|  97.2k|        SCN_UNLIKELY_ATTR
  225|  97.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  97.2k|                                     "Invalid integer value");
  227|  97.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   877k|    auto start = source.data();
  231|   877k|    const auto end = source.data() + source.size();
  232|   877k|    {
  233|  1.39M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.37M, False: 18.6k]
  ------------------
  234|  1.37M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 858k, False: 517k]
  ------------------
  235|   858k|                break;
  236|   858k|            }
  237|  1.37M|        }
  238|   877k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 215k, False: 661k]
  |  |  |  Branch (153:45): [True: 18.6k, False: 858k]
  |  |  |  Branch (153:45): [True: 196k, False: 661k]
  |  |  ------------------
  ------------------
  239|   215k|            value = 0;
  240|   215k|            return ranges::next(source.begin(),
  241|   215k|                                ranges::distance(source.data(), start));
  242|   215k|        }
  243|   877k|    }
  244|       |
  245|   661k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   661k|        if (base == 10) {
  247|   661k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   661k|                             detail::make_string_view_from_pointers(start, end),
  249|   661k|                             value, sign == sign_type::minus_sign));
  250|   661k|            return ranges::next(source.begin(),
  251|   661k|                                ranges::distance(source.data(), ptr));
  252|   661k|        }
  253|   661k|    }
  254|       |
  255|   661k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   661k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   661k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   661k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   661k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.61k, False: 660k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.61k|    }                                                  \
  |  |  |  |   70|   661k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   660k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   660k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   660k|                     base, sign == sign_type::minus_sign));
  258|   660k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   661k|}
_ZN3scn2v24impl19parse_integer_valueIchEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   521k|{
  218|   521k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   521k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   521k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   521k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   521k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   521k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   521k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   521k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   521k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   521k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   521k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   521k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   521k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 15.2k, False: 506k]
  ------------------
  224|  15.2k|        SCN_UNLIKELY_ATTR
  225|  15.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  15.2k|                                     "Invalid integer value");
  227|  15.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   506k|    auto start = source.data();
  231|   506k|    const auto end = source.data() + source.size();
  232|   506k|    {
  233|   904k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 888k, False: 15.5k]
  ------------------
  234|   888k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 491k, False: 397k]
  ------------------
  235|   491k|                break;
  236|   491k|            }
  237|   888k|        }
  238|   506k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   997k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 171k, False: 334k]
  |  |  |  Branch (153:45): [True: 15.5k, False: 491k]
  |  |  |  Branch (153:45): [True: 156k, False: 334k]
  |  |  ------------------
  ------------------
  239|   171k|            value = 0;
  240|   171k|            return ranges::next(source.begin(),
  241|   171k|                                ranges::distance(source.data(), start));
  242|   171k|        }
  243|   506k|    }
  244|       |
  245|   334k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   334k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 245k, False: 89.4k]
  ------------------
  247|   245k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   245k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   245k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   245k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.08k, False: 239k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.08k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.08k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.08k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.08k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.08k|    }                                                  \
  |  |  |  |   70|   245k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   239k|                             detail::make_string_view_from_pointers(start, end),
  249|   239k|                             value, sign == sign_type::minus_sign));
  250|   239k|            return ranges::next(source.begin(),
  251|   239k|                                ranges::distance(source.data(), ptr));
  252|   245k|        }
  253|   334k|    }
  254|       |
  255|  89.4k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|  89.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  89.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  89.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  89.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.94k, False: 85.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.94k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.94k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.94k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.94k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.94k|    }                                                  \
  |  |  |  |   70|  89.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  85.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|  85.5k|                     detail::make_string_view_from_pointers(start, end), value,
  257|  85.5k|                     base, sign == sign_type::minus_sign));
  258|  85.5k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|  89.4k|}
_ZN3scn2v24impl19parse_integer_valueIwhEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   554k|{
  218|   554k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   554k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   554k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   554k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   554k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   554k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   554k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   554k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   554k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   554k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   554k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   554k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   554k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 87.9k, False: 466k]
  ------------------
  224|  87.9k|        SCN_UNLIKELY_ATTR
  225|  87.9k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  87.9k|                                     "Invalid integer value");
  227|  87.9k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   466k|    auto start = source.data();
  231|   466k|    const auto end = source.data() + source.size();
  232|   466k|    {
  233|   833k|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 819k, False: 14.4k]
  ------------------
  234|   819k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 452k, False: 367k]
  ------------------
  235|   452k|                break;
  236|   452k|            }
  237|   819k|        }
  238|   466k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|   918k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 157k, False: 309k]
  |  |  |  Branch (153:45): [True: 14.4k, False: 452k]
  |  |  |  Branch (153:45): [True: 142k, False: 309k]
  |  |  ------------------
  ------------------
  239|   157k|            value = 0;
  240|   157k|            return ranges::next(source.begin(),
  241|   157k|                                ranges::distance(source.data(), start));
  242|   157k|        }
  243|   466k|    }
  244|       |
  245|   309k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   309k|        if (base == 10) {
  247|   309k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   309k|                             detail::make_string_view_from_pointers(start, end),
  249|   309k|                             value, sign == sign_type::minus_sign));
  250|   309k|            return ranges::next(source.begin(),
  251|   309k|                                ranges::distance(source.data(), ptr));
  252|   309k|        }
  253|   309k|    }
  254|       |
  255|   309k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.3k, False: 284k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.3k|    }                                                  \
  |  |  |  |   70|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   284k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   284k|                     base, sign == sign_type::minus_sign));
  258|   284k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   309k|}
_ZN3scn2v24impl19parse_integer_valueIcjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   692k|{
  218|   692k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   692k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   692k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   692k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   692k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   692k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   692k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   692k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   692k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   692k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   692k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   692k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   692k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 18.5k, False: 673k]
  ------------------
  224|  18.5k|        SCN_UNLIKELY_ATTR
  225|  18.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  18.5k|                                     "Invalid integer value");
  227|  18.5k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   673k|    auto start = source.data();
  231|   673k|    const auto end = source.data() + source.size();
  232|   673k|    {
  233|  1.17M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.15M, False: 17.5k]
  ------------------
  234|  1.15M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 656k, False: 496k]
  ------------------
  235|   656k|                break;
  236|   656k|            }
  237|  1.15M|        }
  238|   673k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 200k, False: 473k]
  |  |  |  Branch (153:45): [True: 17.5k, False: 656k]
  |  |  |  Branch (153:45): [True: 183k, False: 473k]
  |  |  ------------------
  ------------------
  239|   200k|            value = 0;
  240|   200k|            return ranges::next(source.begin(),
  241|   200k|                                ranges::distance(source.data(), start));
  242|   200k|        }
  243|   673k|    }
  244|       |
  245|   473k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   473k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 338k, False: 134k]
  ------------------
  247|   338k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   338k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   338k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   338k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.66k, False: 337k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.66k|    }                                                  \
  |  |  |  |   70|   338k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   337k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   337k|                             detail::make_string_view_from_pointers(start, end),
  249|   337k|                             value, sign == sign_type::minus_sign));
  250|   337k|            return ranges::next(source.begin(),
  251|   337k|                                ranges::distance(source.data(), ptr));
  252|   338k|        }
  253|   473k|    }
  254|       |
  255|   134k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.82k, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.82k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.82k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.82k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.82k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.82k|    }                                                  \
  |  |  |  |   70|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   132k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   132k|                     base, sign == sign_type::minus_sign));
  258|   132k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   134k|}
_ZN3scn2v24impl19parse_integer_valueIwjEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   705k|{
  218|   705k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   705k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   705k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   705k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   705k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   705k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   705k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   705k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   705k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   705k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   705k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   705k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   705k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 90.3k, False: 614k]
  ------------------
  224|  90.3k|        SCN_UNLIKELY_ATTR
  225|  90.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  90.3k|                                     "Invalid integer value");
  227|  90.3k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   614k|    auto start = source.data();
  231|   614k|    const auto end = source.data() + source.size();
  232|   614k|    {
  233|  1.06M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.04M, False: 16.2k]
  ------------------
  234|  1.04M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 598k, False: 446k]
  ------------------
  235|   598k|                break;
  236|   598k|            }
  237|  1.04M|        }
  238|   614k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 182k, False: 432k]
  |  |  |  Branch (153:45): [True: 16.2k, False: 598k]
  |  |  |  Branch (153:45): [True: 166k, False: 432k]
  |  |  ------------------
  ------------------
  239|   182k|            value = 0;
  240|   182k|            return ranges::next(source.begin(),
  241|   182k|                                ranges::distance(source.data(), start));
  242|   182k|        }
  243|   614k|    }
  244|       |
  245|   432k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   432k|        if (base == 10) {
  247|   432k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   432k|                             detail::make_string_view_from_pointers(start, end),
  249|   432k|                             value, sign == sign_type::minus_sign));
  250|   432k|            return ranges::next(source.begin(),
  251|   432k|                                ranges::distance(source.data(), ptr));
  252|   432k|        }
  253|   432k|    }
  254|       |
  255|   432k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   432k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   432k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   432k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.60k, False: 429k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.60k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.60k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.60k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.60k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.60k|    }                                                  \
  |  |  |  |   70|   432k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   429k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   429k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   429k|                     base, sign == sign_type::minus_sign));
  258|   429k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   432k|}
_ZN3scn2v24impl19parse_integer_valueIcyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   750k|{
  218|   750k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   750k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   750k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   750k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   750k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   750k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   750k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 19.2k, False: 731k]
  ------------------
  224|  19.2k|        SCN_UNLIKELY_ATTR
  225|  19.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  19.2k|                                     "Invalid integer value");
  227|  19.2k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   731k|    auto start = source.data();
  231|   731k|    const auto end = source.data() + source.size();
  232|   731k|    {
  233|  1.24M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.22M, False: 18.1k]
  ------------------
  234|  1.22M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 713k, False: 516k]
  ------------------
  235|   713k|                break;
  236|   713k|            }
  237|  1.22M|        }
  238|   731k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 204k, False: 526k]
  |  |  |  Branch (153:45): [True: 18.1k, False: 713k]
  |  |  |  Branch (153:45): [True: 186k, False: 526k]
  |  |  ------------------
  ------------------
  239|   204k|            value = 0;
  240|   204k|            return ranges::next(source.begin(),
  241|   204k|                                ranges::distance(source.data(), start));
  242|   204k|        }
  243|   731k|    }
  244|       |
  245|   526k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   526k|        if (base == 10) {
  ------------------
  |  Branch (246:13): [True: 376k, False: 150k]
  ------------------
  247|   376k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  |   71|   376k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   376k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   376k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 499, False: 375k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    499|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    499|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    499|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    499|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    499|    }                                                  \
  |  |  |  |   70|   376k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   375k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|   375k|                             detail::make_string_view_from_pointers(start, end),
  249|   375k|                             value, sign == sign_type::minus_sign));
  250|   375k|            return ranges::next(source.begin(),
  251|   375k|                                ranges::distance(source.data(), ptr));
  252|   376k|        }
  253|   526k|    }
  254|       |
  255|   150k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   150k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   150k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   150k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 682, False: 149k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    682|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    682|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    682|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    682|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    682|    }                                                  \
  |  |  |  |   70|   150k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   149k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   149k|                     base, sign == sign_type::minus_sign));
  258|   149k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   150k|}
_ZN3scn2v24impl19parse_integer_valueIwyEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
  217|   752k|{
  218|   752k|    SCN_EXPECT(!source.empty());
  ------------------
  |  |  242|   752k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   752k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  219|   752k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  |  242|   752k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   752k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  220|   752k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  |  242|   752k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   752k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  221|   752k|    SCN_EXPECT(base > 0);
  ------------------
  |  |  242|   752k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   752k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  222|       |
  223|   752k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (223:9): [True: 90.8k, False: 661k]
  ------------------
  224|  90.8k|        SCN_UNLIKELY_ATTR
  225|  90.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
  226|  90.8k|                                     "Invalid integer value");
  227|  90.8k|    }
  228|       |
  229|       |    // Skip leading zeroes
  230|   661k|    auto start = source.data();
  231|   661k|    const auto end = source.data() + source.size();
  232|   661k|    {
  233|  1.12M|        for (; start != end; ++start) {
  ------------------
  |  Branch (233:16): [True: 1.10M, False: 16.6k]
  ------------------
  234|  1.10M|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (234:17): [True: 644k, False: 461k]
  ------------------
  235|   644k|                break;
  236|   644k|            }
  237|  1.10M|        }
  238|   661k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  |  153|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 186k, False: 475k]
  |  |  |  Branch (153:45): [True: 16.6k, False: 644k]
  |  |  |  Branch (153:45): [True: 169k, False: 475k]
  |  |  ------------------
  ------------------
  239|   186k|            value = 0;
  240|   186k|            return ranges::next(source.begin(),
  241|   186k|                                ranges::distance(source.data(), start));
  242|   186k|        }
  243|   661k|    }
  244|       |
  245|   475k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (245:19): [Folded - Ignored]
  ------------------
  246|   475k|        if (base == 10) {
  247|   475k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  248|   475k|                             detail::make_string_view_from_pointers(start, end),
  249|   475k|                             value, sign == sign_type::minus_sign));
  250|   475k|            return ranges::next(source.begin(),
  251|   475k|                                ranges::distance(source.data(), ptr));
  252|   475k|        }
  253|   475k|    }
  254|       |
  255|   475k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  |   71|   475k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   475k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   475k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 941, False: 474k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    941|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    941|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    941|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    941|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    941|    }                                                  \
  |  |  |  |   70|   475k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   474k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|   474k|                     detail::make_string_view_from_pointers(start, end), value,
  257|   474k|                     base, sign == sign_type::minus_sign));
  258|   474k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
  259|   475k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIaEEbmmib:
  125|   790k|{
  126|   790k|    auto max_digits = maxdigits_u64(base);
  127|   790k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.87k, False: 788k]
  ------------------
  128|  1.87k|        return true;
  129|  1.87k|    }
  130|   788k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 313, False: 788k]
  |  Branch (130:39): [True: 92, False: 221]
  ------------------
  131|     92|        return true;
  132|     92|    }
  133|   788k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   788k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 44.2k, False: 744k]
  ------------------
  135|   788k|                      static_cast<uint64_t>(is_negative)) {
  136|  44.2k|            SCN_UNLIKELY_ATTR
  137|  44.2k|            return true;
  138|  44.2k|        }
  139|   788k|    }
  140|       |
  141|   744k|    return false;
  142|   788k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_113maxdigits_u64Ei:
   95|  5.99M|{
   96|  5.99M|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  5.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  5.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   97|      0|    return maxdigits_u64_table[static_cast<size_t>(base - 2)];
   98|  5.99M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112min_safe_u64Ei:
  115|  3.17k|{
  116|  3.17k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  |  242|  3.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  3.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  117|      0|    return min_safe_u64_table[static_cast<size_t>(base - 2)];
  118|  3.17k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIaEET_mb:
  146|   744k|{
  147|   744k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 184k, False: 559k]
  ------------------
  148|   184k|        SCN_MSVC_PUSH
  149|   184k|        SCN_MSVC_IGNORE(4146)
  150|   184k|        return static_cast<T>(
  151|   184k|            -std::numeric_limits<T>::max() -
  152|   184k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   184k|        SCN_MSVC_POP
  154|   184k|    }
  155|       |
  156|   559k|    return static_cast<T>(u64val);
  157|   744k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIiEEbmmib:
  125|  1.24M|{
  126|  1.24M|    auto max_digits = maxdigits_u64(base);
  127|  1.24M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.48k, False: 1.24M]
  ------------------
  128|  2.48k|        return true;
  129|  2.48k|    }
  130|  1.24M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 567, False: 1.24M]
  |  Branch (130:39): [True: 110, False: 457]
  ------------------
  131|    110|        return true;
  132|    110|    }
  133|  1.24M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.24M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 7.08k, False: 1.23M]
  ------------------
  135|  1.24M|                      static_cast<uint64_t>(is_negative)) {
  136|  7.08k|            SCN_UNLIKELY_ATTR
  137|  7.08k|            return true;
  138|  7.08k|        }
  139|  1.24M|    }
  140|       |
  141|  1.23M|    return false;
  142|  1.24M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIiEET_mb:
  146|  1.23M|{
  147|  1.23M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 209k, False: 1.02M]
  ------------------
  148|   209k|        SCN_MSVC_PUSH
  149|   209k|        SCN_MSVC_IGNORE(4146)
  150|   209k|        return static_cast<T>(
  151|   209k|            -std::numeric_limits<T>::max() -
  152|   209k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   209k|        SCN_MSVC_POP
  154|   209k|    }
  155|       |
  156|  1.02M|    return static_cast<T>(u64val);
  157|  1.23M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIxEEbmmib:
  125|  1.40M|{
  126|  1.40M|    auto max_digits = maxdigits_u64(base);
  127|  1.40M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 3.09k, False: 1.40M]
  ------------------
  128|  3.09k|        return true;
  129|  3.09k|    }
  130|  1.40M|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 601, False: 1.40M]
  |  Branch (130:39): [True: 126, False: 475]
  ------------------
  131|    126|        return true;
  132|    126|    }
  133|  1.40M|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|  1.40M|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 455, False: 1.40M]
  ------------------
  135|  1.40M|                      static_cast<uint64_t>(is_negative)) {
  136|    455|            SCN_UNLIKELY_ATTR
  137|    455|            return true;
  138|    455|        }
  139|  1.40M|    }
  140|       |
  141|  1.40M|    return false;
  142|  1.40M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIxEET_mb:
  146|  1.40M|{
  147|  1.40M|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 214k, False: 1.18M]
  ------------------
  148|   214k|        SCN_MSVC_PUSH
  149|   214k|        SCN_MSVC_IGNORE(4146)
  150|   214k|        return static_cast<T>(
  151|   214k|            -std::numeric_limits<T>::max() -
  152|   214k|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|   214k|        SCN_MSVC_POP
  154|   214k|    }
  155|       |
  156|  1.18M|    return static_cast<T>(u64val);
  157|  1.40M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIhEEbmmib:
  125|   644k|{
  126|   644k|    auto max_digits = maxdigits_u64(base);
  127|   644k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.46k, False: 642k]
  ------------------
  128|  1.46k|        return true;
  129|  1.46k|    }
  130|   642k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 323, False: 642k]
  |  Branch (130:39): [True: 94, False: 229]
  ------------------
  131|     94|        return true;
  132|     94|    }
  133|   642k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   642k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 32.8k, False: 609k]
  ------------------
  135|   642k|                      static_cast<uint64_t>(is_negative)) {
  136|  32.8k|            SCN_UNLIKELY_ATTR
  137|  32.8k|            return true;
  138|  32.8k|        }
  139|   642k|    }
  140|       |
  141|   609k|    return false;
  142|   642k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIhEET_mb:
  146|   609k|{
  147|   609k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 609k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   609k|    return static_cast<T>(u64val);
  157|   609k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIjEEbmmib:
  125|   905k|{
  126|   905k|    auto max_digits = maxdigits_u64(base);
  127|   905k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 1.80k, False: 903k]
  ------------------
  128|  1.80k|        return true;
  129|  1.80k|    }
  130|   903k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 541, False: 902k]
  |  Branch (130:39): [True: 94, False: 447]
  ------------------
  131|     94|        return true;
  132|     94|    }
  133|   903k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   903k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 4.19k, False: 899k]
  ------------------
  135|   903k|                      static_cast<uint64_t>(is_negative)) {
  136|  4.19k|            SCN_UNLIKELY_ATTR
  137|  4.19k|            return true;
  138|  4.19k|        }
  139|   903k|    }
  140|       |
  141|   899k|    return false;
  142|   903k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIjEET_mb:
  146|   899k|{
  147|   899k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 899k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   899k|    return static_cast<T>(u64val);
  157|   899k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_122check_integer_overflowIyEEbmmib:
  125|  1.00M|{
  126|  1.00M|    auto max_digits = maxdigits_u64(base);
  127|  1.00M|    if (digits_count > max_digits) {
  ------------------
  |  Branch (127:9): [True: 2.02k, False: 999k]
  ------------------
  128|  2.02k|        return true;
  129|  2.02k|    }
  130|   999k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (130:9): [True: 825, False: 998k]
  |  Branch (130:39): [True: 94, False: 731]
  ------------------
  131|     94|        return true;
  132|     94|    }
  133|   999k|    if constexpr (!std::is_same_v<T, uint64_t>) {
  ------------------
  |  Branch (133:19): [Folded - Ignored]
  ------------------
  134|   999k|        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
  ------------------
  |  Branch (134:13): [True: 0, False: 999k]
  ------------------
  135|   999k|                      static_cast<uint64_t>(is_negative)) {
  136|      0|            SCN_UNLIKELY_ATTR
  137|      0|            return true;
  138|      0|        }
  139|   999k|    }
  140|       |
  141|   999k|    return false;
  142|   999k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_112store_resultIyEET_mb:
  146|   999k|{
  147|   999k|    if (is_negative) {
  ------------------
  |  Branch (147:9): [True: 0, False: 999k]
  ------------------
  148|      0|        SCN_MSVC_PUSH
  149|      0|        SCN_MSVC_IGNORE(4146)
  150|      0|        return static_cast<T>(
  151|      0|            -std::numeric_limits<T>::max() -
  152|      0|            static_cast<T>(u64val - std::numeric_limits<T>::max()));
  153|      0|        SCN_MSVC_POP
  154|      0|    }
  155|       |
  156|   999k|    return static_cast<T>(u64val);
  157|   999k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
   33|  1.87M|{
   34|  1.87M|    uint64_t val{};
   35|  1.87M|    std::memcpy(&val, input, sizeof(uint64_t));
   36|  1.87M|    if constexpr (SCN_IS_BIG_ENDIAN) {
  ------------------
  |  |  538|  1.87M|#define SCN_IS_BIG_ENDIAN 0
  |  |  ------------------
  |  |  |  Branch (538:27): [Folded - Ignored]
  |  |  ------------------
  ------------------
   37|      0|        val = byteswap(val);
   38|      0|    }
   39|  1.87M|    return val;
   40|  1.87M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
   43|  69.0k|{
   44|  69.0k|    constexpr uint64_t mask = 0x000000FF000000FF;
   45|  69.0k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
   46|  69.0k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
   47|  69.0k|    word -= 0x3030303030303030;
   48|  69.0k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
   49|  69.0k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
   50|  69.0k|    return static_cast<uint32_t>(word);
   51|  69.0k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
   54|  1.80M|{
   55|  1.80M|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
   56|  1.80M|              0x8080808080808080));
   57|  1.80M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIaEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   322k|{
  164|   322k|    uint64_t u64val{};
  165|   322k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   322k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   322k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   322k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 9.68k, False: 312k]
  |  |  ------------------
  ------------------
  170|   322k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  9.68k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  9.68k|                                     "Integer overflow");
  173|  9.68k|    }
  174|       |
  175|   312k|    val = store_result<T>(u64val, is_negative);
  176|   312k|    return ptr;
  177|   322k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
   75|  2.27M|{
   76|  2.27M|    loop_parse_if_eight_decimal_digits(begin, end, val);
   77|       |
   78|  6.16M|    while (begin != end) {
  ------------------
  |  Branch (78:12): [True: 5.65M, False: 509k]
  ------------------
   79|  5.65M|        const auto digit = char_to_int(*begin);
   80|  5.65M|        if (digit >= 10) {
  ------------------
  |  Branch (80:13): [True: 1.76M, False: 3.89M]
  ------------------
   81|  1.76M|            break;
   82|  1.76M|        }
   83|  3.89M|        val = 10ull * val + static_cast<uint64_t>(digit);
   84|  3.89M|        ++begin;
   85|  3.89M|    }
   86|       |
   87|  2.27M|    return begin;
   88|  2.27M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
   62|  2.27M|{
   63|  2.27M|    while (
   64|  2.34M|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (64:9): [True: 1.80M, False: 538k]
  ------------------
   65|  2.34M|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (65:9): [True: 69.0k, False: 1.73M]
  ------------------
   66|  69.0k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
   67|  69.0k|                                      get_eight_digits_word(p));
   68|  69.0k|        p += 8;
   69|  69.0k|    }
   70|  2.27M|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  91.4k|{
  185|  91.4k|    uint64_t u64val{};
  186|  91.4k|    const CharT* begin = input.data();
  187|  91.4k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   271k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 256k, False: 15.8k]
  ------------------
  190|   256k|        const auto digit = char_to_int(*begin);
  191|   256k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 75.6k, False: 180k]
  ------------------
  192|  75.6k|            break;
  193|  75.6k|        }
  194|   180k|        u64val =
  195|   180k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   180k|        ++begin;
  197|   180k|    }
  198|       |
  199|  91.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  91.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  91.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.17k, False: 84.3k]
  |  |  ------------------
  ------------------
  201|  91.4k|                                               is_negative))) {
  202|  7.17k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  7.17k|                                     "Integer overflow");
  204|  7.17k|    }
  205|       |
  206|  84.3k|    val = store_result<T>(u64val, is_negative);
  207|  84.3k|    return begin;
  208|  91.4k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwaEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   376k|{
  185|   376k|    uint64_t u64val{};
  186|   376k|    const CharT* begin = input.data();
  187|   376k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.02M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 937k, False: 90.9k]
  ------------------
  190|   937k|        const auto digit = char_to_int(*begin);
  191|   937k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 285k, False: 652k]
  ------------------
  192|   285k|            break;
  193|   285k|        }
  194|   652k|        u64val =
  195|   652k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   652k|        ++begin;
  197|   652k|    }
  198|       |
  199|   376k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   376k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 29.3k, False: 346k]
  |  |  ------------------
  ------------------
  201|   376k|                                               is_negative))) {
  202|  29.3k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  29.3k|                                     "Integer overflow");
  204|  29.3k|    }
  205|       |
  206|   346k|    val = store_result<T>(u64val, is_negative);
  207|   346k|    return begin;
  208|   376k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIiEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   466k|{
  164|   466k|    uint64_t u64val{};
  165|   466k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   466k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   466k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   466k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.59k, False: 463k]
  |  |  ------------------
  ------------------
  170|   466k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  2.59k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  2.59k|                                     "Integer overflow");
  173|  2.59k|    }
  174|       |
  175|   463k|    val = store_result<T>(u64val, is_negative);
  176|   463k|    return ptr;
  177|   466k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIciEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   190k|{
  185|   190k|    uint64_t u64val{};
  186|   190k|    const CharT* begin = input.data();
  187|   190k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   567k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 545k, False: 22.0k]
  ------------------
  190|   545k|        const auto digit = char_to_int(*begin);
  191|   545k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 168k, False: 376k]
  ------------------
  192|   168k|            break;
  193|   168k|        }
  194|   376k|        u64val =
  195|   376k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   376k|        ++begin;
  197|   376k|    }
  198|       |
  199|   190k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   190k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.92k, False: 187k]
  |  |  ------------------
  ------------------
  201|   190k|                                               is_negative))) {
  202|  2.92k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.92k|                                     "Integer overflow");
  204|  2.92k|    }
  205|       |
  206|   187k|    val = store_result<T>(u64val, is_negative);
  207|   187k|    return begin;
  208|   190k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwiEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   591k|{
  185|   591k|    uint64_t u64val{};
  186|   591k|    const CharT* begin = input.data();
  187|   591k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.76M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.64M, False: 124k]
  ------------------
  190|  1.64M|        const auto digit = char_to_int(*begin);
  191|  1.64M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 466k, False: 1.17M]
  ------------------
  192|   466k|            break;
  193|   466k|        }
  194|  1.17M|        u64val =
  195|  1.17M|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  1.17M|        ++begin;
  197|  1.17M|    }
  198|       |
  199|   591k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   591k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 4.17k, False: 587k]
  |  |  ------------------
  ------------------
  201|   591k|                                               is_negative))) {
  202|  4.17k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  4.17k|                                     "Integer overflow");
  204|  4.17k|    }
  205|       |
  206|   587k|    val = store_result<T>(u64val, is_negative);
  207|   587k|    return begin;
  208|   591k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIxEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   523k|{
  164|   523k|    uint64_t u64val{};
  165|   523k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   523k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   523k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   523k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   523k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 871, False: 522k]
  |  |  ------------------
  ------------------
  170|   523k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    871|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    871|                                     "Integer overflow");
  173|    871|    }
  174|       |
  175|   522k|    val = store_result<T>(u64val, is_negative);
  176|   522k|    return ptr;
  177|   523k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   220k|{
  185|   220k|    uint64_t u64val{};
  186|   220k|    const CharT* begin = input.data();
  187|   220k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   726k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 701k, False: 25.2k]
  ------------------
  190|   701k|        const auto digit = char_to_int(*begin);
  191|   701k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 195k, False: 506k]
  ------------------
  192|   195k|            break;
  193|   195k|        }
  194|   506k|        u64val =
  195|   506k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   506k|        ++begin;
  197|   506k|    }
  198|       |
  199|   220k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   220k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   220k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.18k, False: 219k]
  |  |  ------------------
  ------------------
  201|   220k|                                               is_negative))) {
  202|  1.18k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.18k|                                     "Integer overflow");
  204|  1.18k|    }
  205|       |
  206|   219k|    val = store_result<T>(u64val, is_negative);
  207|   219k|    return begin;
  208|   220k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwxEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   661k|{
  185|   661k|    uint64_t u64val{};
  186|   661k|    const CharT* begin = input.data();
  187|   661k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  2.10M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.96M, False: 137k]
  ------------------
  190|  1.96M|        const auto digit = char_to_int(*begin);
  191|  1.96M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 524k, False: 1.43M]
  ------------------
  192|   524k|            break;
  193|   524k|        }
  194|  1.43M|        u64val =
  195|  1.43M|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  1.43M|        ++begin;
  197|  1.43M|    }
  198|       |
  199|   661k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   661k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   661k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.61k, False: 660k]
  |  |  ------------------
  ------------------
  201|   661k|                                               is_negative))) {
  202|  1.61k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.61k|                                     "Integer overflow");
  204|  1.61k|    }
  205|       |
  206|   660k|    val = store_result<T>(u64val, is_negative);
  207|   660k|    return begin;
  208|   661k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIhEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   245k|{
  164|   245k|    uint64_t u64val{};
  165|   245k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   245k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   245k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   245k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 6.08k, False: 239k]
  |  |  ------------------
  ------------------
  170|   245k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  6.08k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  6.08k|                                     "Integer overflow");
  173|  6.08k|    }
  174|       |
  175|   239k|    val = store_result<T>(u64val, is_negative);
  176|   239k|    return ptr;
  177|   245k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIchEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|  89.4k|{
  185|  89.4k|    uint64_t u64val{};
  186|  89.4k|    const CharT* begin = input.data();
  187|  89.4k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   250k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 237k, False: 13.6k]
  ------------------
  190|   237k|        const auto digit = char_to_int(*begin);
  191|   237k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 75.8k, False: 161k]
  ------------------
  192|  75.8k|            break;
  193|  75.8k|        }
  194|   161k|        u64val =
  195|   161k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   161k|        ++begin;
  197|   161k|    }
  198|       |
  199|  89.4k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|  89.4k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|  89.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 3.94k, False: 85.5k]
  |  |  ------------------
  ------------------
  201|  89.4k|                                               is_negative))) {
  202|  3.94k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  3.94k|                                     "Integer overflow");
  204|  3.94k|    }
  205|       |
  206|  85.5k|    val = store_result<T>(u64val, is_negative);
  207|  85.5k|    return begin;
  208|  89.4k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwhEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   309k|{
  185|   309k|    uint64_t u64val{};
  186|   309k|    const CharT* begin = input.data();
  187|   309k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   851k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 777k, False: 73.3k]
  ------------------
  190|   777k|        const auto digit = char_to_int(*begin);
  191|   777k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 235k, False: 541k]
  ------------------
  192|   235k|            break;
  193|   235k|        }
  194|   541k|        u64val =
  195|   541k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   541k|        ++begin;
  197|   541k|    }
  198|       |
  199|   309k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   309k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.3k, False: 284k]
  |  |  ------------------
  ------------------
  201|   309k|                                               is_negative))) {
  202|  24.3k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  24.3k|                                     "Integer overflow");
  204|  24.3k|    }
  205|       |
  206|   284k|    val = store_result<T>(u64val, is_negative);
  207|   284k|    return begin;
  208|   309k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIjEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   338k|{
  164|   338k|    uint64_t u64val{};
  165|   338k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   338k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   338k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   338k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   338k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.66k, False: 337k]
  |  |  ------------------
  ------------------
  170|   338k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|  1.66k|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|  1.66k|                                     "Integer overflow");
  173|  1.66k|    }
  174|       |
  175|   337k|    val = store_result<T>(u64val, is_negative);
  176|   337k|    return ptr;
  177|   338k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   134k|{
  185|   134k|    uint64_t u64val{};
  186|   134k|    const CharT* begin = input.data();
  187|   134k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   415k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 397k, False: 18.2k]
  ------------------
  190|   397k|        const auto digit = char_to_int(*begin);
  191|   397k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 116k, False: 280k]
  ------------------
  192|   116k|            break;
  193|   116k|        }
  194|   280k|        u64val =
  195|   280k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   280k|        ++begin;
  197|   280k|    }
  198|       |
  199|   134k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   134k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.82k, False: 132k]
  |  |  ------------------
  ------------------
  201|   134k|                                               is_negative))) {
  202|  1.82k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  1.82k|                                     "Integer overflow");
  204|  1.82k|    }
  205|       |
  206|   132k|    val = store_result<T>(u64val, is_negative);
  207|   132k|    return begin;
  208|   134k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwjEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   432k|{
  185|   432k|    uint64_t u64val{};
  186|   432k|    const CharT* begin = input.data();
  187|   432k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.31M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.22M, False: 95.9k]
  ------------------
  190|  1.22M|        const auto digit = char_to_int(*begin);
  191|  1.22M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 336k, False: 887k]
  ------------------
  192|   336k|            break;
  193|   336k|        }
  194|   887k|        u64val =
  195|   887k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   887k|        ++begin;
  197|   887k|    }
  198|       |
  199|   432k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   432k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   432k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.60k, False: 429k]
  |  |  ------------------
  ------------------
  201|   432k|                                               is_negative))) {
  202|  2.60k|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|  2.60k|                                     "Integer overflow");
  204|  2.60k|    }
  205|       |
  206|   429k|    val = store_result<T>(u64val, is_negative);
  207|   429k|    return begin;
  208|   432k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_126parse_decimal_integer_fastIyEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
  163|   376k|{
  164|   376k|    uint64_t u64val{};
  165|   376k|    auto ptr = parse_decimal_integer_fast_impl(
  166|   376k|        input.data(), input.data() + input.size(), u64val);
  167|       |
  168|   376k|    auto digits_count = static_cast<size_t>(ptr - input.data());
  169|   376k|    if (SCN_UNLIKELY(
  ------------------
  |  |  153|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 499, False: 375k]
  |  |  ------------------
  ------------------
  170|   376k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
  171|    499|        return unexpected_scan_error(scan_error::value_out_of_range,
  172|    499|                                     "Integer overflow");
  173|    499|    }
  174|       |
  175|   375k|    val = store_result<T>(u64val, is_negative);
  176|   375k|    return ptr;
  177|   376k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIcyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   150k|{
  185|   150k|    uint64_t u64val{};
  186|   150k|    const CharT* begin = input.data();
  187|   150k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|   493k|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 473k, False: 20.2k]
  ------------------
  190|   473k|        const auto digit = char_to_int(*begin);
  191|   473k|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 130k, False: 342k]
  ------------------
  192|   130k|            break;
  193|   130k|        }
  194|   342k|        u64val =
  195|   342k|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|   342k|        ++begin;
  197|   342k|    }
  198|       |
  199|   150k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   150k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 682, False: 149k]
  |  |  ------------------
  ------------------
  201|   150k|                                               is_negative))) {
  202|    682|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    682|                                     "Integer overflow");
  204|    682|    }
  205|       |
  206|   149k|    val = store_result<T>(u64val, is_negative);
  207|   149k|    return begin;
  208|   150k|}
integer_reader.cpp:_ZN3scn2v24impl12_GLOBAL__N_121parse_regular_integerIwyEENS0_13scan_expectedIPKT_EENSt3__117basic_string_viewIS5_NS9_11char_traitsIS5_EEEERT0_ib:
  184|   475k|{
  185|   475k|    uint64_t u64val{};
  186|   475k|    const CharT* begin = input.data();
  187|   475k|    const CharT* const end = input.data() + input.size();
  188|       |
  189|  1.51M|    while (begin != end) {
  ------------------
  |  Branch (189:12): [True: 1.41M, False: 103k]
  ------------------
  190|  1.41M|        const auto digit = char_to_int(*begin);
  191|  1.41M|        if (digit >= base) {
  ------------------
  |  Branch (191:13): [True: 371k, False: 1.04M]
  ------------------
  192|   371k|            break;
  193|   371k|        }
  194|  1.04M|        u64val =
  195|  1.04M|            static_cast<uint64_t>(base) * u64val + static_cast<uint64_t>(digit);
  196|  1.04M|        ++begin;
  197|  1.04M|    }
  198|       |
  199|   475k|    auto digits_count = static_cast<size_t>(begin - input.data());
  200|   475k|    if (SCN_UNLIKELY(check_integer_overflow<T>(u64val, digits_count, base,
  ------------------
  |  |  153|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 941, False: 474k]
  |  |  ------------------
  ------------------
  201|   475k|                                               is_negative))) {
  202|    941|        return unexpected_scan_error(scan_error::value_out_of_range,
  203|    941|                                     "Integer overflow");
  204|    941|    }
  205|       |
  206|   474k|    val = store_result<T>(u64val, is_negative);
  207|   474k|    return begin;
  208|   475k|}

_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   267k|    {
  324|   267k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   267k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   267k|        return read_default_with_base(range, value, 0);
  326|   267k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   267k|    {
  287|   267k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   267k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   267k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   267k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   267k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 267k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   267k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   267k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   267k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   267k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   267k|                return unexpected_scan_error(
  293|   267k|                    scan_error::invalid_scanned_value,
  294|   267k|                    "Unexpected '-' sign when parsing an "
  295|   267k|                    "unsigned value");
  296|   267k|            }
  297|   267k|        }
  298|       |
  299|   267k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 120k, False: 147k]
  ------------------
  300|   120k|            value = T{0};
  301|   120k|            return std::next(prefix_result.iterator);
  302|   120k|        }
  303|       |
  304|   295k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 96, False: 147k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     96|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     96|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     96|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     96|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     96|    }                                                  \
  |  |  |  |   70|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   295k|                                     ranges::subrange{prefix_result.iterator,
  306|   295k|                                                      ranges::end(range)},
  307|   295k|                                     prefix_result.parsed_base));
  308|       |
  309|   295k|        auto buf = make_contiguous_buffer(
  310|   295k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   295k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 7.32k, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  7.32k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  7.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  7.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  7.32k|    }                                                  \
  |  |  |  |   70|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   140k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   140k|                                    prefix_result.parsed_base));
  314|       |
  315|   140k|        return ranges_polyfill::batch_next(
  316|   140k|            prefix_result.iterator,
  317|   140k|            ranges::distance(buf.view().begin(), result_it));
  318|   295k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  6.55M|{
  121|  6.55M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  6.55M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.55M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.55M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.55M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.55M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  6.55M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  6.55M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  6.55M|        parse_integer_base_prefix(
  126|  6.55M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  6.55M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 2.69M, False: 3.86M]
  ------------------
  129|  2.69M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.02k, False: 2.68M]
  ------------------
  130|  2.69M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 2.06M, False: 625k]
  ------------------
  131|  2.06M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  2.06M|                digits_begin_it, ranges::begin(range));
  133|  2.06M|        }
  134|   625k|        else {
  135|   625k|            parsed_zero = false;
  136|   625k|        }
  137|  2.69M|    }
  138|  3.86M|    else {
  139|  3.86M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 8.16k, False: 3.85M]
  ------------------
  140|  3.86M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 147k, False: 3.70M]
  ------------------
  141|   155k|            digits_begin_it = base_prefix_begin_it;
  142|   155k|        }
  143|  3.86M|    }
  144|       |
  145|  6.55M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 6.08M, False: 467k]
  ------------------
  146|  6.08M|        sign = sign_type::plus_sign;
  147|  6.08M|    }
  148|  6.55M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  6.55M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  6.55M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  6.55M|{
   88|  6.55M|    switch (base) {
   89|   107k|        case 2:
  ------------------
  |  Branch (89:9): [True: 107k, False: 6.44M]
  ------------------
   90|       |            // allow 0b/0B
   91|   107k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   107k|                    false};
   93|       |
   94|   273k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 273k, False: 6.28M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   273k|            bool zero_parsed = false;
   97|   273k|            auto it = apply_opt(
   98|   273k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   273k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   854k|        case 16:
  ------------------
  |  Branch (102:9): [True: 854k, False: 5.70M]
  ------------------
  103|       |            // allow 0x/0X
  104|   854k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   854k|                    false};
  106|       |
  107|  4.41M|        case 0:
  ------------------
  |  Branch (107:9): [True: 4.41M, False: 2.13M]
  ------------------
  108|       |            // detect base
  109|  4.41M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  4.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   900k|        default:
  ------------------
  |  Branch (111:9): [True: 900k, False: 5.65M]
  ------------------
  112|       |            // no base prefix allowed
  113|   900k|            return {ranges::begin(range), base, false};
  114|  6.55M|    }
  115|  6.55M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  4.51M|{
   38|  4.51M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  4.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  4.51M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  4.67M|{
   53|  4.67M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 46.4k, False: 4.62M]
  ------------------
   54|  46.4k|        return *r;
   55|  46.4k|    }
   56|       |
   57|  4.62M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 2.69M, False: 1.93M]
  ------------------
   58|  2.69M|        zero_parsed = true;
   59|  2.69M|        return *r;
   60|  2.69M|    }
   61|       |
   62|  1.93M|    return unexpected(parse_error::error);
   63|  4.62M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  5.27M|{
   45|  5.27M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  5.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  5.27M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  4.41M|{
   69|  4.41M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 16.4k, False: 4.40M]
  ------------------
   70|  16.4k|        return {*r, 16, false};
   71|  16.4k|    }
   72|  4.40M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 2.66k, False: 4.39M]
  ------------------
   73|  2.66k|        return {*r, 2, false};
   74|  2.66k|    }
   75|  4.39M|    {
   76|  4.39M|        bool zero_parsed{false};
   77|  4.39M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 2.57M, False: 1.82M]
  ------------------
   78|  2.57M|            return {*r, 8, zero_parsed};
   79|  2.57M|        }
   80|  4.39M|    }
   81|  1.82M|    return {ranges::begin(range), 10, false};
   82|  4.39M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  3.75M|{
  156|  3.75M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  3.75M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  3.75M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.52k, False: 3.75M]
  |  |  ------------------
  ------------------
  160|  1.52k|            return unexpected_scan_error(
  161|  1.52k|                scan_error::invalid_scanned_value,
  162|  1.52k|                "Failed to parse integer: No digits found");
  163|  1.52k|        }
  164|  3.75M|        return ranges::end(range);
  165|  3.75M|    }
  166|  3.75M|    else {
  167|  3.75M|        return read_while1_code_unit(
  168|  3.75M|                   range, [&](char_type ch)
  169|  3.75M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  3.75M|            .transform_error(map_parse_error_to_scan_error(
  171|  3.75M|                scan_error::invalid_scanned_value,
  172|  3.75M|                "Failed to parse integer: No digits found"));
  173|  3.75M|    }
  174|  3.75M|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   370k|    {
  324|   370k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   370k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   370k|        return read_default_with_base(range, value, 0);
  326|   370k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   370k|    {
  287|   370k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   370k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   370k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   370k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 370k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   370k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   370k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   370k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   370k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   370k|                return unexpected_scan_error(
  293|   370k|                    scan_error::invalid_scanned_value,
  294|   370k|                    "Unexpected '-' sign when parsing an "
  295|   370k|                    "unsigned value");
  296|   370k|            }
  297|   370k|        }
  298|       |
  299|   370k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 159k, False: 211k]
  ------------------
  300|   159k|            value = T{0};
  301|   159k|            return std::next(prefix_result.iterator);
  302|   159k|        }
  303|       |
  304|   423k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   211k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   211k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   211k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 132, False: 211k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    132|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    132|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    132|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    132|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    132|    }                                                  \
  |  |  |  |   70|   211k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   423k|                                     ranges::subrange{prefix_result.iterator,
  306|   423k|                                                      ranges::end(range)},
  307|   423k|                                     prefix_result.parsed_base));
  308|       |
  309|   423k|        auto buf = make_contiguous_buffer(
  310|   423k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   423k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   211k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   211k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   211k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.51k, False: 204k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.51k|    }                                                  \
  |  |  |  |   70|   211k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   204k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   204k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   204k|                                    prefix_result.parsed_base));
  314|       |
  315|   204k|        return ranges_polyfill::batch_next(
  316|   204k|            prefix_result.iterator,
  317|   204k|            ranges::distance(buf.view().begin(), result_it));
  318|   423k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   398k|    {
  324|   398k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   398k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   398k|        return read_default_with_base(range, value, 0);
  326|   398k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   398k|    {
  287|   398k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   398k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   398k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   398k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 398k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   398k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   398k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   398k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   398k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   398k|                return unexpected_scan_error(
  293|   398k|                    scan_error::invalid_scanned_value,
  294|   398k|                    "Unexpected '-' sign when parsing an "
  295|   398k|                    "unsigned value");
  296|   398k|            }
  297|   398k|        }
  298|       |
  299|   398k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 162k, False: 236k]
  ------------------
  300|   162k|            value = T{0};
  301|   162k|            return std::next(prefix_result.iterator);
  302|   162k|        }
  303|       |
  304|   472k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 141, False: 236k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    141|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    141|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    141|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    141|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    141|    }                                                  \
  |  |  |  |   70|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   472k|                                     ranges::subrange{prefix_result.iterator,
  306|   472k|                                                      ranges::end(range)},
  307|   472k|                                     prefix_result.parsed_base));
  308|       |
  309|   472k|        auto buf = make_contiguous_buffer(
  310|   472k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   472k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   236k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.29k, False: 229k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.29k|    }                                                  \
  |  |  |  |   70|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   229k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   229k|                                    prefix_result.parsed_base));
  314|       |
  315|   229k|        return ranges_polyfill::batch_next(
  316|   229k|            prefix_result.iterator,
  317|   229k|            ranges::distance(buf.view().begin(), result_it));
  318|   472k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   241k|    {
  324|   241k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   241k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   241k|        return read_default_with_base(range, value, 0);
  326|   241k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   241k|    {
  287|   241k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   241k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   241k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   241k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 241k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   241k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   241k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   241k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   241k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.53k, False: 239k]
  ------------------
  292|  2.53k|                return unexpected_scan_error(
  293|  2.53k|                    scan_error::invalid_scanned_value,
  294|  2.53k|                    "Unexpected '-' sign when parsing an "
  295|  2.53k|                    "unsigned value");
  296|  2.53k|            }
  297|   241k|        }
  298|       |
  299|   239k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 120k, False: 119k]
  ------------------
  300|   120k|            value = T{0};
  301|   120k|            return std::next(prefix_result.iterator);
  302|   120k|        }
  303|       |
  304|   238k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   119k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 119k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   238k|                                     ranges::subrange{prefix_result.iterator,
  306|   238k|                                                      ranges::end(range)},
  307|   238k|                                     prefix_result.parsed_base));
  308|       |
  309|   238k|        auto buf = make_contiguous_buffer(
  310|   238k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   238k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   119k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.05k, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.05k|    }                                                  \
  |  |  |  |   70|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   114k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   114k|                                    prefix_result.parsed_base));
  314|       |
  315|   114k|        return ranges_polyfill::batch_next(
  316|   114k|            prefix_result.iterator,
  317|   114k|            ranges::distance(buf.view().begin(), result_it));
  318|   238k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   298k|    {
  324|   298k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   298k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   298k|        return read_default_with_base(range, value, 0);
  326|   298k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   298k|    {
  287|   298k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 298k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   298k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   298k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   298k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.77k, False: 296k]
  ------------------
  292|  2.77k|                return unexpected_scan_error(
  293|  2.77k|                    scan_error::invalid_scanned_value,
  294|  2.77k|                    "Unexpected '-' sign when parsing an "
  295|  2.77k|                    "unsigned value");
  296|  2.77k|            }
  297|   298k|        }
  298|       |
  299|   296k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 136k, False: 159k]
  ------------------
  300|   136k|            value = T{0};
  301|   136k|            return std::next(prefix_result.iterator);
  302|   136k|        }
  303|       |
  304|   319k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   319k|                                     ranges::subrange{prefix_result.iterator,
  306|   319k|                                                      ranges::end(range)},
  307|   319k|                                     prefix_result.parsed_base));
  308|       |
  309|   319k|        auto buf = make_contiguous_buffer(
  310|   319k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   319k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.34k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.34k|    }                                                  \
  |  |  |  |   70|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   155k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   155k|                                    prefix_result.parsed_base));
  314|       |
  315|   155k|        return ranges_polyfill::batch_next(
  316|   155k|            prefix_result.iterator,
  317|   155k|            ranges::distance(buf.view().begin(), result_it));
  318|   319k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   316k|    {
  324|   316k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   316k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   316k|        return read_default_with_base(range, value, 0);
  326|   316k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   316k|    {
  287|   316k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   316k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   316k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   316k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.98k, False: 313k]
  ------------------
  292|  2.98k|                return unexpected_scan_error(
  293|  2.98k|                    scan_error::invalid_scanned_value,
  294|  2.98k|                    "Unexpected '-' sign when parsing an "
  295|  2.98k|                    "unsigned value");
  296|  2.98k|            }
  297|   316k|        }
  298|       |
  299|   313k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 138k, False: 174k]
  ------------------
  300|   138k|            value = T{0};
  301|   138k|            return std::next(prefix_result.iterator);
  302|   138k|        }
  303|       |
  304|   349k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   174k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   174k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   174k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 30, False: 174k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     30|    }                                                  \
  |  |  |  |   70|   174k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   349k|                                     ranges::subrange{prefix_result.iterator,
  306|   349k|                                                      ranges::end(range)},
  307|   349k|                                     prefix_result.parsed_base));
  308|       |
  309|   349k|        auto buf = make_contiguous_buffer(
  310|   349k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   349k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   174k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   174k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   174k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.97k, False: 170k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.97k|    }                                                  \
  |  |  |  |   70|   174k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   170k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   170k|                                    prefix_result.parsed_base));
  314|       |
  315|   170k|        return ranges_polyfill::batch_next(
  316|   170k|            prefix_result.iterator,
  317|   170k|            ranges::distance(buf.view().begin(), result_it));
  318|   349k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   698k|{
  185|   698k|    std::basic_string<CharT> output;
  186|   698k|    std::string thsep_indices;
  187|   698k|    auto it = ranges::begin(range);
  188|   698k|    bool digit_matched = false;
  189|  2.15M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 2.15M, False: 4.53k]
  ------------------
  190|  2.15M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 30.7k, False: 2.12M]
  ------------------
  191|  30.7k|            thsep_indices.push_back(static_cast<char>(
  192|  30.7k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  30.7k|        }
  194|  2.12M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 693k, False: 1.42M]
  ------------------
  195|   693k|            break;
  196|   693k|        }
  197|  1.42M|        else {
  198|  1.42M|            output.push_back(*it);
  199|  1.42M|            digit_matched = true;
  200|  1.42M|        }
  201|  2.15M|    }
  202|   698k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   698k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 14.6k, False: 683k]
  |  |  ------------------
  ------------------
  203|  14.6k|        return unexpected_scan_error(
  204|  14.6k|            scan_error::invalid_scanned_value,
  205|  14.6k|            "Failed to parse integer: No digits found");
  206|  14.6k|    }
  207|   683k|    return std::tuple{it, output, thsep_indices};
  208|   698k|}
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  8.16k|    {
  324|  8.16k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  8.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  8.16k|        return read_default_with_base(range, value, 0);
  326|  8.16k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  8.16k|    {
  287|  8.16k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  8.16k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  8.16k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  8.16k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  8.16k|                return unexpected_scan_error(
  293|  8.16k|                    scan_error::invalid_scanned_value,
  294|  8.16k|                    "Unexpected '-' sign when parsing an "
  295|  8.16k|                    "unsigned value");
  296|  8.16k|            }
  297|  8.16k|        }
  298|       |
  299|  8.16k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 8.16k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  8.16k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  8.16k|                                     ranges::subrange{prefix_result.iterator,
  306|  8.16k|                                                      ranges::end(range)},
  307|  8.16k|                                     prefix_result.parsed_base));
  308|       |
  309|  8.16k|        auto buf = make_contiguous_buffer(
  310|  8.16k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  8.16k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  8.16k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   277k|{
  121|   277k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   277k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   277k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   277k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   277k|        parse_integer_base_prefix(
  126|   277k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   277k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 277k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   277k|    else {
  139|   277k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 277k]
  ------------------
  140|   277k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 245k, False: 32.6k]
  ------------------
  141|   245k|            digits_begin_it = base_prefix_begin_it;
  142|   245k|        }
  143|   277k|    }
  144|       |
  145|   277k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 277k, False: 0]
  ------------------
  146|   277k|        sign = sign_type::plus_sign;
  147|   277k|    }
  148|   277k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   277k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   277k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   277k|{
   88|   277k|    switch (base) {
   89|  32.6k|        case 2:
  ------------------
  |  Branch (89:9): [True: 32.6k, False: 245k]
  ------------------
   90|       |            // allow 0b/0B
   91|  32.6k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  32.6k|                    false};
   93|       |
   94|  32.6k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 32.6k, False: 245k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  32.6k|            bool zero_parsed = false;
   97|  32.6k|            auto it = apply_opt(
   98|  32.6k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  32.6k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|  65.3k|        case 16:
  ------------------
  |  Branch (102:9): [True: 65.3k, False: 212k]
  ------------------
  103|       |            // allow 0x/0X
  104|  65.3k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|  65.3k|                    false};
  106|       |
  107|   114k|        case 0:
  ------------------
  |  Branch (107:9): [True: 114k, False: 163k]
  ------------------
  108|       |            // detect base
  109|   114k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  32.6k|        default:
  ------------------
  |  Branch (111:9): [True: 32.6k, False: 245k]
  ------------------
  112|       |            // no base prefix allowed
  113|  32.6k|            return {ranges::begin(range), base, false};
  114|   277k|    }
  115|   277k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   147k|{
   38|   147k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   147k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   147k|{
   53|   147k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 147k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   147k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 147k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   147k|    return unexpected(parse_error::error);
   63|   147k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   179k|{
   45|   179k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   179k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   179k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   114k|{
   69|   114k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 114k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   114k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 114k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   114k|    {
   76|   114k|        bool zero_parsed{false};
   77|   114k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 114k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   114k|    }
   81|   114k|    return {ranges::begin(range), 10, false};
   82|   114k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   245k|{
  156|   245k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   245k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   245k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   245k|            return unexpected_scan_error(
  161|   245k|                scan_error::invalid_scanned_value,
  162|   245k|                "Failed to parse integer: No digits found");
  163|   245k|        }
  164|   245k|        return ranges::end(range);
  165|   245k|    }
  166|   245k|    else {
  167|   245k|        return read_while1_code_unit(
  168|   245k|                   range, [&](char_type ch)
  169|   245k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   245k|            .transform_error(map_parse_error_to_scan_error(
  171|   245k|                scan_error::invalid_scanned_value,
  172|   245k|                "Failed to parse integer: No digits found"));
  173|   245k|    }
  174|   245k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlcE_clEc:
  169|   277k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  8.16k|    {
  324|  8.16k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  8.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  8.16k|        return read_default_with_base(range, value, 0);
  326|  8.16k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  8.16k|    {
  287|  8.16k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  8.16k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  8.16k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  8.16k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  8.16k|                return unexpected_scan_error(
  293|  8.16k|                    scan_error::invalid_scanned_value,
  294|  8.16k|                    "Unexpected '-' sign when parsing an "
  295|  8.16k|                    "unsigned value");
  296|  8.16k|            }
  297|  8.16k|        }
  298|       |
  299|  8.16k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 8.16k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  8.16k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  8.16k|                                     ranges::subrange{prefix_result.iterator,
  306|  8.16k|                                                      ranges::end(range)},
  307|  8.16k|                                     prefix_result.parsed_base));
  308|       |
  309|  8.16k|        auto buf = make_contiguous_buffer(
  310|  8.16k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  8.16k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  8.16k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  8.16k|    {
  324|  8.16k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  8.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  8.16k|        return read_default_with_base(range, value, 0);
  326|  8.16k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  8.16k|    {
  287|  8.16k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  8.16k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  8.16k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  8.16k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  8.16k|                return unexpected_scan_error(
  293|  8.16k|                    scan_error::invalid_scanned_value,
  294|  8.16k|                    "Unexpected '-' sign when parsing an "
  295|  8.16k|                    "unsigned value");
  296|  8.16k|            }
  297|  8.16k|        }
  298|       |
  299|  8.16k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 8.16k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  8.16k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  8.16k|                                     ranges::subrange{prefix_result.iterator,
  306|  8.16k|                                                      ranges::end(range)},
  307|  8.16k|                                     prefix_result.parsed_base));
  308|       |
  309|  8.16k|        auto buf = make_contiguous_buffer(
  310|  8.16k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  8.16k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  8.16k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  8.16k|    {
  324|  8.16k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  8.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  8.16k|        return read_default_with_base(range, value, 0);
  326|  8.16k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  8.16k|    {
  287|  8.16k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  8.16k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  8.16k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  8.16k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 8.16k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  8.16k|        }
  298|       |
  299|  8.16k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 8.16k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  8.16k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  8.16k|                                     ranges::subrange{prefix_result.iterator,
  306|  8.16k|                                                      ranges::end(range)},
  307|  8.16k|                                     prefix_result.parsed_base));
  308|       |
  309|  8.16k|        auto buf = make_contiguous_buffer(
  310|  8.16k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  8.16k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  8.16k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  8.16k|    {
  324|  8.16k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  8.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  8.16k|        return read_default_with_base(range, value, 0);
  326|  8.16k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  8.16k|    {
  287|  8.16k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  8.16k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  8.16k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  8.16k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 8.16k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  8.16k|        }
  298|       |
  299|  8.16k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 8.16k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  8.16k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  8.16k|                                     ranges::subrange{prefix_result.iterator,
  306|  8.16k|                                                      ranges::end(range)},
  307|  8.16k|                                     prefix_result.parsed_base));
  308|       |
  309|  8.16k|        auto buf = make_contiguous_buffer(
  310|  8.16k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  8.16k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  8.16k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  8.16k|    {
  324|  8.16k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  8.16k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  8.16k|        return read_default_with_base(range, value, 0);
  326|  8.16k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  8.16k|    {
  287|  8.16k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  8.16k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  8.16k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  8.16k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 8.16k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  8.16k|        }
  298|       |
  299|  8.16k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 8.16k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  8.16k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 8.16k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  8.16k|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  8.16k|                                     ranges::subrange{prefix_result.iterator,
  306|  8.16k|                                                      ranges::end(range)},
  307|  8.16k|                                     prefix_result.parsed_base));
  308|       |
  309|  8.16k|        auto buf = make_contiguous_buffer(
  310|  8.16k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  8.16k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  8.16k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEcEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  32.6k|{
  185|  32.6k|    std::basic_string<CharT> output;
  186|  32.6k|    std::string thsep_indices;
  187|  32.6k|    auto it = ranges::begin(range);
  188|  32.6k|    bool digit_matched = false;
  189|  32.6k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 32.6k, False: 0]
  ------------------
  190|  32.6k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 32.6k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  32.6k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 32.6k, False: 0]
  ------------------
  195|  32.6k|            break;
  196|  32.6k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  32.6k|    }
  202|  32.6k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.6k, False: 0]
  |  |  ------------------
  ------------------
  203|  32.6k|        return unexpected_scan_error(
  204|  32.6k|            scan_error::invalid_scanned_value,
  205|  32.6k|            "Failed to parse integer: No digits found");
  206|  32.6k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  32.6k|}
_ZN3scn2v24impl19reader_impl_for_intIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  4.90M|    {
  280|  4.90M|        detail::check_int_type_specs(specs, eh);
  281|  4.90M|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   609k|    {
  335|   609k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   609k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   609k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   609k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   609k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 609k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   609k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   609k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   609k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   609k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 82.3k, False: 527k]
  ------------------
  339|  82.3k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  82.3k|                return unexpected_scan_error(
  341|  82.3k|                    scan_error::invalid_scanned_value,
  342|  82.3k|                    "Unexpected '-' sign when parsing an "
  343|  82.3k|                    "unsigned value");
  344|  82.3k|            }
  345|  82.3k|            else {
  346|  82.3k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 82.3k]
  ------------------
  347|  82.3k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  82.3k|            }
  353|  82.3k|        }
  354|       |
  355|   609k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 178k, False: 431k]
  ------------------
  356|   178k|            value = T{0};
  357|   178k|            return std::next(prefix_result.iterator);
  358|   178k|        }
  359|       |
  360|   431k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   431k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 333k, False: 98.3k]
  |  |  ------------------
  ------------------
  361|   333k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 218, False: 332k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    218|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    218|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    218|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    218|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    218|    }                                                  \
  |  |  |  |   70|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   332k|                    parse_integer_digits_without_thsep(
  363|   332k|                        ranges::subrange{prefix_result.iterator,
  364|   332k|                                         ranges::end(range)},
  365|   332k|                        prefix_result.parsed_base));
  366|       |
  367|   332k|            auto buf = make_contiguous_buffer(
  368|   332k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   332k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   332k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   332k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   332k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 25.4k, False: 307k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  25.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  25.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  25.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  25.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  25.4k|    }                                                  \
  |  |  |  |   70|   332k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   307k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   307k|                                        prefix_result.parsed_base));
  372|       |
  373|   307k|            return ranges_polyfill::batch_next(
  374|   307k|                prefix_result.iterator,
  375|   307k|                ranges::distance(buf.view().begin(), result_it));
  376|   332k|        }
  377|       |
  378|  98.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  98.3k|            localized_number_formatting_options<CharT>{loc};
  383|  98.3k|#endif
  384|       |
  385|  98.3k|        SCN_TRY(
  ------------------
  |  |   71|  98.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.03k, False: 96.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.03k|    }                                                  \
  |  |  |  |   70|  98.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  96.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  96.3k|            parse_digits_result,
  387|  96.3k|            parse_integer_digits_with_thsep(
  388|  96.3k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  96.3k|                prefix_result.parsed_base, locale_options));
  390|  96.3k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  96.3k|            parse_digits_result;
  392|       |
  393|  96.3k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 296, False: 96.0k]
  ------------------
  394|    296|            if (auto e = check_thsep_grouping(
  395|    296|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    296|                    thsep_indices, locale_options.grouping);
  397|    296|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    296|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 288, False: 8]
  |  |  ------------------
  ------------------
  398|    288|                return unexpected(e);
  399|    288|            }
  400|    296|        }
  401|       |
  402|  96.0k|        auto nothsep_source_view =
  403|  96.0k|            std::basic_string_view<CharT>{nothsep_source};
  404|  96.0k|        SCN_TRY(
  ------------------
  |  |   71|  96.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  96.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  96.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  96.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.62k, False: 93.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.62k|    }                                                  \
  |  |  |  |   70|  96.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  93.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  93.4k|            nothsep_source_it,
  406|  93.4k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  93.4k|                                prefix_result.parsed_base));
  408|       |
  409|  93.4k|        return ranges_polyfill::batch_next(
  410|  93.4k|            prefix_result.iterator,
  411|  93.4k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  93.4k|                ranges::ssize(thsep_indices));
  413|  96.0k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   933k|    {
  335|   933k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   933k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   933k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   933k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   933k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 933k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   933k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   933k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   933k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   933k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 92.1k, False: 841k]
  ------------------
  339|  92.1k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  92.1k|                return unexpected_scan_error(
  341|  92.1k|                    scan_error::invalid_scanned_value,
  342|  92.1k|                    "Unexpected '-' sign when parsing an "
  343|  92.1k|                    "unsigned value");
  344|  92.1k|            }
  345|  92.1k|            else {
  346|  92.1k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 92.1k]
  ------------------
  347|  92.1k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  92.1k|            }
  353|  92.1k|        }
  354|       |
  355|   933k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 234k, False: 699k]
  ------------------
  356|   234k|            value = T{0};
  357|   234k|            return std::next(prefix_result.iterator);
  358|   234k|        }
  359|       |
  360|   699k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   699k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 558k, False: 140k]
  |  |  ------------------
  ------------------
  361|   558k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   558k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   558k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   558k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   558k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 304, False: 558k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    304|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    304|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    304|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    304|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    304|    }                                                  \
  |  |  |  |   70|   558k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   558k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   558k|                    parse_integer_digits_without_thsep(
  363|   558k|                        ranges::subrange{prefix_result.iterator,
  364|   558k|                                         ranges::end(range)},
  365|   558k|                        prefix_result.parsed_base));
  366|       |
  367|   558k|            auto buf = make_contiguous_buffer(
  368|   558k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   558k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   558k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   558k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   558k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   558k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.6k, False: 534k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.6k|    }                                                  \
  |  |  |  |   70|   558k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   534k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   534k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   534k|                                        prefix_result.parsed_base));
  372|       |
  373|   534k|            return ranges_polyfill::batch_next(
  374|   534k|                prefix_result.iterator,
  375|   534k|                ranges::distance(buf.view().begin(), result_it));
  376|   558k|        }
  377|       |
  378|   140k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   140k|            localized_number_formatting_options<CharT>{loc};
  383|   140k|#endif
  384|       |
  385|   140k|        SCN_TRY(
  ------------------
  |  |   71|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.19k, False: 137k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.19k|    }                                                  \
  |  |  |  |   70|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   137k|            parse_digits_result,
  387|   137k|            parse_integer_digits_with_thsep(
  388|   137k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   137k|                prefix_result.parsed_base, locale_options));
  390|   137k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   137k|            parse_digits_result;
  392|       |
  393|   137k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 404, False: 137k]
  ------------------
  394|    404|            if (auto e = check_thsep_grouping(
  395|    404|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    404|                    thsep_indices, locale_options.grouping);
  397|    404|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    404|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 392, False: 12]
  |  |  ------------------
  ------------------
  398|    392|                return unexpected(e);
  399|    392|            }
  400|    404|        }
  401|       |
  402|   137k|        auto nothsep_source_view =
  403|   137k|            std::basic_string_view<CharT>{nothsep_source};
  404|   137k|        SCN_TRY(
  ------------------
  |  |   71|   137k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   137k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   137k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 846, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    846|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    846|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    846|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    846|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    846|    }                                                  \
  |  |  |  |   70|   137k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   136k|            nothsep_source_it,
  406|   136k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   136k|                                prefix_result.parsed_base));
  408|       |
  409|   136k|        return ranges_polyfill::batch_next(
  410|   136k|            prefix_result.iterator,
  411|   136k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   136k|                ranges::ssize(thsep_indices));
  413|   137k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|  1.01M|    {
  335|  1.01M|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  1.01M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 1.01M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  1.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  1.01M|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  1.01M|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 93.7k, False: 916k]
  ------------------
  339|  93.7k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  93.7k|                return unexpected_scan_error(
  341|  93.7k|                    scan_error::invalid_scanned_value,
  342|  93.7k|                    "Unexpected '-' sign when parsing an "
  343|  93.7k|                    "unsigned value");
  344|  93.7k|            }
  345|  93.7k|            else {
  346|  93.7k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 93.7k]
  ------------------
  347|  93.7k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  93.7k|            }
  353|  93.7k|        }
  354|       |
  355|  1.01M|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 238k, False: 771k]
  ------------------
  356|   238k|            value = T{0};
  357|   238k|            return std::next(prefix_result.iterator);
  358|   238k|        }
  359|       |
  360|   771k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   771k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 614k, False: 157k]
  |  |  ------------------
  ------------------
  361|   614k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   614k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   614k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   614k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 334, False: 614k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    334|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    334|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    334|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    334|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    334|    }                                                  \
  |  |  |  |   70|   614k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   614k|                    parse_integer_digits_without_thsep(
  363|   614k|                        ranges::subrange{prefix_result.iterator,
  364|   614k|                                         ranges::end(range)},
  365|   614k|                        prefix_result.parsed_base));
  366|       |
  367|   614k|            auto buf = make_contiguous_buffer(
  368|   614k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   614k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   614k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   614k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   614k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.0k, False: 591k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.0k|    }                                                  \
  |  |  |  |   70|   614k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   591k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   591k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   591k|                                        prefix_result.parsed_base));
  372|       |
  373|   591k|            return ranges_polyfill::batch_next(
  374|   591k|                prefix_result.iterator,
  375|   591k|                ranges::distance(buf.view().begin(), result_it));
  376|   614k|        }
  377|       |
  378|   157k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   157k|            localized_number_formatting_options<CharT>{loc};
  383|   157k|#endif
  384|       |
  385|   157k|        SCN_TRY(
  ------------------
  |  |   71|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.50k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.50k|    }                                                  \
  |  |  |  |   70|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   153k|            parse_digits_result,
  387|   153k|            parse_integer_digits_with_thsep(
  388|   153k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   153k|                prefix_result.parsed_base, locale_options));
  390|   153k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   153k|            parse_digits_result;
  392|       |
  393|   153k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 532, False: 153k]
  ------------------
  394|    532|            if (auto e = check_thsep_grouping(
  395|    532|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    532|                    thsep_indices, locale_options.grouping);
  397|    532|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    532|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 496, False: 36]
  |  |  ------------------
  ------------------
  398|    496|                return unexpected(e);
  399|    496|            }
  400|    532|        }
  401|       |
  402|   153k|        auto nothsep_source_view =
  403|   153k|            std::basic_string_view<CharT>{nothsep_source};
  404|   153k|        SCN_TRY(
  ------------------
  |  |   71|   153k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 292, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    292|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    292|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    292|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    292|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    292|    }                                                  \
  |  |  |  |   70|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   152k|            nothsep_source_it,
  406|   152k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   152k|                                prefix_result.parsed_base));
  408|       |
  409|   152k|        return ranges_polyfill::batch_next(
  410|   152k|            prefix_result.iterator,
  411|   152k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   152k|                ranges::ssize(thsep_indices));
  413|   153k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   584k|    {
  335|   584k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   584k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   584k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   584k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   584k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 584k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   584k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   584k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   584k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.92k, False: 575k]
  ------------------
  339|  8.92k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.92k|                return unexpected_scan_error(
  341|  8.92k|                    scan_error::invalid_scanned_value,
  342|  8.92k|                    "Unexpected '-' sign when parsing an "
  343|  8.92k|                    "unsigned value");
  344|  8.92k|            }
  345|  8.92k|            else {
  346|  8.92k|                if (specs.type ==
  347|  8.92k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.92k|                    return unexpected_scan_error(
  349|  8.92k|                        scan_error::invalid_scanned_value,
  350|  8.92k|                        "'u'-option disallows negative values");
  351|  8.92k|                }
  352|  8.92k|            }
  353|  8.92k|        }
  354|       |
  355|   575k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 175k, False: 399k]
  ------------------
  356|   175k|            value = T{0};
  357|   175k|            return std::next(prefix_result.iterator);
  358|   175k|        }
  359|       |
  360|   399k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   399k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 319k, False: 79.3k]
  |  |  ------------------
  ------------------
  361|   319k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 68, False: 319k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     68|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     68|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     68|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     68|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     68|    }                                                  \
  |  |  |  |   70|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   319k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   319k|                    parse_integer_digits_without_thsep(
  363|   319k|                        ranges::subrange{prefix_result.iterator,
  364|   319k|                                         ranges::end(range)},
  365|   319k|                        prefix_result.parsed_base));
  366|       |
  367|   319k|            auto buf = make_contiguous_buffer(
  368|   319k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   319k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 18.6k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  18.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  18.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  18.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  18.6k|    }                                                  \
  |  |  |  |   70|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   301k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   301k|                                        prefix_result.parsed_base));
  372|       |
  373|   301k|            return ranges_polyfill::batch_next(
  374|   301k|                prefix_result.iterator,
  375|   301k|                ranges::distance(buf.view().begin(), result_it));
  376|   319k|        }
  377|       |
  378|  79.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  79.3k|            localized_number_formatting_options<CharT>{loc};
  383|  79.3k|#endif
  384|       |
  385|  79.3k|        SCN_TRY(
  ------------------
  |  |   71|  79.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  79.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  79.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  79.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.62k, False: 77.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.62k|    }                                                  \
  |  |  |  |   70|  79.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  77.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  77.7k|            parse_digits_result,
  387|  77.7k|            parse_integer_digits_with_thsep(
  388|  77.7k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  77.7k|                prefix_result.parsed_base, locale_options));
  390|  77.7k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  77.7k|            parse_digits_result;
  392|       |
  393|  77.7k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 250, False: 77.4k]
  ------------------
  394|    250|            if (auto e = check_thsep_grouping(
  395|    250|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    250|                    thsep_indices, locale_options.grouping);
  397|    250|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    250|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 244, False: 6]
  |  |  ------------------
  ------------------
  398|    244|                return unexpected(e);
  399|    244|            }
  400|    250|        }
  401|       |
  402|  77.4k|        auto nothsep_source_view =
  403|  77.4k|            std::basic_string_view<CharT>{nothsep_source};
  404|  77.4k|        SCN_TRY(
  ------------------
  |  |   71|  77.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  77.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  77.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  77.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.52k, False: 75.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.52k|    }                                                  \
  |  |  |  |   70|  77.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  75.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  75.9k|            nothsep_source_it,
  406|  75.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  75.9k|                                prefix_result.parsed_base));
  408|       |
  409|  75.9k|        return ranges_polyfill::batch_next(
  410|  75.9k|            prefix_result.iterator,
  411|  75.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  75.9k|                ranges::ssize(thsep_indices));
  413|  77.4k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   737k|    {
  335|   737k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   737k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   737k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   737k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   737k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 737k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   737k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   737k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   737k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   737k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 9.61k, False: 728k]
  ------------------
  339|  9.61k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  9.61k|                return unexpected_scan_error(
  341|  9.61k|                    scan_error::invalid_scanned_value,
  342|  9.61k|                    "Unexpected '-' sign when parsing an "
  343|  9.61k|                    "unsigned value");
  344|  9.61k|            }
  345|  9.61k|            else {
  346|  9.61k|                if (specs.type ==
  347|  9.61k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  9.61k|                    return unexpected_scan_error(
  349|  9.61k|                        scan_error::invalid_scanned_value,
  350|  9.61k|                        "'u'-option disallows negative values");
  351|  9.61k|                }
  352|  9.61k|            }
  353|  9.61k|        }
  354|       |
  355|   728k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 198k, False: 529k]
  ------------------
  356|   198k|            value = T{0};
  357|   198k|            return std::next(prefix_result.iterator);
  358|   198k|        }
  359|       |
  360|   529k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   529k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 423k, False: 106k]
  |  |  ------------------
  ------------------
  361|   423k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   423k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   423k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   423k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 70, False: 423k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     70|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     70|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     70|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     70|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     70|    }                                                  \
  |  |  |  |   70|   423k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   423k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   423k|                    parse_integer_digits_without_thsep(
  363|   423k|                        ranges::subrange{prefix_result.iterator,
  364|   423k|                                         ranges::end(range)},
  365|   423k|                        prefix_result.parsed_base));
  366|       |
  367|   423k|            auto buf = make_contiguous_buffer(
  368|   423k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   423k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   423k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   423k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   423k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   423k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 17.1k, False: 406k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  17.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  17.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  17.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  17.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  17.1k|    }                                                  \
  |  |  |  |   70|   423k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   406k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   406k|                                        prefix_result.parsed_base));
  372|       |
  373|   406k|            return ranges_polyfill::batch_next(
  374|   406k|                prefix_result.iterator,
  375|   406k|                ranges::distance(buf.view().begin(), result_it));
  376|   423k|        }
  377|       |
  378|   106k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   106k|            localized_number_formatting_options<CharT>{loc};
  383|   106k|#endif
  384|       |
  385|   106k|        SCN_TRY(
  ------------------
  |  |   71|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.09k, False: 104k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.09k|    }                                                  \
  |  |  |  |   70|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   104k|            parse_digits_result,
  387|   104k|            parse_integer_digits_with_thsep(
  388|   104k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   104k|                prefix_result.parsed_base, locale_options));
  390|   104k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   104k|            parse_digits_result;
  392|       |
  393|   104k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 300, False: 103k]
  ------------------
  394|    300|            if (auto e = check_thsep_grouping(
  395|    300|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    300|                    thsep_indices, locale_options.grouping);
  397|    300|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 294, False: 6]
  |  |  ------------------
  ------------------
  398|    294|                return unexpected(e);
  399|    294|            }
  400|    300|        }
  401|       |
  402|   103k|        auto nothsep_source_view =
  403|   103k|            std::basic_string_view<CharT>{nothsep_source};
  404|   103k|        SCN_TRY(
  ------------------
  |  |   71|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 526, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    526|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    526|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    526|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    526|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    526|    }                                                  \
  |  |  |  |   70|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   103k|            nothsep_source_it,
  406|   103k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   103k|                                prefix_result.parsed_base));
  408|       |
  409|   103k|        return ranges_polyfill::batch_next(
  410|   103k|            prefix_result.iterator,
  411|   103k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   103k|                ranges::ssize(thsep_indices));
  413|   103k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   784k|    {
  335|   784k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   784k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   784k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   784k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   784k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 784k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   784k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   784k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   784k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   784k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 10.2k, False: 774k]
  ------------------
  339|  10.2k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  10.2k|                return unexpected_scan_error(
  341|  10.2k|                    scan_error::invalid_scanned_value,
  342|  10.2k|                    "Unexpected '-' sign when parsing an "
  343|  10.2k|                    "unsigned value");
  344|  10.2k|            }
  345|  10.2k|            else {
  346|  10.2k|                if (specs.type ==
  347|  10.2k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  10.2k|                    return unexpected_scan_error(
  349|  10.2k|                        scan_error::invalid_scanned_value,
  350|  10.2k|                        "'u'-option disallows negative values");
  351|  10.2k|                }
  352|  10.2k|            }
  353|  10.2k|        }
  354|       |
  355|   774k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 201k, False: 573k]
  ------------------
  356|   201k|            value = T{0};
  357|   201k|            return std::next(prefix_result.iterator);
  358|   201k|        }
  359|       |
  360|   573k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   573k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 457k, False: 116k]
  |  |  ------------------
  ------------------
  361|   457k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   457k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   457k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   457k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   457k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 72, False: 456k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     72|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     72|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     72|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     72|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     72|    }                                                  \
  |  |  |  |   70|   457k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   456k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   456k|                    parse_integer_digits_without_thsep(
  363|   456k|                        ranges::subrange{prefix_result.iterator,
  364|   456k|                                         ranges::end(range)},
  365|   456k|                        prefix_result.parsed_base));
  366|       |
  367|   456k|            auto buf = make_contiguous_buffer(
  368|   456k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   456k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   456k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   456k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   456k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   456k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.3k, False: 440k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.3k|    }                                                  \
  |  |  |  |   70|   456k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   440k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   440k|                                        prefix_result.parsed_base));
  372|       |
  373|   440k|            return ranges_polyfill::batch_next(
  374|   440k|                prefix_result.iterator,
  375|   440k|                ranges::distance(buf.view().begin(), result_it));
  376|   456k|        }
  377|       |
  378|   116k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   116k|            localized_number_formatting_options<CharT>{loc};
  383|   116k|#endif
  384|       |
  385|   116k|        SCN_TRY(
  ------------------
  |  |   71|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.21k, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.21k|    }                                                  \
  |  |  |  |   70|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   114k|            parse_digits_result,
  387|   114k|            parse_integer_digits_with_thsep(
  388|   114k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   114k|                prefix_result.parsed_base, locale_options));
  390|   114k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   114k|            parse_digits_result;
  392|       |
  393|   114k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 308, False: 113k]
  ------------------
  394|    308|            if (auto e = check_thsep_grouping(
  395|    308|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    308|                    thsep_indices, locale_options.grouping);
  397|    308|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    308|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 302, False: 6]
  |  |  ------------------
  ------------------
  398|    302|                return unexpected(e);
  399|    302|            }
  400|    308|        }
  401|       |
  402|   113k|        auto nothsep_source_view =
  403|   113k|            std::basic_string_view<CharT>{nothsep_source};
  404|   113k|        SCN_TRY(
  ------------------
  |  |   71|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 150, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    150|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    150|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    150|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    150|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    150|    }                                                  \
  |  |  |  |   70|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   113k|            nothsep_source_it,
  406|   113k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   113k|                                prefix_result.parsed_base));
  408|       |
  409|   113k|        return ranges_polyfill::batch_next(
  410|   113k|            prefix_result.iterator,
  411|   113k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   113k|                ranges::ssize(thsep_indices));
  413|   113k|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  38.1k|    {
  335|  38.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  38.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  38.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 38.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  38.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 38.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  38.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  38.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 32.6k, False: 5.44k]
  |  |  ------------------
  ------------------
  361|  32.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  32.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.2k, False: 5.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.2k|    }                                                  \
  |  |  |  |   70|  32.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  5.44k|                    parse_integer_digits_without_thsep(
  363|  5.44k|                        ranges::subrange{prefix_result.iterator,
  364|  5.44k|                                         ranges::end(range)},
  365|  5.44k|                        prefix_result.parsed_base));
  366|       |
  367|  5.44k|            auto buf = make_contiguous_buffer(
  368|  5.44k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  5.44k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  5.44k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  5.44k|                                        prefix_result.parsed_base));
  372|       |
  373|  5.44k|            return ranges_polyfill::batch_next(
  374|  5.44k|                prefix_result.iterator,
  375|  5.44k|                ranges::distance(buf.view().begin(), result_it));
  376|  5.44k|        }
  377|       |
  378|  5.44k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  5.44k|            localized_number_formatting_options<CharT>{loc};
  383|  5.44k|#endif
  384|       |
  385|  5.44k|        SCN_TRY(
  ------------------
  |  |   71|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.44k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.44k|    }                                                  \
  |  |  |  |   70|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  38.1k|    {
  335|  38.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  38.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  38.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 38.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  38.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 38.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  38.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  38.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 32.6k, False: 5.44k]
  |  |  ------------------
  ------------------
  361|  32.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  32.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.2k, False: 5.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.2k|    }                                                  \
  |  |  |  |   70|  32.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  5.44k|                    parse_integer_digits_without_thsep(
  363|  5.44k|                        ranges::subrange{prefix_result.iterator,
  364|  5.44k|                                         ranges::end(range)},
  365|  5.44k|                        prefix_result.parsed_base));
  366|       |
  367|  5.44k|            auto buf = make_contiguous_buffer(
  368|  5.44k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  5.44k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  5.44k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  5.44k|                                        prefix_result.parsed_base));
  372|       |
  373|  5.44k|            return ranges_polyfill::batch_next(
  374|  5.44k|                prefix_result.iterator,
  375|  5.44k|                ranges::distance(buf.view().begin(), result_it));
  376|  5.44k|        }
  377|       |
  378|  5.44k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  5.44k|            localized_number_formatting_options<CharT>{loc};
  383|  5.44k|#endif
  384|       |
  385|  5.44k|        SCN_TRY(
  ------------------
  |  |   71|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.44k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.44k|    }                                                  \
  |  |  |  |   70|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  38.1k|    {
  335|  38.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  38.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  38.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 38.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  38.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 38.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  38.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  38.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 32.6k, False: 5.44k]
  |  |  ------------------
  ------------------
  361|  32.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  32.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.2k, False: 5.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.2k|    }                                                  \
  |  |  |  |   70|  32.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  5.44k|                    parse_integer_digits_without_thsep(
  363|  5.44k|                        ranges::subrange{prefix_result.iterator,
  364|  5.44k|                                         ranges::end(range)},
  365|  5.44k|                        prefix_result.parsed_base));
  366|       |
  367|  5.44k|            auto buf = make_contiguous_buffer(
  368|  5.44k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  5.44k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  5.44k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  5.44k|                                        prefix_result.parsed_base));
  372|       |
  373|  5.44k|            return ranges_polyfill::batch_next(
  374|  5.44k|                prefix_result.iterator,
  375|  5.44k|                ranges::distance(buf.view().begin(), result_it));
  376|  5.44k|        }
  377|       |
  378|  5.44k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  5.44k|            localized_number_formatting_options<CharT>{loc};
  383|  5.44k|#endif
  384|       |
  385|  5.44k|        SCN_TRY(
  ------------------
  |  |   71|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.44k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.44k|    }                                                  \
  |  |  |  |   70|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  38.1k|    {
  335|  38.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  38.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  38.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 38.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  38.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 38.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  38.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  38.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 32.6k, False: 5.44k]
  |  |  ------------------
  ------------------
  361|  32.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  32.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.2k, False: 5.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.2k|    }                                                  \
  |  |  |  |   70|  32.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  5.44k|                    parse_integer_digits_without_thsep(
  363|  5.44k|                        ranges::subrange{prefix_result.iterator,
  364|  5.44k|                                         ranges::end(range)},
  365|  5.44k|                        prefix_result.parsed_base));
  366|       |
  367|  5.44k|            auto buf = make_contiguous_buffer(
  368|  5.44k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  5.44k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  5.44k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  5.44k|                                        prefix_result.parsed_base));
  372|       |
  373|  5.44k|            return ranges_polyfill::batch_next(
  374|  5.44k|                prefix_result.iterator,
  375|  5.44k|                ranges::distance(buf.view().begin(), result_it));
  376|  5.44k|        }
  377|       |
  378|  5.44k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  5.44k|            localized_number_formatting_options<CharT>{loc};
  383|  5.44k|#endif
  384|       |
  385|  5.44k|        SCN_TRY(
  ------------------
  |  |   71|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.44k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.44k|    }                                                  \
  |  |  |  |   70|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  38.1k|    {
  335|  38.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  38.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  38.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 38.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  38.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 38.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  38.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  38.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 32.6k, False: 5.44k]
  |  |  ------------------
  ------------------
  361|  32.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  32.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.2k, False: 5.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.2k|    }                                                  \
  |  |  |  |   70|  32.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  5.44k|                    parse_integer_digits_without_thsep(
  363|  5.44k|                        ranges::subrange{prefix_result.iterator,
  364|  5.44k|                                         ranges::end(range)},
  365|  5.44k|                        prefix_result.parsed_base));
  366|       |
  367|  5.44k|            auto buf = make_contiguous_buffer(
  368|  5.44k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  5.44k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  5.44k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  5.44k|                                        prefix_result.parsed_base));
  372|       |
  373|  5.44k|            return ranges_polyfill::batch_next(
  374|  5.44k|                prefix_result.iterator,
  375|  5.44k|                ranges::distance(buf.view().begin(), result_it));
  376|  5.44k|        }
  377|       |
  378|  5.44k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  5.44k|            localized_number_formatting_options<CharT>{loc};
  383|  5.44k|#endif
  384|       |
  385|  5.44k|        SCN_TRY(
  ------------------
  |  |   71|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.44k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.44k|    }                                                  \
  |  |  |  |   70|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIcE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  38.1k|    {
  335|  38.1k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  38.1k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  38.1k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 38.1k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  38.1k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 38.1k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  38.1k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  38.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 32.6k, False: 5.44k]
  |  |  ------------------
  ------------------
  361|  32.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  32.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  32.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  32.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  32.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 27.2k, False: 5.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  27.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  27.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  27.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  27.2k|    }                                                  \
  |  |  |  |   70|  32.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  5.44k|                    parse_integer_digits_without_thsep(
  363|  5.44k|                        ranges::subrange{prefix_result.iterator,
  364|  5.44k|                                         ranges::end(range)},
  365|  5.44k|                        prefix_result.parsed_base));
  366|       |
  367|  5.44k|            auto buf = make_contiguous_buffer(
  368|  5.44k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  5.44k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 5.44k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  5.44k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  5.44k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  5.44k|                                        prefix_result.parsed_base));
  372|       |
  373|  5.44k|            return ranges_polyfill::batch_next(
  374|  5.44k|                prefix_result.iterator,
  375|  5.44k|                ranges::distance(buf.view().begin(), result_it));
  376|  5.44k|        }
  377|       |
  378|  5.44k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  5.44k|            localized_number_formatting_options<CharT>{loc};
  383|  5.44k|#endif
  384|       |
  385|  5.44k|        SCN_TRY(
  ------------------
  |  |   71|  5.44k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  5.44k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  5.44k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  5.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.44k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.44k|    }                                                  \
  |  |  |  |   70|  5.44k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   258k|    {
  324|   258k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   258k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   258k|        return read_default_with_base(range, value, 0);
  326|   258k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   258k|    {
  287|   258k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   258k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   258k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   258k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 258k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   258k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   258k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   258k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   258k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   258k|                return unexpected_scan_error(
  293|   258k|                    scan_error::invalid_scanned_value,
  294|   258k|                    "Unexpected '-' sign when parsing an "
  295|   258k|                    "unsigned value");
  296|   258k|            }
  297|   258k|        }
  298|       |
  299|   258k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 109k, False: 149k]
  ------------------
  300|   109k|            value = T{0};
  301|   109k|            return std::next(prefix_result.iterator);
  302|   109k|        }
  303|       |
  304|   298k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   149k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   149k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   149k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 162, False: 149k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    162|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    162|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    162|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    162|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    162|    }                                                  \
  |  |  |  |   70|   149k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   298k|                                     ranges::subrange{prefix_result.iterator,
  306|   298k|                                                      ranges::end(range)},
  307|   298k|                                     prefix_result.parsed_base));
  308|       |
  309|   298k|        auto buf = make_contiguous_buffer(
  310|   298k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   298k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   149k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   149k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   149k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 23.3k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  23.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  23.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  23.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  23.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  23.3k|    }                                                  \
  |  |  |  |   70|   149k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   126k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   126k|                                    prefix_result.parsed_base));
  314|       |
  315|   126k|        return ranges_polyfill::batch_next(
  316|   126k|            prefix_result.iterator,
  317|   126k|            ranges::distance(buf.view().begin(), result_it));
  318|   298k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESE_i:
  120|  6.36M|{
  121|  6.36M|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|  6.36M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  6.36M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  6.36M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  6.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 6.36M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  6.36M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  6.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  6.36M|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|  6.36M|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|  6.36M|        parse_integer_base_prefix(
  126|  6.36M|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|  6.36M|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 2.42M, False: 3.93M]
  ------------------
  129|  2.42M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 2.94k, False: 2.42M]
  ------------------
  130|  2.42M|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 1.85M, False: 567k]
  ------------------
  131|  1.85M|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|  1.85M|                digits_begin_it, ranges::begin(range));
  133|  1.85M|        }
  134|   567k|        else {
  135|   567k|            parsed_zero = false;
  136|   567k|        }
  137|  2.42M|    }
  138|  3.93M|    else {
  139|  3.93M|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 10.2k, False: 3.92M]
  ------------------
  140|  3.93M|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 642k, False: 3.28M]
  ------------------
  141|   652k|            digits_begin_it = base_prefix_begin_it;
  142|   652k|        }
  143|  3.93M|    }
  144|       |
  145|  6.36M|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 5.96M, False: 394k]
  ------------------
  146|  5.96M|        sign = sign_type::plus_sign;
  147|  5.96M|    }
  148|  6.36M|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|  6.36M|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|  6.36M|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_i:
   87|  6.36M|{
   88|  6.36M|    switch (base) {
   89|   166k|        case 2:
  ------------------
  |  Branch (89:9): [True: 166k, False: 6.19M]
  ------------------
   90|       |            // allow 0b/0B
   91|   166k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|   166k|                    false};
   93|       |
   94|   307k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 307k, False: 6.05M]
  ------------------
   95|       |            // allow 0o/0O/0
   96|   307k|            bool zero_parsed = false;
   97|   307k|            auto it = apply_opt(
   98|   307k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|   307k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   829k|        case 16:
  ------------------
  |  Branch (102:9): [True: 829k, False: 5.53M]
  ------------------
  103|       |            // allow 0x/0X
  104|   829k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   829k|                    false};
  106|       |
  107|  4.18M|        case 0:
  ------------------
  |  Branch (107:9): [True: 4.18M, False: 2.17M]
  ------------------
  108|       |            // detect base
  109|  4.18M|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|  4.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|   871k|        default:
  ------------------
  |  Branch (111:9): [True: 871k, False: 5.49M]
  ------------------
  112|       |            // no base prefix allowed
  113|   871k|            return {ranges::begin(range), base, false};
  114|  6.36M|    }
  115|  6.36M|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   37|  4.34M|{
   38|  4.34M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|  4.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|  4.34M|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_Rb:
   52|  4.47M|{
   53|  4.47M|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 42.3k, False: 4.43M]
  ------------------
   54|  42.3k|        return *r;
   55|  42.3k|    }
   56|       |
   57|  4.43M|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 2.42M, False: 2.01M]
  ------------------
   58|  2.42M|        zero_parsed = true;
   59|  2.42M|        return *r;
   60|  2.42M|    }
   61|       |
   62|  2.01M|    return unexpected(parse_error::error);
   63|  4.43M|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEEEOSE_:
   44|  5.01M|{
   45|  5.01M|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|  5.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|  5.01M|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISE_EEE4typeEibEEEOSE_:
   68|  4.18M|{
   69|  4.18M|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 14.2k, False: 4.17M]
  ------------------
   70|  14.2k|        return {*r, 16, false};
   71|  14.2k|    }
   72|  4.17M|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 2.61k, False: 4.17M]
  ------------------
   73|  2.61k|        return {*r, 2, false};
   74|  2.61k|    }
   75|  4.17M|    {
   76|  4.17M|        bool zero_parsed{false};
   77|  4.17M|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 2.31M, False: 1.85M]
  ------------------
   78|  2.31M|            return {*r, 8, zero_parsed};
   79|  2.31M|        }
   80|  4.17M|    }
   81|  1.85M|    return {ranges::begin(range), 10, false};
   82|  4.17M|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESD_i:
  155|  3.78M|{
  156|  3.78M|    using char_type = detail::char_t<Range>;
  157|       |
  158|  3.78M|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|  3.78M|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  3.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 2.45k, False: 3.78M]
  |  |  ------------------
  ------------------
  160|  2.45k|            return unexpected_scan_error(
  161|  2.45k|                scan_error::invalid_scanned_value,
  162|  2.45k|                "Failed to parse integer: No digits found");
  163|  2.45k|        }
  164|  3.78M|        return ranges::end(range);
  165|  3.78M|    }
  166|  3.78M|    else {
  167|  3.78M|        return read_while1_code_unit(
  168|  3.78M|                   range, [&](char_type ch)
  169|  3.78M|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|  3.78M|            .transform_error(map_parse_error_to_scan_error(
  171|  3.78M|                scan_error::invalid_scanned_value,
  172|  3.78M|                "Failed to parse integer: No digits found"));
  173|  3.78M|    }
  174|  3.78M|}
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   348k|    {
  324|   348k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   348k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   348k|        return read_default_with_base(range, value, 0);
  326|   348k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   348k|    {
  287|   348k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   348k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   348k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   348k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 348k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   348k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   348k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   348k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   348k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   348k|                return unexpected_scan_error(
  293|   348k|                    scan_error::invalid_scanned_value,
  294|   348k|                    "Unexpected '-' sign when parsing an "
  295|   348k|                    "unsigned value");
  296|   348k|            }
  297|   348k|        }
  298|       |
  299|   348k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 142k, False: 205k]
  ------------------
  300|   142k|            value = T{0};
  301|   142k|            return std::next(prefix_result.iterator);
  302|   142k|        }
  303|       |
  304|   411k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   205k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   205k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   205k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 198, False: 205k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    198|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    198|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    198|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    198|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    198|    }                                                  \
  |  |  |  |   70|   205k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   411k|                                     ranges::subrange{prefix_result.iterator,
  306|   411k|                                                      ranges::end(range)},
  307|   411k|                                     prefix_result.parsed_base));
  308|       |
  309|   411k|        auto buf = make_contiguous_buffer(
  310|   411k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   411k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   205k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   205k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   205k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.5k, False: 183k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.5k|    }                                                  \
  |  |  |  |   70|   205k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   183k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   183k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   183k|                                    prefix_result.parsed_base));
  314|       |
  315|   183k|        return ranges_polyfill::batch_next(
  316|   183k|            prefix_result.iterator,
  317|   183k|            ranges::distance(buf.view().begin(), result_it));
  318|   411k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   371k|    {
  324|   371k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   371k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   371k|        return read_default_with_base(range, value, 0);
  326|   371k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   371k|    {
  287|   371k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   371k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   371k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   371k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 371k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   371k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   371k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   371k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   371k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|   371k|                return unexpected_scan_error(
  293|   371k|                    scan_error::invalid_scanned_value,
  294|   371k|                    "Unexpected '-' sign when parsing an "
  295|   371k|                    "unsigned value");
  296|   371k|            }
  297|   371k|        }
  298|       |
  299|   371k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 145k, False: 225k]
  ------------------
  300|   145k|            value = T{0};
  301|   145k|            return std::next(prefix_result.iterator);
  302|   145k|        }
  303|       |
  304|   450k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   225k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   225k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   225k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 207, False: 225k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    207|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    207|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    207|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    207|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    207|    }                                                  \
  |  |  |  |   70|   225k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   225k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   450k|                                     ranges::subrange{prefix_result.iterator,
  306|   450k|                                                      ranges::end(range)},
  307|   450k|                                     prefix_result.parsed_base));
  308|       |
  309|   450k|        auto buf = make_contiguous_buffer(
  310|   450k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   450k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   225k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   225k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   225k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 22.2k, False: 202k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  22.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  22.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  22.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  22.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  22.2k|    }                                                  \
  |  |  |  |   70|   225k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   202k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   202k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   202k|                                    prefix_result.parsed_base));
  314|       |
  315|   202k|        return ranges_polyfill::batch_next(
  316|   202k|            prefix_result.iterator,
  317|   202k|            ranges::distance(buf.view().begin(), result_it));
  318|   450k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   233k|    {
  324|   233k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   233k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   233k|        return read_default_with_base(range, value, 0);
  326|   233k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   233k|    {
  287|   233k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   233k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 233k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   233k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   233k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   233k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.15k, False: 231k]
  ------------------
  292|  2.15k|                return unexpected_scan_error(
  293|  2.15k|                    scan_error::invalid_scanned_value,
  294|  2.15k|                    "Unexpected '-' sign when parsing an "
  295|  2.15k|                    "unsigned value");
  296|  2.15k|            }
  297|   233k|        }
  298|       |
  299|   231k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 107k, False: 123k]
  ------------------
  300|   107k|            value = T{0};
  301|   107k|            return std::next(prefix_result.iterator);
  302|   107k|        }
  303|       |
  304|   247k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   123k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|   123k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   247k|                                     ranges::subrange{prefix_result.iterator,
  306|   247k|                                                      ranges::end(range)},
  307|   247k|                                     prefix_result.parsed_base));
  308|       |
  309|   247k|        auto buf = make_contiguous_buffer(
  310|   247k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   247k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   123k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 21.4k, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  21.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  21.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  21.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  21.4k|    }                                                  \
  |  |  |  |   70|   123k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   102k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   102k|                                    prefix_result.parsed_base));
  314|       |
  315|   102k|        return ranges_polyfill::batch_next(
  316|   102k|            prefix_result.iterator,
  317|   102k|            ranges::distance(buf.view().begin(), result_it));
  318|   247k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   284k|    {
  324|   284k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   284k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   284k|        return read_default_with_base(range, value, 0);
  326|   284k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   284k|    {
  287|   284k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   284k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   284k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   284k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   284k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 284k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   284k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   284k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   284k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   284k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.37k, False: 282k]
  ------------------
  292|  2.37k|                return unexpected_scan_error(
  293|  2.37k|                    scan_error::invalid_scanned_value,
  294|  2.37k|                    "Unexpected '-' sign when parsing an "
  295|  2.37k|                    "unsigned value");
  296|  2.37k|            }
  297|   284k|        }
  298|       |
  299|   282k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 122k, False: 159k]
  ------------------
  300|   122k|            value = T{0};
  301|   122k|            return std::next(prefix_result.iterator);
  302|   122k|        }
  303|       |
  304|   319k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36, False: 159k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   159k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   319k|                                     ranges::subrange{prefix_result.iterator,
  306|   319k|                                                      ranges::end(range)},
  307|   319k|                                     prefix_result.parsed_base));
  308|       |
  309|   319k|        auto buf = make_contiguous_buffer(
  310|   319k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   319k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   159k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   159k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   159k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   159k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.8k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.8k|    }                                                  \
  |  |  |  |   70|   159k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   138k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   138k|                                    prefix_result.parsed_base));
  314|       |
  315|   138k|        return ranges_polyfill::batch_next(
  316|   138k|            prefix_result.iterator,
  317|   138k|            ranges::distance(buf.view().begin(), result_it));
  318|   319k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEOSF_RT0_NS0_6detail10locale_refE:
  323|   298k|    {
  324|   298k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|   298k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|   298k|        return read_default_with_base(range, value, 0);
  326|   298k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RT0_i:
  286|   298k|    {
  287|   298k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 298k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|   298k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|   298k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|   298k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 2.50k, False: 296k]
  ------------------
  292|  2.50k|                return unexpected_scan_error(
  293|  2.50k|                    scan_error::invalid_scanned_value,
  294|  2.50k|                    "Unexpected '-' sign when parsing an "
  295|  2.50k|                    "unsigned value");
  296|  2.50k|            }
  297|   298k|        }
  298|       |
  299|   296k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 124k, False: 171k]
  ------------------
  300|   124k|            value = T{0};
  301|   124k|            return std::next(prefix_result.iterator);
  302|   124k|        }
  303|       |
  304|   343k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|   171k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   171k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   171k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 36, False: 171k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     36|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     36|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     36|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     36|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     36|    }                                                  \
  |  |  |  |   70|   171k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   171k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   343k|                                     ranges::subrange{prefix_result.iterator,
  306|   343k|                                                      ranges::end(range)},
  307|   343k|                                     prefix_result.parsed_base));
  308|       |
  309|   343k|        auto buf = make_contiguous_buffer(
  310|   343k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|   343k|        SCN_TRY(result_it,
  ------------------
  |  |   71|   171k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   171k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   171k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 20.5k, False: 151k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  20.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  20.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  20.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  20.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  20.5k|    }                                                  \
  |  |  |  |   70|   171k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   151k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|   151k|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|   151k|                                    prefix_result.parsed_base));
  314|       |
  315|   151k|        return ranges_polyfill::batch_next(
  316|   151k|            prefix_result.iterator,
  317|   151k|            ranges::distance(buf.view().begin(), result_it));
  318|   343k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSC_12basic_stringIT0_NSC_11char_traitsISJ_EENSC_9allocatorISJ_EEEENSI_IcNSK_IcEENSM_IcEEEEEEEEESF_iRKNS1_35localized_number_formatting_optionsISJ_EE:
  184|   689k|{
  185|   689k|    std::basic_string<CharT> output;
  186|   689k|    std::string thsep_indices;
  187|   689k|    auto it = ranges::begin(range);
  188|   689k|    bool digit_matched = false;
  189|  1.98M|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 1.97M, False: 6.12k]
  ------------------
  190|  1.97M|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 34.4k, False: 1.93M]
  ------------------
  191|  34.4k|            thsep_indices.push_back(static_cast<char>(
  192|  34.4k|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|  34.4k|        }
  194|  1.93M|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 683k, False: 1.25M]
  ------------------
  195|   683k|            break;
  196|   683k|        }
  197|  1.25M|        else {
  198|  1.25M|            output.push_back(*it);
  199|  1.25M|            digit_matched = true;
  200|  1.25M|        }
  201|  1.97M|    }
  202|   689k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 80.8k, False: 608k]
  |  |  ------------------
  ------------------
  203|  80.8k|        return unexpected_scan_error(
  204|  80.8k|            scan_error::invalid_scanned_value,
  205|  80.8k|            "Failed to parse integer: No digits found");
  206|  80.8k|    }
  207|   608k|    return std::tuple{it, output, thsep_indices};
  208|   689k|}
_ZN3scn2v24impl19reader_impl_for_intIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
  279|  5.24M|    {
  280|  5.24M|        detail::check_int_type_specs(specs, eh);
  281|  5.24M|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   614k|    {
  335|   614k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   614k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   614k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   614k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   614k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 614k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   614k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   614k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   614k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 68.4k, False: 546k]
  ------------------
  339|  68.4k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  68.4k|                return unexpected_scan_error(
  341|  68.4k|                    scan_error::invalid_scanned_value,
  342|  68.4k|                    "Unexpected '-' sign when parsing an "
  343|  68.4k|                    "unsigned value");
  344|  68.4k|            }
  345|  68.4k|            else {
  346|  68.4k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 68.4k]
  ------------------
  347|  68.4k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  68.4k|            }
  353|  68.4k|        }
  354|       |
  355|   614k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 162k, False: 452k]
  ------------------
  356|   162k|            value = T{0};
  357|   162k|            return std::next(prefix_result.iterator);
  358|   162k|        }
  359|       |
  360|   452k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   452k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 352k, False: 99.5k]
  |  |  ------------------
  ------------------
  361|   352k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   352k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   352k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   352k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 436, False: 352k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    436|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    436|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    436|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    436|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    436|    }                                                  \
  |  |  |  |   70|   352k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   352k|                    parse_integer_digits_without_thsep(
  363|   352k|                        ranges::subrange{prefix_result.iterator,
  364|   352k|                                         ranges::end(range)},
  365|   352k|                        prefix_result.parsed_base));
  366|       |
  367|   352k|            auto buf = make_contiguous_buffer(
  368|   352k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   352k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   352k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   352k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   352k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 78.7k, False: 273k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  78.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  78.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  78.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  78.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  78.7k|    }                                                  \
  |  |  |  |   70|   352k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   273k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   273k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   273k|                                        prefix_result.parsed_base));
  372|       |
  373|   273k|            return ranges_polyfill::batch_next(
  374|   273k|                prefix_result.iterator,
  375|   273k|                ranges::distance(buf.view().begin(), result_it));
  376|   352k|        }
  377|       |
  378|  99.5k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  99.5k|            localized_number_formatting_options<CharT>{loc};
  383|  99.5k|#endif
  384|       |
  385|  99.5k|        SCN_TRY(
  ------------------
  |  |   71|  99.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  99.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  99.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  99.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.2k, False: 86.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.2k|    }                                                  \
  |  |  |  |   70|  99.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  86.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  86.2k|            parse_digits_result,
  387|  86.2k|            parse_integer_digits_with_thsep(
  388|  86.2k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  86.2k|                prefix_result.parsed_base, locale_options));
  390|  86.2k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  86.2k|            parse_digits_result;
  392|       |
  393|  86.2k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 352, False: 85.8k]
  ------------------
  394|    352|            if (auto e = check_thsep_grouping(
  395|    352|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    352|                    thsep_indices, locale_options.grouping);
  397|    352|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    352|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 344, False: 8]
  |  |  ------------------
  ------------------
  398|    344|                return unexpected(e);
  399|    344|            }
  400|    352|        }
  401|       |
  402|  85.8k|        auto nothsep_source_view =
  403|  85.8k|            std::basic_string_view<CharT>{nothsep_source};
  404|  85.8k|        SCN_TRY(
  ------------------
  |  |   71|  85.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  85.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  85.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  85.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.03k, False: 83.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.03k|    }                                                  \
  |  |  |  |   70|  85.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  83.8k|            nothsep_source_it,
  406|  83.8k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  83.8k|                                prefix_result.parsed_base));
  408|       |
  409|  83.8k|        return ranges_polyfill::batch_next(
  410|  83.8k|            prefix_result.iterator,
  411|  83.8k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  83.8k|                ranges::ssize(thsep_indices));
  413|  85.8k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   900k|    {
  335|   900k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   900k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   900k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   900k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   900k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 900k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   900k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   900k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   900k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   900k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 76.8k, False: 823k]
  ------------------
  339|  76.8k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  76.8k|                return unexpected_scan_error(
  341|  76.8k|                    scan_error::invalid_scanned_value,
  342|  76.8k|                    "Unexpected '-' sign when parsing an "
  343|  76.8k|                    "unsigned value");
  344|  76.8k|            }
  345|  76.8k|            else {
  346|  76.8k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 76.8k]
  ------------------
  347|  76.8k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  76.8k|            }
  353|  76.8k|        }
  354|       |
  355|   900k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 210k, False: 690k]
  ------------------
  356|   210k|            value = T{0};
  357|   210k|            return std::next(prefix_result.iterator);
  358|   210k|        }
  359|       |
  360|   690k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   690k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 553k, False: 136k]
  |  |  ------------------
  ------------------
  361|   553k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   553k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   553k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   553k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 522, False: 552k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    522|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    522|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    522|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    522|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    522|    }                                                  \
  |  |  |  |   70|   553k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   552k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   552k|                    parse_integer_digits_without_thsep(
  363|   552k|                        ranges::subrange{prefix_result.iterator,
  364|   552k|                                         ranges::end(range)},
  365|   552k|                        prefix_result.parsed_base));
  366|       |
  367|   552k|            auto buf = make_contiguous_buffer(
  368|   552k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   552k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   552k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   552k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   552k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   552k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 76.9k, False: 475k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  76.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  76.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  76.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  76.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  76.9k|    }                                                  \
  |  |  |  |   70|   552k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   475k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   475k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   475k|                                        prefix_result.parsed_base));
  372|       |
  373|   475k|            return ranges_polyfill::batch_next(
  374|   475k|                prefix_result.iterator,
  375|   475k|                ranges::distance(buf.view().begin(), result_it));
  376|   552k|        }
  377|       |
  378|   136k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   136k|            localized_number_formatting_options<CharT>{loc};
  383|   136k|#endif
  384|       |
  385|   136k|        SCN_TRY(
  ------------------
  |  |   71|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 14.0k, False: 122k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.0k|    }                                                  \
  |  |  |  |   70|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   122k|            parse_digits_result,
  387|   122k|            parse_integer_digits_with_thsep(
  388|   122k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   122k|                prefix_result.parsed_base, locale_options));
  390|   122k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   122k|            parse_digits_result;
  392|       |
  393|   122k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 446, False: 122k]
  ------------------
  394|    446|            if (auto e = check_thsep_grouping(
  395|    446|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    446|                    thsep_indices, locale_options.grouping);
  397|    446|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    446|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 434, False: 12]
  |  |  ------------------
  ------------------
  398|    434|                return unexpected(e);
  399|    434|            }
  400|    446|        }
  401|       |
  402|   122k|        auto nothsep_source_view =
  403|   122k|            std::basic_string_view<CharT>{nothsep_source};
  404|   122k|        SCN_TRY(
  ------------------
  |  |   71|   122k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   122k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   122k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 640, False: 121k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    640|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    640|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    640|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    640|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    640|    }                                                  \
  |  |  |  |   70|   122k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   121k|            nothsep_source_it,
  406|   121k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   121k|                                prefix_result.parsed_base));
  408|       |
  409|   121k|        return ranges_polyfill::batch_next(
  410|   121k|            prefix_result.iterator,
  411|   121k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   121k|                ranges::ssize(thsep_indices));
  413|   122k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   962k|    {
  335|   962k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   962k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   962k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   962k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   962k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 962k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   962k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   962k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   962k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   962k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 78.0k, False: 884k]
  ------------------
  339|  78.0k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  78.0k|                return unexpected_scan_error(
  341|  78.0k|                    scan_error::invalid_scanned_value,
  342|  78.0k|                    "Unexpected '-' sign when parsing an "
  343|  78.0k|                    "unsigned value");
  344|  78.0k|            }
  345|  78.0k|            else {
  346|  78.0k|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 78.0k]
  ------------------
  347|  78.0k|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|  78.0k|            }
  353|  78.0k|        }
  354|       |
  355|   962k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 214k, False: 748k]
  ------------------
  356|   214k|            value = T{0};
  357|   214k|            return std::next(prefix_result.iterator);
  358|   214k|        }
  359|       |
  360|   748k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   748k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 598k, False: 149k]
  |  |  ------------------
  ------------------
  361|   598k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   598k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   598k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   598k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   598k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 552, False: 597k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    552|    }                                                  \
  |  |  |  |   70|   598k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   597k|                    parse_integer_digits_without_thsep(
  363|   597k|                        ranges::subrange{prefix_result.iterator,
  364|   597k|                                         ranges::end(range)},
  365|   597k|                        prefix_result.parsed_base));
  366|       |
  367|   597k|            auto buf = make_contiguous_buffer(
  368|   597k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   597k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   597k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   597k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   597k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   597k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 76.3k, False: 521k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  76.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  76.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  76.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  76.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  76.3k|    }                                                  \
  |  |  |  |   70|   597k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   521k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   521k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   521k|                                        prefix_result.parsed_base));
  372|       |
  373|   521k|            return ranges_polyfill::batch_next(
  374|   521k|                prefix_result.iterator,
  375|   521k|                ranges::distance(buf.view().begin(), result_it));
  376|   597k|        }
  377|       |
  378|   149k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   149k|            localized_number_formatting_options<CharT>{loc};
  383|   149k|#endif
  384|       |
  385|   149k|        SCN_TRY(
  ------------------
  |  |   71|   149k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   149k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   149k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 14.2k, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  14.2k|    }                                                  \
  |  |  |  |   70|   149k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   135k|            parse_digits_result,
  387|   135k|            parse_integer_digits_with_thsep(
  388|   135k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   135k|                prefix_result.parsed_base, locale_options));
  390|   135k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   135k|            parse_digits_result;
  392|       |
  393|   135k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 510, False: 135k]
  ------------------
  394|    510|            if (auto e = check_thsep_grouping(
  395|    510|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    510|                    thsep_indices, locale_options.grouping);
  397|    510|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    510|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 486, False: 24]
  |  |  ------------------
  ------------------
  398|    486|                return unexpected(e);
  399|    486|            }
  400|    510|        }
  401|       |
  402|   135k|        auto nothsep_source_view =
  403|   135k|            std::basic_string_view<CharT>{nothsep_source};
  404|   135k|        SCN_TRY(
  ------------------
  |  |   71|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 228, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    228|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    228|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    228|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    228|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    228|    }                                                  \
  |  |  |  |   70|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   134k|            nothsep_source_it,
  406|   134k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   134k|                                prefix_result.parsed_base));
  408|       |
  409|   134k|        return ranges_polyfill::batch_next(
  410|   134k|            prefix_result.iterator,
  411|   134k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   134k|                ranges::ssize(thsep_indices));
  413|   135k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   593k|    {
  335|   593k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   593k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   593k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   593k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   593k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 593k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   593k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   593k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   593k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   593k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 7.68k, False: 585k]
  ------------------
  339|  7.68k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  7.68k|                return unexpected_scan_error(
  341|  7.68k|                    scan_error::invalid_scanned_value,
  342|  7.68k|                    "Unexpected '-' sign when parsing an "
  343|  7.68k|                    "unsigned value");
  344|  7.68k|            }
  345|  7.68k|            else {
  346|  7.68k|                if (specs.type ==
  347|  7.68k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  7.68k|                    return unexpected_scan_error(
  349|  7.68k|                        scan_error::invalid_scanned_value,
  350|  7.68k|                        "'u'-option disallows negative values");
  351|  7.68k|                }
  352|  7.68k|            }
  353|  7.68k|        }
  354|       |
  355|   585k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 157k, False: 427k]
  ------------------
  356|   157k|            value = T{0};
  357|   157k|            return std::next(prefix_result.iterator);
  358|   157k|        }
  359|       |
  360|   427k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   427k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 345k, False: 82.3k]
  |  |  ------------------
  ------------------
  361|   345k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   345k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   345k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   345k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 88, False: 345k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     88|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     88|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     88|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     88|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     88|    }                                                  \
  |  |  |  |   70|   345k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   345k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   345k|                    parse_integer_digits_without_thsep(
  363|   345k|                        ranges::subrange{prefix_result.iterator,
  364|   345k|                                         ranges::end(range)},
  365|   345k|                        prefix_result.parsed_base));
  366|       |
  367|   345k|            auto buf = make_contiguous_buffer(
  368|   345k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   345k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   345k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   345k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   345k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   345k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 73.2k, False: 271k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  73.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  73.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  73.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  73.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  73.2k|    }                                                  \
  |  |  |  |   70|   345k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   271k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   271k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   271k|                                        prefix_result.parsed_base));
  372|       |
  373|   271k|            return ranges_polyfill::batch_next(
  374|   271k|                prefix_result.iterator,
  375|   271k|                ranges::distance(buf.view().begin(), result_it));
  376|   345k|        }
  377|       |
  378|  82.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  82.3k|            localized_number_formatting_options<CharT>{loc};
  383|  82.3k|#endif
  384|       |
  385|  82.3k|        SCN_TRY(
  ------------------
  |  |   71|  82.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  82.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  82.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  82.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 12.8k, False: 69.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  12.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  12.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  12.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  12.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  12.8k|    }                                                  \
  |  |  |  |   70|  82.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  69.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  69.5k|            parse_digits_result,
  387|  69.5k|            parse_integer_digits_with_thsep(
  388|  69.5k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  69.5k|                prefix_result.parsed_base, locale_options));
  390|  69.5k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  69.5k|            parse_digits_result;
  392|       |
  393|  69.5k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 300, False: 69.2k]
  ------------------
  394|    300|            if (auto e = check_thsep_grouping(
  395|    300|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    300|                    thsep_indices, locale_options.grouping);
  397|    300|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    300|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 294, False: 6]
  |  |  ------------------
  ------------------
  398|    294|                return unexpected(e);
  399|    294|            }
  400|    300|        }
  401|       |
  402|  69.2k|        auto nothsep_source_view =
  403|  69.2k|            std::basic_string_view<CharT>{nothsep_source};
  404|  69.2k|        SCN_TRY(
  ------------------
  |  |   71|  69.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  69.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  69.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  69.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.23k, False: 67.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.23k|    }                                                  \
  |  |  |  |   70|  69.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  67.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  67.9k|            nothsep_source_it,
  406|  67.9k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  67.9k|                                prefix_result.parsed_base));
  408|       |
  409|  67.9k|        return ranges_polyfill::batch_next(
  410|  67.9k|            prefix_result.iterator,
  411|  67.9k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  67.9k|                ranges::ssize(thsep_indices));
  413|  69.2k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   729k|    {
  335|   729k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   729k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   729k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   729k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   729k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 729k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   729k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   729k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   729k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   729k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.28k, False: 721k]
  ------------------
  339|  8.28k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.28k|                return unexpected_scan_error(
  341|  8.28k|                    scan_error::invalid_scanned_value,
  342|  8.28k|                    "Unexpected '-' sign when parsing an "
  343|  8.28k|                    "unsigned value");
  344|  8.28k|            }
  345|  8.28k|            else {
  346|  8.28k|                if (specs.type ==
  347|  8.28k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.28k|                    return unexpected_scan_error(
  349|  8.28k|                        scan_error::invalid_scanned_value,
  350|  8.28k|                        "'u'-option disallows negative values");
  351|  8.28k|                }
  352|  8.28k|            }
  353|  8.28k|        }
  354|       |
  355|   721k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 178k, False: 542k]
  ------------------
  356|   178k|            value = T{0};
  357|   178k|            return std::next(prefix_result.iterator);
  358|   178k|        }
  359|       |
  360|   542k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   542k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 436k, False: 106k]
  |  |  ------------------
  ------------------
  361|   436k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   436k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   436k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   436k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 90, False: 436k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     90|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     90|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     90|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     90|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     90|    }                                                  \
  |  |  |  |   70|   436k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   436k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   436k|                    parse_integer_digits_without_thsep(
  363|   436k|                        ranges::subrange{prefix_result.iterator,
  364|   436k|                                         ranges::end(range)},
  365|   436k|                        prefix_result.parsed_base));
  366|       |
  367|   436k|            auto buf = make_contiguous_buffer(
  368|   436k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   436k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   436k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   436k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   436k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 71.7k, False: 364k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  71.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  71.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  71.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  71.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  71.7k|    }                                                  \
  |  |  |  |   70|   436k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   364k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   364k|                                        prefix_result.parsed_base));
  372|       |
  373|   364k|            return ranges_polyfill::batch_next(
  374|   364k|                prefix_result.iterator,
  375|   364k|                ranges::distance(buf.view().begin(), result_it));
  376|   436k|        }
  377|       |
  378|   106k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   106k|            localized_number_formatting_options<CharT>{loc};
  383|   106k|#endif
  384|       |
  385|   106k|        SCN_TRY(
  ------------------
  |  |   71|   106k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   106k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   106k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.1k, False: 93.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.1k|    }                                                  \
  |  |  |  |   70|   106k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  93.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|  93.0k|            parse_digits_result,
  387|  93.0k|            parse_integer_digits_with_thsep(
  388|  93.0k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|  93.0k|                prefix_result.parsed_base, locale_options));
  390|  93.0k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|  93.0k|            parse_digits_result;
  392|       |
  393|  93.0k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 342, False: 92.6k]
  ------------------
  394|    342|            if (auto e = check_thsep_grouping(
  395|    342|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    342|                    thsep_indices, locale_options.grouping);
  397|    342|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    342|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 336, False: 6]
  |  |  ------------------
  ------------------
  398|    336|                return unexpected(e);
  399|    336|            }
  400|    342|        }
  401|       |
  402|  92.6k|        auto nothsep_source_view =
  403|  92.6k|            std::basic_string_view<CharT>{nothsep_source};
  404|  92.6k|        SCN_TRY(
  ------------------
  |  |   71|  92.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  92.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  92.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  92.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 394, False: 92.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    394|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    394|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    394|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    394|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    394|    }                                                  \
  |  |  |  |   70|  92.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  92.2k|            nothsep_source_it,
  406|  92.2k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|  92.2k|                                prefix_result.parsed_base));
  408|       |
  409|  92.2k|        return ranges_polyfill::batch_next(
  410|  92.2k|            prefix_result.iterator,
  411|  92.2k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|  92.2k|                ranges::ssize(thsep_indices));
  413|  92.6k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeEEEOSG_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
  334|   766k|    {
  335|   766k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   766k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   766k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   766k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   766k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 766k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   766k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   766k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   766k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   766k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 8.64k, False: 758k]
  ------------------
  339|  8.64k|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|  8.64k|                return unexpected_scan_error(
  341|  8.64k|                    scan_error::invalid_scanned_value,
  342|  8.64k|                    "Unexpected '-' sign when parsing an "
  343|  8.64k|                    "unsigned value");
  344|  8.64k|            }
  345|  8.64k|            else {
  346|  8.64k|                if (specs.type ==
  347|  8.64k|                    detail::presentation_type::int_unsigned_decimal) {
  348|  8.64k|                    return unexpected_scan_error(
  349|  8.64k|                        scan_error::invalid_scanned_value,
  350|  8.64k|                        "'u'-option disallows negative values");
  351|  8.64k|                }
  352|  8.64k|            }
  353|  8.64k|        }
  354|       |
  355|   758k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 180k, False: 577k]
  ------------------
  356|   180k|            value = T{0};
  357|   180k|            return std::next(prefix_result.iterator);
  358|   180k|        }
  359|       |
  360|   577k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   577k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 463k, False: 114k]
  |  |  ------------------
  ------------------
  361|   463k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|   463k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   463k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   463k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 92, False: 463k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|     92|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|     92|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     92|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|     92|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|     92|    }                                                  \
  |  |  |  |   70|   463k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|   463k|                    parse_integer_digits_without_thsep(
  363|   463k|                        ranges::subrange{prefix_result.iterator,
  364|   463k|                                         ranges::end(range)},
  365|   463k|                        prefix_result.parsed_base));
  366|       |
  367|   463k|            auto buf = make_contiguous_buffer(
  368|   463k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|   463k|            SCN_TRY(result_it,
  ------------------
  |  |   71|   463k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   463k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   463k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   463k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 71.1k, False: 391k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  71.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  71.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  71.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  71.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  71.1k|    }                                                  \
  |  |  |  |   70|   463k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|   391k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|   391k|                                        prefix_result.parsed_base));
  372|       |
  373|   391k|            return ranges_polyfill::batch_next(
  374|   391k|                prefix_result.iterator,
  375|   391k|                ranges::distance(buf.view().begin(), result_it));
  376|   463k|        }
  377|       |
  378|   114k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|   114k|            localized_number_formatting_options<CharT>{loc};
  383|   114k|#endif
  384|       |
  385|   114k|        SCN_TRY(
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 13.2k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  13.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  13.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  13.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  13.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  13.2k|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|   101k|            parse_digits_result,
  387|   101k|            parse_integer_digits_with_thsep(
  388|   101k|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|   101k|                prefix_result.parsed_base, locale_options));
  390|   101k|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|   101k|            parse_digits_result;
  392|       |
  393|   101k|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 350, False: 100k]
  ------------------
  394|    350|            if (auto e = check_thsep_grouping(
  395|    350|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|    350|                    thsep_indices, locale_options.grouping);
  397|    350|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|    350|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 344, False: 6]
  |  |  ------------------
  ------------------
  398|    344|                return unexpected(e);
  399|    344|            }
  400|    350|        }
  401|       |
  402|   100k|        auto nothsep_source_view =
  403|   100k|            std::basic_string_view<CharT>{nothsep_source};
  404|   100k|        SCN_TRY(
  ------------------
  |  |   71|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 120, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    120|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    120|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    120|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    120|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    120|    }                                                  \
  |  |  |  |   70|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|   100k|            nothsep_source_it,
  406|   100k|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|   100k|                                prefix_result.parsed_base));
  408|       |
  409|   100k|        return ranges_polyfill::batch_next(
  410|   100k|            prefix_result.iterator,
  411|   100k|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|   100k|                ranges::ssize(thsep_indices));
  413|   100k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  24.5k|    {
  324|  24.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  24.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  24.5k|        return read_default_with_base(range, value, 0);
  326|  24.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  24.5k|    {
  287|  24.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  24.5k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  24.5k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  24.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  24.5k|                return unexpected_scan_error(
  293|  24.5k|                    scan_error::invalid_scanned_value,
  294|  24.5k|                    "Unexpected '-' sign when parsing an "
  295|  24.5k|                    "unsigned value");
  296|  24.5k|            }
  297|  24.5k|        }
  298|       |
  299|  24.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 24.5k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  24.5k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.5k|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  24.5k|                                     ranges::subrange{prefix_result.iterator,
  306|  24.5k|                                                      ranges::end(range)},
  307|  24.5k|                                     prefix_result.parsed_base));
  308|       |
  309|  24.5k|        auto buf = make_contiguous_buffer(
  310|  24.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  24.5k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  24.5k|    }
_ZN3scn2v24impl20parse_integer_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEEEESH_i:
  120|   800k|{
  121|   800k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  |   71|   800k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   800k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   800k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   800k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 800k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   800k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   800k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|   800k|    auto [base_prefix_begin_it, sign] = sign_result;
  123|       |
  124|   800k|    auto [digits_begin_it, parsed_base, parsed_zero] =
  125|   800k|        parse_integer_base_prefix(
  126|   800k|            ranges::subrange{base_prefix_begin_it, ranges::end(range)}, base);
  127|       |
  128|   800k|    if (parsed_zero) {
  ------------------
  |  Branch (128:9): [True: 0, False: 800k]
  ------------------
  129|      0|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (129:13): [True: 0, False: 0]
  ------------------
  130|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (130:13): [True: 0, False: 0]
  ------------------
  131|      0|            digits_begin_it = ranges_polyfill::prev_backtrack(
  132|      0|                digits_begin_it, ranges::begin(range));
  133|      0|        }
  134|      0|        else {
  135|      0|            parsed_zero = false;
  136|      0|        }
  137|      0|    }
  138|   800k|    else {
  139|   800k|        if (digits_begin_it == ranges::end(range) ||
  ------------------
  |  Branch (139:13): [True: 0, False: 800k]
  ------------------
  140|   800k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (140:13): [True: 702k, False: 98.0k]
  ------------------
  141|   702k|            digits_begin_it = base_prefix_begin_it;
  142|   702k|        }
  143|   800k|    }
  144|       |
  145|   800k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (145:9): [True: 800k, False: 0]
  ------------------
  146|   800k|        sign = sign_type::plus_sign;
  147|   800k|    }
  148|   800k|    return parse_integer_prefix_result<ranges::iterator_t<Range>>{
  149|   800k|        digits_begin_it, parsed_base, sign, parsed_zero};
  150|   800k|}
_ZN3scn2v24impl25parse_integer_base_prefixIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_i:
   87|   800k|{
   88|   800k|    switch (base) {
   89|  98.0k|        case 2:
  ------------------
  |  Branch (89:9): [True: 98.0k, False: 702k]
  ------------------
   90|       |            // allow 0b/0B
   91|  98.0k|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
   92|  98.0k|                    false};
   93|       |
   94|  98.0k|        case 8: {
  ------------------
  |  Branch (94:9): [True: 98.0k, False: 702k]
  ------------------
   95|       |            // allow 0o/0O/0
   96|  98.0k|            bool zero_parsed = false;
   97|  98.0k|            auto it = apply_opt(
   98|  98.0k|                parse_integer_oct_base_prefix(range, zero_parsed), range);
   99|  98.0k|            return {it, 8, zero_parsed};
  100|      0|        }
  101|       |
  102|   163k|        case 16:
  ------------------
  |  Branch (102:9): [True: 163k, False: 637k]
  ------------------
  103|       |            // allow 0x/0X
  104|   163k|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
  105|   163k|                    false};
  106|       |
  107|   343k|        case 0:
  ------------------
  |  Branch (107:9): [True: 343k, False: 457k]
  ------------------
  108|       |            // detect base
  109|   343k|            return parse_integer_base_prefix_for_detection(SCN_FWD(range));
  ------------------
  |  |  248|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  110|       |
  111|  98.0k|        default:
  ------------------
  |  Branch (111:9): [True: 98.0k, False: 702k]
  ------------------
  112|       |            // no base prefix allowed
  113|  98.0k|            return {ranges::begin(range), base, false};
  114|   800k|    }
  115|   800k|}
_ZN3scn2v24impl29parse_integer_bin_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   37|   441k|{
   38|   441k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0b");
  ------------------
  |  |  248|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   39|   441k|}
_ZN3scn2v24impl29parse_integer_oct_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_Rb:
   52|   441k|{
   53|   441k|    if (auto r = read_matching_string_classic_nocase(range, "0o")) {
  ------------------
  |  Branch (53:14): [True: 0, False: 441k]
  ------------------
   54|      0|        return *r;
   55|      0|    }
   56|       |
   57|   441k|    if (auto r = read_matching_code_unit(range, '0')) {
  ------------------
  |  Branch (57:14): [True: 0, False: 441k]
  ------------------
   58|      0|        zero_parsed = true;
   59|      0|        return *r;
   60|      0|    }
   61|       |
   62|   441k|    return unexpected(parse_error::error);
   63|   441k|}
_ZN3scn2v24impl29parse_integer_hex_base_prefixIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_14parse_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEEEOSH_:
   44|   506k|{
   45|   506k|    return read_matching_string_classic_nocase(SCN_FWD(range), "0x");
  ------------------
  |  |  248|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   46|   506k|}
_ZN3scn2v24impl39parse_integer_base_prefix_for_detectionIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENSt3__15tupleIJNS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEibEEEOSH_:
   68|   343k|{
   69|   343k|    if (auto r = parse_integer_hex_base_prefix(range)) {
  ------------------
  |  Branch (69:14): [True: 0, False: 343k]
  ------------------
   70|      0|        return {*r, 16, false};
   71|      0|    }
   72|   343k|    if (auto r = parse_integer_bin_base_prefix(range)) {
  ------------------
  |  Branch (72:14): [True: 0, False: 343k]
  ------------------
   73|      0|        return {*r, 2, false};
   74|      0|    }
   75|   343k|    {
   76|   343k|        bool zero_parsed{false};
   77|   343k|        if (auto r = parse_integer_oct_base_prefix(range, zero_parsed)) {
  ------------------
  |  Branch (77:18): [True: 0, False: 343k]
  ------------------
   78|      0|            return {*r, 8, zero_parsed};
   79|      0|        }
   80|   343k|    }
   81|   343k|    return {ranges::begin(range), 10, false};
   82|   343k|}
_ZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_i:
  155|   702k|{
  156|   702k|    using char_type = detail::char_t<Range>;
  157|       |
  158|   702k|    if constexpr (ranges::contiguous_range<Range>) {
  ------------------
  |  Branch (158:19): [Folded - Ignored]
  ------------------
  159|   702k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  160|   702k|            return unexpected_scan_error(
  161|   702k|                scan_error::invalid_scanned_value,
  162|   702k|                "Failed to parse integer: No digits found");
  163|   702k|        }
  164|   702k|        return ranges::end(range);
  165|   702k|    }
  166|   702k|    else {
  167|   702k|        return read_while1_code_unit(
  168|   702k|                   range, [&](char_type ch)
  169|   702k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
  170|   702k|            .transform_error(map_parse_error_to_scan_error(
  171|   702k|                scan_error::invalid_scanned_value,
  172|   702k|                "Failed to parse integer: No digits found"));
  173|   702k|    }
  174|   702k|}
_ZZN3scn2v24impl34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESG_iENKUlwE_clEw:
  169|   996k|                              SCN_NOEXCEPT { return char_to_int(ch) < base; })
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  24.5k|    {
  324|  24.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  24.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  24.5k|        return read_default_with_base(range, value, 0);
  326|  24.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  24.5k|    {
  287|  24.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  24.5k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  24.5k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  24.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  24.5k|                return unexpected_scan_error(
  293|  24.5k|                    scan_error::invalid_scanned_value,
  294|  24.5k|                    "Unexpected '-' sign when parsing an "
  295|  24.5k|                    "unsigned value");
  296|  24.5k|            }
  297|  24.5k|        }
  298|       |
  299|  24.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 24.5k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  24.5k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.5k|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  24.5k|                                     ranges::subrange{prefix_result.iterator,
  306|  24.5k|                                                      ranges::end(range)},
  307|  24.5k|                                     prefix_result.parsed_base));
  308|       |
  309|  24.5k|        auto buf = make_contiguous_buffer(
  310|  24.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  24.5k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  24.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  24.5k|    {
  324|  24.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  24.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  24.5k|        return read_default_with_base(range, value, 0);
  326|  24.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  24.5k|    {
  287|  24.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  24.5k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  24.5k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  24.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  292|  24.5k|                return unexpected_scan_error(
  293|  24.5k|                    scan_error::invalid_scanned_value,
  294|  24.5k|                    "Unexpected '-' sign when parsing an "
  295|  24.5k|                    "unsigned value");
  296|  24.5k|            }
  297|  24.5k|        }
  298|       |
  299|  24.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 24.5k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  24.5k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.5k|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  24.5k|                                     ranges::subrange{prefix_result.iterator,
  306|  24.5k|                                                      ranges::end(range)},
  307|  24.5k|                                     prefix_result.parsed_base));
  308|       |
  309|  24.5k|        auto buf = make_contiguous_buffer(
  310|  24.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  24.5k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  24.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  24.5k|    {
  324|  24.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  24.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  24.5k|        return read_default_with_base(range, value, 0);
  326|  24.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  24.5k|    {
  287|  24.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  24.5k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  24.5k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  24.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 24.5k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  24.5k|        }
  298|       |
  299|  24.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 24.5k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  24.5k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.5k|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  24.5k|                                     ranges::subrange{prefix_result.iterator,
  306|  24.5k|                                                      ranges::end(range)},
  307|  24.5k|                                     prefix_result.parsed_base));
  308|       |
  309|  24.5k|        auto buf = make_contiguous_buffer(
  310|  24.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  24.5k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  24.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  24.5k|    {
  324|  24.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  24.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  24.5k|        return read_default_with_base(range, value, 0);
  326|  24.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  24.5k|    {
  287|  24.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  24.5k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  24.5k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  24.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 24.5k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  24.5k|        }
  298|       |
  299|  24.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 24.5k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  24.5k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.5k|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  24.5k|                                     ranges::subrange{prefix_result.iterator,
  306|  24.5k|                                                      ranges::end(range)},
  307|  24.5k|                                     prefix_result.parsed_base));
  308|       |
  309|  24.5k|        auto buf = make_contiguous_buffer(
  310|  24.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  24.5k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  24.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE12read_defaultIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEOSI_RT0_NS9_10locale_refE:
  323|  24.5k|    {
  324|  24.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  227|  24.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  325|  24.5k|        return read_default_with_base(range, value, 0);
  326|  24.5k|    }
_ZN3scn2v24impl19reader_impl_for_intIwE22read_default_with_baseIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RT0_i:
  286|  24.5k|    {
  287|  24.5k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|  24.5k|                                   .transform_error(make_eof_scan_error));
  289|       |
  290|  24.5k|        if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (290:23): [Folded - Ignored]
  ------------------
  291|  24.5k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (291:17): [True: 0, False: 24.5k]
  ------------------
  292|      0|                return unexpected_scan_error(
  293|      0|                    scan_error::invalid_scanned_value,
  294|      0|                    "Unexpected '-' sign when parsing an "
  295|      0|                    "unsigned value");
  296|      0|            }
  297|  24.5k|        }
  298|       |
  299|  24.5k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (299:13): [True: 0, False: 24.5k]
  ------------------
  300|      0|            value = T{0};
  301|      0|            return std::next(prefix_result.iterator);
  302|      0|        }
  303|       |
  304|  24.5k|        SCN_TRY(after_digits_it, parse_integer_digits_without_thsep(
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 24.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  24.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  24.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  24.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  24.5k|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  24.5k|                                     ranges::subrange{prefix_result.iterator,
  306|  24.5k|                                                      ranges::end(range)},
  307|  24.5k|                                     prefix_result.parsed_base));
  308|       |
  309|  24.5k|        auto buf = make_contiguous_buffer(
  310|  24.5k|            ranges::subrange{prefix_result.iterator, after_digits_it});
  311|  24.5k|        SCN_TRY(result_it,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|      0|                parse_integer_value(buf.view(), value, prefix_result.sign,
  313|      0|                                    prefix_result.parsed_base));
  314|       |
  315|      0|        return ranges_polyfill::batch_next(
  316|      0|            prefix_result.iterator,
  317|      0|            ranges::distance(buf.view().begin(), result_it));
  318|  24.5k|    }
_ZN3scn2v24impl31parse_integer_digits_with_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEwEENS0_13scan_expectedINSt3__15tupleIJDTclL_ZNS4_16function_objects5beginEEclsr3stdE7declvalIRT_EEEENSF_12basic_stringIT0_NSF_11char_traitsISM_EENSF_9allocatorISM_EEEENSL_IcNSN_IcEENSP_IcEEEEEEEEESI_iRKNS1_35localized_number_formatting_optionsISM_EE:
  184|  98.0k|{
  185|  98.0k|    std::basic_string<CharT> output;
  186|  98.0k|    std::string thsep_indices;
  187|  98.0k|    auto it = ranges::begin(range);
  188|  98.0k|    bool digit_matched = false;
  189|  98.0k|    for (; it != ranges::end(range); ++it) {
  ------------------
  |  Branch (189:12): [True: 98.0k, False: 0]
  ------------------
  190|  98.0k|        if (*it == locale_options.thousands_sep) {
  ------------------
  |  Branch (190:13): [True: 0, False: 98.0k]
  ------------------
  191|      0|            thsep_indices.push_back(static_cast<char>(
  192|      0|                ranges_polyfill::pos_distance(ranges::begin(range), it)));
  193|      0|        }
  194|  98.0k|        else if (char_to_int(*it) >= base) {
  ------------------
  |  Branch (194:18): [True: 98.0k, False: 0]
  ------------------
  195|  98.0k|            break;
  196|  98.0k|        }
  197|      0|        else {
  198|      0|            output.push_back(*it);
  199|      0|            digit_matched = true;
  200|      0|        }
  201|  98.0k|    }
  202|  98.0k|    if (SCN_UNLIKELY(!digit_matched)) {
  ------------------
  |  |  153|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 98.0k, False: 0]
  |  |  ------------------
  ------------------
  203|  98.0k|        return unexpected_scan_error(
  204|  98.0k|            scan_error::invalid_scanned_value,
  205|  98.0k|            "Failed to parse integer: No digits found");
  206|  98.0k|    }
  207|      0|    return std::tuple{it, output, thsep_indices};
  208|  98.0k|}
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEaEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  98.0k|    {
  335|  98.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  98.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 98.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  98.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  98.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  98.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 98.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  98.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 98.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  98.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  98.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 81.6k, False: 16.3k]
  |  |  ------------------
  ------------------
  361|  81.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  81.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  81.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  81.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 65.3k, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  65.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  65.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  65.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  65.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  65.3k|    }                                                  \
  |  |  |  |   70|  81.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  16.3k|                    parse_integer_digits_without_thsep(
  363|  16.3k|                        ranges::subrange{prefix_result.iterator,
  364|  16.3k|                                         ranges::end(range)},
  365|  16.3k|                        prefix_result.parsed_base));
  366|       |
  367|  16.3k|            auto buf = make_contiguous_buffer(
  368|  16.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  16.3k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.3k, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.3k|    }                                                  \
  |  |  |  |   70|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      2|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      2|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      2|                                        prefix_result.parsed_base));
  372|       |
  373|      2|            return ranges_polyfill::batch_next(
  374|      2|                prefix_result.iterator,
  375|      2|                ranges::distance(buf.view().begin(), result_it));
  376|  16.3k|        }
  377|       |
  378|  16.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  16.3k|            localized_number_formatting_options<CharT>{loc};
  383|  16.3k|#endif
  384|       |
  385|  16.3k|        SCN_TRY(
  ------------------
  |  |   71|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.3k|    }                                                  \
  |  |  |  |   70|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEiEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   114k|    {
  335|   114k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   114k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   114k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 114k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|   114k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 114k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|   114k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 98.0k, False: 16.3k]
  |  |  ------------------
  ------------------
  361|  98.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  98.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 81.6k, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  81.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  81.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  81.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  81.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  81.6k|    }                                                  \
  |  |  |  |   70|  98.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  16.3k|                    parse_integer_digits_without_thsep(
  363|  16.3k|                        ranges::subrange{prefix_result.iterator,
  364|  16.3k|                                         ranges::end(range)},
  365|  16.3k|                        prefix_result.parsed_base));
  366|       |
  367|  16.3k|            auto buf = make_contiguous_buffer(
  368|  16.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  16.3k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  16.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  16.3k|                                        prefix_result.parsed_base));
  372|       |
  373|  16.3k|            return ranges_polyfill::batch_next(
  374|  16.3k|                prefix_result.iterator,
  375|  16.3k|                ranges::distance(buf.view().begin(), result_it));
  376|  16.3k|        }
  377|       |
  378|  16.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  16.3k|            localized_number_formatting_options<CharT>{loc};
  383|  16.3k|#endif
  384|       |
  385|  16.3k|        SCN_TRY(
  ------------------
  |  |   71|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.3k|    }                                                  \
  |  |  |  |   70|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEExEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   114k|    {
  335|   114k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   114k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   114k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 114k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  ------------------
  |  Branch (346:21): [True: 0, False: 0]
  ------------------
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|   114k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 114k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|   114k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 98.0k, False: 16.3k]
  |  |  ------------------
  ------------------
  361|  98.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  98.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 81.6k, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  81.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  81.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  81.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  81.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  81.6k|    }                                                  \
  |  |  |  |   70|  98.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  16.3k|                    parse_integer_digits_without_thsep(
  363|  16.3k|                        ranges::subrange{prefix_result.iterator,
  364|  16.3k|                                         ranges::end(range)},
  365|  16.3k|                        prefix_result.parsed_base));
  366|       |
  367|  16.3k|            auto buf = make_contiguous_buffer(
  368|  16.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  16.3k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  16.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  16.3k|                                        prefix_result.parsed_base));
  372|       |
  373|  16.3k|            return ranges_polyfill::batch_next(
  374|  16.3k|                prefix_result.iterator,
  375|  16.3k|                ranges::distance(buf.view().begin(), result_it));
  376|  16.3k|        }
  377|       |
  378|  16.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  16.3k|            localized_number_formatting_options<CharT>{loc};
  383|  16.3k|#endif
  384|       |
  385|  16.3k|        SCN_TRY(
  ------------------
  |  |   71|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.3k|    }                                                  \
  |  |  |  |   70|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEhEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|  98.0k|    {
  335|  98.0k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|  98.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 98.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  98.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|  98.0k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|  98.0k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 98.0k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|  98.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 98.0k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|  98.0k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|  98.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 81.6k, False: 16.3k]
  |  |  ------------------
  ------------------
  361|  81.6k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  81.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  81.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  81.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 65.3k, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  65.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  65.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  65.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  65.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  65.3k|    }                                                  \
  |  |  |  |   70|  81.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  16.3k|                    parse_integer_digits_without_thsep(
  363|  16.3k|                        ranges::subrange{prefix_result.iterator,
  364|  16.3k|                                         ranges::end(range)},
  365|  16.3k|                        prefix_result.parsed_base));
  366|       |
  367|  16.3k|            auto buf = make_contiguous_buffer(
  368|  16.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  16.3k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.3k, False: 4]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.3k|    }                                                  \
  |  |  |  |   70|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      4|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|      4|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|      4|                                        prefix_result.parsed_base));
  372|       |
  373|      4|            return ranges_polyfill::batch_next(
  374|      4|                prefix_result.iterator,
  375|      4|                ranges::distance(buf.view().begin(), result_it));
  376|  16.3k|        }
  377|       |
  378|  16.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  16.3k|            localized_number_formatting_options<CharT>{loc};
  383|  16.3k|#endif
  384|       |
  385|  16.3k|        SCN_TRY(
  ------------------
  |  |   71|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.3k|    }                                                  \
  |  |  |  |   70|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEjEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   114k|    {
  335|   114k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   114k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   114k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 114k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|   114k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 114k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|   114k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 98.0k, False: 16.3k]
  |  |  ------------------
  ------------------
  361|  98.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  98.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 81.6k, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  81.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  81.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  81.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  81.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  81.6k|    }                                                  \
  |  |  |  |   70|  98.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  16.3k|                    parse_integer_digits_without_thsep(
  363|  16.3k|                        ranges::subrange{prefix_result.iterator,
  364|  16.3k|                                         ranges::end(range)},
  365|  16.3k|                        prefix_result.parsed_base));
  366|       |
  367|  16.3k|            auto buf = make_contiguous_buffer(
  368|  16.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  16.3k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  16.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  16.3k|                                        prefix_result.parsed_base));
  372|       |
  373|  16.3k|            return ranges_polyfill::batch_next(
  374|  16.3k|                prefix_result.iterator,
  375|  16.3k|                ranges::distance(buf.view().begin(), result_it));
  376|  16.3k|        }
  377|       |
  378|  16.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  16.3k|            localized_number_formatting_options<CharT>{loc};
  383|  16.3k|#endif
  384|       |
  385|  16.3k|        SCN_TRY(
  ------------------
  |  |   71|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.3k|    }                                                  \
  |  |  |  |   70|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }
_ZN3scn2v24impl19reader_impl_for_intIwE10read_specsIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tELNS6_13subrange_kindE0EEEyEENS0_13scan_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEEEOSJ_RKNS9_12format_specsERT0_NS9_10locale_refE:
  334|   114k|    {
  335|   114k|        SCN_TRY(prefix_result, parse_integer_prefix(range, specs.get_base(0))
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  336|   114k|                                   .transform_error(make_eof_scan_error));
  337|       |
  338|   114k|        if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (338:13): [True: 0, False: 114k]
  ------------------
  339|      0|            if constexpr (!std::is_signed_v<T>) {
  ------------------
  |  Branch (339:27): [Folded - Ignored]
  ------------------
  340|      0|                return unexpected_scan_error(
  341|      0|                    scan_error::invalid_scanned_value,
  342|      0|                    "Unexpected '-' sign when parsing an "
  343|      0|                    "unsigned value");
  344|      0|            }
  345|      0|            else {
  346|      0|                if (specs.type ==
  347|      0|                    detail::presentation_type::int_unsigned_decimal) {
  348|      0|                    return unexpected_scan_error(
  349|      0|                        scan_error::invalid_scanned_value,
  350|      0|                        "'u'-option disallows negative values");
  351|      0|                }
  352|      0|            }
  353|      0|        }
  354|       |
  355|   114k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (355:13): [True: 0, False: 114k]
  ------------------
  356|      0|            value = T{0};
  357|      0|            return std::next(prefix_result.iterator);
  358|      0|        }
  359|       |
  360|   114k|        if (SCN_LIKELY(!specs.localized)) {
  ------------------
  |  |  152|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 98.0k, False: 16.3k]
  |  |  ------------------
  ------------------
  361|  98.0k|            SCN_TRY(after_digits_it,
  ------------------
  |  |   71|  98.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 81.6k, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  81.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  81.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  81.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  81.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  81.6k|    }                                                  \
  |  |  |  |   70|  98.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  362|  16.3k|                    parse_integer_digits_without_thsep(
  363|  16.3k|                        ranges::subrange{prefix_result.iterator,
  364|  16.3k|                                         ranges::end(range)},
  365|  16.3k|                        prefix_result.parsed_base));
  366|       |
  367|  16.3k|            auto buf = make_contiguous_buffer(
  368|  16.3k|                ranges::subrange{prefix_result.iterator, after_digits_it});
  369|  16.3k|            SCN_TRY(result_it,
  ------------------
  |  |   71|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 16.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  16.3k|                    parse_integer_value(buf.view(), value, prefix_result.sign,
  371|  16.3k|                                        prefix_result.parsed_base));
  372|       |
  373|  16.3k|            return ranges_polyfill::batch_next(
  374|  16.3k|                prefix_result.iterator,
  375|  16.3k|                ranges::distance(buf.view().begin(), result_it));
  376|  16.3k|        }
  377|       |
  378|  16.3k|        auto locale_options =
  379|       |#if SCN_DISABLE_LOCALE
  380|       |            localized_number_formatting_options<CharT>{};
  381|       |#else
  382|  16.3k|            localized_number_formatting_options<CharT>{loc};
  383|  16.3k|#endif
  384|       |
  385|  16.3k|        SCN_TRY(
  ------------------
  |  |   71|  16.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  16.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  16.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  16.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 16.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  16.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  16.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  16.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  16.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  16.3k|    }                                                  \
  |  |  |  |   70|  16.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  386|      0|            parse_digits_result,
  387|      0|            parse_integer_digits_with_thsep(
  388|      0|                ranges::subrange{prefix_result.iterator, ranges::end(range)},
  389|      0|                prefix_result.parsed_base, locale_options));
  390|      0|        const auto& [after_digits_it, nothsep_source, thsep_indices] =
  391|      0|            parse_digits_result;
  392|       |
  393|      0|        if (!thsep_indices.empty()) {
  ------------------
  |  Branch (393:13): [True: 0, False: 0]
  ------------------
  394|      0|            if (auto e = check_thsep_grouping(
  395|      0|                    ranges::subrange{prefix_result.iterator, after_digits_it},
  396|      0|                    thsep_indices, locale_options.grouping);
  397|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|                return unexpected(e);
  399|      0|            }
  400|      0|        }
  401|       |
  402|      0|        auto nothsep_source_view =
  403|      0|            std::basic_string_view<CharT>{nothsep_source};
  404|      0|        SCN_TRY(
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|            nothsep_source_it,
  406|      0|            parse_integer_value(nothsep_source_view, value, prefix_result.sign,
  407|      0|                                prefix_result.parsed_base));
  408|       |
  409|      0|        return ranges_polyfill::batch_next(
  410|      0|            prefix_result.iterator,
  411|      0|            ranges::distance(nothsep_source_view.begin(), nothsep_source_it) +
  412|      0|                ranges::ssize(thsep_indices));
  413|      0|    }

_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  6.55M|{
   69|  6.55M|    auto r = read_one_of_code_unit(range, "+-");
   70|  6.55M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 6.08M, False: 467k]
  ------------------
   71|  6.08M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 6.08M, False: 0]
  ------------------
   72|  6.08M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  6.08M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  6.08M|    }
   76|       |
   77|   467k|    auto& it = *r;
   78|   467k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 389k, False: 78.2k]
  ------------------
   79|   389k|        return std::pair{it, sign_type::minus_sign};
   80|   389k|    }
   81|  78.2k|    return std::pair{it, sign_type::plus_sign};
   82|   467k|}
_ZN3scn2v24impl11char_to_intEc:
   50|  51.6M|{
   51|  51.6M|    return char_to_int_table[static_cast<unsigned char>(ch)];
   52|  51.6M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  2.09k|{
  140|  2.09k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  2.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  2.09k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.01k, False: 74]
  ------------------
  143|  2.01k|        SCN_UNLIKELY_ATTR
  144|  2.01k|        return {scan_error::invalid_scanned_value,
  145|  2.01k|                "Invalid thousands separator grouping"};
  146|  2.01k|    }
  147|       |
  148|     74|    return {};
  149|  2.09k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  2.09k|{
  101|  2.09k|    transform_thsep_indices(
  102|  2.09k|        thsep_indices,
  103|  2.09k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  2.09k|    auto thsep_it = thsep_indices.rbegin();
  106|  2.09k|    for (auto grouping_it = grouping.begin();
  107|  2.09k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 2.09k]
  |  Branch (107:10): [True: 0, False: 2.09k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  2.09k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  2.09k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  2.09k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  15.8k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 14.7k, False: 1.10k]
  ------------------
  119|  14.7k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 984, False: 13.7k]
  ------------------
  120|    984|            return false;
  121|    984|        }
  122|  14.7k|    }
  123|       |
  124|  1.10k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 1.10k, False: 0]
  ------------------
  125|  1.10k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.03k, False: 74]
  ------------------
  126|  1.03k|            return false;
  127|  1.03k|        }
  128|  1.10k|    }
  129|       |
  130|     74|    SCN_CLANG_POP
  131|       |
  132|     74|    return true;
  133|  1.10k|}
_ZN3scn2v24impl23transform_thsep_indicesERNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEl:
   86|  4.39k|{
   87|  53.7k|    for (auto thsep_it = indices.rbegin(); thsep_it != indices.rend();
  ------------------
  |  Branch (87:44): [True: 49.3k, False: 4.39k]
  ------------------
   88|  49.3k|         ++thsep_it) {
   89|  49.3k|        const auto tmp = *thsep_it;
   90|  49.3k|        *thsep_it = static_cast<char>(last_thsep_index - tmp - 1);
   91|  49.3k|        last_thsep_index = static_cast<std::ptrdiff_t>(tmp);
   92|  49.3k|    }
   93|  4.39k|    indices.insert(indices.begin(), static_cast<char>(last_thsep_index));
   94|  4.39k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   277k|{
   69|   277k|    auto r = read_one_of_code_unit(range, "+-");
   70|   277k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 277k, False: 0]
  ------------------
   71|   277k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 277k, False: 0]
  ------------------
   72|   277k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   277k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   277k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISG_EEE4typeENS1_9sign_typeEEEEEOSG_:
   68|  6.36M|{
   69|  6.36M|    auto r = read_one_of_code_unit(range, "+-");
   70|  6.36M|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 5.96M, False: 394k]
  ------------------
   71|  5.96M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 5.96M, False: 0]
  ------------------
   72|  5.96M|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|  5.96M|        }
   74|      0|        return unexpected(eof_error::eof);
   75|  5.96M|    }
   76|       |
   77|   394k|    auto& it = *r;
   78|   394k|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 325k, False: 69.6k]
  ------------------
   79|   325k|        return std::pair{it, sign_type::minus_sign};
   80|   325k|    }
   81|  69.6k|    return std::pair{it, sign_type::plus_sign};
   82|   394k|}
_ZN3scn2v24impl11char_to_intEw:
   54|  26.4M|{
   55|  26.4M|#if WCHAR_MIN < 0
   56|  26.4M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (56:9): [True: 26.4M, False: 44.9k]
  |  Branch (56:20): [True: 25.4M, False: 990k]
  ------------------
   57|       |#else
   58|       |    if (ch <= 255) {
   59|       |#endif
   60|  25.4M|        return char_to_int(static_cast<char>(ch));
   61|  25.4M|    }
   62|  1.03M|    return 255;
   63|  26.4M|}
_ZN3scn2v24impl20check_thsep_groupingIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEELPv0EEENS0_10scan_errorEOT_NSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEENSF_17basic_string_viewIcSI_EE:
  139|  2.30k|{
  140|  2.30k|    SCN_EXPECT(!thsep_indices.empty());
  ------------------
  |  |  242|  2.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  141|       |
  142|  2.30k|    if (!check_thsep_grouping_impl(range, thsep_indices, grouping)) {
  ------------------
  |  Branch (142:9): [True: 2.23k, False: 62]
  ------------------
  143|  2.23k|        SCN_UNLIKELY_ATTR
  144|  2.23k|        return {scan_error::invalid_scanned_value,
  145|  2.23k|                "Invalid thousands separator grouping"};
  146|  2.23k|    }
  147|       |
  148|     62|    return {};
  149|  2.30k|}
_ZN3scn2v24impl25check_thsep_grouping_implIN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEEbRT_RNSt3__112basic_stringIcNSD_11char_traitsIcEENSD_9allocatorIcEEEENSD_17basic_string_viewIcSG_EE:
  100|  2.30k|{
  101|  2.30k|    transform_thsep_indices(
  102|  2.30k|        thsep_indices,
  103|  2.30k|        ranges::distance(ranges::begin(range), ranges::end(range)));
  104|       |
  105|  2.30k|    auto thsep_it = thsep_indices.rbegin();
  106|  2.30k|    for (auto grouping_it = grouping.begin();
  107|  2.30k|         grouping_it != grouping.end() && thsep_it != thsep_indices.rend() - 1;
  ------------------
  |  Branch (107:10): [True: 0, False: 2.30k]
  |  Branch (107:10): [True: 0, False: 2.30k]
  |  Branch (107:43): [True: 0, False: 0]
  ------------------
  108|  2.30k|         ++grouping_it, (void)++thsep_it) {
  109|      0|        if (*thsep_it != *grouping_it) {
  ------------------
  |  Branch (109:13): [True: 0, False: 0]
  ------------------
  110|      0|            return false;
  111|      0|        }
  112|      0|    }
  113|       |
  114|  2.30k|    SCN_CLANG_PUSH
  115|       |    // false positive
  116|  2.30k|    SCN_CLANG_IGNORE("-Wzero-as-null-pointer-constant")
  117|       |
  118|  16.5k|    for (; thsep_it < thsep_indices.rend() - 1; ++thsep_it) {
  ------------------
  |  Branch (118:12): [True: 15.0k, False: 1.43k]
  ------------------
  119|  15.0k|        if (*thsep_it != grouping.back()) {
  ------------------
  |  Branch (119:13): [True: 866, False: 14.2k]
  ------------------
  120|    866|            return false;
  121|    866|        }
  122|  15.0k|    }
  123|       |
  124|  1.43k|    if (thsep_it == thsep_indices.rend() - 1) {
  ------------------
  |  Branch (124:9): [True: 1.43k, False: 0]
  ------------------
  125|  1.43k|        if (*thsep_it > grouping.back()) {
  ------------------
  |  Branch (125:13): [True: 1.37k, False: 62]
  ------------------
  126|  1.37k|            return false;
  127|  1.37k|        }
  128|  1.43k|    }
  129|       |
  130|     62|    SCN_CLANG_POP
  131|       |
  132|     62|    return true;
  133|  1.43k|}
_ZN3scn2v24impl18parse_numeric_signIRN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINSt3__14pairINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISJ_EEE4typeENS1_9sign_typeEEEEEOSJ_:
   68|   800k|{
   69|   800k|    auto r = read_one_of_code_unit(range, "+-");
   70|   800k|    if (!r) {
  ------------------
  |  Branch (70:9): [True: 800k, False: 0]
  ------------------
   71|   800k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (71:13): [True: 800k, False: 0]
  ------------------
   72|   800k|            return std::pair{ranges::begin(range), sign_type::default_sign};
   73|   800k|        }
   74|      0|        return unexpected(eof_error::eof);
   75|   800k|    }
   76|       |
   77|      0|    auto& it = *r;
   78|      0|    if (*ranges::begin(range) == '-') {
  ------------------
  |  Branch (78:9): [True: 0, False: 0]
  ------------------
   79|      0|        return std::pair{it, sign_type::minus_sign};
   80|      0|    }
   81|      0|    return std::pair{it, sign_type::plus_sign};
   82|      0|}

_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  121|   268k|    {
  122|   268k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   268k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   268k|                          basic_contiguous_scan_context<char_type>>) {
  126|   268k|            auto rd = make_reader<T, char_type>();
  127|   268k|            return impl(rd, range, value);
  128|   268k|        }
  129|   268k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   268k|            auto rd = make_reader<T, char_type>();
  131|   268k|            if (!is_segment_contiguous(range)) {
  132|   268k|                return impl(rd, range, value);
  133|   268k|            }
  134|   268k|            auto crange = get_as_contiguous(range);
  135|   268k|            SCN_TRY(it, impl(rd, crange, value));
  136|   268k|            return ranges_polyfill::batch_next(
  137|   268k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   268k|        }
  139|   268k|        else {
  140|   268k|            SCN_EXPECT(false);
  141|   268k|            SCN_UNREACHABLE;
  142|   268k|        }
  143|   268k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   268k|    {
  112|   268k|        SCN_TRY(it,
  ------------------
  |  |   71|   268k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   268k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   268k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 747, False: 267k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    747|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    747|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    747|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    747|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    747|    }                                                  \
  |  |  |  |   70|   268k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   267k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   267k|                    .transform_error(make_eof_scan_error));
  115|   267k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   267k|                               loc);
  117|   268k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKcS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  6.58M|{
   43|  6.58M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.58M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 20.1k, False: 6.56M]
  |  |  ------------------
  ------------------
   44|  20.1k|        return unexpected(e);
   45|  20.1k|    }
   46|       |
   47|  6.56M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 6.56M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  6.56M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  6.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  6.56M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  121|   372k|    {
  122|   372k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   372k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   372k|                          basic_contiguous_scan_context<char_type>>) {
  126|   372k|            auto rd = make_reader<T, char_type>();
  127|   372k|            return impl(rd, range, value);
  128|   372k|        }
  129|   372k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   372k|            auto rd = make_reader<T, char_type>();
  131|   372k|            if (!is_segment_contiguous(range)) {
  132|   372k|                return impl(rd, range, value);
  133|   372k|            }
  134|   372k|            auto crange = get_as_contiguous(range);
  135|   372k|            SCN_TRY(it, impl(rd, crange, value));
  136|   372k|            return ranges_polyfill::batch_next(
  137|   372k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   372k|        }
  139|   372k|        else {
  140|   372k|            SCN_EXPECT(false);
  141|   372k|            SCN_UNREACHABLE;
  142|   372k|        }
  143|   372k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   372k|    {
  112|   372k|        SCN_TRY(it,
  ------------------
  |  |   71|   372k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   372k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   372k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.51k, False: 370k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.51k|    }                                                  \
  |  |  |  |   70|   372k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   370k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   370k|                    .transform_error(make_eof_scan_error));
  115|   370k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   370k|                               loc);
  117|   372k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  121|   400k|    {
  122|   400k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   400k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   400k|                          basic_contiguous_scan_context<char_type>>) {
  126|   400k|            auto rd = make_reader<T, char_type>();
  127|   400k|            return impl(rd, range, value);
  128|   400k|        }
  129|   400k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   400k|            auto rd = make_reader<T, char_type>();
  131|   400k|            if (!is_segment_contiguous(range)) {
  132|   400k|                return impl(rd, range, value);
  133|   400k|            }
  134|   400k|            auto crange = get_as_contiguous(range);
  135|   400k|            SCN_TRY(it, impl(rd, crange, value));
  136|   400k|            return ranges_polyfill::batch_next(
  137|   400k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   400k|        }
  139|   400k|        else {
  140|   400k|            SCN_EXPECT(false);
  141|   400k|            SCN_UNREACHABLE;
  142|   400k|        }
  143|   400k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   400k|    {
  112|   400k|        SCN_TRY(it,
  ------------------
  |  |   71|   400k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   400k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   400k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   400k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.73k, False: 398k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.73k|    }                                                  \
  |  |  |  |   70|   400k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   398k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   398k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   398k|                    .transform_error(make_eof_scan_error));
  115|   398k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   398k|                               loc);
  117|   400k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  121|   242k|    {
  122|   242k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   242k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   242k|                          basic_contiguous_scan_context<char_type>>) {
  126|   242k|            auto rd = make_reader<T, char_type>();
  127|   242k|            return impl(rd, range, value);
  128|   242k|        }
  129|   242k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   242k|            auto rd = make_reader<T, char_type>();
  131|   242k|            if (!is_segment_contiguous(range)) {
  132|   242k|                return impl(rd, range, value);
  133|   242k|            }
  134|   242k|            auto crange = get_as_contiguous(range);
  135|   242k|            SCN_TRY(it, impl(rd, crange, value));
  136|   242k|            return ranges_polyfill::batch_next(
  137|   242k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   242k|        }
  139|   242k|        else {
  140|   242k|            SCN_EXPECT(false);
  141|   242k|            SCN_UNREACHABLE;
  142|   242k|        }
  143|   242k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   242k|    {
  112|   242k|        SCN_TRY(it,
  ------------------
  |  |   71|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 552, False: 241k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    552|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    552|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    552|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    552|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    552|    }                                                  \
  |  |  |  |   70|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   241k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   241k|                    .transform_error(make_eof_scan_error));
  115|   241k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   241k|                               loc);
  117|   242k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  121|   300k|    {
  122|   300k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   300k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   300k|                          basic_contiguous_scan_context<char_type>>) {
  126|   300k|            auto rd = make_reader<T, char_type>();
  127|   300k|            return impl(rd, range, value);
  128|   300k|        }
  129|   300k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   300k|            auto rd = make_reader<T, char_type>();
  131|   300k|            if (!is_segment_contiguous(range)) {
  132|   300k|                return impl(rd, range, value);
  133|   300k|            }
  134|   300k|            auto crange = get_as_contiguous(range);
  135|   300k|            SCN_TRY(it, impl(rd, crange, value));
  136|   300k|            return ranges_polyfill::batch_next(
  137|   300k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   300k|        }
  139|   300k|        else {
  140|   300k|            SCN_EXPECT(false);
  141|   300k|            SCN_UNREACHABLE;
  142|   300k|        }
  143|   300k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   300k|    {
  112|   300k|        SCN_TRY(it,
  ------------------
  |  |   71|   300k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   300k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   300k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.02k, False: 298k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.02k|    }                                                  \
  |  |  |  |   70|   300k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   298k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   298k|                    .transform_error(make_eof_scan_error));
  115|   298k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   298k|                               loc);
  117|   300k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  121|   317k|    {
  122|   317k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   317k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   317k|                          basic_contiguous_scan_context<char_type>>) {
  126|   317k|            auto rd = make_reader<T, char_type>();
  127|   317k|            return impl(rd, range, value);
  128|   317k|        }
  129|   317k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   317k|            auto rd = make_reader<T, char_type>();
  131|   317k|            if (!is_segment_contiguous(range)) {
  132|   317k|                return impl(rd, range, value);
  133|   317k|            }
  134|   317k|            auto crange = get_as_contiguous(range);
  135|   317k|            SCN_TRY(it, impl(rd, crange, value));
  136|   317k|            return ranges_polyfill::batch_next(
  137|   317k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   317k|        }
  139|   317k|        else {
  140|   317k|            SCN_EXPECT(false);
  141|   317k|            SCN_UNREACHABLE;
  142|   317k|        }
  143|   317k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   317k|    {
  112|   317k|        SCN_TRY(it,
  ------------------
  |  |   71|   317k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   317k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   317k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.18k, False: 316k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.18k|    }                                                  \
  |  |  |  |   70|   317k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   316k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   316k|                    .transform_error(make_eof_scan_error));
  115|   316k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   316k|                               loc);
  117|   317k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  8.16k|    {
  122|  8.16k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  8.16k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  8.16k|            auto rd = make_reader<T, char_type>();
  127|  8.16k|            return impl(rd, range, value);
  128|  8.16k|        }
  129|  8.16k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  8.16k|            auto rd = make_reader<T, char_type>();
  131|  8.16k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 8.16k, False: 0]
  ------------------
  132|  8.16k|                return impl(rd, range, value);
  133|  8.16k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  8.16k|        else {
  140|  8.16k|            SCN_EXPECT(false);
  141|  8.16k|            SCN_UNREACHABLE;
  142|  8.16k|        }
  143|  8.16k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  8.16k|    {
  112|  8.16k|        SCN_TRY(it,
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  8.16k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  8.16k|                    .transform_error(make_eof_scan_error));
  115|  8.16k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  8.16k|                               loc);
  117|  8.16k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   277k|{
   43|   277k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 12, False: 277k]
  |  |  ------------------
  ------------------
   44|     12|        return unexpected(e);
   45|     12|    }
   46|       |
   47|   277k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 277k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   277k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   277k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  8.16k|    {
  122|  8.16k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  8.16k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  8.16k|            auto rd = make_reader<T, char_type>();
  127|  8.16k|            return impl(rd, range, value);
  128|  8.16k|        }
  129|  8.16k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  8.16k|            auto rd = make_reader<T, char_type>();
  131|  8.16k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 8.16k, False: 0]
  ------------------
  132|  8.16k|                return impl(rd, range, value);
  133|  8.16k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  8.16k|        else {
  140|  8.16k|            SCN_EXPECT(false);
  141|  8.16k|            SCN_UNREACHABLE;
  142|  8.16k|        }
  143|  8.16k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  8.16k|    {
  112|  8.16k|        SCN_TRY(it,
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  8.16k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  8.16k|                    .transform_error(make_eof_scan_error));
  115|  8.16k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  8.16k|                               loc);
  117|  8.16k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  8.16k|    {
  122|  8.16k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  8.16k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  8.16k|            auto rd = make_reader<T, char_type>();
  127|  8.16k|            return impl(rd, range, value);
  128|  8.16k|        }
  129|  8.16k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  8.16k|            auto rd = make_reader<T, char_type>();
  131|  8.16k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 8.16k, False: 0]
  ------------------
  132|  8.16k|                return impl(rd, range, value);
  133|  8.16k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  8.16k|        else {
  140|  8.16k|            SCN_EXPECT(false);
  141|  8.16k|            SCN_UNREACHABLE;
  142|  8.16k|        }
  143|  8.16k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  8.16k|    {
  112|  8.16k|        SCN_TRY(it,
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  8.16k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  8.16k|                    .transform_error(make_eof_scan_error));
  115|  8.16k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  8.16k|                               loc);
  117|  8.16k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  8.16k|    {
  122|  8.16k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  8.16k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  8.16k|            auto rd = make_reader<T, char_type>();
  127|  8.16k|            return impl(rd, range, value);
  128|  8.16k|        }
  129|  8.16k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  8.16k|            auto rd = make_reader<T, char_type>();
  131|  8.16k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 8.16k, False: 0]
  ------------------
  132|  8.16k|                return impl(rd, range, value);
  133|  8.16k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  8.16k|        else {
  140|  8.16k|            SCN_EXPECT(false);
  141|  8.16k|            SCN_UNREACHABLE;
  142|  8.16k|        }
  143|  8.16k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  8.16k|    {
  112|  8.16k|        SCN_TRY(it,
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  8.16k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  8.16k|                    .transform_error(make_eof_scan_error));
  115|  8.16k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  8.16k|                               loc);
  117|  8.16k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  8.16k|    {
  122|  8.16k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  8.16k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  8.16k|            auto rd = make_reader<T, char_type>();
  127|  8.16k|            return impl(rd, range, value);
  128|  8.16k|        }
  129|  8.16k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  8.16k|            auto rd = make_reader<T, char_type>();
  131|  8.16k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 8.16k, False: 0]
  ------------------
  132|  8.16k|                return impl(rd, range, value);
  133|  8.16k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  8.16k|        else {
  140|  8.16k|            SCN_EXPECT(false);
  141|  8.16k|            SCN_UNREACHABLE;
  142|  8.16k|        }
  143|  8.16k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  8.16k|    {
  112|  8.16k|        SCN_TRY(it,
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  8.16k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  8.16k|                    .transform_error(make_eof_scan_error));
  115|  8.16k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  8.16k|                               loc);
  117|  8.16k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  121|  8.16k|    {
  122|  8.16k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  8.16k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  8.16k|            auto rd = make_reader<T, char_type>();
  127|  8.16k|            return impl(rd, range, value);
  128|  8.16k|        }
  129|  8.16k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  8.16k|            auto rd = make_reader<T, char_type>();
  131|  8.16k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 8.16k, False: 0]
  ------------------
  132|  8.16k|                return impl(rd, range, value);
  133|  8.16k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  8.16k|        else {
  140|  8.16k|            SCN_EXPECT(false);
  141|  8.16k|            SCN_UNREACHABLE;
  142|  8.16k|        }
  143|  8.16k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  8.16k|    {
  112|  8.16k|        SCN_TRY(it,
  ------------------
  |  |   71|  8.16k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  8.16k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  8.16k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  8.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 8.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  8.16k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  8.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  8.16k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  8.16k|                    .transform_error(make_eof_scan_error));
  115|  8.16k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  8.16k|                               loc);
  117|  8.16k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIaEENS0_13scan_expectedIPKcEERT_:
  222|   611k|    {
  223|   611k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   611k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   611k|                          basic_contiguous_scan_context<char_type>>) {
  227|   611k|            auto rd = make_reader<T, char_type>();
  228|   611k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 611k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   611k|            return impl(rd, range, value);
  233|   611k|        }
  234|   611k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   611k|            auto rd = make_reader<T, char_type>();
  236|   611k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   611k|                return unexpected(e);
  238|   611k|            }
  239|       |
  240|   611k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   611k|                return impl(rd, range, value);
  242|   611k|            }
  243|       |
  244|   611k|            auto crange = get_as_contiguous(range);
  245|   611k|            SCN_TRY(it, impl(rd, crange, value));
  246|   611k|            return ranges_polyfill::batch_next(
  247|   611k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   611k|        }
  249|   611k|        else {
  250|   611k|            SCN_EXPECT(false);
  251|   611k|            SCN_UNREACHABLE;
  252|   611k|        }
  253|   611k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   611k|    {
  205|   611k|        SCN_TRY(it,
  ------------------
  |  |   71|   611k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   611k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   611k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.07k, False: 609k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.07k|    }                                                  \
  |  |  |  |   70|   611k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   609k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   609k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   609k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   609k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   609k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 609k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   609k|        return rd.read_specs(subr, specs, value, loc);
  218|   609k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIiEENS0_13scan_expectedIPKcEERT_:
  222|   937k|    {
  223|   937k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   937k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   937k|                          basic_contiguous_scan_context<char_type>>) {
  227|   937k|            auto rd = make_reader<T, char_type>();
  228|   937k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   937k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 937k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   937k|            return impl(rd, range, value);
  233|   937k|        }
  234|   937k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   937k|            auto rd = make_reader<T, char_type>();
  236|   937k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   937k|                return unexpected(e);
  238|   937k|            }
  239|       |
  240|   937k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   937k|                return impl(rd, range, value);
  242|   937k|            }
  243|       |
  244|   937k|            auto crange = get_as_contiguous(range);
  245|   937k|            SCN_TRY(it, impl(rd, crange, value));
  246|   937k|            return ranges_polyfill::batch_next(
  247|   937k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   937k|        }
  249|   937k|        else {
  250|   937k|            SCN_EXPECT(false);
  251|   937k|            SCN_UNREACHABLE;
  252|   937k|        }
  253|   937k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   937k|    {
  205|   937k|        SCN_TRY(it,
  ------------------
  |  |   71|   937k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   937k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   937k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   937k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.33k, False: 933k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.33k|    }                                                  \
  |  |  |  |   70|   937k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   933k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   933k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   933k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   933k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   933k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 933k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   933k|        return rd.read_specs(subr, specs, value, loc);
  218|   933k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIxEENS0_13scan_expectedIPKcEERT_:
  222|  1.01M|    {
  223|  1.01M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  1.01M|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|  1.01M|                          basic_contiguous_scan_context<char_type>>) {
  227|  1.01M|            auto rd = make_reader<T, char_type>();
  228|  1.01M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|  1.01M|            return impl(rd, range, value);
  233|  1.01M|        }
  234|  1.01M|        else if constexpr (!detail::is_type_disabled<T>) {
  235|  1.01M|            auto rd = make_reader<T, char_type>();
  236|  1.01M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|  1.01M|                return unexpected(e);
  238|  1.01M|            }
  239|       |
  240|  1.01M|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|  1.01M|                return impl(rd, range, value);
  242|  1.01M|            }
  243|       |
  244|  1.01M|            auto crange = get_as_contiguous(range);
  245|  1.01M|            SCN_TRY(it, impl(rd, crange, value));
  246|  1.01M|            return ranges_polyfill::batch_next(
  247|  1.01M|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|  1.01M|        }
  249|  1.01M|        else {
  250|  1.01M|            SCN_EXPECT(false);
  251|  1.01M|            SCN_UNREACHABLE;
  252|  1.01M|        }
  253|  1.01M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|  1.01M|    {
  205|  1.01M|        SCN_TRY(it,
  ------------------
  |  |   71|  1.01M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.01M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.01M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.04k, False: 1.01M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.04k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.04k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.04k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.04k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.04k|    }                                                  \
  |  |  |  |   70|  1.01M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  1.01M|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  1.01M|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  1.01M|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  1.01M|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 1.01M]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  1.01M|        return rd.read_specs(subr, specs, value, loc);
  218|  1.01M|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIhEENS0_13scan_expectedIPKcEERT_:
  222|   585k|    {
  223|   585k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   585k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   585k|                          basic_contiguous_scan_context<char_type>>) {
  227|   585k|            auto rd = make_reader<T, char_type>();
  228|   585k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 585k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   585k|            return impl(rd, range, value);
  233|   585k|        }
  234|   585k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   585k|            auto rd = make_reader<T, char_type>();
  236|   585k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   585k|                return unexpected(e);
  238|   585k|            }
  239|       |
  240|   585k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   585k|                return impl(rd, range, value);
  242|   585k|            }
  243|       |
  244|   585k|            auto crange = get_as_contiguous(range);
  245|   585k|            SCN_TRY(it, impl(rd, crange, value));
  246|   585k|            return ranges_polyfill::batch_next(
  247|   585k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   585k|        }
  249|   585k|        else {
  250|   585k|            SCN_EXPECT(false);
  251|   585k|            SCN_UNREACHABLE;
  252|   585k|        }
  253|   585k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   585k|    {
  205|   585k|        SCN_TRY(it,
  ------------------
  |  |   71|   585k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   585k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   585k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   585k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.62k, False: 584k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.62k|    }                                                  \
  |  |  |  |   70|   585k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   584k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   584k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   584k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   584k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 584k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   584k|        return rd.read_specs(subr, specs, value, loc);
  218|   584k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIjEENS0_13scan_expectedIPKcEERT_:
  222|   740k|    {
  223|   740k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   740k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   740k|                          basic_contiguous_scan_context<char_type>>) {
  227|   740k|            auto rd = make_reader<T, char_type>();
  228|   740k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 740k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   740k|            return impl(rd, range, value);
  233|   740k|        }
  234|   740k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   740k|            auto rd = make_reader<T, char_type>();
  236|   740k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   740k|                return unexpected(e);
  238|   740k|            }
  239|       |
  240|   740k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   740k|                return impl(rd, range, value);
  242|   740k|            }
  243|       |
  244|   740k|            auto crange = get_as_contiguous(range);
  245|   740k|            SCN_TRY(it, impl(rd, crange, value));
  246|   740k|            return ranges_polyfill::batch_next(
  247|   740k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   740k|        }
  249|   740k|        else {
  250|   740k|            SCN_EXPECT(false);
  251|   740k|            SCN_UNREACHABLE;
  252|   740k|        }
  253|   740k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   740k|    {
  205|   740k|        SCN_TRY(it,
  ------------------
  |  |   71|   740k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   740k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   740k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.91k, False: 737k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.91k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.91k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.91k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.91k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.91k|    }                                                  \
  |  |  |  |   70|   740k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   737k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   737k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   737k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   737k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   737k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 737k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   737k|        return rd.read_specs(subr, specs, value, loc);
  218|   737k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIyEENS0_13scan_expectedIPKcEERT_:
  222|   787k|    {
  223|   787k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   787k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   787k|                          basic_contiguous_scan_context<char_type>>) {
  227|   787k|            auto rd = make_reader<T, char_type>();
  228|   787k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   787k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 787k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   787k|            return impl(rd, range, value);
  233|   787k|        }
  234|   787k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   787k|            auto rd = make_reader<T, char_type>();
  236|   787k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   787k|                return unexpected(e);
  238|   787k|            }
  239|       |
  240|   787k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   787k|                return impl(rd, range, value);
  242|   787k|            }
  243|       |
  244|   787k|            auto crange = get_as_contiguous(range);
  245|   787k|            SCN_TRY(it, impl(rd, crange, value));
  246|   787k|            return ranges_polyfill::batch_next(
  247|   787k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   787k|        }
  249|   787k|        else {
  250|   787k|            SCN_EXPECT(false);
  251|   787k|            SCN_UNREACHABLE;
  252|   787k|        }
  253|   787k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeIPKcSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   787k|    {
  205|   787k|        SCN_TRY(it,
  ------------------
  |  |   71|   787k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   787k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   787k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   787k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.38k, False: 784k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.38k|    }                                                  \
  |  |  |  |   70|   787k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   784k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   784k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   784k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   784k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   784k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 784k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   784k|        return rd.read_specs(subr, specs, value, loc);
  218|   784k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  38.1k|    {
  223|  38.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  38.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  38.1k|            auto rd = make_reader<T, char_type>();
  228|  38.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  38.1k|                return unexpected(e);
  230|  38.1k|            }
  231|       |
  232|  38.1k|            return impl(rd, range, value);
  233|  38.1k|        }
  234|  38.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  38.1k|            auto rd = make_reader<T, char_type>();
  236|  38.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 38.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  38.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 38.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  38.1k|                return impl(rd, range, value);
  242|  38.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  38.1k|        else {
  250|  38.1k|            SCN_EXPECT(false);
  251|  38.1k|            SCN_UNREACHABLE;
  252|  38.1k|        }
  253|  38.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  38.1k|    {
  205|  38.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  38.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  38.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  38.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  38.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 38.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  38.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  38.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  38.1k|    {
  223|  38.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  38.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  38.1k|            auto rd = make_reader<T, char_type>();
  228|  38.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  38.1k|                return unexpected(e);
  230|  38.1k|            }
  231|       |
  232|  38.1k|            return impl(rd, range, value);
  233|  38.1k|        }
  234|  38.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  38.1k|            auto rd = make_reader<T, char_type>();
  236|  38.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 38.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  38.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 38.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  38.1k|                return impl(rd, range, value);
  242|  38.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  38.1k|        else {
  250|  38.1k|            SCN_EXPECT(false);
  251|  38.1k|            SCN_UNREACHABLE;
  252|  38.1k|        }
  253|  38.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  38.1k|    {
  205|  38.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  38.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  38.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  38.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  38.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 38.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  38.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  38.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  38.1k|    {
  223|  38.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  38.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  38.1k|            auto rd = make_reader<T, char_type>();
  228|  38.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  38.1k|                return unexpected(e);
  230|  38.1k|            }
  231|       |
  232|  38.1k|            return impl(rd, range, value);
  233|  38.1k|        }
  234|  38.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  38.1k|            auto rd = make_reader<T, char_type>();
  236|  38.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 38.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  38.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 38.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  38.1k|                return impl(rd, range, value);
  242|  38.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  38.1k|        else {
  250|  38.1k|            SCN_EXPECT(false);
  251|  38.1k|            SCN_UNREACHABLE;
  252|  38.1k|        }
  253|  38.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  38.1k|    {
  205|  38.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  38.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  38.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  38.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  38.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 38.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  38.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  38.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  38.1k|    {
  223|  38.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  38.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  38.1k|            auto rd = make_reader<T, char_type>();
  228|  38.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  38.1k|                return unexpected(e);
  230|  38.1k|            }
  231|       |
  232|  38.1k|            return impl(rd, range, value);
  233|  38.1k|        }
  234|  38.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  38.1k|            auto rd = make_reader<T, char_type>();
  236|  38.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 38.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  38.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 38.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  38.1k|                return impl(rd, range, value);
  242|  38.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  38.1k|        else {
  250|  38.1k|            SCN_EXPECT(false);
  251|  38.1k|            SCN_UNREACHABLE;
  252|  38.1k|        }
  253|  38.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  38.1k|    {
  205|  38.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  38.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  38.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  38.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  38.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 38.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  38.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  38.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  38.1k|    {
  223|  38.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  38.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  38.1k|            auto rd = make_reader<T, char_type>();
  228|  38.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  38.1k|                return unexpected(e);
  230|  38.1k|            }
  231|       |
  232|  38.1k|            return impl(rd, range, value);
  233|  38.1k|        }
  234|  38.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  38.1k|            auto rd = make_reader<T, char_type>();
  236|  38.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 38.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  38.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 38.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  38.1k|                return impl(rd, range, value);
  242|  38.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  38.1k|        else {
  250|  38.1k|            SCN_EXPECT(false);
  251|  38.1k|            SCN_UNREACHABLE;
  252|  38.1k|        }
  253|  38.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  38.1k|    {
  205|  38.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  38.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  38.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  38.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  38.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 38.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  38.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  38.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
  222|  38.1k|    {
  223|  38.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  38.1k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  38.1k|            auto rd = make_reader<T, char_type>();
  228|  38.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  38.1k|                return unexpected(e);
  230|  38.1k|            }
  231|       |
  232|  38.1k|            return impl(rd, range, value);
  233|  38.1k|        }
  234|  38.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  38.1k|            auto rd = make_reader<T, char_type>();
  236|  38.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 38.1k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  38.1k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 38.1k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  38.1k|                return impl(rd, range, value);
  242|  38.1k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  38.1k|        else {
  250|  38.1k|            SCN_EXPECT(false);
  251|  38.1k|            SCN_UNREACHABLE;
  252|  38.1k|        }
  253|  38.1k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_19reader_impl_for_intIcEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  38.1k|    {
  205|  38.1k|        SCN_TRY(it,
  ------------------
  |  |   71|  38.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  38.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  38.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  38.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 38.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  38.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  38.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  38.1k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  38.1k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  38.1k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  38.1k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 38.1k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  38.1k|        return rd.read_specs(subr, specs, value, loc);
  218|  38.1k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  121|   259k|    {
  122|   259k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   259k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   259k|                          basic_contiguous_scan_context<char_type>>) {
  126|   259k|            auto rd = make_reader<T, char_type>();
  127|   259k|            return impl(rd, range, value);
  128|   259k|        }
  129|   259k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   259k|            auto rd = make_reader<T, char_type>();
  131|   259k|            if (!is_segment_contiguous(range)) {
  132|   259k|                return impl(rd, range, value);
  133|   259k|            }
  134|   259k|            auto crange = get_as_contiguous(range);
  135|   259k|            SCN_TRY(it, impl(rd, crange, value));
  136|   259k|            return ranges_polyfill::batch_next(
  137|   259k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   259k|        }
  139|   259k|        else {
  140|   259k|            SCN_EXPECT(false);
  141|   259k|            SCN_UNREACHABLE;
  142|   259k|        }
  143|   259k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   259k|    {
  112|   259k|        SCN_TRY(it,
  ------------------
  |  |   71|   259k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   259k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   259k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   259k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.02k, False: 258k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.02k|    }                                                  \
  |  |  |  |   70|   259k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   258k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   258k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   258k|                    .transform_error(make_eof_scan_error));
  115|   258k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   258k|                               loc);
  117|   259k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeIPKwS8_LNS4_13subrange_kindE1EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISF_EEE4typeEEEbOSF_NS0_6detail10locale_refE:
   42|  6.39M|{
   43|  6.39M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  6.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 24.4k, False: 6.37M]
  |  |  ------------------
  ------------------
   44|  24.4k|        return unexpected(e);
   45|  24.4k|    }
   46|       |
   47|  6.37M|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 6.37M]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|  6.37M|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|  6.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|  6.37M|}
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  121|   350k|    {
  122|   350k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   350k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   350k|                          basic_contiguous_scan_context<char_type>>) {
  126|   350k|            auto rd = make_reader<T, char_type>();
  127|   350k|            return impl(rd, range, value);
  128|   350k|        }
  129|   350k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   350k|            auto rd = make_reader<T, char_type>();
  131|   350k|            if (!is_segment_contiguous(range)) {
  132|   350k|                return impl(rd, range, value);
  133|   350k|            }
  134|   350k|            auto crange = get_as_contiguous(range);
  135|   350k|            SCN_TRY(it, impl(rd, crange, value));
  136|   350k|            return ranges_polyfill::batch_next(
  137|   350k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   350k|        }
  139|   350k|        else {
  140|   350k|            SCN_EXPECT(false);
  141|   350k|            SCN_UNREACHABLE;
  142|   350k|        }
  143|   350k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   350k|    {
  112|   350k|        SCN_TRY(it,
  ------------------
  |  |   71|   350k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   350k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   350k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   350k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.79k, False: 348k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.79k|    }                                                  \
  |  |  |  |   70|   350k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   348k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   348k|                    .transform_error(make_eof_scan_error));
  115|   348k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   348k|                               loc);
  117|   350k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  121|   373k|    {
  122|   373k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   373k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   373k|                          basic_contiguous_scan_context<char_type>>) {
  126|   373k|            auto rd = make_reader<T, char_type>();
  127|   373k|            return impl(rd, range, value);
  128|   373k|        }
  129|   373k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   373k|            auto rd = make_reader<T, char_type>();
  131|   373k|            if (!is_segment_contiguous(range)) {
  132|   373k|                return impl(rd, range, value);
  133|   373k|            }
  134|   373k|            auto crange = get_as_contiguous(range);
  135|   373k|            SCN_TRY(it, impl(rd, crange, value));
  136|   373k|            return ranges_polyfill::batch_next(
  137|   373k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   373k|        }
  139|   373k|        else {
  140|   373k|            SCN_EXPECT(false);
  141|   373k|            SCN_UNREACHABLE;
  142|   373k|        }
  143|   373k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   373k|    {
  112|   373k|        SCN_TRY(it,
  ------------------
  |  |   71|   373k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   373k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   373k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.01k, False: 371k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.01k|    }                                                  \
  |  |  |  |   70|   373k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   371k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   371k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   371k|                    .transform_error(make_eof_scan_error));
  115|   371k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   371k|                               loc);
  117|   373k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  121|   234k|    {
  122|   234k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   234k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   234k|                          basic_contiguous_scan_context<char_type>>) {
  126|   234k|            auto rd = make_reader<T, char_type>();
  127|   234k|            return impl(rd, range, value);
  128|   234k|        }
  129|   234k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   234k|            auto rd = make_reader<T, char_type>();
  131|   234k|            if (!is_segment_contiguous(range)) {
  132|   234k|                return impl(rd, range, value);
  133|   234k|            }
  134|   234k|            auto crange = get_as_contiguous(range);
  135|   234k|            SCN_TRY(it, impl(rd, crange, value));
  136|   234k|            return ranges_polyfill::batch_next(
  137|   234k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   234k|        }
  139|   234k|        else {
  140|   234k|            SCN_EXPECT(false);
  141|   234k|            SCN_UNREACHABLE;
  142|   234k|        }
  143|   234k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   234k|    {
  112|   234k|        SCN_TRY(it,
  ------------------
  |  |   71|   234k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   234k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   234k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   234k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 819, False: 233k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|    819|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|    819|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    819|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|    819|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|    819|    }                                                  \
  |  |  |  |   70|   234k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   233k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   233k|                    .transform_error(make_eof_scan_error));
  115|   233k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   233k|                               loc);
  117|   234k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  121|   285k|    {
  122|   285k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   285k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   285k|                          basic_contiguous_scan_context<char_type>>) {
  126|   285k|            auto rd = make_reader<T, char_type>();
  127|   285k|            return impl(rd, range, value);
  128|   285k|        }
  129|   285k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   285k|            auto rd = make_reader<T, char_type>();
  131|   285k|            if (!is_segment_contiguous(range)) {
  132|   285k|                return impl(rd, range, value);
  133|   285k|            }
  134|   285k|            auto crange = get_as_contiguous(range);
  135|   285k|            SCN_TRY(it, impl(rd, crange, value));
  136|   285k|            return ranges_polyfill::batch_next(
  137|   285k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   285k|        }
  139|   285k|        else {
  140|   285k|            SCN_EXPECT(false);
  141|   285k|            SCN_UNREACHABLE;
  142|   285k|        }
  143|   285k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   285k|    {
  112|   285k|        SCN_TRY(it,
  ------------------
  |  |   71|   285k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   285k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   285k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   285k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.29k, False: 284k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.29k|    }                                                  \
  |  |  |  |   70|   285k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   284k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   284k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   284k|                    .transform_error(make_eof_scan_error));
  115|   284k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   284k|                               loc);
  117|   285k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  121|   299k|    {
  122|   299k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|   299k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|   299k|                          basic_contiguous_scan_context<char_type>>) {
  126|   299k|            auto rd = make_reader<T, char_type>();
  127|   299k|            return impl(rd, range, value);
  128|   299k|        }
  129|   299k|        else if constexpr (!detail::is_type_disabled<T>) {
  130|   299k|            auto rd = make_reader<T, char_type>();
  131|   299k|            if (!is_segment_contiguous(range)) {
  132|   299k|                return impl(rd, range, value);
  133|   299k|            }
  134|   299k|            auto crange = get_as_contiguous(range);
  135|   299k|            SCN_TRY(it, impl(rd, crange, value));
  136|   299k|            return ranges_polyfill::batch_next(
  137|   299k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|   299k|        }
  139|   299k|        else {
  140|   299k|            SCN_EXPECT(false);
  141|   299k|            SCN_UNREACHABLE;
  142|   299k|        }
  143|   299k|    }
_ZN3scn2v24impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  111|   299k|    {
  112|   299k|        SCN_TRY(it,
  ------------------
  |  |   71|   299k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   299k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   299k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   299k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 1.45k, False: 298k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  1.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  1.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  1.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  1.45k|    }                                                  \
  |  |  |  |   70|   299k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|   298k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|   298k|                    .transform_error(make_eof_scan_error));
  115|   298k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|   298k|                               loc);
  117|   299k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIaEENS0_13scan_expectedIPKwEERT_:
  222|   617k|    {
  223|   617k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   617k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   617k|                          basic_contiguous_scan_context<char_type>>) {
  227|   617k|            auto rd = make_reader<T, char_type>();
  228|   617k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 617k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   617k|            return impl(rd, range, value);
  233|   617k|        }
  234|   617k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   617k|            auto rd = make_reader<T, char_type>();
  236|   617k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   617k|                return unexpected(e);
  238|   617k|            }
  239|       |
  240|   617k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   617k|                return impl(rd, range, value);
  242|   617k|            }
  243|       |
  244|   617k|            auto crange = get_as_contiguous(range);
  245|   617k|            SCN_TRY(it, impl(rd, crange, value));
  246|   617k|            return ranges_polyfill::batch_next(
  247|   617k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   617k|        }
  249|   617k|        else {
  250|   617k|            SCN_EXPECT(false);
  251|   617k|            SCN_UNREACHABLE;
  252|   617k|        }
  253|   617k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   617k|    {
  205|   617k|        SCN_TRY(it,
  ------------------
  |  |   71|   617k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   617k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   617k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.14k, False: 614k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.14k|    }                                                  \
  |  |  |  |   70|   617k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   614k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   614k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   614k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   614k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   614k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 614k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   614k|        return rd.read_specs(subr, specs, value, loc);
  218|   614k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIiEENS0_13scan_expectedIPKwEERT_:
  222|   905k|    {
  223|   905k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   905k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   905k|                          basic_contiguous_scan_context<char_type>>) {
  227|   905k|            auto rd = make_reader<T, char_type>();
  228|   905k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   905k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 905k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   905k|            return impl(rd, range, value);
  233|   905k|        }
  234|   905k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   905k|            auto rd = make_reader<T, char_type>();
  236|   905k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   905k|                return unexpected(e);
  238|   905k|            }
  239|       |
  240|   905k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   905k|                return impl(rd, range, value);
  242|   905k|            }
  243|       |
  244|   905k|            auto crange = get_as_contiguous(range);
  245|   905k|            SCN_TRY(it, impl(rd, crange, value));
  246|   905k|            return ranges_polyfill::batch_next(
  247|   905k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   905k|        }
  249|   905k|        else {
  250|   905k|            SCN_EXPECT(false);
  251|   905k|            SCN_UNREACHABLE;
  252|   905k|        }
  253|   905k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   905k|    {
  205|   905k|        SCN_TRY(it,
  ------------------
  |  |   71|   905k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   905k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   905k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   905k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 5.42k, False: 900k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  5.42k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  5.42k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  5.42k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  5.42k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  5.42k|    }                                                  \
  |  |  |  |   70|   905k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   900k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   900k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   900k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   900k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   900k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 900k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   900k|        return rd.read_specs(subr, specs, value, loc);
  218|   900k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIxEENS0_13scan_expectedIPKwEERT_:
  222|   968k|    {
  223|   968k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   968k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   968k|                          basic_contiguous_scan_context<char_type>>) {
  227|   968k|            auto rd = make_reader<T, char_type>();
  228|   968k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   968k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 968k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   968k|            return impl(rd, range, value);
  233|   968k|        }
  234|   968k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   968k|            auto rd = make_reader<T, char_type>();
  236|   968k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   968k|                return unexpected(e);
  238|   968k|            }
  239|       |
  240|   968k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   968k|                return impl(rd, range, value);
  242|   968k|            }
  243|       |
  244|   968k|            auto crange = get_as_contiguous(range);
  245|   968k|            SCN_TRY(it, impl(rd, crange, value));
  246|   968k|            return ranges_polyfill::batch_next(
  247|   968k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   968k|        }
  249|   968k|        else {
  250|   968k|            SCN_EXPECT(false);
  251|   968k|            SCN_UNREACHABLE;
  252|   968k|        }
  253|   968k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   968k|    {
  205|   968k|        SCN_TRY(it,
  ------------------
  |  |   71|   968k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   968k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   968k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   968k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6.12k, False: 962k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  6.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  6.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  6.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  6.12k|    }                                                  \
  |  |  |  |   70|   968k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   962k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   962k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   962k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   962k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   962k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 962k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   962k|        return rd.read_specs(subr, specs, value, loc);
  218|   962k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIhEENS0_13scan_expectedIPKwEERT_:
  222|   595k|    {
  223|   595k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   595k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   595k|                          basic_contiguous_scan_context<char_type>>) {
  227|   595k|            auto rd = make_reader<T, char_type>();
  228|   595k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 595k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   595k|            return impl(rd, range, value);
  233|   595k|        }
  234|   595k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   595k|            auto rd = make_reader<T, char_type>();
  236|   595k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   595k|                return unexpected(e);
  238|   595k|            }
  239|       |
  240|   595k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   595k|                return impl(rd, range, value);
  242|   595k|            }
  243|       |
  244|   595k|            auto crange = get_as_contiguous(range);
  245|   595k|            SCN_TRY(it, impl(rd, crange, value));
  246|   595k|            return ranges_polyfill::batch_next(
  247|   595k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   595k|        }
  249|   595k|        else {
  250|   595k|            SCN_EXPECT(false);
  251|   595k|            SCN_UNREACHABLE;
  252|   595k|        }
  253|   595k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   595k|    {
  205|   595k|        SCN_TRY(it,
  ------------------
  |  |   71|   595k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   595k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   595k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   595k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2.66k, False: 593k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  2.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  2.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  2.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  2.66k|    }                                                  \
  |  |  |  |   70|   595k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   593k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   593k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   593k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   593k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   593k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 593k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   593k|        return rd.read_specs(subr, specs, value, loc);
  218|   593k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIjEENS0_13scan_expectedIPKwEERT_:
  222|   733k|    {
  223|   733k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   733k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   733k|                          basic_contiguous_scan_context<char_type>>) {
  227|   733k|            auto rd = make_reader<T, char_type>();
  228|   733k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 733k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   733k|            return impl(rd, range, value);
  233|   733k|        }
  234|   733k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   733k|            auto rd = make_reader<T, char_type>();
  236|   733k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   733k|                return unexpected(e);
  238|   733k|            }
  239|       |
  240|   733k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   733k|                return impl(rd, range, value);
  242|   733k|            }
  243|       |
  244|   733k|            auto crange = get_as_contiguous(range);
  245|   733k|            SCN_TRY(it, impl(rd, crange, value));
  246|   733k|            return ranges_polyfill::batch_next(
  247|   733k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   733k|        }
  249|   733k|        else {
  250|   733k|            SCN_EXPECT(false);
  251|   733k|            SCN_UNREACHABLE;
  252|   733k|        }
  253|   733k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   733k|    {
  205|   733k|        SCN_TRY(it,
  ------------------
  |  |   71|   733k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   733k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   733k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 3.97k, False: 729k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  3.97k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  3.97k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  3.97k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  3.97k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  3.97k|    }                                                  \
  |  |  |  |   70|   733k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   729k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   729k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   729k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   729k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   729k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 729k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   729k|        return rd.read_specs(subr, specs, value, loc);
  218|   729k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIyEENS0_13scan_expectedIPKwEERT_:
  222|   771k|    {
  223|   771k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   771k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|   771k|                          basic_contiguous_scan_context<char_type>>) {
  227|   771k|            auto rd = make_reader<T, char_type>();
  228|   771k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 771k]
  |  |  ------------------
  ------------------
  229|      0|                return unexpected(e);
  230|      0|            }
  231|       |
  232|   771k|            return impl(rd, range, value);
  233|   771k|        }
  234|   771k|        else if constexpr (!detail::is_type_disabled<T>) {
  235|   771k|            auto rd = make_reader<T, char_type>();
  236|   771k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  237|   771k|                return unexpected(e);
  238|   771k|            }
  239|       |
  240|   771k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  241|   771k|                return impl(rd, range, value);
  242|   771k|            }
  243|       |
  244|   771k|            auto crange = get_as_contiguous(range);
  245|   771k|            SCN_TRY(it, impl(rd, crange, value));
  246|   771k|            return ranges_polyfill::batch_next(
  247|   771k|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|   771k|        }
  249|   771k|        else {
  250|   771k|            SCN_EXPECT(false);
  251|   771k|            SCN_UNREACHABLE;
  252|   771k|        }
  253|   771k|    }
_ZN3scn2v24impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeIPKwSE_LNSA_13subrange_kindE1EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSJ_RT1_:
  204|   771k|    {
  205|   771k|        SCN_TRY(it,
  ------------------
  |  |   71|   771k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   771k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   771k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   771k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4.43k, False: 766k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  4.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  4.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  4.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  4.43k|    }                                                  \
  |  |  |  |   70|   771k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   766k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   766k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   766k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   766k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   766k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 766k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   766k|        return rd.read_specs(subr, specs, value, loc);
  218|   766k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  24.5k|    {
  122|  24.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.5k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.5k|            auto rd = make_reader<T, char_type>();
  127|  24.5k|            return impl(rd, range, value);
  128|  24.5k|        }
  129|  24.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.5k|            auto rd = make_reader<T, char_type>();
  131|  24.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.5k, False: 0]
  ------------------
  132|  24.5k|                return impl(rd, range, value);
  133|  24.5k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.5k|        else {
  140|  24.5k|            SCN_EXPECT(false);
  141|  24.5k|            SCN_UNREACHABLE;
  142|  24.5k|        }
  143|  24.5k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.5k|    {
  112|  24.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.5k|                    .transform_error(make_eof_scan_error));
  115|  24.5k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.5k|                               loc);
  117|  24.5k|    }
_ZN3scn2v24impl26skip_ws_before_if_requiredIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS4_18default_sentinel_tELNS4_13subrange_kindE0EEEEENS1_12eof_expectedINS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEEEbOSI_NS7_10locale_refE:
   42|   800k|{
   43|   800k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   800k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 30, False: 800k]
  |  |  ------------------
  ------------------
   44|     30|        return unexpected(e);
   45|     30|    }
   46|       |
   47|   800k|    if (!is_required) {
  ------------------
  |  Branch (47:9): [True: 0, False: 800k]
  ------------------
   48|      0|        return ranges::begin(range);
   49|      0|    }
   50|       |
   51|   800k|    return skip_classic_whitespace(SCN_FWD(range));
  ------------------
  |  |  248|   800k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   52|   800k|}
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  24.5k|    {
  122|  24.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.5k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.5k|            auto rd = make_reader<T, char_type>();
  127|  24.5k|            return impl(rd, range, value);
  128|  24.5k|        }
  129|  24.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.5k|            auto rd = make_reader<T, char_type>();
  131|  24.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.5k, False: 0]
  ------------------
  132|  24.5k|                return impl(rd, range, value);
  133|  24.5k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.5k|        else {
  140|  24.5k|            SCN_EXPECT(false);
  141|  24.5k|            SCN_UNREACHABLE;
  142|  24.5k|        }
  143|  24.5k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.5k|    {
  112|  24.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.5k|                    .transform_error(make_eof_scan_error));
  115|  24.5k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.5k|                               loc);
  117|  24.5k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  24.5k|    {
  122|  24.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.5k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.5k|            auto rd = make_reader<T, char_type>();
  127|  24.5k|            return impl(rd, range, value);
  128|  24.5k|        }
  129|  24.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.5k|            auto rd = make_reader<T, char_type>();
  131|  24.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.5k, False: 0]
  ------------------
  132|  24.5k|                return impl(rd, range, value);
  133|  24.5k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.5k|        else {
  140|  24.5k|            SCN_EXPECT(false);
  141|  24.5k|            SCN_UNREACHABLE;
  142|  24.5k|        }
  143|  24.5k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.5k|    {
  112|  24.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.5k|                    .transform_error(make_eof_scan_error));
  115|  24.5k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.5k|                               loc);
  117|  24.5k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  24.5k|    {
  122|  24.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.5k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.5k|            auto rd = make_reader<T, char_type>();
  127|  24.5k|            return impl(rd, range, value);
  128|  24.5k|        }
  129|  24.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.5k|            auto rd = make_reader<T, char_type>();
  131|  24.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.5k, False: 0]
  ------------------
  132|  24.5k|                return impl(rd, range, value);
  133|  24.5k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.5k|        else {
  140|  24.5k|            SCN_EXPECT(false);
  141|  24.5k|            SCN_UNREACHABLE;
  142|  24.5k|        }
  143|  24.5k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.5k|    {
  112|  24.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.5k|                    .transform_error(make_eof_scan_error));
  115|  24.5k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.5k|                               loc);
  117|  24.5k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  24.5k|    {
  122|  24.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.5k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.5k|            auto rd = make_reader<T, char_type>();
  127|  24.5k|            return impl(rd, range, value);
  128|  24.5k|        }
  129|  24.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.5k|            auto rd = make_reader<T, char_type>();
  131|  24.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.5k, False: 0]
  ------------------
  132|  24.5k|                return impl(rd, range, value);
  133|  24.5k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.5k|        else {
  140|  24.5k|            SCN_EXPECT(false);
  141|  24.5k|            SCN_UNREACHABLE;
  142|  24.5k|        }
  143|  24.5k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.5k|    {
  112|  24.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.5k|                    .transform_error(make_eof_scan_error));
  115|  24.5k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.5k|                               loc);
  117|  24.5k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  121|  24.5k|    {
  122|  24.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (122:23): [Folded - Ignored]
  |  Branch (122:23): [Folded - Ignored]
  ------------------
  123|  24.5k|                      std::is_same_v<
  ------------------
  |  Branch (123:23): [Folded - Ignored]
  ------------------
  124|      0|                          context_type,
  125|      0|                          basic_contiguous_scan_context<char_type>>) {
  126|  24.5k|            auto rd = make_reader<T, char_type>();
  127|  24.5k|            return impl(rd, range, value);
  128|  24.5k|        }
  129|  24.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  24.5k|            auto rd = make_reader<T, char_type>();
  131|  24.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (131:17): [True: 24.5k, False: 0]
  ------------------
  132|  24.5k|                return impl(rd, range, value);
  133|  24.5k|            }
  134|      0|            auto crange = get_as_contiguous(range);
  135|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|      0|            return ranges_polyfill::batch_next(
  137|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  138|      0|        }
  139|  24.5k|        else {
  140|  24.5k|            SCN_EXPECT(false);
  141|  24.5k|            SCN_UNREACHABLE;
  142|  24.5k|        }
  143|  24.5k|    }
_ZN3scn2v24impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  111|  24.5k|    {
  112|  24.5k|        SCN_TRY(it,
  ------------------
  |  |   71|  24.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  24.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  24.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 24.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|  24.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  24.5k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  114|  24.5k|                    .transform_error(make_eof_scan_error));
  115|  24.5k|        return rd.read_default(ranges::subrange{it, ranges::end(rng)}, value,
  116|  24.5k|                               loc);
  117|  24.5k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIaEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  98.0k|    {
  223|  98.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  98.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  98.0k|            auto rd = make_reader<T, char_type>();
  228|  98.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  98.0k|                return unexpected(e);
  230|  98.0k|            }
  231|       |
  232|  98.0k|            return impl(rd, range, value);
  233|  98.0k|        }
  234|  98.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  98.0k|            auto rd = make_reader<T, char_type>();
  236|  98.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 98.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  98.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 98.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  98.0k|                return impl(rd, range, value);
  242|  98.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  98.0k|        else {
  250|  98.0k|            SCN_EXPECT(false);
  251|  98.0k|            SCN_UNREACHABLE;
  252|  98.0k|        }
  253|  98.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEaEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  98.0k|    {
  205|  98.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  98.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 2, False: 98.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      2|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      2|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      2|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      2|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      2|    }                                                  \
  |  |  |  |   70|  98.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  98.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  98.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  98.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  98.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 98.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  98.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  98.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIiEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   114k|    {
  223|   114k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   114k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   114k|            auto rd = make_reader<T, char_type>();
  228|   114k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   114k|                return unexpected(e);
  230|   114k|            }
  231|       |
  232|   114k|            return impl(rd, range, value);
  233|   114k|        }
  234|   114k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   114k|            auto rd = make_reader<T, char_type>();
  236|   114k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   114k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 114k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   114k|                return impl(rd, range, value);
  242|   114k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   114k|        else {
  250|   114k|            SCN_EXPECT(false);
  251|   114k|            SCN_UNREACHABLE;
  252|   114k|        }
  253|   114k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEiEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   114k|    {
  205|   114k|        SCN_TRY(it,
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   114k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   114k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   114k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   114k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 114k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   114k|        return rd.read_specs(subr, specs, value, loc);
  218|   114k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIxEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   114k|    {
  223|   114k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   114k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   114k|            auto rd = make_reader<T, char_type>();
  228|   114k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   114k|                return unexpected(e);
  230|   114k|            }
  231|       |
  232|   114k|            return impl(rd, range, value);
  233|   114k|        }
  234|   114k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   114k|            auto rd = make_reader<T, char_type>();
  236|   114k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   114k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 114k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   114k|                return impl(rd, range, value);
  242|   114k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   114k|        else {
  250|   114k|            SCN_EXPECT(false);
  251|   114k|            SCN_UNREACHABLE;
  252|   114k|        }
  253|   114k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEExEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   114k|    {
  205|   114k|        SCN_TRY(it,
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   114k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   114k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   114k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   114k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 114k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   114k|        return rd.read_specs(subr, specs, value, loc);
  218|   114k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIhEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|  98.0k|    {
  223|  98.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|  98.0k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|  98.0k|            auto rd = make_reader<T, char_type>();
  228|  98.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|  98.0k|                return unexpected(e);
  230|  98.0k|            }
  231|       |
  232|  98.0k|            return impl(rd, range, value);
  233|  98.0k|        }
  234|  98.0k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|  98.0k|            auto rd = make_reader<T, char_type>();
  236|  98.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 98.0k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|  98.0k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 98.0k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|  98.0k|                return impl(rd, range, value);
  242|  98.0k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|  98.0k|        else {
  250|  98.0k|            SCN_EXPECT(false);
  251|  98.0k|            SCN_UNREACHABLE;
  252|  98.0k|        }
  253|  98.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEhEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|  98.0k|    {
  205|  98.0k|        SCN_TRY(it,
  ------------------
  |  |   71|  98.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  98.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  98.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  98.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 4, False: 98.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      4|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      4|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      4|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      4|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      4|    }                                                  \
  |  |  |  |   70|  98.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  98.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|  98.0k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|  98.0k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|  98.0k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|  98.0k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 98.0k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|  98.0k|        return rd.read_specs(subr, specs, value, loc);
  218|  98.0k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIjEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   114k|    {
  223|   114k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   114k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   114k|            auto rd = make_reader<T, char_type>();
  228|   114k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   114k|                return unexpected(e);
  230|   114k|            }
  231|       |
  232|   114k|            return impl(rd, range, value);
  233|   114k|        }
  234|   114k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   114k|            auto rd = make_reader<T, char_type>();
  236|   114k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   114k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 114k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   114k|                return impl(rd, range, value);
  242|   114k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   114k|        else {
  250|   114k|            SCN_EXPECT(false);
  251|   114k|            SCN_UNREACHABLE;
  252|   114k|        }
  253|   114k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEjEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   114k|    {
  205|   114k|        SCN_TRY(it,
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   114k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   114k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   114k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   114k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 114k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   114k|        return rd.read_specs(subr, specs, value, loc);
  218|   114k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEEclIyEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
  222|   114k|    {
  223|   114k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (223:23): [Folded - Ignored]
  |  Branch (223:23): [Folded - Ignored]
  ------------------
  224|   114k|                      std::is_same_v<
  ------------------
  |  Branch (224:23): [Folded - Ignored]
  ------------------
  225|      0|                          context_type,
  226|      0|                          basic_contiguous_scan_context<char_type>>) {
  227|   114k|            auto rd = make_reader<T, char_type>();
  228|   114k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  229|   114k|                return unexpected(e);
  230|   114k|            }
  231|       |
  232|   114k|            return impl(rd, range, value);
  233|   114k|        }
  234|   114k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (234:28): [Folded - Ignored]
  ------------------
  235|   114k|            auto rd = make_reader<T, char_type>();
  236|   114k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
  237|      0|                return unexpected(e);
  238|      0|            }
  239|       |
  240|   114k|            if (!is_segment_contiguous(range) || specs.width != 0) {
  ------------------
  |  Branch (240:17): [True: 114k, False: 0]
  |  Branch (240:50): [True: 0, False: 0]
  ------------------
  241|   114k|                return impl(rd, range, value);
  242|   114k|            }
  243|       |
  244|      0|            auto crange = get_as_contiguous(range);
  245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  246|      0|            return ranges_polyfill::batch_next(
  247|      0|                ranges::begin(range), ranges::distance(crange.begin(), it));
  248|      0|        }
  249|   114k|        else {
  250|   114k|            SCN_EXPECT(false);
  251|   114k|            SCN_UNREACHABLE;
  252|   114k|        }
  253|   114k|    }
_ZN3scn2v24impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_19reader_impl_for_intIwEEN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENSA_18default_sentinel_tELNSA_13subrange_kindE0EEEyEENS0_13scan_expectedIDTclL_ZNSA_16function_objects5beginEEclsr3stdE7declvalIRT0_EEEEEERT_RKSM_RT1_:
  204|   114k|    {
  205|   114k|        SCN_TRY(it,
  ------------------
  |  |   71|   114k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   114k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   114k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   114k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 6, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      6|    }                                                  \
  |  |  |  |   70|   114k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|   114k|                skip_ws_before_if_required(rd.skip_ws_before_read(), rng, loc)
  207|   114k|                    .transform_error(make_eof_scan_error));
  208|       |
  209|   114k|        auto subr = ranges::subrange{it, ranges::end(rng)};
  210|       |
  211|   114k|        if (specs.width != 0) {
  ------------------
  |  Branch (211:13): [True: 0, False: 114k]
  ------------------
  212|      0|            SCN_TRY(w_it, rd.read_specs(take_width(subr, specs.width), specs,
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  213|      0|                                        value, loc));
  214|      0|            return w_it.base();
  215|      0|        }
  216|       |
  217|   114k|        return rd.read_specs(subr, specs, value, loc);
  218|   114k|    }

_ZN3scn2v24impl39code_point_length_by_starting_code_unitIcEEmT_:
  109|   192k|{
  110|   192k|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|   192k|}
_ZN3scn2v24impl19get_next_code_pointIcEENS1_21iterator_value_resultIDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEEEEEEDiEESC_:
  262|   103k|{
  263|   103k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  242|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  264|       |
  265|      0|    const auto len = code_point_length_by_starting_code_unit(input[0]);
  266|   103k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  153|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 7.14k, False: 96.1k]
  |  |  ------------------
  ------------------
  267|  7.14k|        return {get_start_of_next_code_point(input),
  268|  7.14k|                detail::invalid_code_point};
  269|  7.14k|    }
  270|  96.1k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  153|  96.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 832, False: 95.3k]
  |  |  ------------------
  ------------------
  271|    832|        return {input.end(), detail::invalid_code_point};
  272|    832|    }
  273|       |
  274|  95.3k|    constexpr auto enc = get_encoding<CharT>();
  275|  95.3k|    std::size_t result{1};
  276|  95.3k|    char32_t output{};
  277|  95.3k|    if constexpr (enc == encoding::utf8) {
  ------------------
  |  Branch (277:19): [Folded - Ignored]
  ------------------
  278|  95.3k|        result = simdutf::convert_utf8_to_utf32(
  279|  95.3k|            reinterpret_cast<const char*>(input.data()), len, &output);
  280|  95.3k|    }
  281|  95.3k|    else if constexpr (enc == encoding::utf16) {
  282|  95.3k|        result = simdutf::convert_utf16_to_utf32(
  283|  95.3k|            reinterpret_cast<const char16_t*>(input.data()), len, &output);
  284|  95.3k|    }
  285|  95.3k|    else if constexpr (enc == encoding::utf32) {
  286|  95.3k|        SCN_EXPECT(len == 1);
  287|  95.3k|        output = static_cast<char32_t>(input[0]);
  288|  95.3k|    }
  289|       |
  290|  95.3k|    if (SCN_UNLIKELY(result != 1)) {
  ------------------
  |  |  153|  95.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 5.52k, False: 89.7k]
  |  |  ------------------
  ------------------
  291|  5.52k|        return {get_start_of_next_code_point(input.substr(1)),
  292|  5.52k|                detail::invalid_code_point};
  293|  5.52k|    }
  294|       |
  295|  89.7k|    return {input.begin() + len, output};
  296|  95.3k|}
_ZN3scn2v24impl28get_start_of_next_code_pointIcEEDTclL_ZN4nano6ranges16function_objects5beginEEclsr3stdE7declvalIRNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEEESB_:
  247|  12.6k|{
  248|  12.6k|    auto it = input.begin();
  249|  91.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (249:12): [True: 89.0k, False: 2.51k]
  ------------------
  250|  89.0k|        if (code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (250:13): [True: 10.1k, False: 78.9k]
  ------------------
  251|  10.1k|            break;
  252|  10.1k|        }
  253|  89.0k|    }
  254|       |
  255|  12.6k|    return it;
  256|  12.6k|}
_ZN3scn2v24impl39code_point_length_by_starting_code_unitIwEEmT_:
  109|  98.2M|{
  110|  98.2M|    return detail::utf_code_point_length_by_starting_code_unit(ch);
  111|  98.2M|}
_ZN3scn2v24impl26transcode_possibly_invalidIwDiEENSt3__18optionalImEENS3_17basic_string_viewIT_NS3_11char_traitsIS7_EEEENS0_4spanIT0_EE:
  448|  7.18M|{
  449|  7.18M|    if (input.empty()) {
  ------------------
  |  Branch (449:9): [True: 0, False: 7.18M]
  ------------------
  450|      0|        return 0;
  451|      0|    }
  452|       |
  453|  7.18M|    if constexpr (get_encoding<SourceCharT>() == get_encoding<DestCharT>()) {
  ------------------
  |  Branch (453:19): [Folded - Ignored]
  ------------------
  454|  7.18M|        SCN_EXPECT(output.size() >= input.size());
  ------------------
  |  |  242|  7.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  7.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  455|      0|        std::memcpy(output.data(), input.data(),
  456|  7.18M|                    input.size() * sizeof(SourceCharT));
  457|  7.18M|        return input.size();
  458|  7.18M|    }
  459|       |
  460|      0|    const auto result = [&]() {
  461|      0|        constexpr auto src_enc = get_encoding<SourceCharT>();
  462|      0|        constexpr auto dest_enc = get_encoding<DestCharT>();
  463|       |
  464|      0|        if constexpr (src_enc == encoding::utf8) {
  465|      0|            if constexpr (dest_enc == encoding::utf16) {
  466|      0|                return simdutf::convert_utf8_to_utf16_with_errors(
  467|      0|                    input.data(), input.size(),
  468|      0|                    reinterpret_cast<char16_t*>(output.data()));
  469|      0|            }
  470|      0|            else {
  471|      0|                return simdutf::convert_utf8_to_utf32_with_errors(
  472|      0|                    input.data(), input.size(),
  473|      0|                    reinterpret_cast<char32_t*>(output.data()));
  474|      0|            }
  475|      0|        }
  476|      0|        else if constexpr (src_enc == encoding::utf16) {
  477|      0|            if constexpr (dest_enc == encoding::utf8) {
  478|      0|                return simdutf::convert_utf16_to_utf8_with_errors(
  479|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  480|      0|                    input.size(), output.data());
  481|      0|            }
  482|      0|            else {
  483|      0|                return simdutf::convert_utf16_to_utf32_with_errors(
  484|      0|                    reinterpret_cast<const char16_t*>(input.data()),
  485|      0|                    input.size(), reinterpret_cast<char32_t*>(output.data()));
  486|      0|            }
  487|      0|        }
  488|      0|        else if constexpr (src_enc == encoding::utf32) {
  489|      0|            if constexpr (dest_enc == encoding::utf8) {
  490|      0|                return simdutf::convert_utf32_to_utf8_with_errors(
  491|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  492|      0|                    input.size(), output.data());
  493|      0|            }
  494|      0|            else {
  495|      0|                return simdutf::convert_utf32_to_utf16_with_errors(
  496|      0|                    reinterpret_cast<const char32_t*>(input.data()),
  497|      0|                    input.size(), reinterpret_cast<char16_t*>(output.data()));
  498|      0|            }
  499|      0|        }
  500|      0|    }();
  501|       |
  502|      0|    if (SCN_UNLIKELY(result.error != simdutf::SUCCESS)) {
  ------------------
  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  503|      0|        return std::nullopt;
  504|      0|    }
  505|      0|    SCN_ENSURE(result.count <= output.size());
  ------------------
  |  |  243|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  239|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  506|      0|    return result.count;
  507|      0|}

_ZN3scn2v24impl11is_cp_spaceEDi:
   28|  12.9M|{
   29|       |    // Pattern_White_Space property
   30|  12.9M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (30:13): [True: 12.8M, False: 89.8k]
  |  Branch (30:27): [True: 5.59M, False: 7.30M]
  ------------------
   31|  12.9M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (31:12): [True: 142k, False: 7.25M]
  ------------------
   32|  12.9M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (32:12): [True: 2.94k, False: 7.24M]
  ------------------
   33|  12.9M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (33:12): [True: 3.30k, False: 7.24M]
  ------------------
   34|  12.9M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (34:12): [True: 3.12k, False: 7.24M]
  ------------------
   35|  12.9M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (35:12): [True: 3.15k, False: 7.23M]
  ------------------
   36|  12.9M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (36:12): [True: 0, False: 7.23M]
  ------------------
   37|  12.9M|}

_ZN3scn2v24impl14is_ascii_spaceEc:
   57|  13.1M|{
   58|  13.1M|    return is_ascii_space_lookup[static_cast<size_t>(
   59|  13.1M|        static_cast<unsigned char>(ch))];
   60|  13.1M|}

_ZN3scn2v24impl16has_byte_greaterEmh:
   91|  6.90M|{
   92|  6.90M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
   93|  6.90M|}

_ZN3scn2v24impl29basic_contiguous_scan_contextIcEC2IRN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
   56|  4.77M|    {
   57|  4.77M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5beginEv:
   60|  13.9M|    {
   61|  13.9M|        return m_current;
   62|  13.9M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE3endEv:
   65|  9.16M|    {
   66|  9.16M|        return m_range.end();
   67|  9.16M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
   80|  4.48M|    {
   81|  4.48M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  4.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  4.48M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  4.48M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 4.48M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  4.48M|        }
   87|  4.48M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  4.48M|    static_cast<    \
  |  |  247|  4.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  4.48M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIcE5rangeEv:
   70|  4.67M|    {
   71|  4.67M|        return ranges::subrange{begin(), end()};
   72|  4.67M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwEC2IRN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
   56|  4.88M|    {
   57|  4.88M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5beginEv:
   60|  13.4M|    {
   61|  13.4M|        return m_current;
   62|  13.4M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE3endEv:
   65|  8.59M|    {
   66|  8.59M|        return m_range.end();
   67|  8.59M|    }
_ZN3scn2v24impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
   80|  4.00M|    {
   81|  4.00M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  242|  4.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  4.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   82|  4.00M|        if constexpr (detail::is_comparable_with_nullptr<iterator>::value) {
  ------------------
  |  Branch (82:23): [Folded - Ignored]
  ------------------
   83|  4.00M|            if (it == nullptr) {
  ------------------
  |  Branch (83:17): [True: 0, False: 4.00M]
  ------------------
   84|      0|                it = end();
   85|      0|            }
   86|  4.00M|        }
   87|  4.00M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  246|  4.00M|    static_cast<    \
  |  |  247|  4.00M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   88|  4.00M|    }
_ZNK3scn2v24impl29basic_contiguous_scan_contextIwE5rangeEv:
   70|  4.59M|    {
   71|  4.59M|        return ranges::subrange{begin(), end()};
   72|  4.59M|    }

_ZNK3scn2v24impl12function_refIFbcES3_EclEc:
  204|   555k|    {
  205|   555k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|   555k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|   555k|    }
_ZN3scn2v24impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   245k|    {
  196|   245k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  185|   277k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   277k|              cvref<T> obj = *get<T>(fn);
  187|   277k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   277k|                  obj(static_cast<decltype(args)>(args)...);
  189|   277k|              }
  190|   277k|              else {
  191|   277k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   277k|              }
  193|   277k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  125|   277k|    {
  126|   277k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   277k|            return static_cast<T*>(s.m_cp);
  128|   277k|        }
  129|   277k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   277k|            return static_cast<T*>(s.m_p);
  131|   277k|        }
  132|   277k|        else {
  133|   277k|            return reinterpret_cast<T*>(s.m_fp);
  134|   277k|        }
  135|   277k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  103|   245k|        {
  104|   245k|        }
_ZNK3scn2v24impl12function_refIFbDiES3_EclEDi:
  204|  25.7M|    {
  205|  25.7M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  25.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  25.7M|    }
_ZN3scn2v24impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|  7.17M|    {
  196|  7.17M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  185|  12.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  12.8M|              cvref<T> obj = *get<T>(fn);
  187|  12.8M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  12.8M|                  obj(static_cast<decltype(args)>(args)...);
  189|  12.8M|              }
  190|  12.8M|              else {
  191|  12.8M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  12.8M|              }
  193|  12.8M|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  125|  12.8M|    {
  126|  12.8M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  12.8M|            return static_cast<T*>(s.m_cp);
  128|  12.8M|        }
  129|  12.8M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.8M|            return static_cast<T*>(s.m_p);
  131|  12.8M|        }
  132|  12.8M|        else {
  133|  12.8M|            return reinterpret_cast<T*>(s.m_fp);
  134|  12.8M|        }
  135|  12.8M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  103|  7.17M|        {
  104|  7.17M|        }
_ZN3scn2v24impl12function_refIFbcES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_:
  195|   245k|    {
  196|   245k|    }
_ZZN3scn2v24impl12function_refIFbcES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEcE_clEST_c:
  185|   277k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   277k|              cvref<T> obj = *get<T>(fn);
  187|   277k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   277k|                  obj(static_cast<decltype(args)>(args)...);
  189|   277k|              }
  190|   277k|              else {
  191|   277k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   277k|              }
  193|   277k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlcE_EEDaNS3_7storageE:
  125|   277k|    {
  126|   277k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   277k|            return static_cast<T*>(s.m_cp);
  128|   277k|        }
  129|   277k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   277k|            return static_cast<T*>(s.m_p);
  131|   277k|        }
  132|   277k|        else {
  133|   277k|            return reinterpret_cast<T*>(s.m_fp);
  134|   277k|        }
  135|   277k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlcE_LPv0EEEPSK_:
  103|   245k|        {
  104|   245k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_:
  195|  6.37M|    {
  196|  6.37M|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_SM_LPv0EEESL_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  185|  12.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|  12.0M|              cvref<T> obj = *get<T>(fn);
  187|  12.0M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|  12.0M|                  obj(static_cast<decltype(args)>(args)...);
  189|  12.0M|              }
  190|  12.0M|              else {
  191|  12.0M|                  return obj(static_cast<decltype(args)>(args)...);
  192|  12.0M|              }
  193|  12.0M|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSB_LNS7_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_EUlDiE_EEDaNS3_7storageE:
  125|  12.0M|    {
  126|  12.0M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|  12.0M|            return static_cast<T*>(s.m_cp);
  128|  12.0M|        }
  129|  12.0M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|  12.0M|            return static_cast<T*>(s.m_p);
  131|  12.0M|        }
  132|  12.0M|        else {
  133|  12.0M|            return reinterpret_cast<T*>(s.m_fp);
  134|  12.0M|        }
  135|  12.0M|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeIPKwSC_LNS8_13subrange_kindE1EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISI_EEE4typeEOSI_EUlDiE_LPv0EEEPSI_:
  103|  6.37M|        {
  104|  6.37M|        }
_ZNK3scn2v24impl12function_refIFbwES3_EclEw:
  204|  1.99M|    {
  205|  1.99M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  248|  1.99M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  206|  1.99M|    }
_ZN3scn2v24impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  195|   702k|    {
  196|   702k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  185|   996k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   996k|              cvref<T> obj = *get<T>(fn);
  187|   996k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   996k|                  obj(static_cast<decltype(args)>(args)...);
  189|   996k|              }
  190|   996k|              else {
  191|   996k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   996k|              }
  193|   996k|          }),
_ZN3scn2v24impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  125|   996k|    {
  126|   996k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   996k|            return static_cast<T*>(s.m_cp);
  128|   996k|        }
  129|   996k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   996k|            return static_cast<T*>(s.m_p);
  131|   996k|        }
  132|   996k|        else {
  133|   996k|            return reinterpret_cast<T*>(s.m_fp);
  134|   996k|        }
  135|   996k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  103|   702k|        {
  104|   702k|        }
_ZN3scn2v24impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_:
  195|   800k|    {
  196|   800k|    }
_ZZN3scn2v24impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_SP_LPv0EEESO_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  185|   800k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   800k|              cvref<T> obj = *get<T>(fn);
  187|   800k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   800k|                  obj(static_cast<decltype(args)>(args)...);
  189|   800k|              }
  190|   800k|              else {
  191|   800k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   800k|              }
  193|   800k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISK_EEE4typeEOSK_EUlDiE_EEDaNS3_7storageE:
  125|   800k|    {
  126|   800k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   800k|            return static_cast<T*>(s.m_cp);
  128|   800k|        }
  129|   800k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   800k|            return static_cast<T*>(s.m_p);
  131|   800k|        }
  132|   800k|        else {
  133|   800k|            return reinterpret_cast<T*>(s.m_fp);
  134|   800k|        }
  135|   800k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceIRKN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_24simple_borrowed_iteratorIT_Xsr6rangesE14borrowed_rangeISL_EEE4typeEOSL_EUlDiE_LPv0EEEPSL_:
  103|   800k|        {
  104|   800k|        }
_ZN3scn2v24impl12function_refIFbwES3_EC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_:
  195|   702k|    {
  196|   702k|    }
_ZZN3scn2v24impl12function_refIFbwES3_EC1IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_SO_LPv0EEEOSK_ENKUlNS1_12fnref_detail4base7storageEwE_clEST_w:
  185|   996k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  186|   996k|              cvref<T> obj = *get<T>(fn);
  187|   996k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (187:29): [Folded - Ignored]
  ------------------
  188|   996k|                  obj(static_cast<decltype(args)>(args)...);
  189|   996k|              }
  190|   996k|              else {
  191|   996k|                  return obj(static_cast<decltype(args)>(args)...);
  192|   996k|              }
  193|   996k|          }),
_ZN3scn2v24impl12fnref_detail4base3getIZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tELNS7_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS7_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESJ_iEUlwE_EEDaNS3_7storageE:
  125|   996k|    {
  126|   996k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (126:23): [Folded - Ignored]
  ------------------
  127|   996k|            return static_cast<T*>(s.m_cp);
  128|   996k|        }
  129|   996k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (129:28): [Folded - Ignored]
  ------------------
  130|   996k|            return static_cast<T*>(s.m_p);
  131|   996k|        }
  132|   996k|        else {
  133|   996k|            return reinterpret_cast<T*>(s.m_fp);
  134|   996k|        }
  135|   996k|    }
_ZN3scn2v24impl12fnref_detail4base7storageC2IZNS1_34parse_integer_digits_without_thsepIN4nano6ranges9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tELNS8_13subrange_kindE0EEEEENS0_13scan_expectedIDTclL_ZNS8_16function_objects5beginEEclsr3stdE7declvalIRT_EEEEEESK_iEUlwE_LPv0EEEPSK_:
  103|   702k|        {
  104|   702k|        }

_ZN3scn2v24impl19make_eof_scan_errorENS1_9eof_errorE:
   43|  60.3k|{
   44|  60.3k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|  60.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  60.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   45|      0|    return scan_error{scan_error::end_of_range, "EOF"};
   46|  60.3k|}
_ZN3scn2v24implntENS1_9eof_errorE:
   29|  59.2M|{
   30|  59.2M|    return e != eof_error::good;
   31|  59.2M|}
_ZN3scn2v24impl20make_eof_parse_errorENS1_9eof_errorE:
   90|   187k|{
   91|   187k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  242|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   92|      0|    return parse_error::eof;
   93|   187k|}
_ZN3scn2v24impleqENS1_11parse_errorES2_:
   68|  14.7M|    {
   69|  14.7M|        return a.m_code == b.m_code;
   70|  14.7M|    }
_ZN3scn2v24impl11parse_errorC2ENS2_4codeE:
   54|  67.8M|    {
   55|  67.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  227|  67.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
   56|  67.8M|    }
_ZZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  114|   816k|    return [code, msg](parse_error err) {
  115|   816k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   816k|    };
_ZN3scn2v24impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
   99|   816k|{
  100|   816k|    if (err == parse_error::good) {
  ------------------
  |  Branch (100:9): [True: 0, False: 816k]
  ------------------
  101|      0|        return {};
  102|      0|    }
  103|       |
  104|   816k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (104:9): [True: 0, False: 816k]
  ------------------
  105|      0|        return scan_error{scan_error::end_of_range, "EOF"};
  106|      0|    }
  107|       |
  108|   816k|    return scan_error{code, msg};
  109|   816k|}
_ZN3scn2v24impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  113|   947k|{
  114|   947k|    return [code, msg](parse_error err) {
  115|   947k|        return make_scan_error_from_parse_error(err, code, msg);
  116|   947k|    };
  117|   947k|}

_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  586|  3.02M|{
  587|  3.02M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  588|  3.02M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  594|   179k|{
  595|   179k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  596|   179k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   179k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 16.3k, False: 163k]
  |  |  ------------------
  ------------------
  597|  16.3k|        source.sync(*n);
  598|  16.3k|    }
  599|   163k|    else {
  600|   163k|        source.sync_all();
  601|   163k|    }
  602|   179k|    return n;
  603|   179k|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  610|  3.04M|{
  611|  3.04M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
  612|  3.04M|}
_ZN3scn2v26detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  618|   522k|{
  619|   522k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
  620|   522k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   522k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 32.6k, False: 490k]
  |  |  ------------------
  ------------------
  621|  32.6k|        source.sync(*n);
  622|  32.6k|    }
  623|   490k|    else {
  624|   490k|        source.sync_all();
  625|   490k|    }
  626|   522k|    return n;
  627|   522k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  543|  3.02M|{
  544|  3.02M|    return vscan_internal(source, format, args);
  545|  3.02M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
  549|   179k|{
  550|   179k|    auto n = vscan_internal(source, format, args);
  551|   179k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   179k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 16.3k, False: 163k]
  |  |  ------------------
  ------------------
  552|  16.3k|        source.sync(*n);
  553|  16.3k|    }
  554|   163k|    else {
  555|   163k|        source.sync_all();
  556|   163k|    }
  557|   179k|    return n;
  558|   179k|}
_ZN3scn2v26detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  563|  3.04M|{
  564|  3.04M|    return vscan_internal(source, format, args);
  565|  3.04M|}
_ZN3scn2v26detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
  569|   522k|{
  570|   522k|    auto n = vscan_internal(source, format, args);
  571|   522k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|   522k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 32.6k, False: 490k]
  |  |  ------------------
  ------------------
  572|  32.6k|        source.sync(*n);
  573|  32.6k|    }
  574|   490k|    else {
  575|   490k|        source.sync_all();
  576|   490k|    }
  577|   522k|    return n;
  578|   522k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  653|   633k|{
  654|   633k|    return vscan_value_internal(source, arg);
  655|   633k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  658|  16.3k|{
  659|  16.3k|    auto n = vscan_value_internal(source, arg);
  660|  16.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  16.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 16.3k]
  |  |  ------------------
  ------------------
  661|      0|        source.sync(*n);
  662|      0|    }
  663|  16.3k|    else {
  664|  16.3k|        source.sync_all();
  665|  16.3k|    }
  666|  16.3k|    return n;
  667|  16.3k|}
_ZN3scn2v26detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  672|   601k|{
  673|   601k|    return vscan_value_internal(source, arg);
  674|   601k|}
_ZN3scn2v26detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  678|  49.0k|{
  679|  49.0k|    auto n = vscan_value_internal(source, arg);
  680|  49.0k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  152|  49.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 49.0k]
  |  |  ------------------
  ------------------
  681|      0|        source.sync(*n);
  682|      0|    }
  683|  49.0k|    else {
  684|  49.0k|        source.sync_all();
  685|  49.0k|    }
  686|  49.0k|    return n;
  687|  49.0k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|   359k|{
  476|   359k|    const auto argcount = args.size();
  477|   359k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 32.6k, False: 326k]
  |  Branch (477:60): [True: 32.6k, False: 0]
  ------------------
  478|  32.6k|        auto arg = args.get(0);
  479|  32.6k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  32.6k|    static_cast<    \
  |  |  247|  32.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  32.6k|    }
  481|       |
  482|   326k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 326k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   326k|    SCN_UNLIKELY_ATTR
  490|   326k|    {
  491|   326k|        auto handler = format_handler<false, CharT>{
  492|   326k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   326k|    static_cast<    \
  |  |  247|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   326k|    static_cast<    \
  |  |  247|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   326k|        return vscan_parse_format_string(format, handler);
  494|   326k|    }
  495|   326k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  6.40M|{
   36|  6.40M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 5.10M, False: 1.30M]
  ------------------
   37|  5.10M|        return false;
   38|  5.10M|    }
   39|  1.30M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.30M, False: 0]
  |  Branch (39:39): [True: 1.30M, False: 0]
  ------------------
   40|  6.40M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|  49.0k|{
   69|  49.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  49.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 49.0k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|  49.0k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|  49.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 49.0k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|  49.0k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|  49.0k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|  49.0k|    static_cast<    \
  |  |  247|  49.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|  49.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  49.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  49.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  49.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  49.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 49.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  49.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  49.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  49.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  49.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  49.0k|    }                                                  \
  |  |  |  |   70|  49.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|  49.0k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcEC2IN4nano6ranges9subrange_8subrangeIPKcSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIcNSF_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
  313|  4.77M|    {
  314|  4.77M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_baseC2Em:
  132|  10.9M|    {
  133|  10.9M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  153|  10.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 10.9M]
  |  |  ------------------
  ------------------
  134|      0|            visited_args_upper.resize((args_count - 64) / 8);
  135|      0|        }
  136|  10.9M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcEC2EN4nano6ranges9subrange_8subrangeIPKcS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
  263|  4.77M|    {
  264|  4.77M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  4.77M|{
  441|  4.77M|    const auto beg = handler.get_ctx().begin();
  442|  4.77M|    detail::parse_format_string<false>(format, handler);
  443|  4.77M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  4.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 294k, False: 4.48M]
  |  |  ------------------
  ------------------
  444|   294k|        return unexpected(handler.error);
  445|   294k|    }
  446|  4.48M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  4.77M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
  424|  32.6M|    {
  425|  32.6M|        return ctx.get();
  426|  32.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
  267|  32.6M|    {
  268|  32.6M|        return contiguous_ctx;
  269|  32.6M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
  317|  9.26M|    {
  318|  9.26M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 9.26M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  9.26M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
   91|  4.77M|{
   92|  4.77M|    auto arg = ctx.arg(id);
   93|  4.77M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  4.77M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.77M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  4.77M|    return arg;
   97|  4.77M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
  207|  10.9M|    {
  208|  10.9M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  10.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 10.9M]
  |  |  ------------------
  ------------------
  209|      0|            on_error("Invalid out-of-range argument ID");
  210|      0|            return;
  211|      0|        }
  212|       |
  213|  10.9M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  153|  10.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 10.9M]
  |  |  ------------------
  ------------------
  214|      0|            return on_error("Argument with this ID has already been scanned");
  215|      0|        }
  216|       |
  217|  10.9M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  10.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 10.9M, False: 0]
  |  |  ------------------
  ------------------
  218|  10.9M|            visited_args_lower64 |= (1ull << id);
  219|  10.9M|            return;
  220|  10.9M|        }
  221|       |
  222|      0|        id -= 64;
  223|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
  224|      0|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
  192|  10.9M|    {
  193|  10.9M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  153|  10.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 10.9M]
  |  |  ------------------
  ------------------
  194|      0|            on_error("Invalid out-of-range argument ID");
  195|      0|            return false;
  196|      0|        }
  197|       |
  198|  10.9M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  152|  10.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 10.9M, False: 0]
  |  |  ------------------
  ------------------
  199|  10.9M|            return (visited_args_lower64 >> id) & 1ull;
  200|  10.9M|        }
  201|       |
  202|      0|        id -= 64;
  203|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
  204|  10.9M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
  176|  1.56M|    {
  177|  1.56M|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  153|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 1.56M, False: 0]
  |  |  ------------------
  ------------------
  178|  1.56M|            error = err;
  179|  1.56M|        }
  180|  1.56M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
  346|  4.77M|    {
  347|  4.77M|        return parse_ctx.next_arg_id();
  348|  4.77M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
  387|  4.77M|    {
  388|  4.77M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  4.77M|        set_arg_as_visited(arg_id);
  390|       |
  391|  4.77M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 4.77M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  4.77M|        auto specs = detail::format_specs{};
  401|  4.77M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  4.77M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  4.77M|            arg.type()};
  404|       |
  405|  4.77M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  4.77M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 4.77M]
  |  Branch (406:29): [True: 65.3k, False: 4.71M]
  ------------------
  407|  65.3k|            SCN_UNLIKELY_ATTR
  408|  65.3k|            on_error("Missing '}' in format string");
  409|  65.3k|            return parse_ctx.begin();
  410|  65.3k|        }
  411|  4.71M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  4.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.6k, False: 4.67M]
  |  |  ------------------
  ------------------
  412|  32.6k|            return parse_ctx.begin();
  413|  32.6k|        }
  414|  4.67M|        parse_ctx.advance_to(begin);
  415|       |
  416|  4.67M|        on_visit_scan_arg(
  417|  4.67M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  4.67M|                                           get_ctx().locale()},
  419|  4.67M|            arg);
  420|  4.67M|        return parse_ctx.begin();
  421|  4.71M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
  111|  4.77M|    {
  112|  4.77M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
  358|  4.67M|    {
  359|  4.67M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 4.67M]
  |  Branch (359:23): [True: 0, False: 4.67M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  4.67M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  4.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  4.67M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  4.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 196k, False: 4.48M]
  |  |  ------------------
  ------------------
  366|   196k|            on_error(r.error());
  367|   196k|        }
  368|  4.48M|        else {
  369|  4.48M|            get_ctx().advance_to(*r);
  370|  4.48M|        }
  371|  4.67M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base8on_errorEPKc:
  171|  1.30M|    {
  172|  1.30M|        SCN_UNLIKELY_ATTR
  173|  1.30M|        error = scan_error{scan_error::invalid_format_string, msg};
  174|  1.30M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
  139|  10.9M|    {
  140|  10.9M|        {
  141|  10.9M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (141:45): [True: 0, False: 10.9M]
  ------------------
  142|  10.9M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (142:35): [True: 0, False: 10.9M]
  ------------------
  143|  10.9M|                                      ? std::numeric_limits<uint64_t>::max()
  144|  10.9M|                                      : (1ull << args_count_lower64) - 1;
  145|       |
  146|  10.9M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (146:17): [True: 0, False: 10.9M]
  ------------------
  147|      0|                return on_error("Argument list not exhausted");
  148|      0|            }
  149|  10.9M|        }
  150|       |
  151|  10.9M|        if (args_count < 64) {
  ------------------
  |  Branch (151:13): [True: 10.9M, False: 0]
  ------------------
  152|  10.9M|            return;
  153|  10.9M|        }
  154|       |
  155|      0|        auto last_args_count = args_count - 64;
  156|      0|        for (auto it = visited_args_upper.begin();
  157|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (157:14): [True: 0, False: 0]
  ------------------
  158|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (158:17): [True: 0, False: 0]
  ------------------
  159|      0|                return on_error("Argument list not exhausted");
  160|      0|            }
  161|      0|            last_args_count -= 8;
  162|      0|        }
  163|       |
  164|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
  165|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (165:13): [True: 0, False: 0]
  ------------------
  166|      0|            return on_error("Argument list not exhausted");
  167|      0|        }
  168|      0|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_base9get_errorEv:
  187|  10.9M|    {
  188|  10.9M|        return error;
  189|  10.9M|    }
vscan.cpp:_ZNK3scn2v212_GLOBAL__N_119format_handler_basecvbEv:
  183|  32.0M|    {
  184|  32.0M|        return static_cast<bool>(error);
  185|  32.0M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
  313|   326k|    {
  314|   326k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
  240|   326k|    {
  241|   326k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   326k|{
  441|   326k|    const auto beg = handler.get_ctx().begin();
  442|   326k|    detail::parse_format_string<false>(format, handler);
  443|   326k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 294k, False: 32.6k]
  |  |  ------------------
  ------------------
  444|   294k|        return unexpected(handler.error);
  445|   294k|    }
  446|  32.6k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   326k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
  424|  1.50M|    {
  425|  1.50M|        return ctx.get();
  426|  1.50M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIcE3getEv:
  244|  1.50M|    {
  245|  1.50M|        return ctx;
  246|  1.50M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
  317|   359k|    {
  318|   359k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 359k]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|   359k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
   91|   326k|{
   92|   326k|    auto arg = ctx.arg(id);
   93|   326k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 326k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   326k|    return arg;
   97|   326k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
  346|   326k|    {
  347|   326k|        return parse_ctx.next_arg_id();
  348|   326k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
  387|   326k|    {
  388|   326k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   326k|        set_arg_as_visited(arg_id);
  390|       |
  391|   326k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 326k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   326k|        auto specs = detail::format_specs{};
  401|   326k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   326k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   326k|            arg.type()};
  404|       |
  405|   326k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   326k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 326k]
  |  Branch (406:29): [True: 65.3k, False: 261k]
  ------------------
  407|  65.3k|            SCN_UNLIKELY_ATTR
  408|  65.3k|            on_error("Missing '}' in format string");
  409|  65.3k|            return parse_ctx.begin();
  410|  65.3k|        }
  411|   261k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 32.6k, False: 228k]
  |  |  ------------------
  ------------------
  412|  32.6k|            return parse_ctx.begin();
  413|  32.6k|        }
  414|   228k|        parse_ctx.advance_to(begin);
  415|       |
  416|   228k|        on_visit_scan_arg(
  417|   228k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   228k|                                           get_ctx().locale()},
  419|   228k|            arg);
  420|   228k|        return parse_ctx.begin();
  421|   261k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
  111|   326k|    {
  112|   326k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   228k|    {
  359|   228k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 228k]
  |  Branch (359:23): [True: 0, False: 228k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   228k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   228k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   228k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 196k, False: 32.6k]
  |  |  ------------------
  ------------------
  366|   196k|            on_error(r.error());
  367|   196k|        }
  368|  32.6k|        else {
  369|  32.6k|            get_ctx().advance_to(*r);
  370|  32.6k|        }
  371|   228k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  6.04M|{
  456|  6.04M|    const auto argcount = args.size();
  457|  6.04M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 1.26M, False: 4.77M]
  |  Branch (457:60): [True: 1.26M, False: 0]
  ------------------
  458|  1.26M|        auto arg = args.get(0);
  459|  1.26M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  1.26M|    static_cast<    \
  |  |  247|  1.26M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|  1.26M|    }
  461|       |
  462|  4.77M|    auto handler = format_handler<true, CharT>{
  463|  4.77M|        ranges::subrange<const CharT*>{source.data(),
  464|  4.77M|                                       source.data() + source.size()},
  465|  4.77M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  4.77M|    static_cast<    \
  |  |  247|  4.77M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  4.77M|    static_cast<    \
  |  |  247|  4.77M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  4.77M|    return vscan_parse_format_string(format, handler);
  467|  6.04M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.90M|{
   49|  1.90M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.90M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.90M|    auto reader =
   55|  1.90M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.90M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.90M|                                           source.data() + source.size()},
   58|  1.90M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.90M|    static_cast<    \
  |  |  247|  1.90M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.90M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.90M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.90M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.90M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 49.0k, False: 1.85M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  49.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|  49.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  49.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|  49.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|  49.0k|    }                                                  \
  |  |  |  |   70|  1.90M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.85M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.85M|    return ranges::distance(source.data(), it);
   61|  1.90M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
  455|  6.08M|{
  456|  6.08M|    const auto argcount = args.size();
  457|  6.08M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (457:9): [True: 1.20M, False: 4.88M]
  |  Branch (457:60): [True: 1.20M, False: 0]
  ------------------
  458|  1.20M|        auto arg = args.get(0);
  459|  1.20M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  1.20M|    static_cast<    \
  |  |  247|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  460|  1.20M|    }
  461|       |
  462|  4.88M|    auto handler = format_handler<true, CharT>{
  463|  4.88M|        ranges::subrange<const CharT*>{source.data(),
  464|  4.88M|                                       source.data() + source.size()},
  465|  4.88M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  4.88M|    static_cast<    \
  |  |  247|  4.88M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|  4.88M|    static_cast<    \
  |  |  247|  4.88M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  466|  4.88M|    return vscan_parse_format_string(format, handler);
  467|  6.08M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
   35|  7.13M|{
   36|  7.13M|    if (format.size() != 2) {
  ------------------
  |  Branch (36:9): [True: 5.83M, False: 1.30M]
  ------------------
   37|  5.83M|        return false;
   38|  5.83M|    }
   39|  1.30M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (39:12): [True: 1.30M, False: 0]
  |  Branch (39:39): [True: 1.30M, False: 0]
  ------------------
   40|  7.13M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
   48|  1.80M|{
   49|  1.80M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  1.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 1.80M]
  |  |  ------------------
  ------------------
   50|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   51|      0|                                     "Argument #0 not found");
   52|      0|    }
   53|       |
   54|  1.80M|    auto reader =
   55|  1.80M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
   56|  1.80M|            ranges::subrange<const CharT*>{source.data(),
   57|  1.80M|                                           source.data() + source.size()},
   58|  1.80M|            SCN_MOVE(args), loc};
  ------------------
  |  |  246|  1.80M|    static_cast<    \
  |  |  247|  1.80M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   59|  1.80M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|  1.80M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|  1.80M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|  1.80M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|  1.80M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 147k, False: 1.65M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   147k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   147k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   147k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   147k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   147k|    }                                                  \
  |  |  |  |   70|  1.80M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|  1.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   60|  1.65M|    return ranges::distance(source.data(), it);
   61|  1.80M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwEC2IN4nano6ranges9subrange_8subrangeIPKwSA_LNS6_13subrange_kindE1EEEEEOT_NSt3__117basic_string_viewIwNSF_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
  313|  4.88M|    {
  314|  4.88M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwEC2EN4nano6ranges9subrange_8subrangeIPKwS9_LNS5_13subrange_kindE1EEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
  263|  4.88M|    {
  264|  4.88M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|  4.88M|{
  441|  4.88M|    const auto beg = handler.get_ctx().begin();
  442|  4.88M|    detail::parse_format_string<false>(format, handler);
  443|  4.88M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  4.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 882k, False: 4.00M]
  |  |  ------------------
  ------------------
  444|   882k|        return unexpected(handler.error);
  445|   882k|    }
  446|  4.00M|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|  4.88M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
  424|  31.8M|    {
  425|  31.8M|        return ctx.get();
  426|  31.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
  267|  31.8M|    {
  268|  31.8M|        return contiguous_ctx;
  269|  31.8M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
  317|  8.89M|    {
  318|  8.89M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 8.89M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  8.89M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
   91|  4.88M|{
   92|  4.88M|    auto arg = ctx.arg(id);
   93|  4.88M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|  4.88M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 4.88M]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|  4.88M|    return arg;
   97|  4.88M|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
  346|  4.88M|    {
  347|  4.88M|        return parse_ctx.next_arg_id();
  348|  4.88M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
  387|  4.88M|    {
  388|  4.88M|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|  4.88M|        set_arg_as_visited(arg_id);
  390|       |
  391|  4.88M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 4.88M]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|  4.88M|        auto specs = detail::format_specs{};
  401|  4.88M|        detail::specs_checker<specs_handler<context_type>> handler{
  402|  4.88M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|  4.88M|            arg.type()};
  404|       |
  405|  4.88M|        begin = detail::parse_format_specs(begin, end, handler);
  406|  4.88M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 4.88M]
  |  Branch (406:29): [True: 196k, False: 4.69M]
  ------------------
  407|   196k|            SCN_UNLIKELY_ATTR
  408|   196k|            on_error("Missing '}' in format string");
  409|   196k|            return parse_ctx.begin();
  410|   196k|        }
  411|  4.69M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|  4.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 98.0k, False: 4.59M]
  |  |  ------------------
  ------------------
  412|  98.0k|            return parse_ctx.begin();
  413|  98.0k|        }
  414|  4.59M|        parse_ctx.advance_to(begin);
  415|       |
  416|  4.59M|        on_visit_scan_arg(
  417|  4.59M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|  4.59M|                                           get_ctx().locale()},
  419|  4.59M|            arg);
  420|  4.59M|        return parse_ctx.begin();
  421|  4.69M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
  111|  4.88M|    {
  112|  4.88M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
  358|  4.59M|    {
  359|  4.59M|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 4.59M]
  |  Branch (359:23): [True: 0, False: 4.59M]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|  4.59M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|  4.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|  4.59M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|  4.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 588k, False: 4.00M]
  |  |  ------------------
  ------------------
  366|   588k|            on_error(r.error());
  367|   588k|        }
  368|  4.00M|        else {
  369|  4.00M|            get_ctx().advance_to(*r);
  370|  4.00M|        }
  371|  4.59M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
  475|  1.04M|{
  476|  1.04M|    const auto argcount = args.size();
  477|  1.04M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (477:9): [True: 98.0k, False: 947k]
  |  Branch (477:60): [True: 98.0k, False: 0]
  ------------------
  478|  98.0k|        auto arg = args.get(0);
  479|  98.0k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  246|  98.0k|    static_cast<    \
  |  |  247|  98.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  480|  98.0k|    }
  481|       |
  482|   947k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (482:9): [True: 0, False: 947k]
  ------------------
  483|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
  484|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  485|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  486|      0|        return vscan_parse_format_string(format, handler);
  487|      0|    }
  488|       |
  489|   947k|    SCN_UNLIKELY_ATTR
  490|   947k|    {
  491|   947k|        auto handler = format_handler<false, CharT>{
  492|   947k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   947k|    static_cast<    \
  |  |  247|   947k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  246|   947k|    static_cast<    \
  |  |  247|   947k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  493|   947k|        return vscan_parse_format_string(format, handler);
  494|   947k|    }
  495|   947k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
   68|   147k|{
   69|   147k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
   70|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
   71|      0|                                     "Argument #0 not found");
   72|      0|    }
   73|       |
   74|   147k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  152|   147k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (152:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
   75|      0|        auto reader = impl::default_arg_reader<
   76|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
   77|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  246|      0|    static_cast<    \
  |  |  247|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   78|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|      0|    }                                                  \
  |  |  |  |   70|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   79|      0|        return ranges::distance(source.get_contiguous().begin(), it);
   80|      0|    }
   81|       |
   82|   147k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
   83|   147k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  246|   147k|    static_cast<    \
  |  |  247|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   84|   147k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  |   71|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  |   66|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  |   67|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  153|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (153:25): [True: 147k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|   147k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  |   63|   147k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   147k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   61|   147k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   69|   147k|    }                                                  \
  |  |  |  |   70|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  248|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|      0|    return it.position();
   86|   147k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
  313|   947k|    {
  314|   947k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
  240|   947k|    {
  241|   947k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
  440|   947k|{
  441|   947k|    const auto beg = handler.get_ctx().begin();
  442|   947k|    detail::parse_format_string<false>(format, handler);
  443|   947k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   947k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 882k, False: 65.3k]
  |  |  ------------------
  ------------------
  444|   882k|        return unexpected(handler.error);
  445|   882k|    }
  446|  65.3k|    return ranges_polyfill::pos_distance(beg, handler.get_ctx().begin());
  447|   947k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
  424|  4.28M|    {
  425|  4.28M|        return ctx.get();
  426|  4.28M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_122simple_context_wrapperIwE3getEv:
  244|  4.28M|    {
  245|  4.28M|        return ctx;
  246|  4.28M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
  317|  1.01M|    {
  318|  1.01M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (318:16): [True: 0, False: 1.01M]
  ------------------
  319|      0|            auto it = get_ctx().begin();
  320|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (320:17): [True: 0, False: 0]
  ------------------
  321|      0|                SCN_UNLIKELY_ATTR
  322|      0|                return on_error("Unexpected end of source");
  323|      0|            }
  324|       |
  325|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
  326|      0|                    detail::make_string_view_from_pointers(begin, end));
  327|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (327:17): [True: 0, False: 0]
  ------------------
  328|      0|                return on_error("Invalid encoding in format string");
  329|      0|            }
  330|      0|            else if (is_space) {
  ------------------
  |  Branch (330:22): [True: 0, False: 0]
  ------------------
  331|      0|                get_ctx().advance_to(
  332|      0|                    impl::read_while_classic_space(get_ctx().range()));
  333|      0|                begin = detail::to_address(std::prev(after_space_it));
  334|      0|                continue;
  335|      0|            }
  336|       |
  337|      0|            if (*it != *begin) {
  ------------------
  |  Branch (337:17): [True: 0, False: 0]
  ------------------
  338|      0|                SCN_UNLIKELY_ATTR
  339|      0|                return on_error("Unexpected literal character in source");
  340|      0|            }
  341|      0|            get_ctx().advance_to(ranges::next(it));
  342|      0|        }
  343|  1.01M|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
   91|   947k|{
   92|   947k|    auto arg = ctx.arg(id);
   93|   947k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  153|   947k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 0, False: 947k]
  |  |  ------------------
  ------------------
   94|      0|        handler.on_error("Failed to find argument with ID");
   95|      0|    }
   96|   947k|    return arg;
   97|   947k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
  346|   947k|    {
  347|   947k|        return parse_ctx.next_arg_id();
  348|   947k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
  387|   947k|    {
  388|   947k|        auto arg = get_arg(get_ctx(), arg_id, *this);
  389|   947k|        set_arg_as_visited(arg_id);
  390|       |
  391|   947k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (391:13): [True: 0, False: 947k]
  ------------------
  392|      0|            parse_ctx.advance_to(begin);
  393|      0|            on_visit_scan_arg(
  394|      0|                impl::custom_reader<basic_scan_context<char_type>>{
  395|      0|                    parse_ctx, get_custom_ctx()},
  396|      0|                arg);
  397|      0|            return parse_ctx.begin();
  398|      0|        }
  399|       |
  400|   947k|        auto specs = detail::format_specs{};
  401|   947k|        detail::specs_checker<specs_handler<context_type>> handler{
  402|   947k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
  403|   947k|            arg.type()};
  404|       |
  405|   947k|        begin = detail::parse_format_specs(begin, end, handler);
  406|   947k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (406:13): [True: 0, False: 947k]
  |  Branch (406:29): [True: 196k, False: 751k]
  ------------------
  407|   196k|            SCN_UNLIKELY_ATTR
  408|   196k|            on_error("Missing '}' in format string");
  409|   196k|            return parse_ctx.begin();
  410|   196k|        }
  411|   751k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  153|   751k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 98.0k, False: 653k]
  |  |  ------------------
  ------------------
  412|  98.0k|            return parse_ctx.begin();
  413|  98.0k|        }
  414|   653k|        parse_ctx.advance_to(begin);
  415|       |
  416|   653k|        on_visit_scan_arg(
  417|   653k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
  418|   653k|                                           get_ctx().locale()},
  419|   653k|            arg);
  420|   653k|        return parse_ctx.begin();
  421|   751k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
  111|   947k|    {
  112|   947k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
  358|   653k|    {
  359|   653k|        if (!*this || !arg) {
  ------------------
  |  Branch (359:13): [True: 0, False: 653k]
  |  Branch (359:23): [True: 0, False: 653k]
  ------------------
  360|      0|            SCN_UNLIKELY_ATTR
  361|      0|            return;
  362|      0|        }
  363|       |
  364|   653k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  248|   653k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  365|   653k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  153|   653k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (153:25): [True: 588k, False: 65.3k]
  |  |  ------------------
  ------------------
  366|   588k|            on_error(r.error());
  367|   588k|        }
  368|  65.3k|        else {
  369|  65.3k|            get_ctx().advance_to(*r);
  370|  65.3k|        }
  371|   653k|    }
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   633k|{
  502|   633k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   633k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   633k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  16.3k|{
  502|  16.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  16.3k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|   601k|{
  502|   601k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|   601k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|   601k|}
vscan.cpp:_ZN3scn2v212_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
  501|  49.0k|{
  502|  49.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  248|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  503|  49.0k|}

_ZN3scn4fuzz16make_input_viewsENS_2v24spanIKhEE:
   53|  2.72k|{
   54|  2.72k|    SCN_EXPECT(data.size() <= max_input_bytes);
  ------------------
  |  |  242|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  239|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   55|       |
   56|       |    // narrow
   57|      0|    string_buffer.resize(data.size());
   58|  2.72k|    std::copy(data.begin(), data.end(),
   59|  2.72k|              reinterpret_cast<uint8_t*>(&string_buffer[0]));
   60|  2.72k|    auto sv = std::string_view{string_buffer};
   61|       |
   62|       |    // wide, direct copy
   63|  2.72k|    wstring_buffer_direct.resize(data.size());
   64|  2.72k|    std::copy(data.begin(), data.end(),
   65|  2.72k|              reinterpret_cast<uint8_t*>(&wstring_buffer_direct[0]));
   66|  2.72k|    auto wsv_direct = std::wstring_view{wstring_buffer_direct};
   67|       |
   68|       |    // wide, bitwise reinterpret
   69|  2.72k|    const auto wsv_reinterpret_size =
   70|  2.72k|        data.size() < sizeof(wchar_t) ? 1 : (data.size() / sizeof(wchar_t));
  ------------------
  |  Branch (70:9): [True: 138, False: 2.58k]
  ------------------
   71|  2.72k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   72|  2.72k|    std::memcpy(wstring_buffer_reinterpreted.data(), data.data(), data.size());
   73|  2.72k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   74|       |
   75|       |    // wide, transcode to correct encoding (utf16 or utf32)
   76|  2.72k|    std::wstring_view wsv_transcoded;
   77|  2.72k|    if (!simdutf::validate_utf8(sv.data(), sv.size())) {
  ------------------
  |  Branch (77:9): [True: 594, False: 2.12k]
  ------------------
   78|    594|        wsv_transcoded = {wstring_buffer_direct};
   79|    594|    }
   80|  2.12k|    else {
   81|  2.12k|        if constexpr (sizeof(wchar_t) == 2) {
  ------------------
  |  Branch (81:23): [Folded - Ignored]
  ------------------
   82|      0|            auto size = simdutf::utf16_length_from_utf8(sv.data(), sv.size());
   83|      0|            wstring_buffer_transcoded_wide.resize(size);
   84|      0|            (void)simdutf::convert_valid_utf8_to_utf16(
   85|      0|                sv.data(), sv.size(),
   86|      0|                reinterpret_cast<char16_t*>(
   87|      0|                    wstring_buffer_transcoded_wide.data()));
   88|      0|        }
   89|  2.12k|        else {
   90|  2.12k|            auto size = simdutf::utf32_length_from_utf8(sv.data(), sv.size());
   91|  2.12k|            wstring_buffer_transcoded_wide.resize(size);
   92|  2.12k|            (void)simdutf::convert_valid_utf8_to_utf32(
   93|  2.12k|                sv.data(), sv.size(),
   94|  2.12k|                reinterpret_cast<char32_t*>(
   95|  2.12k|                    wstring_buffer_transcoded_wide.data()));
   96|  2.12k|        }
   97|  2.12k|        wsv_transcoded = {wstring_buffer_transcoded_wide};
   98|  2.12k|    }
   99|       |
  100|  2.72k|    return std::make_tuple(sv, wsv_direct, wsv_reintepreted, wsv_transcoded);
  101|  2.72k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  2.72k|{
  151|  2.72k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  2.72k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  2.72k|    buf.resize(sizeof...(Args));
  154|  2.72k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  2.72k|    return {buf.data(), buf.size()};
  156|  2.72k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  136|  2.72k|{
  137|  2.72k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  2.72k|        return format_string_view_buffer;
  139|  2.72k|    }
  140|  2.72k|    else {
  141|  2.72k|        return wformat_string_view_buffer;
  142|  2.72k|    }
  143|  2.72k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  2.72k|{
  211|  2.72k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  2.72k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  2.72k|                                   format_strings);
  214|  2.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.72k|{
  162|       |    // Regular scan
  163|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 27.2k, False: 2.72k]
  ------------------
  164|  27.2k|        auto it = scn::ranges::begin(source);
  165|   403k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   403k|            auto result = scn::scan<T>(
  167|   403k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   403k|                scn::runtime_format(f));
  169|   403k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 27.2k, False: 376k]
  ------------------
  170|  27.2k|                break;
  171|  27.2k|            }
  172|   376k|            it = result->begin();
  173|   376k|        }
  174|  27.2k|    }
  175|       |
  176|       |    // scan localized
  177|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 27.2k, False: 2.72k]
  ------------------
  178|  27.2k|        auto it = scn::ranges::begin(source);
  179|   403k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   403k|            auto result = scn::scan<T>(
  181|   403k|                global_locale,
  182|   403k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   403k|                scn::runtime_format(f));
  184|   403k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 27.2k, False: 376k]
  ------------------
  185|  27.2k|                break;
  186|  27.2k|            }
  187|   376k|            it = result->begin();
  188|   376k|        }
  189|  27.2k|    }
  190|       |
  191|       |    // scan_value
  192|  2.72k|    {
  193|  2.72k|        auto it = scn::ranges::begin(source);
  194|  89.5k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  89.5k|            auto result = scn::scan_value<T>(
  196|  89.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  89.5k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.72k, False: 86.7k]
  ------------------
  198|  2.72k|                break;
  199|  2.72k|            }
  200|  86.7k|            it = result->begin();
  201|  86.7k|        }
  202|  2.72k|    }
  203|  2.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.72k|{
  162|       |    // Regular scan
  163|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 27.2k, False: 2.72k]
  ------------------
  164|  27.2k|        auto it = scn::ranges::begin(source);
  165|   381k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   381k|            auto result = scn::scan<T>(
  167|   381k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   381k|                scn::runtime_format(f));
  169|   381k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 27.2k, False: 354k]
  ------------------
  170|  27.2k|                break;
  171|  27.2k|            }
  172|   354k|            it = result->begin();
  173|   354k|        }
  174|  27.2k|    }
  175|       |
  176|       |    // scan localized
  177|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 27.2k, False: 2.72k]
  ------------------
  178|  27.2k|        auto it = scn::ranges::begin(source);
  179|   381k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   381k|            auto result = scn::scan<T>(
  181|   381k|                global_locale,
  182|   381k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   381k|                scn::runtime_format(f));
  184|   381k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 27.2k, False: 354k]
  ------------------
  185|  27.2k|                break;
  186|  27.2k|            }
  187|   354k|            it = result->begin();
  188|   354k|        }
  189|  27.2k|    }
  190|       |
  191|       |    // scan_value
  192|  2.72k|    {
  193|  2.72k|        auto it = scn::ranges::begin(source);
  194|  80.7k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  80.7k|            auto result = scn::scan_value<T>(
  196|  80.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  80.7k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.72k, False: 78.0k]
  ------------------
  198|  2.72k|                break;
  199|  2.72k|            }
  200|  78.0k|            it = result->begin();
  201|  78.0k|        }
  202|  2.72k|    }
  203|  2.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.72k|{
  162|       |    // Regular scan
  163|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 27.2k, False: 2.72k]
  ------------------
  164|  27.2k|        auto it = scn::ranges::begin(source);
  165|   601k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   601k|            auto result = scn::scan<T>(
  167|   601k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   601k|                scn::runtime_format(f));
  169|   601k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 27.2k, False: 574k]
  ------------------
  170|  27.2k|                break;
  171|  27.2k|            }
  172|   574k|            it = result->begin();
  173|   574k|        }
  174|  27.2k|    }
  175|       |
  176|       |    // scan localized
  177|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 27.2k, False: 2.72k]
  ------------------
  178|  27.2k|        auto it = scn::ranges::begin(source);
  179|   601k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   601k|            auto result = scn::scan<T>(
  181|   601k|                global_locale,
  182|   601k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   601k|                scn::runtime_format(f));
  184|   601k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 27.2k, False: 574k]
  ------------------
  185|  27.2k|                break;
  186|  27.2k|            }
  187|   574k|            it = result->begin();
  188|   574k|        }
  189|  27.2k|    }
  190|       |
  191|       |    // scan_value
  192|  2.72k|    {
  193|  2.72k|        auto it = scn::ranges::begin(source);
  194|   124k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   124k|            auto result = scn::scan_value<T>(
  196|   124k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   124k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.72k, False: 121k]
  ------------------
  198|  2.72k|                break;
  199|  2.72k|            }
  200|   121k|            it = result->begin();
  201|   121k|        }
  202|  2.72k|    }
  203|  2.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.72k|{
  162|       |    // Regular scan
  163|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 27.2k, False: 2.72k]
  ------------------
  164|  27.2k|        auto it = scn::ranges::begin(source);
  165|   478k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   478k|            auto result = scn::scan<T>(
  167|   478k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   478k|                scn::runtime_format(f));
  169|   478k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 27.2k, False: 451k]
  ------------------
  170|  27.2k|                break;
  171|  27.2k|            }
  172|   451k|            it = result->begin();
  173|   451k|        }
  174|  27.2k|    }
  175|       |
  176|       |    // scan localized
  177|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 27.2k, False: 2.72k]
  ------------------
  178|  27.2k|        auto it = scn::ranges::begin(source);
  179|   478k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   478k|            auto result = scn::scan<T>(
  181|   478k|                global_locale,
  182|   478k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   478k|                scn::runtime_format(f));
  184|   478k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 27.2k, False: 451k]
  ------------------
  185|  27.2k|                break;
  186|  27.2k|            }
  187|   451k|            it = result->begin();
  188|   451k|        }
  189|  27.2k|    }
  190|       |
  191|       |    // scan_value
  192|  2.72k|    {
  193|  2.72k|        auto it = scn::ranges::begin(source);
  194|   100k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   100k|            auto result = scn::scan_value<T>(
  196|   100k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   100k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.72k, False: 97.2k]
  ------------------
  198|  2.72k|                break;
  199|  2.72k|            }
  200|  97.2k|            it = result->begin();
  201|  97.2k|        }
  202|  2.72k|    }
  203|  2.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.72k|{
  162|       |    // Regular scan
  163|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 27.2k, False: 2.72k]
  ------------------
  164|  27.2k|        auto it = scn::ranges::begin(source);
  165|   649k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   649k|            auto result = scn::scan<T>(
  167|   649k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   649k|                scn::runtime_format(f));
  169|   649k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 27.2k, False: 622k]
  ------------------
  170|  27.2k|                break;
  171|  27.2k|            }
  172|   622k|            it = result->begin();
  173|   622k|        }
  174|  27.2k|    }
  175|       |
  176|       |    // scan localized
  177|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 27.2k, False: 2.72k]
  ------------------
  178|  27.2k|        auto it = scn::ranges::begin(source);
  179|   649k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   649k|            auto result = scn::scan<T>(
  181|   649k|                global_locale,
  182|   649k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   649k|                scn::runtime_format(f));
  184|   649k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 27.2k, False: 622k]
  ------------------
  185|  27.2k|                break;
  186|  27.2k|            }
  187|   622k|            it = result->begin();
  188|   622k|        }
  189|  27.2k|    }
  190|       |
  191|       |    // scan_value
  192|  2.72k|    {
  193|  2.72k|        auto it = scn::ranges::begin(source);
  194|   133k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   133k|            auto result = scn::scan_value<T>(
  196|   133k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   133k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.72k, False: 130k]
  ------------------
  198|  2.72k|                break;
  199|  2.72k|            }
  200|   130k|            it = result->begin();
  201|   130k|        }
  202|  2.72k|    }
  203|  2.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  2.72k|{
  162|       |    // Regular scan
  163|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 27.2k, False: 2.72k]
  ------------------
  164|  27.2k|        auto it = scn::ranges::begin(source);
  165|   507k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   507k|            auto result = scn::scan<T>(
  167|   507k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   507k|                scn::runtime_format(f));
  169|   507k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 27.2k, False: 480k]
  ------------------
  170|  27.2k|                break;
  171|  27.2k|            }
  172|   480k|            it = result->begin();
  173|   480k|        }
  174|  27.2k|    }
  175|       |
  176|       |    // scan localized
  177|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 27.2k, False: 2.72k]
  ------------------
  178|  27.2k|        auto it = scn::ranges::begin(source);
  179|   507k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   507k|            auto result = scn::scan<T>(
  181|   507k|                global_locale,
  182|   507k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   507k|                scn::runtime_format(f));
  184|   507k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 27.2k, False: 480k]
  ------------------
  185|  27.2k|                break;
  186|  27.2k|            }
  187|   480k|            it = result->begin();
  188|   480k|        }
  189|  27.2k|    }
  190|       |
  191|       |    // scan_value
  192|  2.72k|    {
  193|  2.72k|        auto it = scn::ranges::begin(source);
  194|   105k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   105k|            auto result = scn::scan_value<T>(
  196|   105k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   105k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.72k, False: 103k]
  ------------------
  198|  2.72k|                break;
  199|  2.72k|            }
  200|   103k|            it = result->begin();
  201|   103k|        }
  202|  2.72k|    }
  203|  2.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcaKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.72k|{
  162|       |    // Regular scan
  163|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 27.2k, False: 2.72k]
  ------------------
  164|  27.2k|        auto it = scn::ranges::begin(source);
  165|  29.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  29.9k|            auto result = scn::scan<T>(
  167|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  29.9k|                scn::runtime_format(f));
  169|  29.9k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 27.2k, False: 2.72k]
  ------------------
  170|  27.2k|                break;
  171|  27.2k|            }
  172|  2.72k|            it = result->begin();
  173|  2.72k|        }
  174|  27.2k|    }
  175|       |
  176|       |    // scan localized
  177|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 27.2k, False: 2.72k]
  ------------------
  178|  27.2k|        auto it = scn::ranges::begin(source);
  179|  29.9k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  29.9k|            auto result = scn::scan<T>(
  181|  29.9k|                global_locale,
  182|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  29.9k|                scn::runtime_format(f));
  184|  29.9k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 27.2k, False: 2.72k]
  ------------------
  185|  27.2k|                break;
  186|  27.2k|            }
  187|  2.72k|            it = result->begin();
  188|  2.72k|        }
  189|  27.2k|    }
  190|       |
  191|       |    // scan_value
  192|  2.72k|    {
  193|  2.72k|        auto it = scn::ranges::begin(source);
  194|  2.72k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.72k|            auto result = scn::scan_value<T>(
  196|  2.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.72k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.72k, False: 0]
  ------------------
  198|  2.72k|                break;
  199|  2.72k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.72k|    }
  203|  2.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIchKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.72k|{
  162|       |    // Regular scan
  163|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 27.2k, False: 2.72k]
  ------------------
  164|  27.2k|        auto it = scn::ranges::begin(source);
  165|  29.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  29.9k|            auto result = scn::scan<T>(
  167|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  29.9k|                scn::runtime_format(f));
  169|  29.9k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 27.2k, False: 2.72k]
  ------------------
  170|  27.2k|                break;
  171|  27.2k|            }
  172|  2.72k|            it = result->begin();
  173|  2.72k|        }
  174|  27.2k|    }
  175|       |
  176|       |    // scan localized
  177|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 27.2k, False: 2.72k]
  ------------------
  178|  27.2k|        auto it = scn::ranges::begin(source);
  179|  29.9k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  29.9k|            auto result = scn::scan<T>(
  181|  29.9k|                global_locale,
  182|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  29.9k|                scn::runtime_format(f));
  184|  29.9k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 27.2k, False: 2.72k]
  ------------------
  185|  27.2k|                break;
  186|  27.2k|            }
  187|  2.72k|            it = result->begin();
  188|  2.72k|        }
  189|  27.2k|    }
  190|       |
  191|       |    // scan_value
  192|  2.72k|    {
  193|  2.72k|        auto it = scn::ranges::begin(source);
  194|  2.72k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.72k|            auto result = scn::scan_value<T>(
  196|  2.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.72k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.72k, False: 0]
  ------------------
  198|  2.72k|                break;
  199|  2.72k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.72k|    }
  203|  2.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIciKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.72k|{
  162|       |    // Regular scan
  163|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 27.2k, False: 2.72k]
  ------------------
  164|  27.2k|        auto it = scn::ranges::begin(source);
  165|  29.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  29.9k|            auto result = scn::scan<T>(
  167|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  29.9k|                scn::runtime_format(f));
  169|  29.9k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 27.2k, False: 2.72k]
  ------------------
  170|  27.2k|                break;
  171|  27.2k|            }
  172|  2.72k|            it = result->begin();
  173|  2.72k|        }
  174|  27.2k|    }
  175|       |
  176|       |    // scan localized
  177|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 27.2k, False: 2.72k]
  ------------------
  178|  27.2k|        auto it = scn::ranges::begin(source);
  179|  29.9k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  29.9k|            auto result = scn::scan<T>(
  181|  29.9k|                global_locale,
  182|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  29.9k|                scn::runtime_format(f));
  184|  29.9k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 27.2k, False: 2.72k]
  ------------------
  185|  27.2k|                break;
  186|  27.2k|            }
  187|  2.72k|            it = result->begin();
  188|  2.72k|        }
  189|  27.2k|    }
  190|       |
  191|       |    // scan_value
  192|  2.72k|    {
  193|  2.72k|        auto it = scn::ranges::begin(source);
  194|  2.72k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.72k|            auto result = scn::scan_value<T>(
  196|  2.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.72k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.72k, False: 0]
  ------------------
  198|  2.72k|                break;
  199|  2.72k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.72k|    }
  203|  2.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcjKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.72k|{
  162|       |    // Regular scan
  163|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 27.2k, False: 2.72k]
  ------------------
  164|  27.2k|        auto it = scn::ranges::begin(source);
  165|  29.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  29.9k|            auto result = scn::scan<T>(
  167|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  29.9k|                scn::runtime_format(f));
  169|  29.9k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 27.2k, False: 2.72k]
  ------------------
  170|  27.2k|                break;
  171|  27.2k|            }
  172|  2.72k|            it = result->begin();
  173|  2.72k|        }
  174|  27.2k|    }
  175|       |
  176|       |    // scan localized
  177|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 27.2k, False: 2.72k]
  ------------------
  178|  27.2k|        auto it = scn::ranges::begin(source);
  179|  29.9k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  29.9k|            auto result = scn::scan<T>(
  181|  29.9k|                global_locale,
  182|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  29.9k|                scn::runtime_format(f));
  184|  29.9k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 27.2k, False: 2.72k]
  ------------------
  185|  27.2k|                break;
  186|  27.2k|            }
  187|  2.72k|            it = result->begin();
  188|  2.72k|        }
  189|  27.2k|    }
  190|       |
  191|       |    // scan_value
  192|  2.72k|    {
  193|  2.72k|        auto it = scn::ranges::begin(source);
  194|  2.72k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.72k|            auto result = scn::scan_value<T>(
  196|  2.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.72k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.72k, False: 0]
  ------------------
  198|  2.72k|                break;
  199|  2.72k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.72k|    }
  203|  2.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcxKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.72k|{
  162|       |    // Regular scan
  163|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 27.2k, False: 2.72k]
  ------------------
  164|  27.2k|        auto it = scn::ranges::begin(source);
  165|  29.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  29.9k|            auto result = scn::scan<T>(
  167|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  29.9k|                scn::runtime_format(f));
  169|  29.9k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 27.2k, False: 2.72k]
  ------------------
  170|  27.2k|                break;
  171|  27.2k|            }
  172|  2.72k|            it = result->begin();
  173|  2.72k|        }
  174|  27.2k|    }
  175|       |
  176|       |    // scan localized
  177|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 27.2k, False: 2.72k]
  ------------------
  178|  27.2k|        auto it = scn::ranges::begin(source);
  179|  29.9k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  29.9k|            auto result = scn::scan<T>(
  181|  29.9k|                global_locale,
  182|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  29.9k|                scn::runtime_format(f));
  184|  29.9k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 27.2k, False: 2.72k]
  ------------------
  185|  27.2k|                break;
  186|  27.2k|            }
  187|  2.72k|            it = result->begin();
  188|  2.72k|        }
  189|  27.2k|    }
  190|       |
  191|       |    // scan_value
  192|  2.72k|    {
  193|  2.72k|        auto it = scn::ranges::begin(source);
  194|  2.72k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.72k|            auto result = scn::scan_value<T>(
  196|  2.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.72k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.72k, False: 0]
  ------------------
  198|  2.72k|                break;
  199|  2.72k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.72k|    }
  203|  2.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcyKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  2.72k|{
  162|       |    // Regular scan
  163|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 27.2k, False: 2.72k]
  ------------------
  164|  27.2k|        auto it = scn::ranges::begin(source);
  165|  29.9k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  29.9k|            auto result = scn::scan<T>(
  167|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  29.9k|                scn::runtime_format(f));
  169|  29.9k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 27.2k, False: 2.72k]
  ------------------
  170|  27.2k|                break;
  171|  27.2k|            }
  172|  2.72k|            it = result->begin();
  173|  2.72k|        }
  174|  27.2k|    }
  175|       |
  176|       |    // scan localized
  177|  27.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 27.2k, False: 2.72k]
  ------------------
  178|  27.2k|        auto it = scn::ranges::begin(source);
  179|  29.9k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  29.9k|            auto result = scn::scan<T>(
  181|  29.9k|                global_locale,
  182|  29.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  29.9k|                scn::runtime_format(f));
  184|  29.9k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 27.2k, False: 2.72k]
  ------------------
  185|  27.2k|                break;
  186|  27.2k|            }
  187|  2.72k|            it = result->begin();
  188|  2.72k|        }
  189|  27.2k|    }
  190|       |
  191|       |    // scan_value
  192|  2.72k|    {
  193|  2.72k|        auto it = scn::ranges::begin(source);
  194|  2.72k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  2.72k|            auto result = scn::scan_value<T>(
  196|  2.72k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  2.72k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 2.72k, False: 0]
  ------------------
  198|  2.72k|                break;
  199|  2.72k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  2.72k|    }
  203|  2.72k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
  119|  2.72k|{
  120|  2.72k|    using char_type = ranges::range_value_t<Source>;
  121|  2.72k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  2.72k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  2.72k|              std::back_inserter(deque));
  124|  2.72k|    return deque;
  125|  2.72k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
  108|  2.72k|{
  109|  2.72k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  2.72k|        return noncontiguous_buffer;
  111|  2.72k|    }
  112|  2.72k|    else {
  113|  2.72k|        return wnoncontiguous_buffer;
  114|  2.72k|    }
  115|  2.72k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_S3_S3_S3_S3_EEENS_2v24spanIKNSt3__117basic_string_viewIT_NS6_11char_traitsIS8_EEEEEEDpT0_:
  150|  2.72k|{
  151|  2.72k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  152|  2.72k|    auto& buf = get_format_string_view_buffer<CharT>();
  153|  2.72k|    buf.resize(sizeof...(Args));
  154|  2.72k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  155|  2.72k|    return {buf.data(), buf.size()};
  156|  2.72k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  136|  2.72k|{
  137|  2.72k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (137:19): [Folded - Ignored]
  ------------------
  138|  2.72k|        return format_string_view_buffer;
  139|  2.72k|    }
  140|  2.72k|    else {
  141|  2.72k|        return wformat_string_view_buffer;
  142|  2.72k|    }
  143|  2.72k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_NS_2v24spanIKNS3_IT_NS4_ISA_EEEEEE:
  210|  8.16k|{
  211|  8.16k|    do_basic_run_for_source<CharT>(data, format_strings);
  212|  8.16k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  213|  8.16k|                                   format_strings);
  214|  8.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  8.16k|{
  162|       |    // Regular scan
  163|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 81.6k, False: 8.16k]
  ------------------
  164|  81.6k|        auto it = scn::ranges::begin(source);
  165|   420k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   420k|            auto result = scn::scan<T>(
  167|   420k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   420k|                scn::runtime_format(f));
  169|   420k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 81.6k, False: 338k]
  ------------------
  170|  81.6k|                break;
  171|  81.6k|            }
  172|   338k|            it = result->begin();
  173|   338k|        }
  174|  81.6k|    }
  175|       |
  176|       |    // scan localized
  177|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 81.6k, False: 8.16k]
  ------------------
  178|  81.6k|        auto it = scn::ranges::begin(source);
  179|   420k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   420k|            auto result = scn::scan<T>(
  181|   420k|                global_locale,
  182|   420k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   420k|                scn::runtime_format(f));
  184|   420k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 81.6k, False: 338k]
  ------------------
  185|  81.6k|                break;
  186|  81.6k|            }
  187|   338k|            it = result->begin();
  188|   338k|        }
  189|  81.6k|    }
  190|       |
  191|       |    // scan_value
  192|  8.16k|    {
  193|  8.16k|        auto it = scn::ranges::begin(source);
  194|  86.6k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  86.6k|            auto result = scn::scan_value<T>(
  196|  86.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  86.6k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 8.16k, False: 78.4k]
  ------------------
  198|  8.16k|                break;
  199|  8.16k|            }
  200|  78.4k|            it = result->begin();
  201|  78.4k|        }
  202|  8.16k|    }
  203|  8.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  8.16k|{
  162|       |    // Regular scan
  163|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 81.6k, False: 8.16k]
  ------------------
  164|  81.6k|        auto it = scn::ranges::begin(source);
  165|   400k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   400k|            auto result = scn::scan<T>(
  167|   400k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   400k|                scn::runtime_format(f));
  169|   400k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 81.6k, False: 318k]
  ------------------
  170|  81.6k|                break;
  171|  81.6k|            }
  172|   318k|            it = result->begin();
  173|   318k|        }
  174|  81.6k|    }
  175|       |
  176|       |    // scan localized
  177|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 81.6k, False: 8.16k]
  ------------------
  178|  81.6k|        auto it = scn::ranges::begin(source);
  179|   400k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   400k|            auto result = scn::scan<T>(
  181|   400k|                global_locale,
  182|   400k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   400k|                scn::runtime_format(f));
  184|   400k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 81.6k, False: 318k]
  ------------------
  185|  81.6k|                break;
  186|  81.6k|            }
  187|   318k|            it = result->begin();
  188|   318k|        }
  189|  81.6k|    }
  190|       |
  191|       |    // scan_value
  192|  8.16k|    {
  193|  8.16k|        auto it = scn::ranges::begin(source);
  194|  78.1k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  78.1k|            auto result = scn::scan_value<T>(
  196|  78.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  78.1k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 8.16k, False: 69.9k]
  ------------------
  198|  8.16k|                break;
  199|  8.16k|            }
  200|  69.9k|            it = result->begin();
  201|  69.9k|        }
  202|  8.16k|    }
  203|  8.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  8.16k|{
  162|       |    // Regular scan
  163|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 81.6k, False: 8.16k]
  ------------------
  164|  81.6k|        auto it = scn::ranges::begin(source);
  165|   594k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   594k|            auto result = scn::scan<T>(
  167|   594k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   594k|                scn::runtime_format(f));
  169|   594k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 81.6k, False: 512k]
  ------------------
  170|  81.6k|                break;
  171|  81.6k|            }
  172|   512k|            it = result->begin();
  173|   512k|        }
  174|  81.6k|    }
  175|       |
  176|       |    // scan localized
  177|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 81.6k, False: 8.16k]
  ------------------
  178|  81.6k|        auto it = scn::ranges::begin(source);
  179|   594k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   594k|            auto result = scn::scan<T>(
  181|   594k|                global_locale,
  182|   594k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   594k|                scn::runtime_format(f));
  184|   594k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 81.6k, False: 512k]
  ------------------
  185|  81.6k|                break;
  186|  81.6k|            }
  187|   512k|            it = result->begin();
  188|   512k|        }
  189|  81.6k|    }
  190|       |
  191|       |    // scan_value
  192|  8.16k|    {
  193|  8.16k|        auto it = scn::ranges::begin(source);
  194|   116k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   116k|            auto result = scn::scan_value<T>(
  196|   116k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   116k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 8.16k, False: 108k]
  ------------------
  198|  8.16k|                break;
  199|  8.16k|            }
  200|   108k|            it = result->begin();
  201|   108k|        }
  202|  8.16k|    }
  203|  8.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  8.16k|{
  162|       |    // Regular scan
  163|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 81.6k, False: 8.16k]
  ------------------
  164|  81.6k|        auto it = scn::ranges::begin(source);
  165|   486k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   486k|            auto result = scn::scan<T>(
  167|   486k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   486k|                scn::runtime_format(f));
  169|   486k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 81.6k, False: 404k]
  ------------------
  170|  81.6k|                break;
  171|  81.6k|            }
  172|   404k|            it = result->begin();
  173|   404k|        }
  174|  81.6k|    }
  175|       |
  176|       |    // scan localized
  177|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 81.6k, False: 8.16k]
  ------------------
  178|  81.6k|        auto it = scn::ranges::begin(source);
  179|   486k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   486k|            auto result = scn::scan<T>(
  181|   486k|                global_locale,
  182|   486k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   486k|                scn::runtime_format(f));
  184|   486k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 81.6k, False: 404k]
  ------------------
  185|  81.6k|                break;
  186|  81.6k|            }
  187|   404k|            it = result->begin();
  188|   404k|        }
  189|  81.6k|    }
  190|       |
  191|       |    // scan_value
  192|  8.16k|    {
  193|  8.16k|        auto it = scn::ranges::begin(source);
  194|  95.2k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  95.2k|            auto result = scn::scan_value<T>(
  196|  95.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  95.2k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 8.16k, False: 87.0k]
  ------------------
  198|  8.16k|                break;
  199|  8.16k|            }
  200|  87.0k|            it = result->begin();
  201|  87.0k|        }
  202|  8.16k|    }
  203|  8.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  8.16k|{
  162|       |    // Regular scan
  163|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 81.6k, False: 8.16k]
  ------------------
  164|  81.6k|        auto it = scn::ranges::begin(source);
  165|   633k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   633k|            auto result = scn::scan<T>(
  167|   633k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   633k|                scn::runtime_format(f));
  169|   633k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 81.6k, False: 551k]
  ------------------
  170|  81.6k|                break;
  171|  81.6k|            }
  172|   551k|            it = result->begin();
  173|   551k|        }
  174|  81.6k|    }
  175|       |
  176|       |    // scan localized
  177|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 81.6k, False: 8.16k]
  ------------------
  178|  81.6k|        auto it = scn::ranges::begin(source);
  179|   633k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   633k|            auto result = scn::scan<T>(
  181|   633k|                global_locale,
  182|   633k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   633k|                scn::runtime_format(f));
  184|   633k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 81.6k, False: 551k]
  ------------------
  185|  81.6k|                break;
  186|  81.6k|            }
  187|   551k|            it = result->begin();
  188|   551k|        }
  189|  81.6k|    }
  190|       |
  191|       |    // scan_value
  192|  8.16k|    {
  193|  8.16k|        auto it = scn::ranges::begin(source);
  194|   124k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|   124k|            auto result = scn::scan_value<T>(
  196|   124k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|   124k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 8.16k, False: 116k]
  ------------------
  198|  8.16k|                break;
  199|  8.16k|            }
  200|   116k|            it = result->begin();
  201|   116k|        }
  202|  8.16k|    }
  203|  8.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
  161|  8.16k|{
  162|       |    // Regular scan
  163|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 81.6k, False: 8.16k]
  ------------------
  164|  81.6k|        auto it = scn::ranges::begin(source);
  165|   510k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|   510k|            auto result = scn::scan<T>(
  167|   510k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|   510k|                scn::runtime_format(f));
  169|   510k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 81.6k, False: 428k]
  ------------------
  170|  81.6k|                break;
  171|  81.6k|            }
  172|   428k|            it = result->begin();
  173|   428k|        }
  174|  81.6k|    }
  175|       |
  176|       |    // scan localized
  177|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 81.6k, False: 8.16k]
  ------------------
  178|  81.6k|        auto it = scn::ranges::begin(source);
  179|   510k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|   510k|            auto result = scn::scan<T>(
  181|   510k|                global_locale,
  182|   510k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|   510k|                scn::runtime_format(f));
  184|   510k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 81.6k, False: 428k]
  ------------------
  185|  81.6k|                break;
  186|  81.6k|            }
  187|   428k|            it = result->begin();
  188|   428k|        }
  189|  81.6k|    }
  190|       |
  191|       |    // scan_value
  192|  8.16k|    {
  193|  8.16k|        auto it = scn::ranges::begin(source);
  194|  99.9k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  99.9k|            auto result = scn::scan_value<T>(
  196|  99.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  99.9k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 8.16k, False: 91.8k]
  ------------------
  198|  8.16k|                break;
  199|  8.16k|            }
  200|  91.8k|            it = result->begin();
  201|  91.8k|        }
  202|  8.16k|    }
  203|  8.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwaKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  8.16k|{
  162|       |    // Regular scan
  163|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 81.6k, False: 8.16k]
  ------------------
  164|  81.6k|        auto it = scn::ranges::begin(source);
  165|  81.6k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  81.6k|            auto result = scn::scan<T>(
  167|  81.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  81.6k|                scn::runtime_format(f));
  169|  81.6k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 81.6k, False: 1]
  ------------------
  170|  81.6k|                break;
  171|  81.6k|            }
  172|      1|            it = result->begin();
  173|      1|        }
  174|  81.6k|    }
  175|       |
  176|       |    // scan localized
  177|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 81.6k, False: 8.16k]
  ------------------
  178|  81.6k|        auto it = scn::ranges::begin(source);
  179|  81.6k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  81.6k|            auto result = scn::scan<T>(
  181|  81.6k|                global_locale,
  182|  81.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  81.6k|                scn::runtime_format(f));
  184|  81.6k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 81.6k, False: 1]
  ------------------
  185|  81.6k|                break;
  186|  81.6k|            }
  187|      1|            it = result->begin();
  188|      1|        }
  189|  81.6k|    }
  190|       |
  191|       |    // scan_value
  192|  8.16k|    {
  193|  8.16k|        auto it = scn::ranges::begin(source);
  194|  8.16k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  8.16k|            auto result = scn::scan_value<T>(
  196|  8.16k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  8.16k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 8.16k, False: 0]
  ------------------
  198|  8.16k|                break;
  199|  8.16k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  8.16k|    }
  203|  8.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwhKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  8.16k|{
  162|       |    // Regular scan
  163|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 81.6k, False: 8.16k]
  ------------------
  164|  81.6k|        auto it = scn::ranges::begin(source);
  165|  81.6k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  81.6k|            auto result = scn::scan<T>(
  167|  81.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  81.6k|                scn::runtime_format(f));
  169|  81.6k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 81.6k, False: 2]
  ------------------
  170|  81.6k|                break;
  171|  81.6k|            }
  172|      2|            it = result->begin();
  173|      2|        }
  174|  81.6k|    }
  175|       |
  176|       |    // scan localized
  177|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 81.6k, False: 8.16k]
  ------------------
  178|  81.6k|        auto it = scn::ranges::begin(source);
  179|  81.6k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  81.6k|            auto result = scn::scan<T>(
  181|  81.6k|                global_locale,
  182|  81.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  81.6k|                scn::runtime_format(f));
  184|  81.6k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 81.6k, False: 2]
  ------------------
  185|  81.6k|                break;
  186|  81.6k|            }
  187|      2|            it = result->begin();
  188|      2|        }
  189|  81.6k|    }
  190|       |
  191|       |    // scan_value
  192|  8.16k|    {
  193|  8.16k|        auto it = scn::ranges::begin(source);
  194|  8.16k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  8.16k|            auto result = scn::scan_value<T>(
  196|  8.16k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  8.16k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 8.16k, False: 0]
  ------------------
  198|  8.16k|                break;
  199|  8.16k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  8.16k|    }
  203|  8.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwiKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  8.16k|{
  162|       |    // Regular scan
  163|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 81.6k, False: 8.16k]
  ------------------
  164|  81.6k|        auto it = scn::ranges::begin(source);
  165|  89.8k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  89.8k|            auto result = scn::scan<T>(
  167|  89.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  89.8k|                scn::runtime_format(f));
  169|  89.8k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 81.6k, False: 8.16k]
  ------------------
  170|  81.6k|                break;
  171|  81.6k|            }
  172|  8.16k|            it = result->begin();
  173|  8.16k|        }
  174|  81.6k|    }
  175|       |
  176|       |    // scan localized
  177|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 81.6k, False: 8.16k]
  ------------------
  178|  81.6k|        auto it = scn::ranges::begin(source);
  179|  89.8k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  89.8k|            auto result = scn::scan<T>(
  181|  89.8k|                global_locale,
  182|  89.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  89.8k|                scn::runtime_format(f));
  184|  89.8k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 81.6k, False: 8.16k]
  ------------------
  185|  81.6k|                break;
  186|  81.6k|            }
  187|  8.16k|            it = result->begin();
  188|  8.16k|        }
  189|  81.6k|    }
  190|       |
  191|       |    // scan_value
  192|  8.16k|    {
  193|  8.16k|        auto it = scn::ranges::begin(source);
  194|  8.16k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  8.16k|            auto result = scn::scan_value<T>(
  196|  8.16k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  8.16k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 8.16k, False: 0]
  ------------------
  198|  8.16k|                break;
  199|  8.16k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  8.16k|    }
  203|  8.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwjKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  8.16k|{
  162|       |    // Regular scan
  163|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 81.6k, False: 8.16k]
  ------------------
  164|  81.6k|        auto it = scn::ranges::begin(source);
  165|  89.8k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  89.8k|            auto result = scn::scan<T>(
  167|  89.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  89.8k|                scn::runtime_format(f));
  169|  89.8k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 81.6k, False: 8.16k]
  ------------------
  170|  81.6k|                break;
  171|  81.6k|            }
  172|  8.16k|            it = result->begin();
  173|  8.16k|        }
  174|  81.6k|    }
  175|       |
  176|       |    // scan localized
  177|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 81.6k, False: 8.16k]
  ------------------
  178|  81.6k|        auto it = scn::ranges::begin(source);
  179|  89.8k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  89.8k|            auto result = scn::scan<T>(
  181|  89.8k|                global_locale,
  182|  89.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  89.8k|                scn::runtime_format(f));
  184|  89.8k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 81.6k, False: 8.16k]
  ------------------
  185|  81.6k|                break;
  186|  81.6k|            }
  187|  8.16k|            it = result->begin();
  188|  8.16k|        }
  189|  81.6k|    }
  190|       |
  191|       |    // scan_value
  192|  8.16k|    {
  193|  8.16k|        auto it = scn::ranges::begin(source);
  194|  8.16k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  8.16k|            auto result = scn::scan_value<T>(
  196|  8.16k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  8.16k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 8.16k, False: 0]
  ------------------
  198|  8.16k|                break;
  199|  8.16k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  8.16k|    }
  203|  8.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwxKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  8.16k|{
  162|       |    // Regular scan
  163|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 81.6k, False: 8.16k]
  ------------------
  164|  81.6k|        auto it = scn::ranges::begin(source);
  165|  89.8k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  89.8k|            auto result = scn::scan<T>(
  167|  89.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  89.8k|                scn::runtime_format(f));
  169|  89.8k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 81.6k, False: 8.16k]
  ------------------
  170|  81.6k|                break;
  171|  81.6k|            }
  172|  8.16k|            it = result->begin();
  173|  8.16k|        }
  174|  81.6k|    }
  175|       |
  176|       |    // scan localized
  177|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 81.6k, False: 8.16k]
  ------------------
  178|  81.6k|        auto it = scn::ranges::begin(source);
  179|  89.8k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  89.8k|            auto result = scn::scan<T>(
  181|  89.8k|                global_locale,
  182|  89.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  89.8k|                scn::runtime_format(f));
  184|  89.8k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 81.6k, False: 8.16k]
  ------------------
  185|  81.6k|                break;
  186|  81.6k|            }
  187|  8.16k|            it = result->begin();
  188|  8.16k|        }
  189|  81.6k|    }
  190|       |
  191|       |    // scan_value
  192|  8.16k|    {
  193|  8.16k|        auto it = scn::ranges::begin(source);
  194|  8.16k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  8.16k|            auto result = scn::scan_value<T>(
  196|  8.16k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  8.16k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 8.16k, False: 0]
  ------------------
  198|  8.16k|                break;
  199|  8.16k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  8.16k|    }
  203|  8.16k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwyKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
  161|  8.16k|{
  162|       |    // Regular scan
  163|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (163:24): [True: 81.6k, False: 8.16k]
  ------------------
  164|  81.6k|        auto it = scn::ranges::begin(source);
  165|  89.8k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  89.8k|            auto result = scn::scan<T>(
  167|  89.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  168|  89.8k|                scn::runtime_format(f));
  169|  89.8k|            if (!result) {
  ------------------
  |  Branch (169:17): [True: 81.6k, False: 8.16k]
  ------------------
  170|  81.6k|                break;
  171|  81.6k|            }
  172|  8.16k|            it = result->begin();
  173|  8.16k|        }
  174|  81.6k|    }
  175|       |
  176|       |    // scan localized
  177|  81.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (177:24): [True: 81.6k, False: 8.16k]
  ------------------
  178|  81.6k|        auto it = scn::ranges::begin(source);
  179|  89.8k|        while (true) {
  ------------------
  |  Branch (179:16): [Folded - Ignored]
  ------------------
  180|  89.8k|            auto result = scn::scan<T>(
  181|  89.8k|                global_locale,
  182|  89.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  183|  89.8k|                scn::runtime_format(f));
  184|  89.8k|            if (!result) {
  ------------------
  |  Branch (184:17): [True: 81.6k, False: 8.16k]
  ------------------
  185|  81.6k|                break;
  186|  81.6k|            }
  187|  8.16k|            it = result->begin();
  188|  8.16k|        }
  189|  81.6k|    }
  190|       |
  191|       |    // scan_value
  192|  8.16k|    {
  193|  8.16k|        auto it = scn::ranges::begin(source);
  194|  8.16k|        while (true) {
  ------------------
  |  Branch (194:16): [Folded - Ignored]
  ------------------
  195|  8.16k|            auto result = scn::scan_value<T>(
  196|  8.16k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  197|  8.16k|            if (!result) {
  ------------------
  |  Branch (197:17): [True: 8.16k, False: 0]
  ------------------
  198|  8.16k|                break;
  199|  8.16k|            }
  200|      0|            it = result->begin();
  201|      0|        }
  202|  8.16k|    }
  203|  8.16k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
  119|  8.16k|{
  120|  8.16k|    using char_type = ranges::range_value_t<Source>;
  121|  8.16k|    auto& deque = get_noncontiguous_buffer<char_type>();
  122|  8.16k|    std::copy(ranges::begin(source), ranges::end(source),
  123|  8.16k|              std::back_inserter(deque));
  124|  8.16k|    return deque;
  125|  8.16k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
  108|  8.16k|{
  109|  8.16k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (109:19): [Folded - Ignored]
  ------------------
  110|  8.16k|        return noncontiguous_buffer;
  111|  8.16k|    }
  112|  8.16k|    else {
  113|  8.16k|        return wnoncontiguous_buffer;
  114|  8.16k|    }
  115|  8.16k|}

LLVMFuzzerTestOneInput:
   59|  2.72k|{
   60|  2.72k|    scn::fuzz::run({data, size});
   61|  2.72k|    return 0;
   62|  2.72k|}
int_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runENS_2v24spanIKhEE:
   35|  2.72k|{
   36|  2.72k|    if (data.size() > max_input_bytes || data.size() == 0) {
  ------------------
  |  Branch (36:9): [True: 0, False: 2.72k]
  |  Branch (36:42): [True: 0, False: 2.72k]
  ------------------
   37|      0|        return;
   38|      0|    }
   39|       |
   40|  2.72k|    auto [sv, wsv_direct, wsv_reinterpret, wsv_transcode] =
   41|  2.72k|        make_input_views(data);
   42|       |
   43|  2.72k|    auto f =
   44|  2.72k|        get_format_strings<char>("{}", "{:i}", "{:d}", "{:L}", "{:x}", "{:b}",
   45|  2.72k|                                 "{:o}", "{:B36}", "{:'}", "{:'L}");
   46|  2.72k|    do_basic_run(sv, f);
   47|       |
   48|  2.72k|    auto wf = get_format_strings<wchar_t>(L"{}", L"{:i}", L"{:d}", L"{:L}",
   49|  2.72k|                                          L"{:x}", L"{:b}", L"{:o}", L"{:B36}",
   50|  2.72k|                                          L"{:'}", L"{:'L}");
   51|  2.72k|    do_basic_run(wsv_direct, wf);
   52|  2.72k|    do_basic_run(wsv_reinterpret, wf);
   53|  2.72k|    do_basic_run(wsv_transcode, wf);
   54|  2.72k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  2.72k|{
   25|  2.72k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.72k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.72k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.72k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.72k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.72k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.72k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  2.72k|{
   25|  2.72k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  2.72k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  2.72k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  2.72k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  2.72k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  2.72k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  2.72k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_NS_2v24spanIKNS3_IT_NS4_ISB_EEEEEE:
   24|  8.16k|{
   25|  8.16k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  8.16k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  8.16k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  8.16k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  8.16k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  8.16k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  8.16k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_NS_2v24spanIKNS2_17basic_string_viewIT_NS2_11char_traitsISD_EEEEEE:
   24|  8.16k|{
   25|  8.16k|    do_basic_run_for_type<CharT, signed char>(source, format_strings);
   26|  8.16k|    do_basic_run_for_type<CharT, unsigned char>(source, format_strings);
   27|  8.16k|    do_basic_run_for_type<CharT, int>(source, format_strings);
   28|  8.16k|    do_basic_run_for_type<CharT, unsigned>(source, format_strings);
   29|  8.16k|    do_basic_run_for_type<CharT, long long>(source, format_strings);
   30|  8.16k|    do_basic_run_for_type<CharT, unsigned long long>(source, format_strings);
   31|  8.16k|}

